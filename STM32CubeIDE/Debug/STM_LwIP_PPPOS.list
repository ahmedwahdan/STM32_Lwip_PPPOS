
STM_LwIP_PPPOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024b34  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f04  08024d04  08024d04  00034d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028c08  08028c08  000400a8  2**0
                  CONTENTS
  4 .ARM          00000008  08028c08  08028c08  00038c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028c10  08028c10  000400a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028c10  08028c10  00038c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028c14  08028c14  00038c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08028c18  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011794  200000a8  08028cc0  000400a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001183c  08028cc0  0004183c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000400a8  2**0
                  CONTENTS, READONLY
 12 .debug_line   0005341e  00000000  00000000  000400d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0006d0d1  00000000  00000000  000934f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000c9d3  00000000  00000000  001005c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00004240  00000000  00000000  0010cfa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00142b97  00000000  00000000  001111e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00003ea8  00000000  00000000  00253d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00047656  00000000  00000000  00257c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0029f276  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00011b50  00000000  00000000  0029f2f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000004e  00000000  00000000  002b0e44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08024cec 	.word	0x08024cec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ac 	.word	0x200000ac
 800020c:	08024cec 	.word	0x08024cec

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005c6:	e003      	b.n	80005d0 <LoopCopyDataInit>

080005c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005ce:	3104      	adds	r1, #4

080005d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005d0:	480b      	ldr	r0, [pc, #44]	; (8000600 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005d8:	d3f6      	bcc.n	80005c8 <CopyDataInit>
  ldr  r2, =_sbss
 80005da:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005dc:	e002      	b.n	80005e4 <LoopFillZerobss>

080005de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005e0:	f842 3b04 	str.w	r3, [r2], #4

080005e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005e8:	d3f9      	bcc.n	80005de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005ea:	f003 fc6d 	bl	8003ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ee:	f023 fbfd 	bl	8023dec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005f2:	f000 fcf7 	bl	8000fe4 <main>
  bx  lr    
 80005f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005f8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80005fc:	08028c18 	.word	0x08028c18
  ldr  r0, =_sdata
 8000600:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000604:	200000a8 	.word	0x200000a8
  ldr  r2, =_sbss
 8000608:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 800060c:	2001183c 	.word	0x2001183c

08000610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC_IRQHandler>
	...

08000614 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800061e:	f000 f87b 	bl	8000718 <BSP_SD_IsDetected>
 8000622:	4603      	mov	r3, r0
 8000624:	2b01      	cmp	r3, #1
 8000626:	d001      	beq.n	800062c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8000628:	2302      	movs	r3, #2
 800062a:	e012      	b.n	8000652 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800062c:	480b      	ldr	r0, [pc, #44]	; (800065c <BSP_SD_Init+0x48>)
 800062e:	f009 ffab 	bl	800a588 <HAL_SD_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d109      	bne.n	8000650 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800063c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000640:	4806      	ldr	r0, [pc, #24]	; (800065c <BSP_SD_Init+0x48>)
 8000642:	f00a fbed 	bl	800ae20 <HAL_SD_ConfigWideBusOperation>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800064c:	2301      	movs	r3, #1
 800064e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8000650:	79fb      	ldrb	r3, [r7, #7]
}
 8000652:	4618      	mov	r0, r3
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	2000d2ac 	.word	0x2000d2ac

08000660 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800066c:	2300      	movs	r3, #0
 800066e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	68ba      	ldr	r2, [r7, #8]
 8000674:	68f9      	ldr	r1, [r7, #12]
 8000676:	4806      	ldr	r0, [pc, #24]	; (8000690 <BSP_SD_ReadBlocks_DMA+0x30>)
 8000678:	f00a f81e 	bl	800a6b8 <HAL_SD_ReadBlocks_DMA>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8000682:	2301      	movs	r3, #1
 8000684:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8000686:	7dfb      	ldrb	r3, [r7, #23]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3718      	adds	r7, #24
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	2000d2ac 	.word	0x2000d2ac

08000694 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80006a0:	2300      	movs	r3, #0
 80006a2:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	68ba      	ldr	r2, [r7, #8]
 80006a8:	68f9      	ldr	r1, [r7, #12]
 80006aa:	4806      	ldr	r0, [pc, #24]	; (80006c4 <BSP_SD_WriteBlocks_DMA+0x30>)
 80006ac:	f00a f8f0 	bl	800a890 <HAL_SD_WriteBlocks_DMA>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 80006ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	2000d2ac 	.word	0x2000d2ac

080006c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80006cc:	4805      	ldr	r0, [pc, #20]	; (80006e4 <BSP_SD_GetCardState+0x1c>)
 80006ce:	f00a fc23 	bl	800af18 <HAL_SD_GetCardState>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b04      	cmp	r3, #4
 80006d6:	bf14      	ite	ne
 80006d8:	2301      	movne	r3, #1
 80006da:	2300      	moveq	r3, #0
 80006dc:	b2db      	uxtb	r3, r3
}
 80006de:	4618      	mov	r0, r3
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000d2ac 	.word	0x2000d2ac

080006e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80006f0:	6879      	ldr	r1, [r7, #4]
 80006f2:	4803      	ldr	r0, [pc, #12]	; (8000700 <BSP_SD_GetCardInfo+0x18>)
 80006f4:	f00a fb68 	bl	800adc8 <HAL_SD_GetCardInfo>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	2000d2ac 	.word	0x2000d2ac

08000704 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800070c:	f002 f82e 	bl	800276c <BSP_SD_ReadCpltCallback>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800071e:	2301      	movs	r3, #1
 8000720:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8000722:	f000 fb57 	bl	8000dd4 <BSP_PlatformIsDetected>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d101      	bne.n	8000730 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800072c:	2300      	movs	r3, #0
 800072e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	b2db      	uxtb	r3, r3
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08e      	sub	sp, #56	; 0x38
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a44      	ldr	r2, [pc, #272]	; (800086c <HAL_ETH_MspInit+0x130>)
 800075a:	4293      	cmp	r3, r2
 800075c:	f040 8081 	bne.w	8000862 <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000760:	4b43      	ldr	r3, [pc, #268]	; (8000870 <HAL_ETH_MspInit+0x134>)
 8000762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000764:	4a42      	ldr	r2, [pc, #264]	; (8000870 <HAL_ETH_MspInit+0x134>)
 8000766:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800076a:	6313      	str	r3, [r2, #48]	; 0x30
 800076c:	4b40      	ldr	r3, [pc, #256]	; (8000870 <HAL_ETH_MspInit+0x134>)
 800076e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000774:	623b      	str	r3, [r7, #32]
 8000776:	6a3b      	ldr	r3, [r7, #32]
 8000778:	4b3d      	ldr	r3, [pc, #244]	; (8000870 <HAL_ETH_MspInit+0x134>)
 800077a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077c:	4a3c      	ldr	r2, [pc, #240]	; (8000870 <HAL_ETH_MspInit+0x134>)
 800077e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000782:	6313      	str	r3, [r2, #48]	; 0x30
 8000784:	4b3a      	ldr	r3, [pc, #232]	; (8000870 <HAL_ETH_MspInit+0x134>)
 8000786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000788:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800078c:	61fb      	str	r3, [r7, #28]
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	4b37      	ldr	r3, [pc, #220]	; (8000870 <HAL_ETH_MspInit+0x134>)
 8000792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000794:	4a36      	ldr	r2, [pc, #216]	; (8000870 <HAL_ETH_MspInit+0x134>)
 8000796:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800079a:	6313      	str	r3, [r2, #48]	; 0x30
 800079c:	4b34      	ldr	r3, [pc, #208]	; (8000870 <HAL_ETH_MspInit+0x134>)
 800079e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80007a4:	61bb      	str	r3, [r7, #24]
 80007a6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007a8:	4b31      	ldr	r3, [pc, #196]	; (8000870 <HAL_ETH_MspInit+0x134>)
 80007aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ac:	4a30      	ldr	r2, [pc, #192]	; (8000870 <HAL_ETH_MspInit+0x134>)
 80007ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b2:	6313      	str	r3, [r2, #48]	; 0x30
 80007b4:	4b2e      	ldr	r3, [pc, #184]	; (8000870 <HAL_ETH_MspInit+0x134>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c0:	4b2b      	ldr	r3, [pc, #172]	; (8000870 <HAL_ETH_MspInit+0x134>)
 80007c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c4:	4a2a      	ldr	r2, [pc, #168]	; (8000870 <HAL_ETH_MspInit+0x134>)
 80007c6:	f043 0304 	orr.w	r3, r3, #4
 80007ca:	6313      	str	r3, [r2, #48]	; 0x30
 80007cc:	4b28      	ldr	r3, [pc, #160]	; (8000870 <HAL_ETH_MspInit+0x134>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d0:	f003 0304 	and.w	r3, r3, #4
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d8:	4b25      	ldr	r3, [pc, #148]	; (8000870 <HAL_ETH_MspInit+0x134>)
 80007da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007dc:	4a24      	ldr	r2, [pc, #144]	; (8000870 <HAL_ETH_MspInit+0x134>)
 80007de:	f043 0301 	orr.w	r3, r3, #1
 80007e2:	6313      	str	r3, [r2, #48]	; 0x30
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <HAL_ETH_MspInit+0x134>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV 
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80007f0:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	2302      	movs	r3, #2
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fe:	2303      	movs	r3, #3
 8000800:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000802:	230b      	movs	r3, #11
 8000804:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080a:	4619      	mov	r1, r3
 800080c:	4819      	ldr	r0, [pc, #100]	; (8000874 <HAL_ETH_MspInit+0x138>)
 800080e:	f005 fb07 	bl	8005e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000812:	2332      	movs	r3, #50	; 0x32
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000816:	2302      	movs	r3, #2
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081e:	2303      	movs	r3, #3
 8000820:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000822:	230b      	movs	r3, #11
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082a:	4619      	mov	r1, r3
 800082c:	4812      	ldr	r0, [pc, #72]	; (8000878 <HAL_ETH_MspInit+0x13c>)
 800082e:	f005 faf7 	bl	8005e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000832:	2386      	movs	r3, #134	; 0x86
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083e:	2303      	movs	r3, #3
 8000840:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000842:	230b      	movs	r3, #11
 8000844:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084a:	4619      	mov	r1, r3
 800084c:	480b      	ldr	r0, [pc, #44]	; (800087c <HAL_ETH_MspInit+0x140>)
 800084e:	f005 fae7 	bl	8005e20 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8000852:	2200      	movs	r2, #0
 8000854:	2105      	movs	r1, #5
 8000856:	203d      	movs	r0, #61	; 0x3d
 8000858:	f003 fedc 	bl	8004614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800085c:	203d      	movs	r0, #61	; 0x3d
 800085e:	f003 fef5 	bl	800464c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000862:	bf00      	nop
 8000864:	3738      	adds	r7, #56	; 0x38
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40028000 	.word	0x40028000
 8000870:	40023800 	.word	0x40023800
 8000874:	40021800 	.word	0x40021800
 8000878:	40020800 	.word	0x40020800
 800087c:	40020000 	.word	0x40020000

08000880 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8000888:	4b04      	ldr	r3, [pc, #16]	; (800089c <HAL_ETH_RxCpltCallback+0x1c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4618      	mov	r0, r3
 800088e:	f00e fc59 	bl	800f144 <osSemaphoreRelease>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200000c4 	.word	0x200000c4

080008a0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 80008a0:	b5b0      	push	{r4, r5, r7, lr}
 80008a2:	b090      	sub	sp, #64	; 0x40
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80008ac:	4b5c      	ldr	r3, [pc, #368]	; (8000a20 <low_level_init+0x180>)
 80008ae:	4a5d      	ldr	r2, [pc, #372]	; (8000a24 <low_level_init+0x184>)
 80008b0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80008b2:	4b5b      	ldr	r3, [pc, #364]	; (8000a20 <low_level_init+0x180>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80008b8:	4b59      	ldr	r3, [pc, #356]	; (8000a20 <low_level_init+0x180>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80008be:	2300      	movs	r3, #0
 80008c0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80008c4:	2380      	movs	r3, #128	; 0x80
 80008c6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80008ca:	23e1      	movs	r3, #225	; 0xe1
 80008cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 80008d0:	2300      	movs	r3, #0
 80008d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 80008d6:	2300      	movs	r3, #0
 80008d8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 80008dc:	2300      	movs	r3, #0
 80008de:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80008e2:	4a4f      	ldr	r2, [pc, #316]	; (8000a20 <low_level_init+0x180>)
 80008e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008e8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80008ea:	4b4d      	ldr	r3, [pc, #308]	; (8000a20 <low_level_init+0x180>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80008f0:	4b4b      	ldr	r3, [pc, #300]	; (8000a20 <low_level_init+0x180>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80008f6:	4b4a      	ldr	r3, [pc, #296]	; (8000a20 <low_level_init+0x180>)
 80008f8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008fc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80008fe:	4848      	ldr	r0, [pc, #288]	; (8000a20 <low_level_init+0x180>)
 8000900:	f004 fa9c 	bl	8004e3c <HAL_ETH_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800090a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800090e:	2b00      	cmp	r3, #0
 8000910:	d108      	bne.n	8000924 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	b2da      	uxtb	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8000924:	2304      	movs	r3, #4
 8000926:	4a40      	ldr	r2, [pc, #256]	; (8000a28 <low_level_init+0x188>)
 8000928:	4940      	ldr	r1, [pc, #256]	; (8000a2c <low_level_init+0x18c>)
 800092a:	483d      	ldr	r0, [pc, #244]	; (8000a20 <low_level_init+0x180>)
 800092c:	f004 fc22 	bl	8005174 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8000930:	2304      	movs	r3, #4
 8000932:	4a3f      	ldr	r2, [pc, #252]	; (8000a30 <low_level_init+0x190>)
 8000934:	493f      	ldr	r1, [pc, #252]	; (8000a34 <low_level_init+0x194>)
 8000936:	483a      	ldr	r0, [pc, #232]	; (8000a20 <low_level_init+0x180>)
 8000938:	f004 fc85 	bl	8005246 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2206      	movs	r2, #6
 8000940:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8000944:	4b36      	ldr	r3, [pc, #216]	; (8000a20 <low_level_init+0x180>)
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	781a      	ldrb	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8000950:	4b33      	ldr	r3, [pc, #204]	; (8000a20 <low_level_init+0x180>)
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	785a      	ldrb	r2, [r3, #1]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800095c:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <low_level_init+0x180>)
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	789a      	ldrb	r2, [r3, #2]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8000968:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <low_level_init+0x180>)
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	78da      	ldrb	r2, [r3, #3]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8000974:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <low_level_init+0x180>)
 8000976:	695b      	ldr	r3, [r3, #20]
 8000978:	791a      	ldrb	r2, [r3, #4]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8000980:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <low_level_init+0x180>)
 8000982:	695b      	ldr	r3, [r3, #20]
 8000984:	795a      	ldrb	r2, [r3, #5]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000992:	849a      	strh	r2, [r3, #36]	; 0x24
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800099a:	f043 030a 	orr.w	r3, r3, #10
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80009aa:	2300      	movs	r3, #0
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80009ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b2:	2101      	movs	r1, #1
 80009b4:	4618      	mov	r0, r3
 80009b6:	f00e fb37 	bl	800f028 <osSemaphoreCreate>
 80009ba:	4602      	mov	r2, r0
 80009bc:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <low_level_init+0x198>)
 80009be:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80009c0:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <low_level_init+0x19c>)
 80009c2:	f107 040c 	add.w	r4, r7, #12
 80009c6:	461d      	mov	r5, r3
 80009c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	6879      	ldr	r1, [r7, #4]
 80009da:	4618      	mov	r0, r3
 80009dc:	f00e fa28 	bl	800ee30 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80009e0:	480f      	ldr	r0, [pc, #60]	; (8000a20 <low_level_init+0x180>)
 80009e2:	f004 ff58 	bl	8005896 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80009e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009ea:	461a      	mov	r2, r3
 80009ec:	211d      	movs	r1, #29
 80009ee:	480c      	ldr	r0, [pc, #48]	; (8000a20 <low_level_init+0x180>)
 80009f0:	f004 fe83 	bl	80056fa <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80009f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009f6:	f043 030b 	orr.w	r3, r3, #11
 80009fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80009fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009fe:	461a      	mov	r2, r3
 8000a00:	211d      	movs	r1, #29
 8000a02:	4807      	ldr	r0, [pc, #28]	; (8000a20 <low_level_init+0x180>)
 8000a04:	f004 fee1 	bl	80057ca <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8000a08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	211d      	movs	r1, #29
 8000a10:	4803      	ldr	r0, [pc, #12]	; (8000a20 <low_level_init+0x180>)
 8000a12:	f004 fe72 	bl	80056fa <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8000a16:	bf00      	nop
 8000a18:	3740      	adds	r7, #64	; 0x40
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000a390 	.word	0x2000a390
 8000a24:	40028000 	.word	0x40028000
 8000a28:	2000a3d8 	.word	0x2000a3d8
 8000a2c:	20008ac0 	.word	0x20008ac0
 8000a30:	20008b40 	.word	0x20008b40
 8000a34:	2000a310 	.word	0x2000a310
 8000a38:	200000c4 	.word	0x200000c4
 8000a3c:	08024d0c 	.word	0x08024d0c

08000a40 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8000a4a:	4b4b      	ldr	r3, [pc, #300]	; (8000b78 <low_level_output+0x138>)
 8000a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8000a62:	4b45      	ldr	r3, [pc, #276]	; (8000b78 <low_level_output+0x138>)
 8000a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a66:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	623b      	str	r3, [r7, #32]
 8000a70:	e05a      	b.n	8000b28 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	da03      	bge.n	8000a82 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8000a7a:	23f8      	movs	r3, #248	; 0xf8
 8000a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8000a80:	e05c      	b.n	8000b3c <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8000a82:	6a3b      	ldr	r3, [r7, #32]
 8000a84:	895b      	ldrh	r3, [r3, #10]
 8000a86:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8000a8c:	e02f      	b.n	8000aee <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8000a8e:	69fa      	ldr	r2, [r7, #28]
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	18d0      	adds	r0, r2, r3
 8000a94:	6a3b      	ldr	r3, [r7, #32]
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	18d1      	adds	r1, r2, r3
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8000aa2:	1a9b      	subs	r3, r3, r2
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	f023 f9e4 	bl	8023e72 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	da03      	bge.n	8000ac0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8000ab8:	23f8      	movs	r3, #248	; 0xf8
 8000aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8000abe:	e03d      	b.n	8000b3c <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4413      	add	r3, r2
 8000acc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8000ad0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8000adc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8000ae8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	4413      	add	r3, r2
 8000af4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d8c8      	bhi.n	8000a8e <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8000afc:	69fa      	ldr	r2, [r7, #28]
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	18d0      	adds	r0, r2, r3
 8000b02:	6a3b      	ldr	r3, [r7, #32]
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	4413      	add	r3, r2
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f023 f9b0 	bl	8023e72 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8000b1a:	697a      	ldr	r2, [r7, #20]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8000b22:	6a3b      	ldr	r3, [r7, #32]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	623b      	str	r3, [r7, #32]
 8000b28:	6a3b      	ldr	r3, [r7, #32]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1a1      	bne.n	8000a72 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8000b2e:	6979      	ldr	r1, [r7, #20]
 8000b30:	4811      	ldr	r0, [pc, #68]	; (8000b78 <low_level_output+0x138>)
 8000b32:	f004 fbf5 	bl	8005320 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <low_level_output+0x138>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	f241 0314 	movw	r3, #4116	; 0x1014
 8000b44:	4413      	add	r3, r2
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f003 0320 	and.w	r3, r3, #32
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d00d      	beq.n	8000b6c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <low_level_output+0x138>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	f241 0314 	movw	r3, #4116	; 0x1014
 8000b58:	4413      	add	r3, r2
 8000b5a:	2220      	movs	r2, #32
 8000b5c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <low_level_output+0x138>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	f241 0304 	movw	r3, #4100	; 0x1004
 8000b66:	4413      	add	r3, r2
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8000b6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3728      	adds	r7, #40	; 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	2000a390 	.word	0x2000a390

08000b7c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08c      	sub	sp, #48	; 0x30
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8000ba0:	484f      	ldr	r0, [pc, #316]	; (8000ce0 <low_level_input+0x164>)
 8000ba2:	f004 fca7 	bl	80054f4 <HAL_ETH_GetReceivedFrame_IT>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <low_level_input+0x34>
  
    return NULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	e092      	b.n	8000cd6 <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8000bb0:	4b4b      	ldr	r3, [pc, #300]	; (8000ce0 <low_level_input+0x164>)
 8000bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8000bb6:	4b4a      	ldr	r3, [pc, #296]	; (8000ce0 <low_level_input+0x164>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8000bbc:	89fb      	ldrh	r3, [r7, #14]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d007      	beq.n	8000bd2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8000bc2:	89fb      	ldrh	r3, [r7, #14]
 8000bc4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8000bc8:	4619      	mov	r1, r3
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f018 fe1c 	bl	8019808 <pbuf_alloc>
 8000bd0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8000bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d04b      	beq.n	8000c70 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8000bd8:	4b41      	ldr	r3, [pc, #260]	; (8000ce0 <low_level_input+0x164>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bdc:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8000be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000be6:	e040      	b.n	8000c6a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8000be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bea:	895b      	ldrh	r3, [r3, #10]
 8000bec:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8000bf2:	e021      	b.n	8000c38 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8000bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf6:	685a      	ldr	r2, [r3, #4]
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	18d0      	adds	r0, r2, r3
 8000bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	18d1      	adds	r1, r2, r3
 8000c02:	69fa      	ldr	r2, [r7, #28]
 8000c04:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8000c08:	1a9b      	subs	r3, r3, r2
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	f023 f931 	bl	8023e72 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8000c10:	6a3b      	ldr	r3, [r7, #32]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8000c16:	6a3b      	ldr	r3, [r7, #32]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8000c1c:	69fa      	ldr	r2, [r7, #28]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	4413      	add	r3, r2
 8000c22:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8000c26:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8000c28:	69ba      	ldr	r2, [r7, #24]
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8000c32:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8000c38:	697a      	ldr	r2, [r7, #20]
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d8d6      	bhi.n	8000bf4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8000c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	18d0      	adds	r0, r2, r3
 8000c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	4413      	add	r3, r2
 8000c54:	697a      	ldr	r2, [r7, #20]
 8000c56:	4619      	mov	r1, r3
 8000c58:	f023 f90b 	bl	8023e72 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8000c5c:	69fa      	ldr	r2, [r7, #28]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	4413      	add	r3, r2
 8000c62:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8000c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d1bb      	bne.n	8000be8 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <low_level_input+0x164>)
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	e00b      	b.n	8000c94 <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8000c7c:	6a3b      	ldr	r3, [r7, #32]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000c84:	6a3b      	ldr	r3, [r7, #32]
 8000c86:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8000c88:	6a3b      	ldr	r3, [r7, #32]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	3301      	adds	r3, #1
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <low_level_input+0x164>)
 8000c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d3ee      	bcc.n	8000c7c <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <low_level_input+0x164>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <low_level_input+0x164>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	f241 0314 	movw	r3, #4116	; 0x1014
 8000cac:	4413      	add	r3, r2
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d00d      	beq.n	8000cd4 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <low_level_input+0x164>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	f241 0314 	movw	r3, #4116	; 0x1014
 8000cc0:	4413      	add	r3, r2
 8000cc2:	2280      	movs	r2, #128	; 0x80
 8000cc4:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <low_level_input+0x164>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	f241 0308 	movw	r3, #4104	; 0x1008
 8000cce:	4413      	add	r3, r2
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
  }
  return p;
 8000cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3730      	adds	r7, #48	; 0x30
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2000a390 	.word	0x2000a390

08000ce4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <ethernetif_input+0x58>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f00e f9d5 	bl	800f0a8 <osSemaphoreWait>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1f5      	bne.n	8000cf0 <ethernetif_input+0xc>
    {
      do
      {   
        LOCK_TCPIP_CORE();
 8000d04:	480e      	ldr	r0, [pc, #56]	; (8000d40 <ethernetif_input+0x5c>)
 8000d06:	f019 fde5 	bl	801a8d4 <sys_mutex_lock>
        p = low_level_input( netif );
 8000d0a:	68f8      	ldr	r0, [r7, #12]
 8000d0c:	f7ff ff36 	bl	8000b7c <low_level_input>
 8000d10:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d00a      	beq.n	8000d2e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	68f9      	ldr	r1, [r7, #12]
 8000d1e:	68b8      	ldr	r0, [r7, #8]
 8000d20:	4798      	blx	r3
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d002      	beq.n	8000d2e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8000d28:	68b8      	ldr	r0, [r7, #8]
 8000d2a:	f019 f84d 	bl	8019dc8 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8000d2e:	4804      	ldr	r0, [pc, #16]	; (8000d40 <ethernetif_input+0x5c>)
 8000d30:	f019 fddf 	bl	801a8f2 <sys_mutex_unlock>
      } while(p!=NULL);
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1e4      	bne.n	8000d04 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8000d3a:	e7d9      	b.n	8000cf0 <ethernetif_input+0xc>
 8000d3c:	200000c4 	.word	0x200000c4
 8000d40:	20011834 	.word	0x20011834

08000d44 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d106      	bne.n	8000d60 <ethernetif_init+0x1c>
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <ethernetif_init+0x48>)
 8000d54:	f240 222b 	movw	r2, #555	; 0x22b
 8000d58:	490d      	ldr	r1, [pc, #52]	; (8000d90 <ethernetif_init+0x4c>)
 8000d5a:	480e      	ldr	r0, [pc, #56]	; (8000d94 <ethernetif_init+0x50>)
 8000d5c:	f023 f944 	bl	8023fe8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2273      	movs	r2, #115	; 0x73
 8000d64:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2274      	movs	r2, #116	; 0x74
 8000d6c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <ethernetif_init+0x54>)
 8000d74:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <ethernetif_init+0x58>)
 8000d7a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff fd8f 	bl	80008a0 <low_level_init>

  return ERR_OK;
 8000d82:	2300      	movs	r3, #0
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	08024d28 	.word	0x08024d28
 8000d90:	08024d58 	.word	0x08024d58
 8000d94:	08024d68 	.word	0x08024d68
 8000d98:	080169c9 	.word	0x080169c9
 8000d9c:	08000a41 	.word	0x08000a41

08000da0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000da4:	f003 f8c8 	bl	8003f38 <HAL_GetTick>
 8000da8:	4603      	mov	r3, r0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8000db4:	4904      	ldr	r1, [pc, #16]	; (8000dc8 <MX_FATFS_Init+0x18>)
 8000db6:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_FATFS_Init+0x1c>)
 8000db8:	f00d ffde 	bl	800ed78 <FATFS_LinkDriver>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <MX_FATFS_Init+0x20>)
 8000dc2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2000bbac 	.word	0x2000bbac
 8000dcc:	080289e8 	.word	0x080289e8
 8000dd0:	2000bba8 	.word	0x2000bba8

08000dd4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8000dde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de2:	4806      	ldr	r0, [pc, #24]	; (8000dfc <BSP_PlatformIsDetected+0x28>)
 8000de4:	f005 f9c6 	bl	8006174 <HAL_GPIO_ReadPin>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8000dee:	2300      	movs	r3, #0
 8000df0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8000df2:	79fb      	ldrb	r3, [r7, #7]
}  
 8000df4:	4618      	mov	r0, r3
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40020800 	.word	0x40020800

08000e00 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4a07      	ldr	r2, [pc, #28]	; (8000e60 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	4a06      	ldr	r2, [pc, #24]	; (8000e64 <vApplicationGetIdleTaskMemory+0x30>)
 8000e4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2280      	movs	r2, #128	; 0x80
 8000e50:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000e52:	bf00      	nop
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	200000c8 	.word	0x200000c8
 8000e64:	20000120 	.word	0x20000120

08000e68 <http_server_serve>:
  * @brief serve tcp connection
  * @param conn: pointer on connection structure
  * @retval None
  */
void http_server_serve(struct netconn *conn)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  char* buf;
  u16_t buflen;

  /* Read the data from the port, blocking if nothing yet there.
   We assume the request (the part we care about) is in one netbuf */
  recv_err = netconn_recv(conn, &inbuf);
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	4619      	mov	r1, r3
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f011 fb7e 	bl	8012578 <netconn_recv>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	75fb      	strb	r3, [r7, #23]

  if (recv_err == ERR_OK)
 8000e80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d116      	bne.n	8000eb6 <http_server_serve+0x4e>
  {
    if (netconn_err(conn) == ERR_OK)
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f011 fc2c 	bl	80126e6 <netconn_err>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d110      	bne.n	8000eb6 <http_server_serve+0x4e>
    {
      netbuf_data(inbuf, (void**)&buf, &buflen);
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	f107 020a 	add.w	r2, r7, #10
 8000e9a:	f107 010c 	add.w	r1, r7, #12
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f018 f944 	bl	801912c <netbuf_data>

      /* Is this an HTTP GET command? (only check the first 5 chars, since
      there are other formats for GET, and we're keeping it very simple )*/
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 8000ea4:	897b      	ldrh	r3, [r7, #10]
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	d905      	bls.n	8000eb6 <http_server_serve+0x4e>
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2205      	movs	r2, #5
 8000eae:	4907      	ldr	r1, [pc, #28]	; (8000ecc <http_server_serve+0x64>)
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f023 f8f5 	bl	80240a0 <strncmp>
//    	  }
      }
    }
  }
  /* Close the connection (server closes in HTTP) */
  netconn_close(conn);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f011 fc08 	bl	80126cc <netconn_close>

  /* Delete the buffer (netconn_recv gives us ownership,
   so we have to make sure to deallocate the buffer) */
  netbuf_delete(inbuf);
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f018 f914 	bl	80190ec <netbuf_delete>
}
 8000ec4:	bf00      	nop
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	08024d90 	.word	0x08024d90

08000ed0 <http_server_netconn_thread>:
/**
  * @brief  http server thread
  * @retval None
  */
static void http_server_netconn_thread()
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
  struct netconn *conn, *newconn;
  err_t err, accept_err;

  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2010      	movs	r0, #16
 8000edc:	f011 f826 	bl	8011f2c <netconn_new_with_proto_and_callback>
 8000ee0:	60f8      	str	r0, [r7, #12]

  if (conn!= NULL)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d022      	beq.n	8000f2e <http_server_netconn_thread+0x5e>
  {
    /* Bind to port 80 (HTTP) with default IP address */
    err = netconn_bind(conn, NULL, 80);
 8000ee8:	2250      	movs	r2, #80	; 0x50
 8000eea:	2100      	movs	r1, #0
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f011 f8d7 	bl	80120a0 <netconn_bind>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	72fb      	strb	r3, [r7, #11]

    if (err == ERR_OK)
 8000ef6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d117      	bne.n	8000f2e <http_server_netconn_thread+0x5e>
    {
      /* Put the connection into LISTEN state */
      netconn_listen(conn);
 8000efe:	21ff      	movs	r1, #255	; 0xff
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f011 f905 	bl	8012110 <netconn_listen_with_backlog>

      while(1)
      {
        /* accept any icoming connection */
        accept_err = netconn_accept(conn, &newconn);
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	4619      	mov	r1, r3
 8000f0a:	68f8      	ldr	r0, [r7, #12]
 8000f0c:	f011 f92c 	bl	8012168 <netconn_accept>
 8000f10:	4603      	mov	r3, r0
 8000f12:	72bb      	strb	r3, [r7, #10]
        if(accept_err == ERR_OK)
 8000f14:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1f4      	bne.n	8000f06 <http_server_netconn_thread+0x36>
        {
          /* serve connection */
          http_server_serve(newconn);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ffa2 	bl	8000e68 <http_server_serve>

          /* delete connection */
          netconn_delete(newconn);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f011 f89e 	bl	8012068 <netconn_delete>
        accept_err = netconn_accept(conn, &newconn);
 8000f2c:	e7eb      	b.n	8000f06 <http_server_netconn_thread+0x36>
        }
      }
    }
  }
}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <http_server_netconn_init>:
  * @brief  Initialize the HTTP server (start its thread)
  * @param  none
  * @retval None
  */
void http_server_netconn_init()
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af02      	add	r7, sp, #8
  sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 8000f3e:	2304      	movs	r3, #4
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f46:	2200      	movs	r2, #0
 8000f48:	4903      	ldr	r1, [pc, #12]	; (8000f58 <http_server_netconn_init+0x20>)
 8000f4a:	4804      	ldr	r0, [pc, #16]	; (8000f5c <http_server_netconn_init+0x24>)
 8000f4c:	f019 fcde 	bl	801a90c <sys_thread_new>
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	08000ed1 	.word	0x08000ed1
 8000f5c:	08024d98 	.word	0x08024d98

08000f60 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8000f66:	2100      	movs	r1, #0
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f01f fedf 	bl	8020d2c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <MX_LWIP_Init+0x6c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <MX_LWIP_Init+0x70>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <MX_LWIP_Init+0x74>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <MX_LWIP_Init+0x78>)
 8000f82:	9302      	str	r3, [sp, #8]
 8000f84:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <MX_LWIP_Init+0x7c>)
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	2300      	movs	r3, #0
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_LWIP_Init+0x74>)
 8000f8e:	4a10      	ldr	r2, [pc, #64]	; (8000fd0 <MX_LWIP_Init+0x70>)
 8000f90:	490e      	ldr	r1, [pc, #56]	; (8000fcc <MX_LWIP_Init+0x6c>)
 8000f92:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <MX_LWIP_Init+0x80>)
 8000f94:	f018 f91c 	bl	80191d0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8000f98:	4811      	ldr	r0, [pc, #68]	; (8000fe0 <MX_LWIP_Init+0x80>)
 8000f9a:	f018 facf 	bl	801953c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <MX_LWIP_Init+0x80>)
 8000fa0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <MX_LWIP_Init+0x80>)
 8000fb2:	f018 fad3 	bl	801955c <netif_set_up>
 8000fb6:	e002      	b.n	8000fbe <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8000fb8:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <MX_LWIP_Init+0x80>)
 8000fba:	f018 fb3b 	bl	8019634 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8000fbe:	4808      	ldr	r0, [pc, #32]	; (8000fe0 <MX_LWIP_Init+0x80>)
 8000fc0:	f013 fabc 	bl	801453c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2000c048 	.word	0x2000c048
 8000fd0:	2000c04c 	.word	0x2000c04c
 8000fd4:	2000c050 	.word	0x2000c050
 8000fd8:	08020c3d 	.word	0x08020c3d
 8000fdc:	08000d45 	.word	0x08000d45
 8000fe0:	2000c014 	.word	0x2000c014

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b5b0      	push	{r4, r5, r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fea:	f002 ff83 	bl	8003ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fee:	f000 f859 	bl	80010a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff2:	f001 f851 	bl	8002098 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000ff6:	f000 f915 	bl	8001224 <MX_ADC3_Init>
  MX_CRC_Init();
 8000ffa:	f000 f965 	bl	80012c8 <MX_CRC_Init>
  MX_DCMI_Init();
 8000ffe:	f000 f985 	bl	800130c <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001002:	f000 f9b7 	bl	8001374 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001006:	f000 fff7 	bl	8001ff8 <MX_FMC_Init>
  MX_I2C1_Init();
 800100a:	f000 f9e5 	bl	80013d8 <MX_I2C1_Init>
  MX_I2C3_Init();
 800100e:	f000 fa23 	bl	8001458 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001012:	f000 fa61 	bl	80014d8 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001016:	f000 fae1 	bl	80015dc <MX_QUADSPI_Init>
  MX_RTC_Init();
 800101a:	f000 fb0b 	bl	8001634 <MX_RTC_Init>
  MX_SAI2_Init();
 800101e:	f000 fbb1 	bl	8001784 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001022:	f000 fc57 	bl	80018d4 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001026:	f000 fc75 	bl	8001914 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 800102a:	f000 fca3 	bl	8001974 <MX_SPI2_Init>
  MX_TIM1_Init();
 800102e:	f000 fcdf 	bl	80019f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001032:	f000 fd89 	bl	8001b48 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001036:	f000 fdfd 	bl	8001c34 <MX_TIM3_Init>
  MX_TIM5_Init();
 800103a:	f000 fe71 	bl	8001d20 <MX_TIM5_Init>
  MX_TIM8_Init();
 800103e:	f000 fee5 	bl	8001e0c <MX_TIM8_Init>
  MX_TIM12_Init();
 8001042:	f000 ff35 	bl	8001eb0 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001046:	f000 ff77 	bl	8001f38 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800104a:	f000 ffa5 	bl	8001f98 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 800104e:	f7ff feaf 	bl	8000db0 <MX_FATFS_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of TCP_IP_Sem */
  osSemaphoreStaticDef(TCP_IP_Sem, &TCP_IP_SemControlBlock);
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <main+0xb0>)
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  TCP_IP_SemHandle = osSemaphoreCreate(osSemaphore(TCP_IP_Sem), 1);
 800105a:	f107 0320 	add.w	r3, r7, #32
 800105e:	2101      	movs	r1, #1
 8001060:	4618      	mov	r0, r3
 8001062:	f00d ffe1 	bl	800f028 <osSemaphoreCreate>
 8001066:	4602      	mov	r2, r0
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <main+0xb4>)
 800106a:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <main+0xb8>)
 800106e:	1d3c      	adds	r4, r7, #4
 8001070:	461d      	mov	r5, r3
 8001072:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001076:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800107a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f00d fed4 	bl	800ee30 <osThreadCreate>
 8001088:	4602      	mov	r2, r0
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <main+0xbc>)
 800108c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800108e:	f00d feac 	bl	800edea <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001092:	e7fe      	b.n	8001092 <main+0xae>
 8001094:	2000d5e8 	.word	0x2000d5e8
 8001098:	2000d630 	.word	0x2000d630
 800109c:	08024dac 	.word	0x08024dac
 80010a0:	2000c0d8 	.word	0x2000c0d8

080010a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b0b4      	sub	sp, #208	; 0xd0
 80010a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80010ae:	2230      	movs	r2, #48	; 0x30
 80010b0:	2100      	movs	r1, #0
 80010b2:	4618      	mov	r0, r3
 80010b4:	f022 fee8 	bl	8023e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c8:	f107 0308 	add.w	r3, r7, #8
 80010cc:	2284      	movs	r2, #132	; 0x84
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f022 fed9 	bl	8023e88 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80010d6:	f007 fa01 	bl	80084dc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010da:	4b4f      	ldr	r3, [pc, #316]	; (8001218 <SystemClock_Config+0x174>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	4a4e      	ldr	r2, [pc, #312]	; (8001218 <SystemClock_Config+0x174>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e4:	6413      	str	r3, [r2, #64]	; 0x40
 80010e6:	4b4c      	ldr	r3, [pc, #304]	; (8001218 <SystemClock_Config+0x174>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f2:	4b4a      	ldr	r3, [pc, #296]	; (800121c <SystemClock_Config+0x178>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a49      	ldr	r2, [pc, #292]	; (800121c <SystemClock_Config+0x178>)
 80010f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	4b47      	ldr	r3, [pc, #284]	; (800121c <SystemClock_Config+0x178>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800110a:	2309      	movs	r3, #9
 800110c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001110:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001114:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001118:	2301      	movs	r3, #1
 800111a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111e:	2302      	movs	r3, #2
 8001120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001124:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001128:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800112c:	2319      	movs	r3, #25
 800112e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001132:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001136:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800113a:	2302      	movs	r3, #2
 800113c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001140:	2309      	movs	r3, #9
 8001142:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001146:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800114a:	4618      	mov	r0, r3
 800114c:	f007 fae8 	bl	8008720 <HAL_RCC_OscConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001156:	f001 f97d 	bl	8002454 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800115a:	f007 f9cf 	bl	80084fc <HAL_PWREx_EnableOverDrive>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001164:	f001 f976 	bl	8002454 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001168:	230f      	movs	r3, #15
 800116a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800116e:	2302      	movs	r3, #2
 8001170:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800117a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800117e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001186:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800118a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800118e:	2106      	movs	r1, #6
 8001190:	4618      	mov	r0, r3
 8001192:	f007 fd69 	bl	8008c68 <HAL_RCC_ClockConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800119c:	f001 f95a 	bl	8002454 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80011a0:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <SystemClock_Config+0x17c>)
 80011a2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80011a4:	2364      	movs	r3, #100	; 0x64
 80011a6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80011b4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80011b8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80011ba:	2305      	movs	r3, #5
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80011be:	2302      	movs	r3, #2
 80011c0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80011c2:	2303      	movs	r3, #3
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80011c6:	2301      	movs	r3, #1
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80011ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011d2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011d8:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80011da:	2300      	movs	r3, #0
 80011dc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011de:	2300      	movs	r3, #0
 80011e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80011e2:	2300      	movs	r3, #0
 80011e4:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80011ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80011f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	4618      	mov	r0, r3
 8001202:	f007 ff35 	bl	8009070 <HAL_RCCEx_PeriphCLKConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x16c>
  {
    Error_Handler();
 800120c:	f001 f922 	bl	8002454 <Error_Handler>
  }
}
 8001210:	bf00      	nop
 8001212:	37d0      	adds	r7, #208	; 0xd0
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40023800 	.word	0x40023800
 800121c:	40007000 	.word	0x40007000
 8001220:	01b14868 	.word	0x01b14868

08001224 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800122a:	463b      	mov	r3, r7
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8001236:	4b21      	ldr	r3, [pc, #132]	; (80012bc <MX_ADC3_Init+0x98>)
 8001238:	4a21      	ldr	r2, [pc, #132]	; (80012c0 <MX_ADC3_Init+0x9c>)
 800123a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800123c:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <MX_ADC3_Init+0x98>)
 800123e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001242:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001244:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <MX_ADC3_Init+0x98>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800124a:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <MX_ADC3_Init+0x98>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <MX_ADC3_Init+0x98>)
 8001252:	2200      	movs	r2, #0
 8001254:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <MX_ADC3_Init+0x98>)
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <MX_ADC3_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <MX_ADC3_Init+0x98>)
 8001266:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <MX_ADC3_Init+0xa0>)
 8001268:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800126a:	4b14      	ldr	r3, [pc, #80]	; (80012bc <MX_ADC3_Init+0x98>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <MX_ADC3_Init+0x98>)
 8001272:	2201      	movs	r2, #1
 8001274:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <MX_ADC3_Init+0x98>)
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800127e:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <MX_ADC3_Init+0x98>)
 8001280:	2201      	movs	r2, #1
 8001282:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001284:	480d      	ldr	r0, [pc, #52]	; (80012bc <MX_ADC3_Init+0x98>)
 8001286:	f002 fe85 	bl	8003f94 <HAL_ADC_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001290:	f001 f8e0 	bl	8002454 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001294:	2304      	movs	r3, #4
 8001296:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001298:	2301      	movs	r3, #1
 800129a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80012a0:	463b      	mov	r3, r7
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <MX_ADC3_Init+0x98>)
 80012a6:	f002 feb9 	bl	800401c <HAL_ADC_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80012b0:	f001 f8d0 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	2000d458 	.word	0x2000d458
 80012c0:	40012200 	.word	0x40012200
 80012c4:	0f000001 	.word	0x0f000001

080012c8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80012cc:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <MX_CRC_Init+0x3c>)
 80012ce:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <MX_CRC_Init+0x40>)
 80012d0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_CRC_Init+0x3c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <MX_CRC_Init+0x3c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_CRC_Init+0x3c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <MX_CRC_Init+0x3c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_CRC_Init+0x3c>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_CRC_Init+0x3c>)
 80012f2:	f003 f9b9 	bl	8004668 <HAL_CRC_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80012fc:	f001 f8aa 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	2000c2e8 	.word	0x2000c2e8
 8001308:	40023000 	.word	0x40023000

0800130c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <MX_DCMI_Init+0x60>)
 8001312:	4a17      	ldr	r2, [pc, #92]	; (8001370 <MX_DCMI_Init+0x64>)
 8001314:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <MX_DCMI_Init+0x60>)
 8001318:	2200      	movs	r2, #0
 800131a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <MX_DCMI_Init+0x60>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <MX_DCMI_Init+0x60>)
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001328:	4b10      	ldr	r3, [pc, #64]	; (800136c <MX_DCMI_Init+0x60>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_DCMI_Init+0x60>)
 8001330:	2200      	movs	r2, #0
 8001332:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001334:	4b0d      	ldr	r3, [pc, #52]	; (800136c <MX_DCMI_Init+0x60>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_DCMI_Init+0x60>)
 800133c:	2200      	movs	r2, #0
 800133e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001340:	4b0a      	ldr	r3, [pc, #40]	; (800136c <MX_DCMI_Init+0x60>)
 8001342:	2200      	movs	r2, #0
 8001344:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_DCMI_Init+0x60>)
 8001348:	2200      	movs	r2, #0
 800134a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <MX_DCMI_Init+0x60>)
 800134e:	2200      	movs	r2, #0
 8001350:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_DCMI_Init+0x60>)
 8001354:	2200      	movs	r2, #0
 8001356:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001358:	4804      	ldr	r0, [pc, #16]	; (800136c <MX_DCMI_Init+0x60>)
 800135a:	f003 fa6f 	bl	800483c <HAL_DCMI_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001364:	f001 f876 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}
 800136c:	2000d4f8 	.word	0x2000d4f8
 8001370:	50050000 	.word	0x50050000

08001374 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_DMA2D_Init+0x5c>)
 800137a:	4a16      	ldr	r2, [pc, #88]	; (80013d4 <MX_DMA2D_Init+0x60>)
 800137c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <MX_DMA2D_Init+0x5c>)
 8001380:	2200      	movs	r2, #0
 8001382:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_DMA2D_Init+0x5c>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_DMA2D_Init+0x5c>)
 800138c:	2200      	movs	r2, #0
 800138e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_DMA2D_Init+0x5c>)
 8001392:	2200      	movs	r2, #0
 8001394:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_DMA2D_Init+0x5c>)
 8001398:	2200      	movs	r2, #0
 800139a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_DMA2D_Init+0x5c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <MX_DMA2D_Init+0x5c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80013a8:	4809      	ldr	r0, [pc, #36]	; (80013d0 <MX_DMA2D_Init+0x5c>)
 80013aa:	f003 fb5b 	bl	8004a64 <HAL_DMA2D_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80013b4:	f001 f84e 	bl	8002454 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80013b8:	2101      	movs	r1, #1
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_DMA2D_Init+0x5c>)
 80013bc:	f003 fcac 	bl	8004d18 <HAL_DMA2D_ConfigLayer>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80013c6:	f001 f845 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000d6f8 	.word	0x2000d6f8
 80013d4:	4002b000 	.word	0x4002b000

080013d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <MX_I2C1_Init+0x74>)
 80013de:	4a1c      	ldr	r2, [pc, #112]	; (8001450 <MX_I2C1_Init+0x78>)
 80013e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80013e2:	4b1a      	ldr	r3, [pc, #104]	; (800144c <MX_I2C1_Init+0x74>)
 80013e4:	4a1b      	ldr	r2, [pc, #108]	; (8001454 <MX_I2C1_Init+0x7c>)
 80013e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <MX_I2C1_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <MX_I2C1_Init+0x74>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <MX_I2C1_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_I2C1_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <MX_I2C1_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_I2C1_Init+0x74>)
 8001408:	2200      	movs	r2, #0
 800140a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <MX_I2C1_Init+0x74>)
 800140e:	2200      	movs	r2, #0
 8001410:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001412:	480e      	ldr	r0, [pc, #56]	; (800144c <MX_I2C1_Init+0x74>)
 8001414:	f006 fbd0 	bl	8007bb8 <HAL_I2C_Init>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800141e:	f001 f819 	bl	8002454 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001422:	2100      	movs	r1, #0
 8001424:	4809      	ldr	r0, [pc, #36]	; (800144c <MX_I2C1_Init+0x74>)
 8001426:	f006 fc57 	bl	8007cd8 <HAL_I2CEx_ConfigAnalogFilter>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001430:	f001 f810 	bl	8002454 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001434:	2100      	movs	r1, #0
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_I2C1_Init+0x74>)
 8001438:	f006 fc99 	bl	8007d6e <HAL_I2CEx_ConfigDigitalFilter>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001442:	f001 f807 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	2000c29c 	.word	0x2000c29c
 8001450:	40005400 	.word	0x40005400
 8001454:	00c0eaff 	.word	0x00c0eaff

08001458 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800145c:	4b1b      	ldr	r3, [pc, #108]	; (80014cc <MX_I2C3_Init+0x74>)
 800145e:	4a1c      	ldr	r2, [pc, #112]	; (80014d0 <MX_I2C3_Init+0x78>)
 8001460:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001462:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <MX_I2C3_Init+0x74>)
 8001464:	4a1b      	ldr	r2, [pc, #108]	; (80014d4 <MX_I2C3_Init+0x7c>)
 8001466:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001468:	4b18      	ldr	r3, [pc, #96]	; (80014cc <MX_I2C3_Init+0x74>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <MX_I2C3_Init+0x74>)
 8001470:	2201      	movs	r2, #1
 8001472:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <MX_I2C3_Init+0x74>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800147a:	4b14      	ldr	r3, [pc, #80]	; (80014cc <MX_I2C3_Init+0x74>)
 800147c:	2200      	movs	r2, #0
 800147e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <MX_I2C3_Init+0x74>)
 8001482:	2200      	movs	r2, #0
 8001484:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001486:	4b11      	ldr	r3, [pc, #68]	; (80014cc <MX_I2C3_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <MX_I2C3_Init+0x74>)
 800148e:	2200      	movs	r2, #0
 8001490:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001492:	480e      	ldr	r0, [pc, #56]	; (80014cc <MX_I2C3_Init+0x74>)
 8001494:	f006 fb90 	bl	8007bb8 <HAL_I2C_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800149e:	f000 ffd9 	bl	8002454 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014a2:	2100      	movs	r1, #0
 80014a4:	4809      	ldr	r0, [pc, #36]	; (80014cc <MX_I2C3_Init+0x74>)
 80014a6:	f006 fc17 	bl	8007cd8 <HAL_I2CEx_ConfigAnalogFilter>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80014b0:	f000 ffd0 	bl	8002454 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014b4:	2100      	movs	r1, #0
 80014b6:	4805      	ldr	r0, [pc, #20]	; (80014cc <MX_I2C3_Init+0x74>)
 80014b8:	f006 fc59 	bl	8007d6e <HAL_I2CEx_ConfigDigitalFilter>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80014c2:	f000 ffc7 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000c0dc 	.word	0x2000c0dc
 80014d0:	40005c00 	.word	0x40005c00
 80014d4:	00c0eaff 	.word	0x00c0eaff

080014d8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08e      	sub	sp, #56	; 0x38
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2234      	movs	r2, #52	; 0x34
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f022 fccf 	bl	8023e88 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80014ea:	4b3a      	ldr	r3, [pc, #232]	; (80015d4 <MX_LTDC_Init+0xfc>)
 80014ec:	4a3a      	ldr	r2, [pc, #232]	; (80015d8 <MX_LTDC_Init+0x100>)
 80014ee:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80014f0:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <MX_LTDC_Init+0xfc>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80014f6:	4b37      	ldr	r3, [pc, #220]	; (80015d4 <MX_LTDC_Init+0xfc>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80014fc:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <MX_LTDC_Init+0xfc>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001502:	4b34      	ldr	r3, [pc, #208]	; (80015d4 <MX_LTDC_Init+0xfc>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001508:	4b32      	ldr	r3, [pc, #200]	; (80015d4 <MX_LTDC_Init+0xfc>)
 800150a:	2228      	movs	r2, #40	; 0x28
 800150c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800150e:	4b31      	ldr	r3, [pc, #196]	; (80015d4 <MX_LTDC_Init+0xfc>)
 8001510:	2209      	movs	r2, #9
 8001512:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001514:	4b2f      	ldr	r3, [pc, #188]	; (80015d4 <MX_LTDC_Init+0xfc>)
 8001516:	2235      	movs	r2, #53	; 0x35
 8001518:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800151a:	4b2e      	ldr	r3, [pc, #184]	; (80015d4 <MX_LTDC_Init+0xfc>)
 800151c:	220b      	movs	r2, #11
 800151e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001520:	4b2c      	ldr	r3, [pc, #176]	; (80015d4 <MX_LTDC_Init+0xfc>)
 8001522:	f240 2215 	movw	r2, #533	; 0x215
 8001526:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001528:	4b2a      	ldr	r3, [pc, #168]	; (80015d4 <MX_LTDC_Init+0xfc>)
 800152a:	f240 121b 	movw	r2, #283	; 0x11b
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001530:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <MX_LTDC_Init+0xfc>)
 8001532:	f240 2235 	movw	r2, #565	; 0x235
 8001536:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001538:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <MX_LTDC_Init+0xfc>)
 800153a:	f240 121d 	movw	r2, #285	; 0x11d
 800153e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001540:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <MX_LTDC_Init+0xfc>)
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001548:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <MX_LTDC_Init+0xfc>)
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <MX_LTDC_Init+0xfc>)
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001558:	481e      	ldr	r0, [pc, #120]	; (80015d4 <MX_LTDC_Init+0xfc>)
 800155a:	f006 fc55 	bl	8007e08 <HAL_LTDC_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001564:	f000 ff76 	bl	8002454 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 800156c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001570:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001576:	f44f 7388 	mov.w	r3, #272	; 0x110
 800157a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800157c:	2302      	movs	r3, #2
 800157e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001580:	23ff      	movs	r3, #255	; 0xff
 8001582:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001588:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800158c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800158e:	2307      	movs	r3, #7
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001592:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001598:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800159e:	f44f 7388 	mov.w	r3, #272	; 0x110
 80015a2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2200      	movs	r2, #0
 80015ba:	4619      	mov	r1, r3
 80015bc:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_LTDC_Init+0xfc>)
 80015be:	f006 fdb5 	bl	800812c <HAL_LTDC_ConfigLayer>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80015c8:	f000 ff44 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	3738      	adds	r7, #56	; 0x38
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	2000d3b0 	.word	0x2000d3b0
 80015d8:	40016800 	.word	0x40016800

080015dc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <MX_QUADSPI_Init+0x50>)
 80015e2:	4a13      	ldr	r2, [pc, #76]	; (8001630 <MX_QUADSPI_Init+0x54>)
 80015e4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_QUADSPI_Init+0x50>)
 80015e8:	22ff      	movs	r2, #255	; 0xff
 80015ea:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <MX_QUADSPI_Init+0x50>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <MX_QUADSPI_Init+0x50>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <MX_QUADSPI_Init+0x50>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <MX_QUADSPI_Init+0x50>)
 8001600:	2200      	movs	r2, #0
 8001602:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <MX_QUADSPI_Init+0x50>)
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <MX_QUADSPI_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <MX_QUADSPI_Init+0x50>)
 8001612:	2200      	movs	r2, #0
 8001614:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001616:	4805      	ldr	r0, [pc, #20]	; (800162c <MX_QUADSPI_Init+0x50>)
 8001618:	f006 ffc0 	bl	800859c <HAL_QSPI_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001622:	f000 ff17 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	2000d7ec 	.word	0x2000d7ec
 8001630:	a0001000 	.word	0xa0001000

08001634 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b092      	sub	sp, #72	; 0x48
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800163a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	611a      	str	r2, [r3, #16]
 800164a:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 800164c:	2300      	movs	r3, #0
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001650:	463b      	mov	r3, r7
 8001652:	222c      	movs	r2, #44	; 0x2c
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f022 fc16 	bl	8023e88 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800165c:	4b47      	ldr	r3, [pc, #284]	; (800177c <MX_RTC_Init+0x148>)
 800165e:	4a48      	ldr	r2, [pc, #288]	; (8001780 <MX_RTC_Init+0x14c>)
 8001660:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001662:	4b46      	ldr	r3, [pc, #280]	; (800177c <MX_RTC_Init+0x148>)
 8001664:	2200      	movs	r2, #0
 8001666:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001668:	4b44      	ldr	r3, [pc, #272]	; (800177c <MX_RTC_Init+0x148>)
 800166a:	227f      	movs	r2, #127	; 0x7f
 800166c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800166e:	4b43      	ldr	r3, [pc, #268]	; (800177c <MX_RTC_Init+0x148>)
 8001670:	22ff      	movs	r2, #255	; 0xff
 8001672:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001674:	4b41      	ldr	r3, [pc, #260]	; (800177c <MX_RTC_Init+0x148>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800167a:	4b40      	ldr	r3, [pc, #256]	; (800177c <MX_RTC_Init+0x148>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001680:	4b3e      	ldr	r3, [pc, #248]	; (800177c <MX_RTC_Init+0x148>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001686:	483d      	ldr	r0, [pc, #244]	; (800177c <MX_RTC_Init+0x148>)
 8001688:	f008 fa14 	bl	8009ab4 <HAL_RTC_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001692:	f000 fedf 	bl	8002454 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8001696:	2300      	movs	r3, #0
 8001698:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 800169c:	2300      	movs	r3, #0
 800169e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80016ac:	2300      	movs	r3, #0
 80016ae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80016b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016b4:	2201      	movs	r2, #1
 80016b6:	4619      	mov	r1, r3
 80016b8:	4830      	ldr	r0, [pc, #192]	; (800177c <MX_RTC_Init+0x148>)
 80016ba:	f008 fa77 	bl	8009bac <HAL_RTC_SetTime>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80016c4:	f000 fec6 	bl	8002454 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80016c8:	2301      	movs	r3, #1
 80016ca:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80016ce:	2301      	movs	r3, #1
 80016d0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80016d4:	2301      	movs	r3, #1
 80016d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80016da:	2300      	movs	r3, #0
 80016dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80016e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e4:	2201      	movs	r2, #1
 80016e6:	4619      	mov	r1, r3
 80016e8:	4824      	ldr	r0, [pc, #144]	; (800177c <MX_RTC_Init+0x148>)
 80016ea:	f008 fb1d 	bl	8009d28 <HAL_RTC_SetDate>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80016f4:	f000 feae 	bl	8002454 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001700:	2300      	movs	r3, #0
 8001702:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001704:	2300      	movs	r3, #0
 8001706:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001710:	2300      	movs	r3, #0
 8001712:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001718:	2300      	movs	r3, #0
 800171a:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 800171c:	2301      	movs	r3, #1
 800171e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001728:	463b      	mov	r3, r7
 800172a:	2201      	movs	r2, #1
 800172c:	4619      	mov	r1, r3
 800172e:	4813      	ldr	r0, [pc, #76]	; (800177c <MX_RTC_Init+0x148>)
 8001730:	f008 fba2 	bl	8009e78 <HAL_RTC_SetAlarm>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800173a:	f000 fe8b 	bl	8002454 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 800173e:	2301      	movs	r3, #1
 8001740:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8001744:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001748:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800174a:	463b      	mov	r3, r7
 800174c:	2201      	movs	r2, #1
 800174e:	4619      	mov	r1, r3
 8001750:	480a      	ldr	r0, [pc, #40]	; (800177c <MX_RTC_Init+0x148>)
 8001752:	f008 fb91 	bl	8009e78 <HAL_RTC_SetAlarm>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 800175c:	f000 fe7a 	bl	8002454 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001760:	2202      	movs	r2, #2
 8001762:	2100      	movs	r1, #0
 8001764:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_RTC_Init+0x148>)
 8001766:	f008 fd11 	bl	800a18c <HAL_RTCEx_SetTimeStamp>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8001770:	f000 fe70 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001774:	bf00      	nop
 8001776:	3748      	adds	r7, #72	; 0x48
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	2000d5c8 	.word	0x2000d5c8
 8001780:	40002800 	.word	0x40002800

08001784 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001788:	4b4d      	ldr	r3, [pc, #308]	; (80018c0 <MX_SAI2_Init+0x13c>)
 800178a:	4a4e      	ldr	r2, [pc, #312]	; (80018c4 <MX_SAI2_Init+0x140>)
 800178c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800178e:	4b4c      	ldr	r3, [pc, #304]	; (80018c0 <MX_SAI2_Init+0x13c>)
 8001790:	2200      	movs	r2, #0
 8001792:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001794:	4b4a      	ldr	r3, [pc, #296]	; (80018c0 <MX_SAI2_Init+0x13c>)
 8001796:	2200      	movs	r2, #0
 8001798:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800179a:	4b49      	ldr	r3, [pc, #292]	; (80018c0 <MX_SAI2_Init+0x13c>)
 800179c:	2240      	movs	r2, #64	; 0x40
 800179e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80017a0:	4b47      	ldr	r3, [pc, #284]	; (80018c0 <MX_SAI2_Init+0x13c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80017a6:	4b46      	ldr	r3, [pc, #280]	; (80018c0 <MX_SAI2_Init+0x13c>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80017ac:	4b44      	ldr	r3, [pc, #272]	; (80018c0 <MX_SAI2_Init+0x13c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80017b2:	4b43      	ldr	r3, [pc, #268]	; (80018c0 <MX_SAI2_Init+0x13c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80017b8:	4b41      	ldr	r3, [pc, #260]	; (80018c0 <MX_SAI2_Init+0x13c>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80017be:	4b40      	ldr	r3, [pc, #256]	; (80018c0 <MX_SAI2_Init+0x13c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80017c4:	4b3e      	ldr	r3, [pc, #248]	; (80018c0 <MX_SAI2_Init+0x13c>)
 80017c6:	4a40      	ldr	r2, [pc, #256]	; (80018c8 <MX_SAI2_Init+0x144>)
 80017c8:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80017ca:	4b3d      	ldr	r3, [pc, #244]	; (80018c0 <MX_SAI2_Init+0x13c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80017d0:	4b3b      	ldr	r3, [pc, #236]	; (80018c0 <MX_SAI2_Init+0x13c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80017d6:	4b3a      	ldr	r3, [pc, #232]	; (80018c0 <MX_SAI2_Init+0x13c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80017dc:	4b38      	ldr	r3, [pc, #224]	; (80018c0 <MX_SAI2_Init+0x13c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80017e2:	4b37      	ldr	r3, [pc, #220]	; (80018c0 <MX_SAI2_Init+0x13c>)
 80017e4:	2208      	movs	r2, #8
 80017e6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80017e8:	4b35      	ldr	r3, [pc, #212]	; (80018c0 <MX_SAI2_Init+0x13c>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80017ee:	4b34      	ldr	r3, [pc, #208]	; (80018c0 <MX_SAI2_Init+0x13c>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80017f4:	4b32      	ldr	r3, [pc, #200]	; (80018c0 <MX_SAI2_Init+0x13c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80017fa:	4b31      	ldr	r3, [pc, #196]	; (80018c0 <MX_SAI2_Init+0x13c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001800:	4b2f      	ldr	r3, [pc, #188]	; (80018c0 <MX_SAI2_Init+0x13c>)
 8001802:	2200      	movs	r2, #0
 8001804:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001806:	4b2e      	ldr	r3, [pc, #184]	; (80018c0 <MX_SAI2_Init+0x13c>)
 8001808:	2200      	movs	r2, #0
 800180a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800180c:	4b2c      	ldr	r3, [pc, #176]	; (80018c0 <MX_SAI2_Init+0x13c>)
 800180e:	2201      	movs	r2, #1
 8001810:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001812:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <MX_SAI2_Init+0x13c>)
 8001814:	2200      	movs	r2, #0
 8001816:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001818:	4829      	ldr	r0, [pc, #164]	; (80018c0 <MX_SAI2_Init+0x13c>)
 800181a:	f008 fd0d 	bl	800a238 <HAL_SAI_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001824:	f000 fe16 	bl	8002454 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001828:	4b28      	ldr	r3, [pc, #160]	; (80018cc <MX_SAI2_Init+0x148>)
 800182a:	4a29      	ldr	r2, [pc, #164]	; (80018d0 <MX_SAI2_Init+0x14c>)
 800182c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800182e:	4b27      	ldr	r3, [pc, #156]	; (80018cc <MX_SAI2_Init+0x148>)
 8001830:	2200      	movs	r2, #0
 8001832:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001834:	4b25      	ldr	r3, [pc, #148]	; (80018cc <MX_SAI2_Init+0x148>)
 8001836:	2203      	movs	r2, #3
 8001838:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800183a:	4b24      	ldr	r3, [pc, #144]	; (80018cc <MX_SAI2_Init+0x148>)
 800183c:	2240      	movs	r2, #64	; 0x40
 800183e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001840:	4b22      	ldr	r3, [pc, #136]	; (80018cc <MX_SAI2_Init+0x148>)
 8001842:	2200      	movs	r2, #0
 8001844:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <MX_SAI2_Init+0x148>)
 8001848:	2200      	movs	r2, #0
 800184a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800184c:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <MX_SAI2_Init+0x148>)
 800184e:	2201      	movs	r2, #1
 8001850:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001852:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <MX_SAI2_Init+0x148>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001858:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <MX_SAI2_Init+0x148>)
 800185a:	2200      	movs	r2, #0
 800185c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800185e:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <MX_SAI2_Init+0x148>)
 8001860:	2200      	movs	r2, #0
 8001862:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <MX_SAI2_Init+0x148>)
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800186a:	4b18      	ldr	r3, [pc, #96]	; (80018cc <MX_SAI2_Init+0x148>)
 800186c:	2200      	movs	r2, #0
 800186e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <MX_SAI2_Init+0x148>)
 8001872:	2200      	movs	r2, #0
 8001874:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <MX_SAI2_Init+0x148>)
 8001878:	2208      	movs	r2, #8
 800187a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <MX_SAI2_Init+0x148>)
 800187e:	2201      	movs	r2, #1
 8001880:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <MX_SAI2_Init+0x148>)
 8001884:	2200      	movs	r2, #0
 8001886:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <MX_SAI2_Init+0x148>)
 800188a:	2200      	movs	r2, #0
 800188c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <MX_SAI2_Init+0x148>)
 8001890:	2200      	movs	r2, #0
 8001892:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001894:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <MX_SAI2_Init+0x148>)
 8001896:	2200      	movs	r2, #0
 8001898:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_SAI2_Init+0x148>)
 800189c:	2200      	movs	r2, #0
 800189e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80018a0:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <MX_SAI2_Init+0x148>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_SAI2_Init+0x148>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80018ac:	4807      	ldr	r0, [pc, #28]	; (80018cc <MX_SAI2_Init+0x148>)
 80018ae:	f008 fcc3 	bl	800a238 <HAL_SAI_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 80018b8:	f000 fdcc 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	2000c218 	.word	0x2000c218
 80018c4:	40015c04 	.word	0x40015c04
 80018c8:	0002ee00 	.word	0x0002ee00
 80018cc:	2000c054 	.word	0x2000c054
 80018d0:	40015c24 	.word	0x40015c24

080018d4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_SDMMC1_SD_Init+0x38>)
 80018da:	4a0d      	ldr	r2, [pc, #52]	; (8001910 <MX_SDMMC1_SD_Init+0x3c>)
 80018dc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <MX_SDMMC1_SD_Init+0x38>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_SDMMC1_SD_Init+0x38>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <MX_SDMMC1_SD_Init+0x38>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_SDMMC1_SD_Init+0x38>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <MX_SDMMC1_SD_Init+0x38>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <MX_SDMMC1_SD_Init+0x38>)
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	2000d2ac 	.word	0x2000d2ac
 8001910:	40012c00 	.word	0x40012c00

08001914 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8001918:	4b15      	ldr	r3, [pc, #84]	; (8001970 <MX_SPDIFRX_Init+0x5c>)
 800191a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800191e:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8001920:	4b13      	ldr	r3, [pc, #76]	; (8001970 <MX_SPDIFRX_Init+0x5c>)
 8001922:	2200      	movs	r2, #0
 8001924:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8001926:	4b12      	ldr	r3, [pc, #72]	; (8001970 <MX_SPDIFRX_Init+0x5c>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 800192c:	4b10      	ldr	r3, [pc, #64]	; (8001970 <MX_SPDIFRX_Init+0x5c>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8001932:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <MX_SPDIFRX_Init+0x5c>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8001938:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <MX_SPDIFRX_Init+0x5c>)
 800193a:	2200      	movs	r2, #0
 800193c:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 800193e:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <MX_SPDIFRX_Init+0x5c>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8001944:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <MX_SPDIFRX_Init+0x5c>)
 8001946:	2200      	movs	r2, #0
 8001948:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <MX_SPDIFRX_Init+0x5c>)
 800194c:	2200      	movs	r2, #0
 800194e:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8001950:	4b07      	ldr	r3, [pc, #28]	; (8001970 <MX_SPDIFRX_Init+0x5c>)
 8001952:	2200      	movs	r2, #0
 8001954:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <MX_SPDIFRX_Init+0x5c>)
 8001958:	2200      	movs	r2, #0
 800195a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 800195c:	4804      	ldr	r0, [pc, #16]	; (8001970 <MX_SPDIFRX_Init+0x5c>)
 800195e:	f009 feb3 	bl	800b6c8 <HAL_SPDIFRX_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8001968:	f000 fd74 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	2000c1cc 	.word	0x2000c1cc

08001974 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001978:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <MX_SPI2_Init+0x74>)
 800197a:	4a1c      	ldr	r2, [pc, #112]	; (80019ec <MX_SPI2_Init+0x78>)
 800197c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800197e:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <MX_SPI2_Init+0x74>)
 8001980:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001984:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001986:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <MX_SPI2_Init+0x74>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800198c:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <MX_SPI2_Init+0x74>)
 800198e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001992:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <MX_SPI2_Init+0x74>)
 8001996:	2200      	movs	r2, #0
 8001998:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800199a:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <MX_SPI2_Init+0x74>)
 800199c:	2200      	movs	r2, #0
 800199e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <MX_SPI2_Init+0x74>)
 80019a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019a6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019a8:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <MX_SPI2_Init+0x74>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <MX_SPI2_Init+0x74>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_SPI2_Init+0x74>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <MX_SPI2_Init+0x74>)
 80019bc:	2200      	movs	r2, #0
 80019be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_SPI2_Init+0x74>)
 80019c2:	2207      	movs	r2, #7
 80019c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <MX_SPI2_Init+0x74>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_SPI2_Init+0x74>)
 80019ce:	2208      	movs	r2, #8
 80019d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019d2:	4805      	ldr	r0, [pc, #20]	; (80019e8 <MX_SPI2_Init+0x74>)
 80019d4:	f009 fed4 	bl	800b780 <HAL_SPI_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80019de:	f000 fd39 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	2000c128 	.word	0x2000c128
 80019ec:	40003800 	.word	0x40003800

080019f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b09a      	sub	sp, #104	; 0x68
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
 8001a20:	615a      	str	r2, [r3, #20]
 8001a22:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	222c      	movs	r2, #44	; 0x2c
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f022 fa2c 	bl	8023e88 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a30:	4b43      	ldr	r3, [pc, #268]	; (8001b40 <MX_TIM1_Init+0x150>)
 8001a32:	4a44      	ldr	r2, [pc, #272]	; (8001b44 <MX_TIM1_Init+0x154>)
 8001a34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a36:	4b42      	ldr	r3, [pc, #264]	; (8001b40 <MX_TIM1_Init+0x150>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3c:	4b40      	ldr	r3, [pc, #256]	; (8001b40 <MX_TIM1_Init+0x150>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001a42:	4b3f      	ldr	r3, [pc, #252]	; (8001b40 <MX_TIM1_Init+0x150>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a48:	4b3d      	ldr	r3, [pc, #244]	; (8001b40 <MX_TIM1_Init+0x150>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a4e:	4b3c      	ldr	r3, [pc, #240]	; (8001b40 <MX_TIM1_Init+0x150>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a54:	4b3a      	ldr	r3, [pc, #232]	; (8001b40 <MX_TIM1_Init+0x150>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a5a:	4839      	ldr	r0, [pc, #228]	; (8001b40 <MX_TIM1_Init+0x150>)
 8001a5c:	f009 ff22 	bl	800b8a4 <HAL_TIM_Base_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001a66:	f000 fcf5 	bl	8002454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a6e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a70:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a74:	4619      	mov	r1, r3
 8001a76:	4832      	ldr	r0, [pc, #200]	; (8001b40 <MX_TIM1_Init+0x150>)
 8001a78:	f00a f9cc 	bl	800be14 <HAL_TIM_ConfigClockSource>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a82:	f000 fce7 	bl	8002454 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a86:	482e      	ldr	r0, [pc, #184]	; (8001b40 <MX_TIM1_Init+0x150>)
 8001a88:	f009 ff62 	bl	800b950 <HAL_TIM_PWM_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001a92:	f000 fcdf 	bl	8002454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001aa2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4825      	ldr	r0, [pc, #148]	; (8001b40 <MX_TIM1_Init+0x150>)
 8001aaa:	f00a fe2d 	bl	800c708 <HAL_TIMEx_MasterConfigSynchronization>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001ab4:	f000 fcce 	bl	8002454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ab8:	2360      	movs	r3, #96	; 0x60
 8001aba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001acc:	2300      	movs	r3, #0
 8001ace:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ad4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ad8:	2200      	movs	r2, #0
 8001ada:	4619      	mov	r1, r3
 8001adc:	4818      	ldr	r0, [pc, #96]	; (8001b40 <MX_TIM1_Init+0x150>)
 8001ade:	f00a f881 	bl	800bbe4 <HAL_TIM_PWM_ConfigChannel>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001ae8:	f000 fcb4 	bl	8002454 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b04:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4807      	ldr	r0, [pc, #28]	; (8001b40 <MX_TIM1_Init+0x150>)
 8001b22:	f00a fe7f 	bl	800c824 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001b2c:	f000 fc92 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b30:	4803      	ldr	r0, [pc, #12]	; (8001b40 <MX_TIM1_Init+0x150>)
 8001b32:	f001 fb2d 	bl	8003190 <HAL_TIM_MspPostInit>

}
 8001b36:	bf00      	nop
 8001b38:	3768      	adds	r7, #104	; 0x68
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2000d634 	.word	0x2000d634
 8001b44:	40010000 	.word	0x40010000

08001b48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08e      	sub	sp, #56	; 0x38
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b68:	463b      	mov	r3, r7
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
 8001b74:	611a      	str	r2, [r3, #16]
 8001b76:	615a      	str	r2, [r3, #20]
 8001b78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b7a:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <MX_TIM2_Init+0xe8>)
 8001b7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b80:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b82:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <MX_TIM2_Init+0xe8>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b88:	4b29      	ldr	r3, [pc, #164]	; (8001c30 <MX_TIM2_Init+0xe8>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001b8e:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <MX_TIM2_Init+0xe8>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b94:	4b26      	ldr	r3, [pc, #152]	; (8001c30 <MX_TIM2_Init+0xe8>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9a:	4b25      	ldr	r3, [pc, #148]	; (8001c30 <MX_TIM2_Init+0xe8>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ba0:	4823      	ldr	r0, [pc, #140]	; (8001c30 <MX_TIM2_Init+0xe8>)
 8001ba2:	f009 fe7f 	bl	800b8a4 <HAL_TIM_Base_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001bac:	f000 fc52 	bl	8002454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bba:	4619      	mov	r1, r3
 8001bbc:	481c      	ldr	r0, [pc, #112]	; (8001c30 <MX_TIM2_Init+0xe8>)
 8001bbe:	f00a f929 	bl	800be14 <HAL_TIM_ConfigClockSource>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001bc8:	f000 fc44 	bl	8002454 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bcc:	4818      	ldr	r0, [pc, #96]	; (8001c30 <MX_TIM2_Init+0xe8>)
 8001bce:	f009 febf 	bl	800b950 <HAL_TIM_PWM_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001bd8:	f000 fc3c 	bl	8002454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	4619      	mov	r1, r3
 8001bea:	4811      	ldr	r0, [pc, #68]	; (8001c30 <MX_TIM2_Init+0xe8>)
 8001bec:	f00a fd8c 	bl	800c708 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001bf6:	f000 fc2d 	bl	8002454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bfa:	2360      	movs	r3, #96	; 0x60
 8001bfc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c0a:	463b      	mov	r3, r7
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4807      	ldr	r0, [pc, #28]	; (8001c30 <MX_TIM2_Init+0xe8>)
 8001c12:	f009 ffe7 	bl	800bbe4 <HAL_TIM_PWM_ConfigChannel>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001c1c:	f000 fc1a 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c20:	4803      	ldr	r0, [pc, #12]	; (8001c30 <MX_TIM2_Init+0xe8>)
 8001c22:	f001 fab5 	bl	8003190 <HAL_TIM_MspPostInit>

}
 8001c26:	bf00      	nop
 8001c28:	3738      	adds	r7, #56	; 0x38
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2000d738 	.word	0x2000d738

08001c34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08e      	sub	sp, #56	; 0x38
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c48:	f107 031c 	add.w	r3, r7, #28
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c54:	463b      	mov	r3, r7
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
 8001c60:	611a      	str	r2, [r3, #16]
 8001c62:	615a      	str	r2, [r3, #20]
 8001c64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c66:	4b2c      	ldr	r3, [pc, #176]	; (8001d18 <MX_TIM3_Init+0xe4>)
 8001c68:	4a2c      	ldr	r2, [pc, #176]	; (8001d1c <MX_TIM3_Init+0xe8>)
 8001c6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c6c:	4b2a      	ldr	r3, [pc, #168]	; (8001d18 <MX_TIM3_Init+0xe4>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c72:	4b29      	ldr	r3, [pc, #164]	; (8001d18 <MX_TIM3_Init+0xe4>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001c78:	4b27      	ldr	r3, [pc, #156]	; (8001d18 <MX_TIM3_Init+0xe4>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7e:	4b26      	ldr	r3, [pc, #152]	; (8001d18 <MX_TIM3_Init+0xe4>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c84:	4b24      	ldr	r3, [pc, #144]	; (8001d18 <MX_TIM3_Init+0xe4>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c8a:	4823      	ldr	r0, [pc, #140]	; (8001d18 <MX_TIM3_Init+0xe4>)
 8001c8c:	f009 fe0a 	bl	800b8a4 <HAL_TIM_Base_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001c96:	f000 fbdd 	bl	8002454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ca0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	481c      	ldr	r0, [pc, #112]	; (8001d18 <MX_TIM3_Init+0xe4>)
 8001ca8:	f00a f8b4 	bl	800be14 <HAL_TIM_ConfigClockSource>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001cb2:	f000 fbcf 	bl	8002454 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cb6:	4818      	ldr	r0, [pc, #96]	; (8001d18 <MX_TIM3_Init+0xe4>)
 8001cb8:	f009 fe4a 	bl	800b950 <HAL_TIM_PWM_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001cc2:	f000 fbc7 	bl	8002454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cce:	f107 031c 	add.w	r3, r7, #28
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4810      	ldr	r0, [pc, #64]	; (8001d18 <MX_TIM3_Init+0xe4>)
 8001cd6:	f00a fd17 	bl	800c708 <HAL_TIMEx_MasterConfigSynchronization>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001ce0:	f000 fbb8 	bl	8002454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ce4:	2360      	movs	r3, #96	; 0x60
 8001ce6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cf4:	463b      	mov	r3, r7
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4807      	ldr	r0, [pc, #28]	; (8001d18 <MX_TIM3_Init+0xe4>)
 8001cfc:	f009 ff72 	bl	800bbe4 <HAL_TIM_PWM_ConfigChannel>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001d06:	f000 fba5 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d0a:	4803      	ldr	r0, [pc, #12]	; (8001d18 <MX_TIM3_Init+0xe4>)
 8001d0c:	f001 fa40 	bl	8003190 <HAL_TIM_MspPostInit>

}
 8001d10:	bf00      	nop
 8001d12:	3738      	adds	r7, #56	; 0x38
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	2000d370 	.word	0x2000d370
 8001d1c:	40000400 	.word	0x40000400

08001d20 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08e      	sub	sp, #56	; 0x38
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d34:	f107 031c 	add.w	r3, r7, #28
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d40:	463b      	mov	r3, r7
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	60da      	str	r2, [r3, #12]
 8001d4c:	611a      	str	r2, [r3, #16]
 8001d4e:	615a      	str	r2, [r3, #20]
 8001d50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d52:	4b2c      	ldr	r3, [pc, #176]	; (8001e04 <MX_TIM5_Init+0xe4>)
 8001d54:	4a2c      	ldr	r2, [pc, #176]	; (8001e08 <MX_TIM5_Init+0xe8>)
 8001d56:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001d58:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <MX_TIM5_Init+0xe4>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5e:	4b29      	ldr	r3, [pc, #164]	; (8001e04 <MX_TIM5_Init+0xe4>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001d64:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <MX_TIM5_Init+0xe4>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d6a:	4b26      	ldr	r3, [pc, #152]	; (8001e04 <MX_TIM5_Init+0xe4>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d70:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <MX_TIM5_Init+0xe4>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001d76:	4823      	ldr	r0, [pc, #140]	; (8001e04 <MX_TIM5_Init+0xe4>)
 8001d78:	f009 fd94 	bl	800b8a4 <HAL_TIM_Base_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001d82:	f000 fb67 	bl	8002454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001d8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d90:	4619      	mov	r1, r3
 8001d92:	481c      	ldr	r0, [pc, #112]	; (8001e04 <MX_TIM5_Init+0xe4>)
 8001d94:	f00a f83e 	bl	800be14 <HAL_TIM_ConfigClockSource>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001d9e:	f000 fb59 	bl	8002454 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001da2:	4818      	ldr	r0, [pc, #96]	; (8001e04 <MX_TIM5_Init+0xe4>)
 8001da4:	f009 fdd4 	bl	800b950 <HAL_TIM_PWM_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001dae:	f000 fb51 	bl	8002454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001dba:	f107 031c 	add.w	r3, r7, #28
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4810      	ldr	r0, [pc, #64]	; (8001e04 <MX_TIM5_Init+0xe4>)
 8001dc2:	f00a fca1 	bl	800c708 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001dcc:	f000 fb42 	bl	8002454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dd0:	2360      	movs	r3, #96	; 0x60
 8001dd2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001de0:	463b      	mov	r3, r7
 8001de2:	220c      	movs	r2, #12
 8001de4:	4619      	mov	r1, r3
 8001de6:	4807      	ldr	r0, [pc, #28]	; (8001e04 <MX_TIM5_Init+0xe4>)
 8001de8:	f009 fefc 	bl	800bbe4 <HAL_TIM_PWM_ConfigChannel>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001df2:	f000 fb2f 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001df6:	4803      	ldr	r0, [pc, #12]	; (8001e04 <MX_TIM5_Init+0xe4>)
 8001df8:	f001 f9ca 	bl	8003190 <HAL_TIM_MspPostInit>

}
 8001dfc:	bf00      	nop
 8001dfe:	3738      	adds	r7, #56	; 0x38
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	2000d330 	.word	0x2000d330
 8001e08:	40000c00 	.word	0x40000c00

08001e0c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e12:	f107 0310 	add.w	r3, r7, #16
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <MX_TIM8_Init+0x9c>)
 8001e2c:	4a1f      	ldr	r2, [pc, #124]	; (8001eac <MX_TIM8_Init+0xa0>)
 8001e2e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001e30:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <MX_TIM8_Init+0x9c>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e36:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <MX_TIM8_Init+0x9c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8001e3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <MX_TIM8_Init+0x9c>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e42:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <MX_TIM8_Init+0x9c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e48:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <MX_TIM8_Init+0x9c>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e4e:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <MX_TIM8_Init+0x9c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001e54:	4814      	ldr	r0, [pc, #80]	; (8001ea8 <MX_TIM8_Init+0x9c>)
 8001e56:	f009 fd25 	bl	800b8a4 <HAL_TIM_Base_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001e60:	f000 faf8 	bl	8002454 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001e6a:	f107 0310 	add.w	r3, r7, #16
 8001e6e:	4619      	mov	r1, r3
 8001e70:	480d      	ldr	r0, [pc, #52]	; (8001ea8 <MX_TIM8_Init+0x9c>)
 8001e72:	f009 ffcf 	bl	800be14 <HAL_TIM_ConfigClockSource>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001e7c:	f000 faea 	bl	8002454 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e80:	2300      	movs	r3, #0
 8001e82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <MX_TIM8_Init+0x9c>)
 8001e92:	f00a fc39 	bl	800c708 <HAL_TIMEx_MasterConfigSynchronization>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001e9c:	f000 fada 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001ea0:	bf00      	nop
 8001ea2:	3720      	adds	r7, #32
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	2000c18c 	.word	0x2000c18c
 8001eac:	40010400 	.word	0x40010400

08001eb0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eb6:	1d3b      	adds	r3, r7, #4
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
 8001ec4:	615a      	str	r2, [r3, #20]
 8001ec6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001ec8:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <MX_TIM12_Init+0x80>)
 8001eca:	4a1a      	ldr	r2, [pc, #104]	; (8001f34 <MX_TIM12_Init+0x84>)
 8001ecc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001ece:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <MX_TIM12_Init+0x80>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed4:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <MX_TIM12_Init+0x80>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <MX_TIM12_Init+0x80>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <MX_TIM12_Init+0x80>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee6:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <MX_TIM12_Init+0x80>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001eec:	4810      	ldr	r0, [pc, #64]	; (8001f30 <MX_TIM12_Init+0x80>)
 8001eee:	f009 fd2f 	bl	800b950 <HAL_TIM_PWM_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001ef8:	f000 faac 	bl	8002454 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001efc:	2360      	movs	r3, #96	; 0x60
 8001efe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	2200      	movs	r2, #0
 8001f10:	4619      	mov	r1, r3
 8001f12:	4807      	ldr	r0, [pc, #28]	; (8001f30 <MX_TIM12_Init+0x80>)
 8001f14:	f009 fe66 	bl	800bbe4 <HAL_TIM_PWM_ConfigChannel>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8001f1e:	f000 fa99 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001f22:	4803      	ldr	r0, [pc, #12]	; (8001f30 <MX_TIM12_Init+0x80>)
 8001f24:	f001 f934 	bl	8003190 <HAL_TIM_MspPostInit>

}
 8001f28:	bf00      	nop
 8001f2a:	3720      	adds	r7, #32
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	2000d778 	.word	0x2000d778
 8001f34:	40001800 	.word	0x40001800

08001f38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f3c:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <MX_USART1_UART_Init+0x58>)
 8001f3e:	4a15      	ldr	r2, [pc, #84]	; (8001f94 <MX_USART1_UART_Init+0x5c>)
 8001f40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f42:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <MX_USART1_UART_Init+0x58>)
 8001f44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4a:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <MX_USART1_UART_Init+0x58>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <MX_USART1_UART_Init+0x58>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f56:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <MX_USART1_UART_Init+0x58>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <MX_USART1_UART_Init+0x58>)
 8001f5e:	220c      	movs	r2, #12
 8001f60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f62:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <MX_USART1_UART_Init+0x58>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <MX_USART1_UART_Init+0x58>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <MX_USART1_UART_Init+0x58>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <MX_USART1_UART_Init+0x58>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f7a:	4805      	ldr	r0, [pc, #20]	; (8001f90 <MX_USART1_UART_Init+0x58>)
 8001f7c:	f00a fcee 	bl	800c95c <HAL_UART_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f86:	f000 fa65 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	2000d548 	.word	0x2000d548
 8001f94:	40011000 	.word	0x40011000

08001f98 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f9c:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <MX_USART6_UART_Init+0x58>)
 8001f9e:	4a15      	ldr	r2, [pc, #84]	; (8001ff4 <MX_USART6_UART_Init+0x5c>)
 8001fa0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001fa2:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <MX_USART6_UART_Init+0x58>)
 8001fa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fa8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001faa:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <MX_USART6_UART_Init+0x58>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <MX_USART6_UART_Init+0x58>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <MX_USART6_UART_Init+0x58>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <MX_USART6_UART_Init+0x58>)
 8001fbe:	220c      	movs	r2, #12
 8001fc0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <MX_USART6_UART_Init+0x58>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <MX_USART6_UART_Init+0x58>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fce:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <MX_USART6_UART_Init+0x58>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <MX_USART6_UART_Init+0x58>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001fda:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <MX_USART6_UART_Init+0x58>)
 8001fdc:	f00a fcbe 	bl	800c95c <HAL_UART_Init>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001fe6:	f000 fa35 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	2000d678 	.word	0x2000d678
 8001ff4:	40011400 	.word	0x40011400

08001ff8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
 800200c:	615a      	str	r2, [r3, #20]
 800200e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002010:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <MX_FMC_Init+0x98>)
 8002012:	4a20      	ldr	r2, [pc, #128]	; (8002094 <MX_FMC_Init+0x9c>)
 8002014:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002016:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <MX_FMC_Init+0x98>)
 8002018:	2200      	movs	r2, #0
 800201a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800201c:	4b1c      	ldr	r3, [pc, #112]	; (8002090 <MX_FMC_Init+0x98>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002022:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <MX_FMC_Init+0x98>)
 8002024:	2204      	movs	r2, #4
 8002026:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002028:	4b19      	ldr	r3, [pc, #100]	; (8002090 <MX_FMC_Init+0x98>)
 800202a:	2210      	movs	r2, #16
 800202c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <MX_FMC_Init+0x98>)
 8002030:	2240      	movs	r2, #64	; 0x40
 8002032:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002034:	4b16      	ldr	r3, [pc, #88]	; (8002090 <MX_FMC_Init+0x98>)
 8002036:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800203a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800203c:	4b14      	ldr	r3, [pc, #80]	; (8002090 <MX_FMC_Init+0x98>)
 800203e:	2200      	movs	r2, #0
 8002040:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002042:	4b13      	ldr	r3, [pc, #76]	; (8002090 <MX_FMC_Init+0x98>)
 8002044:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002048:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800204a:	4b11      	ldr	r3, [pc, #68]	; (8002090 <MX_FMC_Init+0x98>)
 800204c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002050:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002052:	4b0f      	ldr	r3, [pc, #60]	; (8002090 <MX_FMC_Init+0x98>)
 8002054:	2200      	movs	r2, #0
 8002056:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002058:	2302      	movs	r3, #2
 800205a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800205c:	2307      	movs	r3, #7
 800205e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002060:	2304      	movs	r3, #4
 8002062:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002064:	2307      	movs	r3, #7
 8002066:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002068:	2303      	movs	r3, #3
 800206a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800206c:	2302      	movs	r3, #2
 800206e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002070:	2302      	movs	r3, #2
 8002072:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002074:	1d3b      	adds	r3, r7, #4
 8002076:	4619      	mov	r1, r3
 8002078:	4805      	ldr	r0, [pc, #20]	; (8002090 <MX_FMC_Init+0x98>)
 800207a:	f009 faf1 	bl	800b660 <HAL_SDRAM_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002084:	f000 f9e6 	bl	8002454 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002088:	bf00      	nop
 800208a:	3720      	adds	r7, #32
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	2000d7b8 	.word	0x2000d7b8
 8002094:	a0000140 	.word	0xa0000140

08002098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b090      	sub	sp, #64	; 0x40
 800209c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	60da      	str	r2, [r3, #12]
 80020ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020ae:	4baf      	ldr	r3, [pc, #700]	; (800236c <MX_GPIO_Init+0x2d4>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4aae      	ldr	r2, [pc, #696]	; (800236c <MX_GPIO_Init+0x2d4>)
 80020b4:	f043 0310 	orr.w	r3, r3, #16
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4bac      	ldr	r3, [pc, #688]	; (800236c <MX_GPIO_Init+0x2d4>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80020c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020c6:	4ba9      	ldr	r3, [pc, #676]	; (800236c <MX_GPIO_Init+0x2d4>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	4aa8      	ldr	r2, [pc, #672]	; (800236c <MX_GPIO_Init+0x2d4>)
 80020cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020d0:	6313      	str	r3, [r2, #48]	; 0x30
 80020d2:	4ba6      	ldr	r3, [pc, #664]	; (800236c <MX_GPIO_Init+0x2d4>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020de:	4ba3      	ldr	r3, [pc, #652]	; (800236c <MX_GPIO_Init+0x2d4>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4aa2      	ldr	r2, [pc, #648]	; (800236c <MX_GPIO_Init+0x2d4>)
 80020e4:	f043 0302 	orr.w	r3, r3, #2
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4ba0      	ldr	r3, [pc, #640]	; (800236c <MX_GPIO_Init+0x2d4>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	623b      	str	r3, [r7, #32]
 80020f4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020f6:	4b9d      	ldr	r3, [pc, #628]	; (800236c <MX_GPIO_Init+0x2d4>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a9c      	ldr	r2, [pc, #624]	; (800236c <MX_GPIO_Init+0x2d4>)
 80020fc:	f043 0308 	orr.w	r3, r3, #8
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b9a      	ldr	r3, [pc, #616]	; (800236c <MX_GPIO_Init+0x2d4>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	61fb      	str	r3, [r7, #28]
 800210c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800210e:	4b97      	ldr	r3, [pc, #604]	; (800236c <MX_GPIO_Init+0x2d4>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a96      	ldr	r2, [pc, #600]	; (800236c <MX_GPIO_Init+0x2d4>)
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b94      	ldr	r3, [pc, #592]	; (800236c <MX_GPIO_Init+0x2d4>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	61bb      	str	r3, [r7, #24]
 8002124:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002126:	4b91      	ldr	r3, [pc, #580]	; (800236c <MX_GPIO_Init+0x2d4>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a90      	ldr	r2, [pc, #576]	; (800236c <MX_GPIO_Init+0x2d4>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b8e      	ldr	r3, [pc, #568]	; (800236c <MX_GPIO_Init+0x2d4>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800213e:	4b8b      	ldr	r3, [pc, #556]	; (800236c <MX_GPIO_Init+0x2d4>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a8a      	ldr	r2, [pc, #552]	; (800236c <MX_GPIO_Init+0x2d4>)
 8002144:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b88      	ldr	r3, [pc, #544]	; (800236c <MX_GPIO_Init+0x2d4>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002156:	4b85      	ldr	r3, [pc, #532]	; (800236c <MX_GPIO_Init+0x2d4>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a84      	ldr	r2, [pc, #528]	; (800236c <MX_GPIO_Init+0x2d4>)
 800215c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b82      	ldr	r3, [pc, #520]	; (800236c <MX_GPIO_Init+0x2d4>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800216e:	4b7f      	ldr	r3, [pc, #508]	; (800236c <MX_GPIO_Init+0x2d4>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	4a7e      	ldr	r2, [pc, #504]	; (800236c <MX_GPIO_Init+0x2d4>)
 8002174:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002178:	6313      	str	r3, [r2, #48]	; 0x30
 800217a:	4b7c      	ldr	r3, [pc, #496]	; (800236c <MX_GPIO_Init+0x2d4>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002186:	4b79      	ldr	r3, [pc, #484]	; (800236c <MX_GPIO_Init+0x2d4>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	4a78      	ldr	r2, [pc, #480]	; (800236c <MX_GPIO_Init+0x2d4>)
 800218c:	f043 0320 	orr.w	r3, r3, #32
 8002190:	6313      	str	r3, [r2, #48]	; 0x30
 8002192:	4b76      	ldr	r3, [pc, #472]	; (800236c <MX_GPIO_Init+0x2d4>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800219e:	4b73      	ldr	r3, [pc, #460]	; (800236c <MX_GPIO_Init+0x2d4>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a72      	ldr	r2, [pc, #456]	; (800236c <MX_GPIO_Init+0x2d4>)
 80021a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b70      	ldr	r3, [pc, #448]	; (800236c <MX_GPIO_Init+0x2d4>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b2:	603b      	str	r3, [r7, #0]
 80021b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80021b6:	2201      	movs	r2, #1
 80021b8:	2120      	movs	r1, #32
 80021ba:	486d      	ldr	r0, [pc, #436]	; (8002370 <MX_GPIO_Init+0x2d8>)
 80021bc:	f003 fff2 	bl	80061a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 80021c0:	2200      	movs	r2, #0
 80021c2:	210c      	movs	r1, #12
 80021c4:	486b      	ldr	r0, [pc, #428]	; (8002374 <MX_GPIO_Init+0x2dc>)
 80021c6:	f003 ffed 	bl	80061a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80021ca:	2201      	movs	r2, #1
 80021cc:	2108      	movs	r1, #8
 80021ce:	486a      	ldr	r0, [pc, #424]	; (8002378 <MX_GPIO_Init+0x2e0>)
 80021d0:	f003 ffe8 	bl	80061a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80021d4:	2201      	movs	r2, #1
 80021d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021da:	4866      	ldr	r0, [pc, #408]	; (8002374 <MX_GPIO_Init+0x2dc>)
 80021dc:	f003 ffe2 	bl	80061a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80021e0:	2200      	movs	r2, #0
 80021e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021e6:	4865      	ldr	r0, [pc, #404]	; (800237c <MX_GPIO_Init+0x2e4>)
 80021e8:	f003 ffdc 	bl	80061a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80021ec:	2200      	movs	r2, #0
 80021ee:	21c8      	movs	r1, #200	; 0xc8
 80021f0:	4863      	ldr	r0, [pc, #396]	; (8002380 <MX_GPIO_Init+0x2e8>)
 80021f2:	f003 ffd7 	bl	80061a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80021f6:	2308      	movs	r3, #8
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fa:	2300      	movs	r3, #0
 80021fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002202:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002206:	4619      	mov	r1, r3
 8002208:	485e      	ldr	r0, [pc, #376]	; (8002384 <MX_GPIO_Init+0x2ec>)
 800220a:	f003 fe09 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800220e:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	2302      	movs	r3, #2
 8002216:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221c:	2303      	movs	r3, #3
 800221e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002220:	230a      	movs	r3, #10
 8002222:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002224:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002228:	4619      	mov	r1, r3
 800222a:	4857      	ldr	r0, [pc, #348]	; (8002388 <MX_GPIO_Init+0x2f0>)
 800222c:	f003 fdf8 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8002230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002236:	2300      	movs	r3, #0
 8002238:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800223e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002242:	4619      	mov	r1, r3
 8002244:	4851      	ldr	r0, [pc, #324]	; (800238c <MX_GPIO_Init+0x2f4>)
 8002246:	f003 fdeb 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800224a:	2340      	movs	r3, #64	; 0x40
 800224c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800224e:	4b50      	ldr	r3, [pc, #320]	; (8002390 <MX_GPIO_Init+0x2f8>)
 8002250:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002256:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800225a:	4619      	mov	r1, r3
 800225c:	4844      	ldr	r0, [pc, #272]	; (8002370 <MX_GPIO_Init+0x2d8>)
 800225e:	f003 fddf 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002262:	2320      	movs	r3, #32
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002266:	2301      	movs	r3, #1
 8002268:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226e:	2300      	movs	r3, #0
 8002270:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002272:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002276:	4619      	mov	r1, r3
 8002278:	483d      	ldr	r0, [pc, #244]	; (8002370 <MX_GPIO_Init+0x2d8>)
 800227a:	f003 fdd1 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800227e:	f241 030c 	movw	r3, #4108	; 0x100c
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002284:	2301      	movs	r3, #1
 8002286:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228c:	2300      	movs	r3, #0
 800228e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002290:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002294:	4619      	mov	r1, r3
 8002296:	4837      	ldr	r0, [pc, #220]	; (8002374 <MX_GPIO_Init+0x2dc>)
 8002298:	f003 fdc2 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800229c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a2:	2300      	movs	r3, #0
 80022a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80022aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ae:	4619      	mov	r1, r3
 80022b0:	4838      	ldr	r0, [pc, #224]	; (8002394 <MX_GPIO_Init+0x2fc>)
 80022b2:	f003 fdb5 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80022b6:	2308      	movs	r3, #8
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ba:	2301      	movs	r3, #1
 80022bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c2:	2300      	movs	r3, #0
 80022c4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80022c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ca:	4619      	mov	r1, r3
 80022cc:	482a      	ldr	r0, [pc, #168]	; (8002378 <MX_GPIO_Init+0x2e0>)
 80022ce:	f003 fda7 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80022d2:	2310      	movs	r3, #16
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022d6:	2300      	movs	r3, #0
 80022d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80022de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022e2:	4619      	mov	r1, r3
 80022e4:	4822      	ldr	r0, [pc, #136]	; (8002370 <MX_GPIO_Init+0x2d8>)
 80022e6:	f003 fd9b 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80022ea:	f248 0304 	movw	r3, #32772	; 0x8004
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f0:	2300      	movs	r3, #0
 80022f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80022f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022fc:	4619      	mov	r1, r3
 80022fe:	481f      	ldr	r0, [pc, #124]	; (800237c <MX_GPIO_Init+0x2e4>)
 8002300:	f003 fd8e 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800230a:	2301      	movs	r3, #1
 800230c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002312:	2300      	movs	r3, #0
 8002314:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002316:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800231a:	4619      	mov	r1, r3
 800231c:	4817      	ldr	r0, [pc, #92]	; (800237c <MX_GPIO_Init+0x2e4>)
 800231e:	f003 fd7f 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002322:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002328:	4b19      	ldr	r3, [pc, #100]	; (8002390 <MX_GPIO_Init+0x2f8>)
 800232a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002330:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002334:	4619      	mov	r1, r3
 8002336:	480f      	ldr	r0, [pc, #60]	; (8002374 <MX_GPIO_Init+0x2dc>)
 8002338:	f003 fd72 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800233c:	2310      	movs	r3, #16
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002340:	2302      	movs	r3, #2
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002348:	2303      	movs	r3, #3
 800234a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800234c:	230a      	movs	r3, #10
 800234e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002350:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002354:	4619      	mov	r1, r3
 8002356:	4809      	ldr	r0, [pc, #36]	; (800237c <MX_GPIO_Init+0x2e4>)
 8002358:	f003 fd62 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800235c:	23c8      	movs	r3, #200	; 0xc8
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002360:	2301      	movs	r3, #1
 8002362:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	637b      	str	r3, [r7, #52]	; 0x34
 8002368:	e016      	b.n	8002398 <MX_GPIO_Init+0x300>
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800
 8002370:	40020c00 	.word	0x40020c00
 8002374:	40022000 	.word	0x40022000
 8002378:	40022800 	.word	0x40022800
 800237c:	40021c00 	.word	0x40021c00
 8002380:	40021800 	.word	0x40021800
 8002384:	40021000 	.word	0x40021000
 8002388:	40020400 	.word	0x40020400
 800238c:	40022400 	.word	0x40022400
 8002390:	10120000 	.word	0x10120000
 8002394:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002398:	2300      	movs	r3, #0
 800239a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800239c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023a0:	4619      	mov	r1, r3
 80023a2:	4819      	ldr	r0, [pc, #100]	; (8002408 <MX_GPIO_Init+0x370>)
 80023a4:	f003 fd3c 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80023a8:	2305      	movs	r3, #5
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ac:	2302      	movs	r3, #2
 80023ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b4:	2303      	movs	r3, #3
 80023b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80023b8:	230a      	movs	r3, #10
 80023ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023c0:	4619      	mov	r1, r3
 80023c2:	4812      	ldr	r0, [pc, #72]	; (800240c <MX_GPIO_Init+0x374>)
 80023c4:	f003 fd2c 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80023c8:	2304      	movs	r3, #4
 80023ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023cc:	2300      	movs	r3, #0
 80023ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80023d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023d8:	4619      	mov	r1, r3
 80023da:	480b      	ldr	r0, [pc, #44]	; (8002408 <MX_GPIO_Init+0x370>)
 80023dc:	f003 fd20 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80023e0:	2328      	movs	r3, #40	; 0x28
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ec:	2303      	movs	r3, #3
 80023ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80023f0:	230a      	movs	r3, #10
 80023f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023f8:	4619      	mov	r1, r3
 80023fa:	4805      	ldr	r0, [pc, #20]	; (8002410 <MX_GPIO_Init+0x378>)
 80023fc:	f003 fd10 	bl	8005e20 <HAL_GPIO_Init>

}
 8002400:	bf00      	nop
 8002402:	3740      	adds	r7, #64	; 0x40
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40021800 	.word	0x40021800
 800240c:	40020800 	.word	0x40020800
 8002410:	40020000 	.word	0x40020000

08002414 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800241c:	f001 fa5e 	bl	80038dc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  MX_LWIP_Init();
 8002420:	f7fe fd9e 	bl	8000f60 <MX_LWIP_Init>
  http_server_netconn_init();
 8002424:	f7fe fd88 	bl	8000f38 <http_server_netconn_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002428:	2001      	movs	r0, #1
 800242a:	f00c fd4d 	bl	800eec8 <osDelay>
 800242e:	e7fb      	b.n	8002428 <StartDefaultTask+0x14>

08002430 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a04      	ldr	r2, [pc, #16]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d101      	bne.n	8002446 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002442:	f001 fd65 	bl	8003f10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40001000 	.word	0x40001000

08002454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b084      	sub	sp, #16
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800246a:	f00c fcd1 	bl	800ee10 <osKernelSysTick>
 800246e:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8002470:	e006      	b.n	8002480 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8002472:	f7fe f929 	bl	80006c8 <BSP_SD_GetCardState>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800247c:	2300      	movs	r3, #0
 800247e:	e009      	b.n	8002494 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8002480:	f00c fcc6 	bl	800ee10 <osKernelSysTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	429a      	cmp	r2, r3
 800248e:	d8f0      	bhi.n	8002472 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8002490:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80024a6:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <SD_CheckStatus+0x38>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80024ac:	f7fe f90c 	bl	80006c8 <BSP_SD_GetCardState>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d107      	bne.n	80024c6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80024b6:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <SD_CheckStatus+0x38>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	f023 0301 	bic.w	r3, r3, #1
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <SD_CheckStatus+0x38>)
 80024c4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80024c6:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <SD_CheckStatus+0x38>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	b2db      	uxtb	r3, r3
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20000000 	.word	0x20000000

080024d8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 80024e2:	4b20      	ldr	r3, [pc, #128]	; (8002564 <SD_initialize+0x8c>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 80024e8:	f00c fc86 	bl	800edf8 <osKernelRunning>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d030      	beq.n	8002554 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80024f2:	f7fe f88f 	bl	8000614 <BSP_SD_Init>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d107      	bne.n	800250c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff ffcc 	bl	800249c <SD_CheckStatus>
 8002504:	4603      	mov	r3, r0
 8002506:	461a      	mov	r2, r3
 8002508:	4b16      	ldr	r3, [pc, #88]	; (8002564 <SD_initialize+0x8c>)
 800250a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800250c:	4b15      	ldr	r3, [pc, #84]	; (8002564 <SD_initialize+0x8c>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b01      	cmp	r3, #1
 8002514:	d01e      	beq.n	8002554 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8002516:	4b14      	ldr	r3, [pc, #80]	; (8002568 <SD_initialize+0x90>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10e      	bne.n	800253c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800251e:	4b13      	ldr	r3, [pc, #76]	; (800256c <SD_initialize+0x94>)
 8002520:	f107 0408 	add.w	r4, r7, #8
 8002524:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002526:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800252a:	f107 0308 	add.w	r3, r7, #8
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f00c fe50 	bl	800f1d6 <osMessageCreate>
 8002536:	4602      	mov	r2, r0
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <SD_initialize+0x90>)
 800253a:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800253c:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <SD_initialize+0x90>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d107      	bne.n	8002554 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8002544:	4b07      	ldr	r3, [pc, #28]	; (8002564 <SD_initialize+0x8c>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	b2da      	uxtb	r2, r3
 8002550:	4b04      	ldr	r3, [pc, #16]	; (8002564 <SD_initialize+0x8c>)
 8002552:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <SD_initialize+0x8c>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	b2db      	uxtb	r3, r3
}
 800255a:	4618      	mov	r0, r3
 800255c:	371c      	adds	r7, #28
 800255e:	46bd      	mov	sp, r7
 8002560:	bd90      	pop	{r4, r7, pc}
 8002562:	bf00      	nop
 8002564:	20000000 	.word	0x20000000
 8002568:	20000320 	.word	0x20000320
 800256c:	08024dc8 	.word	0x08024dc8

08002570 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff8d 	bl	800249c <SD_CheckStatus>
 8002582:	4603      	mov	r3, r0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08a      	sub	sp, #40	; 0x28
 8002590:	af00      	add	r7, sp, #0
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	603b      	str	r3, [r7, #0]
 8002598:	4603      	mov	r3, r0
 800259a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80025a2:	f247 5030 	movw	r0, #30000	; 0x7530
 80025a6:	f7ff ff5c 	bl	8002462 <SD_CheckStatusWithTimeout>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	da02      	bge.n	80025b6 <SD_read+0x2a>
  {
    return res;
 80025b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025b4:	e032      	b.n	800261c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	68b8      	ldr	r0, [r7, #8]
 80025bc:	f7fe f850 	bl	8000660 <BSP_SD_ReadBlocks_DMA>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 80025c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d124      	bne.n	8002618 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80025ce:	4b15      	ldr	r3, [pc, #84]	; (8002624 <SD_read+0x98>)
 80025d0:	6819      	ldr	r1, [r3, #0]
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	f247 5230 	movw	r2, #30000	; 0x7530
 80025da:	4618      	mov	r0, r3
 80025dc:	f00c fe64 	bl	800f2a8 <osMessageGet>

    if (event.status == osEventMessage)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2b10      	cmp	r3, #16
 80025e4:	d118      	bne.n	8002618 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d115      	bne.n	8002618 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 80025ec:	f00c fc10 	bl	800ee10 <osKernelSysTick>
 80025f0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80025f2:	e008      	b.n	8002606 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80025f4:	f7fe f868 	bl	80006c8 <BSP_SD_GetCardState>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d103      	bne.n	8002606 <SD_read+0x7a>
              {
                res = RES_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8002604:	e008      	b.n	8002618 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8002606:	f00c fc03 	bl	800ee10 <osKernelSysTick>
 800260a:	4602      	mov	r2, r0
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	f247 522f 	movw	r2, #29999	; 0x752f
 8002614:	4293      	cmp	r3, r2
 8002616:	d9ed      	bls.n	80025f4 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8002618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800261c:	4618      	mov	r0, r3
 800261e:	3728      	adds	r7, #40	; 0x28
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000320 	.word	0x20000320

08002628 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08a      	sub	sp, #40	; 0x28
 800262c:	af00      	add	r7, sp, #0
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	4603      	mov	r3, r0
 8002636:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800263e:	f247 5030 	movw	r0, #30000	; 0x7530
 8002642:	f7ff ff0e 	bl	8002462 <SD_CheckStatusWithTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	da02      	bge.n	8002652 <SD_write+0x2a>
  {
    return res;
 800264c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002650:	e02e      	b.n	80026b0 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	68b8      	ldr	r0, [r7, #8]
 8002658:	f7fe f81c 	bl	8000694 <BSP_SD_WriteBlocks_DMA>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d124      	bne.n	80026ac <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8002662:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <SD_write+0x90>)
 8002664:	6819      	ldr	r1, [r3, #0]
 8002666:	f107 0314 	add.w	r3, r7, #20
 800266a:	f247 5230 	movw	r2, #30000	; 0x7530
 800266e:	4618      	mov	r0, r3
 8002670:	f00c fe1a 	bl	800f2a8 <osMessageGet>

    if (event.status == osEventMessage)
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2b10      	cmp	r3, #16
 8002678:	d118      	bne.n	80026ac <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	2b02      	cmp	r3, #2
 800267e:	d115      	bne.n	80026ac <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8002680:	f00c fbc6 	bl	800ee10 <osKernelSysTick>
 8002684:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8002686:	e008      	b.n	800269a <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8002688:	f7fe f81e 	bl	80006c8 <BSP_SD_GetCardState>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d103      	bne.n	800269a <SD_write+0x72>
          {
            res = RES_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8002698:	e008      	b.n	80026ac <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800269a:	f00c fbb9 	bl	800ee10 <osKernelSysTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	f247 522f 	movw	r2, #29999	; 0x752f
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d9ed      	bls.n	8002688 <SD_write+0x60>
    }

  }
#endif

  return res;
 80026ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3728      	adds	r7, #40	; 0x28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000320 	.word	0x20000320

080026bc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08c      	sub	sp, #48	; 0x30
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	603a      	str	r2, [r7, #0]
 80026c6:	71fb      	strb	r3, [r7, #7]
 80026c8:	460b      	mov	r3, r1
 80026ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80026d2:	4b25      	ldr	r3, [pc, #148]	; (8002768 <SD_ioctl+0xac>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <SD_ioctl+0x28>
 80026e0:	2303      	movs	r3, #3
 80026e2:	e03c      	b.n	800275e <SD_ioctl+0xa2>

  switch (cmd)
 80026e4:	79bb      	ldrb	r3, [r7, #6]
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d834      	bhi.n	8002754 <SD_ioctl+0x98>
 80026ea:	a201      	add	r2, pc, #4	; (adr r2, 80026f0 <SD_ioctl+0x34>)
 80026ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f0:	08002701 	.word	0x08002701
 80026f4:	08002709 	.word	0x08002709
 80026f8:	08002721 	.word	0x08002721
 80026fc:	0800273b 	.word	0x0800273b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8002706:	e028      	b.n	800275a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8002708:	f107 030c 	add.w	r3, r7, #12
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd ffeb 	bl	80006e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8002712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800271e:	e01c      	b.n	800275a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8002720:	f107 030c 	add.w	r3, r7, #12
 8002724:	4618      	mov	r0, r3
 8002726:	f7fd ffdf 	bl	80006e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272c:	b29a      	uxth	r2, r3
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8002738:	e00f      	b.n	800275a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800273a:	f107 030c 	add.w	r3, r7, #12
 800273e:	4618      	mov	r0, r3
 8002740:	f7fd ffd2 	bl	80006e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8002744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002746:	0a5a      	lsrs	r2, r3, #9
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800274c:	2300      	movs	r3, #0
 800274e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8002752:	e002      	b.n	800275a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8002754:	2304      	movs	r3, #4
 8002756:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800275a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800275e:	4618      	mov	r0, r3
 8002760:	3730      	adds	r7, #48	; 0x30
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000000 	.word	0x20000000

0800276c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <BSP_SD_ReadCpltCallback+0x18>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2200      	movs	r2, #0
 8002776:	2101      	movs	r1, #1
 8002778:	4618      	mov	r0, r3
 800277a:	f00c fd55 	bl	800f228 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000320 	.word	0x20000320

08002788 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <HAL_MspInit+0x4c>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	4a10      	ldr	r2, [pc, #64]	; (80027d4 <HAL_MspInit+0x4c>)
 8002794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002798:	6413      	str	r3, [r2, #64]	; 0x40
 800279a:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <HAL_MspInit+0x4c>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	607b      	str	r3, [r7, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a6:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <HAL_MspInit+0x4c>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <HAL_MspInit+0x4c>)
 80027ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b0:	6453      	str	r3, [r2, #68]	; 0x44
 80027b2:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <HAL_MspInit+0x4c>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ba:	603b      	str	r3, [r7, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027be:	2200      	movs	r2, #0
 80027c0:	210f      	movs	r1, #15
 80027c2:	f06f 0001 	mvn.w	r0, #1
 80027c6:	f001 ff25 	bl	8004614 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023800 	.word	0x40023800

080027d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	; 0x28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a21      	ldr	r2, [pc, #132]	; (800287c <HAL_ADC_MspInit+0xa4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d13c      	bne.n	8002874 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80027fa:	4b21      	ldr	r3, [pc, #132]	; (8002880 <HAL_ADC_MspInit+0xa8>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	4a20      	ldr	r2, [pc, #128]	; (8002880 <HAL_ADC_MspInit+0xa8>)
 8002800:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002804:	6453      	str	r3, [r2, #68]	; 0x44
 8002806:	4b1e      	ldr	r3, [pc, #120]	; (8002880 <HAL_ADC_MspInit+0xa8>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002812:	4b1b      	ldr	r3, [pc, #108]	; (8002880 <HAL_ADC_MspInit+0xa8>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a1a      	ldr	r2, [pc, #104]	; (8002880 <HAL_ADC_MspInit+0xa8>)
 8002818:	f043 0320 	orr.w	r3, r3, #32
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b18      	ldr	r3, [pc, #96]	; (8002880 <HAL_ADC_MspInit+0xa8>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0320 	and.w	r3, r3, #32
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282a:	4b15      	ldr	r3, [pc, #84]	; (8002880 <HAL_ADC_MspInit+0xa8>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	4a14      	ldr	r2, [pc, #80]	; (8002880 <HAL_ADC_MspInit+0xa8>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6313      	str	r3, [r2, #48]	; 0x30
 8002836:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_ADC_MspInit+0xa8>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8002842:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002846:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002848:	2303      	movs	r3, #3
 800284a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	4619      	mov	r1, r3
 8002856:	480b      	ldr	r0, [pc, #44]	; (8002884 <HAL_ADC_MspInit+0xac>)
 8002858:	f003 fae2 	bl	8005e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800285c:	2301      	movs	r3, #1
 800285e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002860:	2303      	movs	r3, #3
 8002862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	4619      	mov	r1, r3
 800286e:	4806      	ldr	r0, [pc, #24]	; (8002888 <HAL_ADC_MspInit+0xb0>)
 8002870:	f003 fad6 	bl	8005e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002874:	bf00      	nop
 8002876:	3728      	adds	r7, #40	; 0x28
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40012200 	.word	0x40012200
 8002880:	40023800 	.word	0x40023800
 8002884:	40021400 	.word	0x40021400
 8002888:	40020000 	.word	0x40020000

0800288c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <HAL_CRC_MspInit+0x38>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d10b      	bne.n	80028b6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800289e:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <HAL_CRC_MspInit+0x3c>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	4a09      	ldr	r2, [pc, #36]	; (80028c8 <HAL_CRC_MspInit+0x3c>)
 80028a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028a8:	6313      	str	r3, [r2, #48]	; 0x30
 80028aa:	4b07      	ldr	r3, [pc, #28]	; (80028c8 <HAL_CRC_MspInit+0x3c>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80028b6:	bf00      	nop
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40023000 	.word	0x40023000
 80028c8:	40023800 	.word	0x40023800

080028cc <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08e      	sub	sp, #56	; 0x38
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a50      	ldr	r2, [pc, #320]	; (8002a2c <HAL_DCMI_MspInit+0x160>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	f040 809a 	bne.w	8002a24 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80028f0:	4b4f      	ldr	r3, [pc, #316]	; (8002a30 <HAL_DCMI_MspInit+0x164>)
 80028f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f4:	4a4e      	ldr	r2, [pc, #312]	; (8002a30 <HAL_DCMI_MspInit+0x164>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	6353      	str	r3, [r2, #52]	; 0x34
 80028fc:	4b4c      	ldr	r3, [pc, #304]	; (8002a30 <HAL_DCMI_MspInit+0x164>)
 80028fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	623b      	str	r3, [r7, #32]
 8002906:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002908:	4b49      	ldr	r3, [pc, #292]	; (8002a30 <HAL_DCMI_MspInit+0x164>)
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	4a48      	ldr	r2, [pc, #288]	; (8002a30 <HAL_DCMI_MspInit+0x164>)
 800290e:	f043 0310 	orr.w	r3, r3, #16
 8002912:	6313      	str	r3, [r2, #48]	; 0x30
 8002914:	4b46      	ldr	r3, [pc, #280]	; (8002a30 <HAL_DCMI_MspInit+0x164>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002920:	4b43      	ldr	r3, [pc, #268]	; (8002a30 <HAL_DCMI_MspInit+0x164>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	4a42      	ldr	r2, [pc, #264]	; (8002a30 <HAL_DCMI_MspInit+0x164>)
 8002926:	f043 0308 	orr.w	r3, r3, #8
 800292a:	6313      	str	r3, [r2, #48]	; 0x30
 800292c:	4b40      	ldr	r3, [pc, #256]	; (8002a30 <HAL_DCMI_MspInit+0x164>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002938:	4b3d      	ldr	r3, [pc, #244]	; (8002a30 <HAL_DCMI_MspInit+0x164>)
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	4a3c      	ldr	r2, [pc, #240]	; (8002a30 <HAL_DCMI_MspInit+0x164>)
 800293e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002942:	6313      	str	r3, [r2, #48]	; 0x30
 8002944:	4b3a      	ldr	r3, [pc, #232]	; (8002a30 <HAL_DCMI_MspInit+0x164>)
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002950:	4b37      	ldr	r3, [pc, #220]	; (8002a30 <HAL_DCMI_MspInit+0x164>)
 8002952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002954:	4a36      	ldr	r2, [pc, #216]	; (8002a30 <HAL_DCMI_MspInit+0x164>)
 8002956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800295a:	6313      	str	r3, [r2, #48]	; 0x30
 800295c:	4b34      	ldr	r3, [pc, #208]	; (8002a30 <HAL_DCMI_MspInit+0x164>)
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002968:	4b31      	ldr	r3, [pc, #196]	; (8002a30 <HAL_DCMI_MspInit+0x164>)
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	4a30      	ldr	r2, [pc, #192]	; (8002a30 <HAL_DCMI_MspInit+0x164>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	6313      	str	r3, [r2, #48]	; 0x30
 8002974:	4b2e      	ldr	r3, [pc, #184]	; (8002a30 <HAL_DCMI_MspInit+0x164>)
 8002976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8002980:	2360      	movs	r3, #96	; 0x60
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002990:	230d      	movs	r3, #13
 8002992:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002998:	4619      	mov	r1, r3
 800299a:	4826      	ldr	r0, [pc, #152]	; (8002a34 <HAL_DCMI_MspInit+0x168>)
 800299c:	f003 fa40 	bl	8005e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80029a0:	2308      	movs	r3, #8
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a4:	2302      	movs	r3, #2
 80029a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	2300      	movs	r3, #0
 80029ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029b0:	230d      	movs	r3, #13
 80029b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80029b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b8:	4619      	mov	r1, r3
 80029ba:	481f      	ldr	r0, [pc, #124]	; (8002a38 <HAL_DCMI_MspInit+0x16c>)
 80029bc:	f003 fa30 	bl	8005e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80029c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c6:	2302      	movs	r3, #2
 80029c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ca:	2300      	movs	r3, #0
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ce:	2300      	movs	r3, #0
 80029d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029d2:	230d      	movs	r3, #13
 80029d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80029d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029da:	4619      	mov	r1, r3
 80029dc:	4817      	ldr	r0, [pc, #92]	; (8002a3c <HAL_DCMI_MspInit+0x170>)
 80029de:	f003 fa1f 	bl	8005e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80029e2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e8:	2302      	movs	r3, #2
 80029ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f0:	2300      	movs	r3, #0
 80029f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029f4:	230d      	movs	r3, #13
 80029f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80029f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029fc:	4619      	mov	r1, r3
 80029fe:	4810      	ldr	r0, [pc, #64]	; (8002a40 <HAL_DCMI_MspInit+0x174>)
 8002a00:	f003 fa0e 	bl	8005e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002a04:	2350      	movs	r3, #80	; 0x50
 8002a06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a10:	2300      	movs	r3, #0
 8002a12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a14:	230d      	movs	r3, #13
 8002a16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4809      	ldr	r0, [pc, #36]	; (8002a44 <HAL_DCMI_MspInit+0x178>)
 8002a20:	f003 f9fe 	bl	8005e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8002a24:	bf00      	nop
 8002a26:	3738      	adds	r7, #56	; 0x38
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	50050000 	.word	0x50050000
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40020c00 	.word	0x40020c00
 8002a3c:	40021800 	.word	0x40021800
 8002a40:	40021c00 	.word	0x40021c00
 8002a44:	40020000 	.word	0x40020000

08002a48 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a0d      	ldr	r2, [pc, #52]	; (8002a8c <HAL_DMA2D_MspInit+0x44>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d113      	bne.n	8002a82 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <HAL_DMA2D_MspInit+0x48>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	4a0c      	ldr	r2, [pc, #48]	; (8002a90 <HAL_DMA2D_MspInit+0x48>)
 8002a60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a64:	6313      	str	r3, [r2, #48]	; 0x30
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <HAL_DMA2D_MspInit+0x48>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002a72:	2200      	movs	r2, #0
 8002a74:	2105      	movs	r1, #5
 8002a76:	205a      	movs	r0, #90	; 0x5a
 8002a78:	f001 fdcc 	bl	8004614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002a7c:	205a      	movs	r0, #90	; 0x5a
 8002a7e:	f001 fde5 	bl	800464c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	4002b000 	.word	0x4002b000
 8002a90:	40023800 	.word	0x40023800

08002a94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08c      	sub	sp, #48	; 0x30
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9c:	f107 031c 	add.w	r3, r7, #28
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a2f      	ldr	r2, [pc, #188]	; (8002b70 <HAL_I2C_MspInit+0xdc>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d129      	bne.n	8002b0a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab6:	4b2f      	ldr	r3, [pc, #188]	; (8002b74 <HAL_I2C_MspInit+0xe0>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a2e      	ldr	r2, [pc, #184]	; (8002b74 <HAL_I2C_MspInit+0xe0>)
 8002abc:	f043 0302 	orr.w	r3, r3, #2
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac2:	4b2c      	ldr	r3, [pc, #176]	; (8002b74 <HAL_I2C_MspInit+0xe0>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	61bb      	str	r3, [r7, #24]
 8002acc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8002ace:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ad4:	2312      	movs	r3, #18
 8002ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002adc:	2300      	movs	r3, #0
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae4:	f107 031c 	add.w	r3, r7, #28
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4823      	ldr	r0, [pc, #140]	; (8002b78 <HAL_I2C_MspInit+0xe4>)
 8002aec:	f003 f998 	bl	8005e20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002af0:	4b20      	ldr	r3, [pc, #128]	; (8002b74 <HAL_I2C_MspInit+0xe0>)
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	4a1f      	ldr	r2, [pc, #124]	; (8002b74 <HAL_I2C_MspInit+0xe0>)
 8002af6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002afa:	6413      	str	r3, [r2, #64]	; 0x40
 8002afc:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <HAL_I2C_MspInit+0xe0>)
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b04:	617b      	str	r3, [r7, #20]
 8002b06:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b08:	e02d      	b.n	8002b66 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a1b      	ldr	r2, [pc, #108]	; (8002b7c <HAL_I2C_MspInit+0xe8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d128      	bne.n	8002b66 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b14:	4b17      	ldr	r3, [pc, #92]	; (8002b74 <HAL_I2C_MspInit+0xe0>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	4a16      	ldr	r2, [pc, #88]	; (8002b74 <HAL_I2C_MspInit+0xe0>)
 8002b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b20:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <HAL_I2C_MspInit+0xe0>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002b2c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b32:	2312      	movs	r3, #18
 8002b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b36:	2301      	movs	r3, #1
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b3e:	2304      	movs	r3, #4
 8002b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002b42:	f107 031c 	add.w	r3, r7, #28
 8002b46:	4619      	mov	r1, r3
 8002b48:	480d      	ldr	r0, [pc, #52]	; (8002b80 <HAL_I2C_MspInit+0xec>)
 8002b4a:	f003 f969 	bl	8005e20 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b4e:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <HAL_I2C_MspInit+0xe0>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	4a08      	ldr	r2, [pc, #32]	; (8002b74 <HAL_I2C_MspInit+0xe0>)
 8002b54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b58:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_I2C_MspInit+0xe0>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
}
 8002b66:	bf00      	nop
 8002b68:	3730      	adds	r7, #48	; 0x30
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40005400 	.word	0x40005400
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40020400 	.word	0x40020400
 8002b7c:	40005c00 	.word	0x40005c00
 8002b80:	40021c00 	.word	0x40021c00

08002b84 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08e      	sub	sp, #56	; 0x38
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a55      	ldr	r2, [pc, #340]	; (8002cf8 <HAL_LTDC_MspInit+0x174>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	f040 80a3 	bne.w	8002cee <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002ba8:	4b54      	ldr	r3, [pc, #336]	; (8002cfc <HAL_LTDC_MspInit+0x178>)
 8002baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bac:	4a53      	ldr	r2, [pc, #332]	; (8002cfc <HAL_LTDC_MspInit+0x178>)
 8002bae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002bb2:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb4:	4b51      	ldr	r3, [pc, #324]	; (8002cfc <HAL_LTDC_MspInit+0x178>)
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bbc:	623b      	str	r3, [r7, #32]
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bc0:	4b4e      	ldr	r3, [pc, #312]	; (8002cfc <HAL_LTDC_MspInit+0x178>)
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	4a4d      	ldr	r2, [pc, #308]	; (8002cfc <HAL_LTDC_MspInit+0x178>)
 8002bc6:	f043 0310 	orr.w	r3, r3, #16
 8002bca:	6313      	str	r3, [r2, #48]	; 0x30
 8002bcc:	4b4b      	ldr	r3, [pc, #300]	; (8002cfc <HAL_LTDC_MspInit+0x178>)
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002bd8:	4b48      	ldr	r3, [pc, #288]	; (8002cfc <HAL_LTDC_MspInit+0x178>)
 8002bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bdc:	4a47      	ldr	r2, [pc, #284]	; (8002cfc <HAL_LTDC_MspInit+0x178>)
 8002bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002be2:	6313      	str	r3, [r2, #48]	; 0x30
 8002be4:	4b45      	ldr	r3, [pc, #276]	; (8002cfc <HAL_LTDC_MspInit+0x178>)
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bec:	61bb      	str	r3, [r7, #24]
 8002bee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002bf0:	4b42      	ldr	r3, [pc, #264]	; (8002cfc <HAL_LTDC_MspInit+0x178>)
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	4a41      	ldr	r2, [pc, #260]	; (8002cfc <HAL_LTDC_MspInit+0x178>)
 8002bf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfc:	4b3f      	ldr	r3, [pc, #252]	; (8002cfc <HAL_LTDC_MspInit+0x178>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c08:	4b3c      	ldr	r3, [pc, #240]	; (8002cfc <HAL_LTDC_MspInit+0x178>)
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	4a3b      	ldr	r2, [pc, #236]	; (8002cfc <HAL_LTDC_MspInit+0x178>)
 8002c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c12:	6313      	str	r3, [r2, #48]	; 0x30
 8002c14:	4b39      	ldr	r3, [pc, #228]	; (8002cfc <HAL_LTDC_MspInit+0x178>)
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002c20:	4b36      	ldr	r3, [pc, #216]	; (8002cfc <HAL_LTDC_MspInit+0x178>)
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	4a35      	ldr	r2, [pc, #212]	; (8002cfc <HAL_LTDC_MspInit+0x178>)
 8002c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2c:	4b33      	ldr	r3, [pc, #204]	; (8002cfc <HAL_LTDC_MspInit+0x178>)
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002c38:	2310      	movs	r3, #16
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c44:	2300      	movs	r3, #0
 8002c46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c48:	230e      	movs	r3, #14
 8002c4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8002c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c50:	4619      	mov	r1, r3
 8002c52:	482b      	ldr	r0, [pc, #172]	; (8002d00 <HAL_LTDC_MspInit+0x17c>)
 8002c54:	f003 f8e4 	bl	8005e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8002c58:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c66:	2300      	movs	r3, #0
 8002c68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c6a:	230e      	movs	r3, #14
 8002c6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8002c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c72:	4619      	mov	r1, r3
 8002c74:	4823      	ldr	r0, [pc, #140]	; (8002d04 <HAL_LTDC_MspInit+0x180>)
 8002c76:	f003 f8d3 	bl	8005e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8002c7a:	23f7      	movs	r3, #247	; 0xf7
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c86:	2300      	movs	r3, #0
 8002c88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c8a:	230e      	movs	r3, #14
 8002c8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c92:	4619      	mov	r1, r3
 8002c94:	481c      	ldr	r0, [pc, #112]	; (8002d08 <HAL_LTDC_MspInit+0x184>)
 8002c96:	f003 f8c3 	bl	8005e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8002c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002cac:	2309      	movs	r3, #9
 8002cae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4815      	ldr	r0, [pc, #84]	; (8002d0c <HAL_LTDC_MspInit+0x188>)
 8002cb8:	f003 f8b2 	bl	8005e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8002cbc:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002cce:	230e      	movs	r3, #14
 8002cd0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	480d      	ldr	r0, [pc, #52]	; (8002d10 <HAL_LTDC_MspInit+0x18c>)
 8002cda:	f003 f8a1 	bl	8005e20 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2105      	movs	r1, #5
 8002ce2:	2058      	movs	r0, #88	; 0x58
 8002ce4:	f001 fc96 	bl	8004614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002ce8:	2058      	movs	r0, #88	; 0x58
 8002cea:	f001 fcaf 	bl	800464c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002cee:	bf00      	nop
 8002cf0:	3738      	adds	r7, #56	; 0x38
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40016800 	.word	0x40016800
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40022400 	.word	0x40022400
 8002d08:	40022800 	.word	0x40022800
 8002d0c:	40021800 	.word	0x40021800
 8002d10:	40022000 	.word	0x40022000

08002d14 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08c      	sub	sp, #48	; 0x30
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d1c:	f107 031c 	add.w	r3, r7, #28
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a3b      	ldr	r2, [pc, #236]	; (8002e20 <HAL_QSPI_MspInit+0x10c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d170      	bne.n	8002e18 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002d36:	4b3b      	ldr	r3, [pc, #236]	; (8002e24 <HAL_QSPI_MspInit+0x110>)
 8002d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3a:	4a3a      	ldr	r2, [pc, #232]	; (8002e24 <HAL_QSPI_MspInit+0x110>)
 8002d3c:	f043 0302 	orr.w	r3, r3, #2
 8002d40:	6393      	str	r3, [r2, #56]	; 0x38
 8002d42:	4b38      	ldr	r3, [pc, #224]	; (8002e24 <HAL_QSPI_MspInit+0x110>)
 8002d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	61bb      	str	r3, [r7, #24]
 8002d4c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d4e:	4b35      	ldr	r3, [pc, #212]	; (8002e24 <HAL_QSPI_MspInit+0x110>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	4a34      	ldr	r2, [pc, #208]	; (8002e24 <HAL_QSPI_MspInit+0x110>)
 8002d54:	f043 0310 	orr.w	r3, r3, #16
 8002d58:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5a:	4b32      	ldr	r3, [pc, #200]	; (8002e24 <HAL_QSPI_MspInit+0x110>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f003 0310 	and.w	r3, r3, #16
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d66:	4b2f      	ldr	r3, [pc, #188]	; (8002e24 <HAL_QSPI_MspInit+0x110>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	4a2e      	ldr	r2, [pc, #184]	; (8002e24 <HAL_QSPI_MspInit+0x110>)
 8002d6c:	f043 0302 	orr.w	r3, r3, #2
 8002d70:	6313      	str	r3, [r2, #48]	; 0x30
 8002d72:	4b2c      	ldr	r3, [pc, #176]	; (8002e24 <HAL_QSPI_MspInit+0x110>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d7e:	4b29      	ldr	r3, [pc, #164]	; (8002e24 <HAL_QSPI_MspInit+0x110>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	4a28      	ldr	r2, [pc, #160]	; (8002e24 <HAL_QSPI_MspInit+0x110>)
 8002d84:	f043 0308 	orr.w	r3, r3, #8
 8002d88:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8a:	4b26      	ldr	r3, [pc, #152]	; (8002e24 <HAL_QSPI_MspInit+0x110>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002d96:	2304      	movs	r3, #4
 8002d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da2:	2303      	movs	r3, #3
 8002da4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002da6:	2309      	movs	r3, #9
 8002da8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8002daa:	f107 031c 	add.w	r3, r7, #28
 8002dae:	4619      	mov	r1, r3
 8002db0:	481d      	ldr	r0, [pc, #116]	; (8002e28 <HAL_QSPI_MspInit+0x114>)
 8002db2:	f003 f835 	bl	8005e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8002db6:	2340      	movs	r3, #64	; 0x40
 8002db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002dc6:	230a      	movs	r3, #10
 8002dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8002dca:	f107 031c 	add.w	r3, r7, #28
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4816      	ldr	r0, [pc, #88]	; (8002e2c <HAL_QSPI_MspInit+0x118>)
 8002dd2:	f003 f825 	bl	8005e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002dd6:	2304      	movs	r3, #4
 8002dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dde:	2300      	movs	r3, #0
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de2:	2303      	movs	r3, #3
 8002de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002de6:	2309      	movs	r3, #9
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dea:	f107 031c 	add.w	r3, r7, #28
 8002dee:	4619      	mov	r1, r3
 8002df0:	480e      	ldr	r0, [pc, #56]	; (8002e2c <HAL_QSPI_MspInit+0x118>)
 8002df2:	f003 f815 	bl	8005e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002df6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e04:	2303      	movs	r3, #3
 8002e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002e08:	2309      	movs	r3, #9
 8002e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e0c:	f107 031c 	add.w	r3, r7, #28
 8002e10:	4619      	mov	r1, r3
 8002e12:	4807      	ldr	r0, [pc, #28]	; (8002e30 <HAL_QSPI_MspInit+0x11c>)
 8002e14:	f003 f804 	bl	8005e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002e18:	bf00      	nop
 8002e1a:	3730      	adds	r7, #48	; 0x30
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	a0001000 	.word	0xa0001000
 8002e24:	40023800 	.word	0x40023800
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	40020400 	.word	0x40020400
 8002e30:	40020c00 	.word	0x40020c00

08002e34 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a07      	ldr	r2, [pc, #28]	; (8002e60 <HAL_RTC_MspInit+0x2c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d105      	bne.n	8002e52 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e46:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <HAL_RTC_MspInit+0x30>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4a:	4a06      	ldr	r2, [pc, #24]	; (8002e64 <HAL_RTC_MspInit+0x30>)
 8002e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e50:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40002800 	.word	0x40002800
 8002e64:	40023800 	.word	0x40023800

08002e68 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08a      	sub	sp, #40	; 0x28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e70:	f107 0314 	add.w	r3, r7, #20
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a25      	ldr	r2, [pc, #148]	; (8002f1c <HAL_SD_MspInit+0xb4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d144      	bne.n	8002f14 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002e8a:	4b25      	ldr	r3, [pc, #148]	; (8002f20 <HAL_SD_MspInit+0xb8>)
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	4a24      	ldr	r2, [pc, #144]	; (8002f20 <HAL_SD_MspInit+0xb8>)
 8002e90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e94:	6453      	str	r3, [r2, #68]	; 0x44
 8002e96:	4b22      	ldr	r3, [pc, #136]	; (8002f20 <HAL_SD_MspInit+0xb8>)
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ea2:	4b1f      	ldr	r3, [pc, #124]	; (8002f20 <HAL_SD_MspInit+0xb8>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	4a1e      	ldr	r2, [pc, #120]	; (8002f20 <HAL_SD_MspInit+0xb8>)
 8002ea8:	f043 0304 	orr.w	r3, r3, #4
 8002eac:	6313      	str	r3, [r2, #48]	; 0x30
 8002eae:	4b1c      	ldr	r3, [pc, #112]	; (8002f20 <HAL_SD_MspInit+0xb8>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eba:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <HAL_SD_MspInit+0xb8>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	4a18      	ldr	r2, [pc, #96]	; (8002f20 <HAL_SD_MspInit+0xb8>)
 8002ec0:	f043 0308 	orr.w	r3, r3, #8
 8002ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec6:	4b16      	ldr	r3, [pc, #88]	; (8002f20 <HAL_SD_MspInit+0xb8>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8002ed2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002ed6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002edc:	2300      	movs	r3, #0
 8002ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002ee4:	230c      	movs	r3, #12
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ee8:	f107 0314 	add.w	r3, r7, #20
 8002eec:	4619      	mov	r1, r3
 8002eee:	480d      	ldr	r0, [pc, #52]	; (8002f24 <HAL_SD_MspInit+0xbc>)
 8002ef0:	f002 ff96 	bl	8005e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f00:	2303      	movs	r3, #3
 8002f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002f04:	230c      	movs	r3, #12
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002f08:	f107 0314 	add.w	r3, r7, #20
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4806      	ldr	r0, [pc, #24]	; (8002f28 <HAL_SD_MspInit+0xc0>)
 8002f10:	f002 ff86 	bl	8005e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002f14:	bf00      	nop
 8002f16:	3728      	adds	r7, #40	; 0x28
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40012c00 	.word	0x40012c00
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40020800 	.word	0x40020800
 8002f28:	40020c00 	.word	0x40020c00

08002f2c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08a      	sub	sp, #40	; 0x28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f34:	f107 0314 	add.w	r3, r7, #20
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8002f4c:	d127      	bne.n	8002f9e <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8002f4e:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	4a15      	ldr	r2, [pc, #84]	; (8002fa8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f58:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5a:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f62:	613b      	str	r3, [r7, #16]
 8002f64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f66:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	4a0f      	ldr	r2, [pc, #60]	; (8002fa8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002f6c:	f043 0308 	orr.w	r3, r3, #8
 8002f70:	6313      	str	r3, [r2, #48]	; 0x30
 8002f72:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <HAL_SPDIFRX_MspInit+0x7c>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f82:	2302      	movs	r3, #2
 8002f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8002f8e:	2308      	movs	r3, #8
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002f92:	f107 0314 	add.w	r3, r7, #20
 8002f96:	4619      	mov	r1, r3
 8002f98:	4804      	ldr	r0, [pc, #16]	; (8002fac <HAL_SPDIFRX_MspInit+0x80>)
 8002f9a:	f002 ff41 	bl	8005e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8002f9e:	bf00      	nop
 8002fa0:	3728      	adds	r7, #40	; 0x28
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40020c00 	.word	0x40020c00

08002fb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08a      	sub	sp, #40	; 0x28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb8:	f107 0314 	add.w	r3, r7, #20
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a25      	ldr	r2, [pc, #148]	; (8003064 <HAL_SPI_MspInit+0xb4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d144      	bne.n	800305c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002fd2:	4b25      	ldr	r3, [pc, #148]	; (8003068 <HAL_SPI_MspInit+0xb8>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	4a24      	ldr	r2, [pc, #144]	; (8003068 <HAL_SPI_MspInit+0xb8>)
 8002fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fde:	4b22      	ldr	r3, [pc, #136]	; (8003068 <HAL_SPI_MspInit+0xb8>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002fea:	4b1f      	ldr	r3, [pc, #124]	; (8003068 <HAL_SPI_MspInit+0xb8>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	4a1e      	ldr	r2, [pc, #120]	; (8003068 <HAL_SPI_MspInit+0xb8>)
 8002ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff6:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <HAL_SPI_MspInit+0xb8>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003002:	4b19      	ldr	r3, [pc, #100]	; (8003068 <HAL_SPI_MspInit+0xb8>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	4a18      	ldr	r2, [pc, #96]	; (8003068 <HAL_SPI_MspInit+0xb8>)
 8003008:	f043 0302 	orr.w	r3, r3, #2
 800300c:	6313      	str	r3, [r2, #48]	; 0x30
 800300e:	4b16      	ldr	r3, [pc, #88]	; (8003068 <HAL_SPI_MspInit+0xb8>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800301a:	2302      	movs	r3, #2
 800301c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301e:	2302      	movs	r3, #2
 8003020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003026:	2300      	movs	r3, #0
 8003028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800302a:	2305      	movs	r3, #5
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800302e:	f107 0314 	add.w	r3, r7, #20
 8003032:	4619      	mov	r1, r3
 8003034:	480d      	ldr	r0, [pc, #52]	; (800306c <HAL_SPI_MspInit+0xbc>)
 8003036:	f002 fef3 	bl	8005e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800303a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800303e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003040:	2302      	movs	r3, #2
 8003042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003044:	2300      	movs	r3, #0
 8003046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003048:	2300      	movs	r3, #0
 800304a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800304c:	2305      	movs	r3, #5
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003050:	f107 0314 	add.w	r3, r7, #20
 8003054:	4619      	mov	r1, r3
 8003056:	4806      	ldr	r0, [pc, #24]	; (8003070 <HAL_SPI_MspInit+0xc0>)
 8003058:	f002 fee2 	bl	8005e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800305c:	bf00      	nop
 800305e:	3728      	adds	r7, #40	; 0x28
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40003800 	.word	0x40003800
 8003068:	40023800 	.word	0x40023800
 800306c:	40022000 	.word	0x40022000
 8003070:	40020400 	.word	0x40020400

08003074 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003074:	b480      	push	{r7}
 8003076:	b089      	sub	sp, #36	; 0x24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a2e      	ldr	r2, [pc, #184]	; (800313c <HAL_TIM_Base_MspInit+0xc8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d10c      	bne.n	80030a0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003086:	4b2e      	ldr	r3, [pc, #184]	; (8003140 <HAL_TIM_Base_MspInit+0xcc>)
 8003088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308a:	4a2d      	ldr	r2, [pc, #180]	; (8003140 <HAL_TIM_Base_MspInit+0xcc>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	6453      	str	r3, [r2, #68]	; 0x44
 8003092:	4b2b      	ldr	r3, [pc, #172]	; (8003140 <HAL_TIM_Base_MspInit+0xcc>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	61fb      	str	r3, [r7, #28]
 800309c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800309e:	e046      	b.n	800312e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a8:	d10c      	bne.n	80030c4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030aa:	4b25      	ldr	r3, [pc, #148]	; (8003140 <HAL_TIM_Base_MspInit+0xcc>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	4a24      	ldr	r2, [pc, #144]	; (8003140 <HAL_TIM_Base_MspInit+0xcc>)
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	6413      	str	r3, [r2, #64]	; 0x40
 80030b6:	4b22      	ldr	r3, [pc, #136]	; (8003140 <HAL_TIM_Base_MspInit+0xcc>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	61bb      	str	r3, [r7, #24]
 80030c0:	69bb      	ldr	r3, [r7, #24]
}
 80030c2:	e034      	b.n	800312e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1e      	ldr	r2, [pc, #120]	; (8003144 <HAL_TIM_Base_MspInit+0xd0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d10c      	bne.n	80030e8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030ce:	4b1c      	ldr	r3, [pc, #112]	; (8003140 <HAL_TIM_Base_MspInit+0xcc>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	4a1b      	ldr	r2, [pc, #108]	; (8003140 <HAL_TIM_Base_MspInit+0xcc>)
 80030d4:	f043 0302 	orr.w	r3, r3, #2
 80030d8:	6413      	str	r3, [r2, #64]	; 0x40
 80030da:	4b19      	ldr	r3, [pc, #100]	; (8003140 <HAL_TIM_Base_MspInit+0xcc>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	697b      	ldr	r3, [r7, #20]
}
 80030e6:	e022      	b.n	800312e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a16      	ldr	r2, [pc, #88]	; (8003148 <HAL_TIM_Base_MspInit+0xd4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d10c      	bne.n	800310c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80030f2:	4b13      	ldr	r3, [pc, #76]	; (8003140 <HAL_TIM_Base_MspInit+0xcc>)
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	4a12      	ldr	r2, [pc, #72]	; (8003140 <HAL_TIM_Base_MspInit+0xcc>)
 80030f8:	f043 0308 	orr.w	r3, r3, #8
 80030fc:	6413      	str	r3, [r2, #64]	; 0x40
 80030fe:	4b10      	ldr	r3, [pc, #64]	; (8003140 <HAL_TIM_Base_MspInit+0xcc>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	693b      	ldr	r3, [r7, #16]
}
 800310a:	e010      	b.n	800312e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0e      	ldr	r2, [pc, #56]	; (800314c <HAL_TIM_Base_MspInit+0xd8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d10b      	bne.n	800312e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <HAL_TIM_Base_MspInit+0xcc>)
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	4a09      	ldr	r2, [pc, #36]	; (8003140 <HAL_TIM_Base_MspInit+0xcc>)
 800311c:	f043 0302 	orr.w	r3, r3, #2
 8003120:	6453      	str	r3, [r2, #68]	; 0x44
 8003122:	4b07      	ldr	r3, [pc, #28]	; (8003140 <HAL_TIM_Base_MspInit+0xcc>)
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]
}
 800312e:	bf00      	nop
 8003130:	3724      	adds	r7, #36	; 0x24
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40010000 	.word	0x40010000
 8003140:	40023800 	.word	0x40023800
 8003144:	40000400 	.word	0x40000400
 8003148:	40000c00 	.word	0x40000c00
 800314c:	40010400 	.word	0x40010400

08003150 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a0a      	ldr	r2, [pc, #40]	; (8003188 <HAL_TIM_PWM_MspInit+0x38>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d10b      	bne.n	800317a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003162:	4b0a      	ldr	r3, [pc, #40]	; (800318c <HAL_TIM_PWM_MspInit+0x3c>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	4a09      	ldr	r2, [pc, #36]	; (800318c <HAL_TIM_PWM_MspInit+0x3c>)
 8003168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800316c:	6413      	str	r3, [r2, #64]	; 0x40
 800316e:	4b07      	ldr	r3, [pc, #28]	; (800318c <HAL_TIM_PWM_MspInit+0x3c>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800317a:	bf00      	nop
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	40001800 	.word	0x40001800
 800318c:	40023800 	.word	0x40023800

08003190 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08c      	sub	sp, #48	; 0x30
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003198:	f107 031c 	add.w	r3, r7, #28
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	609a      	str	r2, [r3, #8]
 80031a4:	60da      	str	r2, [r3, #12]
 80031a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a56      	ldr	r2, [pc, #344]	; (8003308 <HAL_TIM_MspPostInit+0x178>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d11d      	bne.n	80031ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b2:	4b56      	ldr	r3, [pc, #344]	; (800330c <HAL_TIM_MspPostInit+0x17c>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a55      	ldr	r2, [pc, #340]	; (800330c <HAL_TIM_MspPostInit+0x17c>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b53      	ldr	r3, [pc, #332]	; (800330c <HAL_TIM_MspPostInit+0x17c>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	61bb      	str	r3, [r7, #24]
 80031c8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80031ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d0:	2302      	movs	r3, #2
 80031d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d8:	2300      	movs	r3, #0
 80031da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80031dc:	2301      	movs	r3, #1
 80031de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80031e0:	f107 031c 	add.w	r3, r7, #28
 80031e4:	4619      	mov	r1, r3
 80031e6:	484a      	ldr	r0, [pc, #296]	; (8003310 <HAL_TIM_MspPostInit+0x180>)
 80031e8:	f002 fe1a 	bl	8005e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80031ec:	e087      	b.n	80032fe <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f6:	d11d      	bne.n	8003234 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f8:	4b44      	ldr	r3, [pc, #272]	; (800330c <HAL_TIM_MspPostInit+0x17c>)
 80031fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fc:	4a43      	ldr	r2, [pc, #268]	; (800330c <HAL_TIM_MspPostInit+0x17c>)
 80031fe:	f043 0301 	orr.w	r3, r3, #1
 8003202:	6313      	str	r3, [r2, #48]	; 0x30
 8003204:	4b41      	ldr	r3, [pc, #260]	; (800330c <HAL_TIM_MspPostInit+0x17c>)
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003210:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003216:	2302      	movs	r3, #2
 8003218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321a:	2300      	movs	r3, #0
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800321e:	2300      	movs	r3, #0
 8003220:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003222:	2301      	movs	r3, #1
 8003224:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003226:	f107 031c 	add.w	r3, r7, #28
 800322a:	4619      	mov	r1, r3
 800322c:	4838      	ldr	r0, [pc, #224]	; (8003310 <HAL_TIM_MspPostInit+0x180>)
 800322e:	f002 fdf7 	bl	8005e20 <HAL_GPIO_Init>
}
 8003232:	e064      	b.n	80032fe <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a36      	ldr	r2, [pc, #216]	; (8003314 <HAL_TIM_MspPostInit+0x184>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d11c      	bne.n	8003278 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800323e:	4b33      	ldr	r3, [pc, #204]	; (800330c <HAL_TIM_MspPostInit+0x17c>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	4a32      	ldr	r2, [pc, #200]	; (800330c <HAL_TIM_MspPostInit+0x17c>)
 8003244:	f043 0302 	orr.w	r3, r3, #2
 8003248:	6313      	str	r3, [r2, #48]	; 0x30
 800324a:	4b30      	ldr	r3, [pc, #192]	; (800330c <HAL_TIM_MspPostInit+0x17c>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	613b      	str	r3, [r7, #16]
 8003254:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003256:	2310      	movs	r3, #16
 8003258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325a:	2302      	movs	r3, #2
 800325c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325e:	2300      	movs	r3, #0
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003262:	2300      	movs	r3, #0
 8003264:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003266:	2302      	movs	r3, #2
 8003268:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800326a:	f107 031c 	add.w	r3, r7, #28
 800326e:	4619      	mov	r1, r3
 8003270:	4829      	ldr	r0, [pc, #164]	; (8003318 <HAL_TIM_MspPostInit+0x188>)
 8003272:	f002 fdd5 	bl	8005e20 <HAL_GPIO_Init>
}
 8003276:	e042      	b.n	80032fe <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a27      	ldr	r2, [pc, #156]	; (800331c <HAL_TIM_MspPostInit+0x18c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d11c      	bne.n	80032bc <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003282:	4b22      	ldr	r3, [pc, #136]	; (800330c <HAL_TIM_MspPostInit+0x17c>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	4a21      	ldr	r2, [pc, #132]	; (800330c <HAL_TIM_MspPostInit+0x17c>)
 8003288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800328c:	6313      	str	r3, [r2, #48]	; 0x30
 800328e:	4b1f      	ldr	r3, [pc, #124]	; (800330c <HAL_TIM_MspPostInit+0x17c>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800329a:	2301      	movs	r3, #1
 800329c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329e:	2302      	movs	r3, #2
 80032a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a6:	2300      	movs	r3, #0
 80032a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80032aa:	2302      	movs	r3, #2
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80032ae:	f107 031c 	add.w	r3, r7, #28
 80032b2:	4619      	mov	r1, r3
 80032b4:	481a      	ldr	r0, [pc, #104]	; (8003320 <HAL_TIM_MspPostInit+0x190>)
 80032b6:	f002 fdb3 	bl	8005e20 <HAL_GPIO_Init>
}
 80032ba:	e020      	b.n	80032fe <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a18      	ldr	r2, [pc, #96]	; (8003324 <HAL_TIM_MspPostInit+0x194>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d11b      	bne.n	80032fe <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80032c6:	4b11      	ldr	r3, [pc, #68]	; (800330c <HAL_TIM_MspPostInit+0x17c>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	4a10      	ldr	r2, [pc, #64]	; (800330c <HAL_TIM_MspPostInit+0x17c>)
 80032cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d0:	6313      	str	r3, [r2, #48]	; 0x30
 80032d2:	4b0e      	ldr	r3, [pc, #56]	; (800330c <HAL_TIM_MspPostInit+0x17c>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80032de:	2340      	movs	r3, #64	; 0x40
 80032e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e2:	2302      	movs	r3, #2
 80032e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ea:	2300      	movs	r3, #0
 80032ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80032ee:	2309      	movs	r3, #9
 80032f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80032f2:	f107 031c 	add.w	r3, r7, #28
 80032f6:	4619      	mov	r1, r3
 80032f8:	480b      	ldr	r0, [pc, #44]	; (8003328 <HAL_TIM_MspPostInit+0x198>)
 80032fa:	f002 fd91 	bl	8005e20 <HAL_GPIO_Init>
}
 80032fe:	bf00      	nop
 8003300:	3730      	adds	r7, #48	; 0x30
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40010000 	.word	0x40010000
 800330c:	40023800 	.word	0x40023800
 8003310:	40020000 	.word	0x40020000
 8003314:	40000400 	.word	0x40000400
 8003318:	40020400 	.word	0x40020400
 800331c:	40000c00 	.word	0x40000c00
 8003320:	40022000 	.word	0x40022000
 8003324:	40001800 	.word	0x40001800
 8003328:	40021c00 	.word	0x40021c00

0800332c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08c      	sub	sp, #48	; 0x30
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003334:	f107 031c 	add.w	r3, r7, #28
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	609a      	str	r2, [r3, #8]
 8003340:	60da      	str	r2, [r3, #12]
 8003342:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a3c      	ldr	r2, [pc, #240]	; (800343c <HAL_UART_MspInit+0x110>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d145      	bne.n	80033da <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800334e:	4b3c      	ldr	r3, [pc, #240]	; (8003440 <HAL_UART_MspInit+0x114>)
 8003350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003352:	4a3b      	ldr	r2, [pc, #236]	; (8003440 <HAL_UART_MspInit+0x114>)
 8003354:	f043 0310 	orr.w	r3, r3, #16
 8003358:	6453      	str	r3, [r2, #68]	; 0x44
 800335a:	4b39      	ldr	r3, [pc, #228]	; (8003440 <HAL_UART_MspInit+0x114>)
 800335c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335e:	f003 0310 	and.w	r3, r3, #16
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003366:	4b36      	ldr	r3, [pc, #216]	; (8003440 <HAL_UART_MspInit+0x114>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	4a35      	ldr	r2, [pc, #212]	; (8003440 <HAL_UART_MspInit+0x114>)
 800336c:	f043 0302 	orr.w	r3, r3, #2
 8003370:	6313      	str	r3, [r2, #48]	; 0x30
 8003372:	4b33      	ldr	r3, [pc, #204]	; (8003440 <HAL_UART_MspInit+0x114>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800337e:	4b30      	ldr	r3, [pc, #192]	; (8003440 <HAL_UART_MspInit+0x114>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	4a2f      	ldr	r2, [pc, #188]	; (8003440 <HAL_UART_MspInit+0x114>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	6313      	str	r3, [r2, #48]	; 0x30
 800338a:	4b2d      	ldr	r3, [pc, #180]	; (8003440 <HAL_UART_MspInit+0x114>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003396:	2380      	movs	r3, #128	; 0x80
 8003398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339a:	2302      	movs	r3, #2
 800339c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a2:	2300      	movs	r3, #0
 80033a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033a6:	2307      	movs	r3, #7
 80033a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80033aa:	f107 031c 	add.w	r3, r7, #28
 80033ae:	4619      	mov	r1, r3
 80033b0:	4824      	ldr	r0, [pc, #144]	; (8003444 <HAL_UART_MspInit+0x118>)
 80033b2:	f002 fd35 	bl	8005e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80033b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033bc:	2302      	movs	r3, #2
 80033be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c4:	2300      	movs	r3, #0
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033c8:	2307      	movs	r3, #7
 80033ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80033cc:	f107 031c 	add.w	r3, r7, #28
 80033d0:	4619      	mov	r1, r3
 80033d2:	481d      	ldr	r0, [pc, #116]	; (8003448 <HAL_UART_MspInit+0x11c>)
 80033d4:	f002 fd24 	bl	8005e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80033d8:	e02c      	b.n	8003434 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1b      	ldr	r2, [pc, #108]	; (800344c <HAL_UART_MspInit+0x120>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d127      	bne.n	8003434 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80033e4:	4b16      	ldr	r3, [pc, #88]	; (8003440 <HAL_UART_MspInit+0x114>)
 80033e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e8:	4a15      	ldr	r2, [pc, #84]	; (8003440 <HAL_UART_MspInit+0x114>)
 80033ea:	f043 0320 	orr.w	r3, r3, #32
 80033ee:	6453      	str	r3, [r2, #68]	; 0x44
 80033f0:	4b13      	ldr	r3, [pc, #76]	; (8003440 <HAL_UART_MspInit+0x114>)
 80033f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f4:	f003 0320 	and.w	r3, r3, #32
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033fc:	4b10      	ldr	r3, [pc, #64]	; (8003440 <HAL_UART_MspInit+0x114>)
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	4a0f      	ldr	r2, [pc, #60]	; (8003440 <HAL_UART_MspInit+0x114>)
 8003402:	f043 0304 	orr.w	r3, r3, #4
 8003406:	6313      	str	r3, [r2, #48]	; 0x30
 8003408:	4b0d      	ldr	r3, [pc, #52]	; (8003440 <HAL_UART_MspInit+0x114>)
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8003414:	23c0      	movs	r3, #192	; 0xc0
 8003416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003418:	2302      	movs	r3, #2
 800341a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341c:	2300      	movs	r3, #0
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003420:	2303      	movs	r3, #3
 8003422:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003424:	2308      	movs	r3, #8
 8003426:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003428:	f107 031c 	add.w	r3, r7, #28
 800342c:	4619      	mov	r1, r3
 800342e:	4808      	ldr	r0, [pc, #32]	; (8003450 <HAL_UART_MspInit+0x124>)
 8003430:	f002 fcf6 	bl	8005e20 <HAL_GPIO_Init>
}
 8003434:	bf00      	nop
 8003436:	3730      	adds	r7, #48	; 0x30
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40011000 	.word	0x40011000
 8003440:	40023800 	.word	0x40023800
 8003444:	40020400 	.word	0x40020400
 8003448:	40020000 	.word	0x40020000
 800344c:	40011400 	.word	0x40011400
 8003450:	40020800 	.word	0x40020800

08003454 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800345a:	1d3b      	adds	r3, r7, #4
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003468:	4b3a      	ldr	r3, [pc, #232]	; (8003554 <HAL_FMC_MspInit+0x100>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d16d      	bne.n	800354c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003470:	4b38      	ldr	r3, [pc, #224]	; (8003554 <HAL_FMC_MspInit+0x100>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003476:	4b38      	ldr	r3, [pc, #224]	; (8003558 <HAL_FMC_MspInit+0x104>)
 8003478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347a:	4a37      	ldr	r2, [pc, #220]	; (8003558 <HAL_FMC_MspInit+0x104>)
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	6393      	str	r3, [r2, #56]	; 0x38
 8003482:	4b35      	ldr	r3, [pc, #212]	; (8003558 <HAL_FMC_MspInit+0x104>)
 8003484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800348e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003492:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003494:	2302      	movs	r3, #2
 8003496:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003498:	2300      	movs	r3, #0
 800349a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800349c:	2303      	movs	r3, #3
 800349e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034a0:	230c      	movs	r3, #12
 80034a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034a4:	1d3b      	adds	r3, r7, #4
 80034a6:	4619      	mov	r1, r3
 80034a8:	482c      	ldr	r0, [pc, #176]	; (800355c <HAL_FMC_MspInit+0x108>)
 80034aa:	f002 fcb9 	bl	8005e20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 80034ae:	f248 1333 	movw	r3, #33075	; 0x8133
 80034b2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b4:	2302      	movs	r3, #2
 80034b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034bc:	2303      	movs	r3, #3
 80034be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034c0:	230c      	movs	r3, #12
 80034c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034c4:	1d3b      	adds	r3, r7, #4
 80034c6:	4619      	mov	r1, r3
 80034c8:	4825      	ldr	r0, [pc, #148]	; (8003560 <HAL_FMC_MspInit+0x10c>)
 80034ca:	f002 fca9 	bl	8005e20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 80034ce:	f24c 7303 	movw	r3, #50947	; 0xc703
 80034d2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d4:	2302      	movs	r3, #2
 80034d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034dc:	2303      	movs	r3, #3
 80034de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034e0:	230c      	movs	r3, #12
 80034e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034e4:	1d3b      	adds	r3, r7, #4
 80034e6:	4619      	mov	r1, r3
 80034e8:	481e      	ldr	r0, [pc, #120]	; (8003564 <HAL_FMC_MspInit+0x110>)
 80034ea:	f002 fc99 	bl	8005e20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 80034ee:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80034f2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f4:	2302      	movs	r3, #2
 80034f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034fc:	2303      	movs	r3, #3
 80034fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003500:	230c      	movs	r3, #12
 8003502:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003504:	1d3b      	adds	r3, r7, #4
 8003506:	4619      	mov	r1, r3
 8003508:	4817      	ldr	r0, [pc, #92]	; (8003568 <HAL_FMC_MspInit+0x114>)
 800350a:	f002 fc89 	bl	8005e20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800350e:	2328      	movs	r3, #40	; 0x28
 8003510:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003512:	2302      	movs	r3, #2
 8003514:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800351a:	2303      	movs	r3, #3
 800351c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800351e:	230c      	movs	r3, #12
 8003520:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003522:	1d3b      	adds	r3, r7, #4
 8003524:	4619      	mov	r1, r3
 8003526:	4811      	ldr	r0, [pc, #68]	; (800356c <HAL_FMC_MspInit+0x118>)
 8003528:	f002 fc7a 	bl	8005e20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800352c:	2308      	movs	r3, #8
 800352e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003530:	2302      	movs	r3, #2
 8003532:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003538:	2303      	movs	r3, #3
 800353a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800353c:	230c      	movs	r3, #12
 800353e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003540:	1d3b      	adds	r3, r7, #4
 8003542:	4619      	mov	r1, r3
 8003544:	480a      	ldr	r0, [pc, #40]	; (8003570 <HAL_FMC_MspInit+0x11c>)
 8003546:	f002 fc6b 	bl	8005e20 <HAL_GPIO_Init>
 800354a:	e000      	b.n	800354e <HAL_FMC_MspInit+0xfa>
    return;
 800354c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20000324 	.word	0x20000324
 8003558:	40023800 	.word	0x40023800
 800355c:	40021000 	.word	0x40021000
 8003560:	40021800 	.word	0x40021800
 8003564:	40020c00 	.word	0x40020c00
 8003568:	40021400 	.word	0x40021400
 800356c:	40021c00 	.word	0x40021c00
 8003570:	40020800 	.word	0x40020800

08003574 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800357c:	f7ff ff6a 	bl	8003454 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003580:	bf00      	nop
 8003582:	3708      	adds	r7, #8
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08a      	sub	sp, #40	; 0x28
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a2b      	ldr	r2, [pc, #172]	; (8003644 <HAL_SAI_MspInit+0xbc>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d124      	bne.n	80035e4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800359a:	4b2b      	ldr	r3, [pc, #172]	; (8003648 <HAL_SAI_MspInit+0xc0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10b      	bne.n	80035ba <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80035a2:	4b2a      	ldr	r3, [pc, #168]	; (800364c <HAL_SAI_MspInit+0xc4>)
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	4a29      	ldr	r2, [pc, #164]	; (800364c <HAL_SAI_MspInit+0xc4>)
 80035a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035ac:	6453      	str	r3, [r2, #68]	; 0x44
 80035ae:	4b27      	ldr	r3, [pc, #156]	; (800364c <HAL_SAI_MspInit+0xc4>)
 80035b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80035ba:	4b23      	ldr	r3, [pc, #140]	; (8003648 <HAL_SAI_MspInit+0xc0>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3301      	adds	r3, #1
 80035c0:	4a21      	ldr	r2, [pc, #132]	; (8003648 <HAL_SAI_MspInit+0xc0>)
 80035c2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80035c4:	23f0      	movs	r3, #240	; 0xf0
 80035c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c8:	2302      	movs	r3, #2
 80035ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d0:	2300      	movs	r3, #0
 80035d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80035d4:	230a      	movs	r3, #10
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80035d8:	f107 0314 	add.w	r3, r7, #20
 80035dc:	4619      	mov	r1, r3
 80035de:	481c      	ldr	r0, [pc, #112]	; (8003650 <HAL_SAI_MspInit+0xc8>)
 80035e0:	f002 fc1e 	bl	8005e20 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a1a      	ldr	r2, [pc, #104]	; (8003654 <HAL_SAI_MspInit+0xcc>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d125      	bne.n	800363a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80035ee:	4b16      	ldr	r3, [pc, #88]	; (8003648 <HAL_SAI_MspInit+0xc0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10b      	bne.n	800360e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80035f6:	4b15      	ldr	r3, [pc, #84]	; (800364c <HAL_SAI_MspInit+0xc4>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	4a14      	ldr	r2, [pc, #80]	; (800364c <HAL_SAI_MspInit+0xc4>)
 80035fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003600:	6453      	str	r3, [r2, #68]	; 0x44
 8003602:	4b12      	ldr	r3, [pc, #72]	; (800364c <HAL_SAI_MspInit+0xc4>)
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800360e:	4b0e      	ldr	r3, [pc, #56]	; (8003648 <HAL_SAI_MspInit+0xc0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3301      	adds	r3, #1
 8003614:	4a0c      	ldr	r2, [pc, #48]	; (8003648 <HAL_SAI_MspInit+0xc0>)
 8003616:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8003618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800361c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800361e:	2302      	movs	r3, #2
 8003620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003622:	2300      	movs	r3, #0
 8003624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003626:	2300      	movs	r3, #0
 8003628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800362a:	230a      	movs	r3, #10
 800362c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800362e:	f107 0314 	add.w	r3, r7, #20
 8003632:	4619      	mov	r1, r3
 8003634:	4808      	ldr	r0, [pc, #32]	; (8003658 <HAL_SAI_MspInit+0xd0>)
 8003636:	f002 fbf3 	bl	8005e20 <HAL_GPIO_Init>

    }
}
 800363a:	bf00      	nop
 800363c:	3728      	adds	r7, #40	; 0x28
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40015c04 	.word	0x40015c04
 8003648:	20000328 	.word	0x20000328
 800364c:	40023800 	.word	0x40023800
 8003650:	40022000 	.word	0x40022000
 8003654:	40015c24 	.word	0x40015c24
 8003658:	40021800 	.word	0x40021800

0800365c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08c      	sub	sp, #48	; 0x30
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003664:	2300      	movs	r3, #0
 8003666:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003668:	2300      	movs	r3, #0
 800366a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800366c:	2200      	movs	r2, #0
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	2036      	movs	r0, #54	; 0x36
 8003672:	f000 ffcf 	bl	8004614 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8003676:	2036      	movs	r0, #54	; 0x36
 8003678:	f000 ffe8 	bl	800464c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800367c:	4b1f      	ldr	r3, [pc, #124]	; (80036fc <HAL_InitTick+0xa0>)
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	4a1e      	ldr	r2, [pc, #120]	; (80036fc <HAL_InitTick+0xa0>)
 8003682:	f043 0310 	orr.w	r3, r3, #16
 8003686:	6413      	str	r3, [r2, #64]	; 0x40
 8003688:	4b1c      	ldr	r3, [pc, #112]	; (80036fc <HAL_InitTick+0xa0>)
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	f003 0310 	and.w	r3, r3, #16
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003694:	f107 0210 	add.w	r2, r7, #16
 8003698:	f107 0314 	add.w	r3, r7, #20
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f005 fcb4 	bl	800900c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80036a4:	f005 fc8a 	bl	8008fbc <HAL_RCC_GetPCLK1Freq>
 80036a8:	4603      	mov	r3, r0
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80036ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b0:	4a13      	ldr	r2, [pc, #76]	; (8003700 <HAL_InitTick+0xa4>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	0c9b      	lsrs	r3, r3, #18
 80036b8:	3b01      	subs	r3, #1
 80036ba:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80036bc:	4b11      	ldr	r3, [pc, #68]	; (8003704 <HAL_InitTick+0xa8>)
 80036be:	4a12      	ldr	r2, [pc, #72]	; (8003708 <HAL_InitTick+0xac>)
 80036c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80036c2:	4b10      	ldr	r3, [pc, #64]	; (8003704 <HAL_InitTick+0xa8>)
 80036c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80036c8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80036ca:	4a0e      	ldr	r2, [pc, #56]	; (8003704 <HAL_InitTick+0xa8>)
 80036cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ce:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80036d0:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <HAL_InitTick+0xa8>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036d6:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <HAL_InitTick+0xa8>)
 80036d8:	2200      	movs	r2, #0
 80036da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80036dc:	4809      	ldr	r0, [pc, #36]	; (8003704 <HAL_InitTick+0xa8>)
 80036de:	f008 f8e1 	bl	800b8a4 <HAL_TIM_Base_Init>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d104      	bne.n	80036f2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80036e8:	4806      	ldr	r0, [pc, #24]	; (8003704 <HAL_InitTick+0xa8>)
 80036ea:	f008 f907 	bl	800b8fc <HAL_TIM_Base_Start_IT>
 80036ee:	4603      	mov	r3, r0
 80036f0:	e000      	b.n	80036f4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3730      	adds	r7, #48	; 0x30
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40023800 	.word	0x40023800
 8003700:	431bde83 	.word	0x431bde83
 8003704:	2000d838 	.word	0x2000d838
 8003708:	40001000 	.word	0x40001000

0800370c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003710:	bf00      	nop
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800371a:	b480      	push	{r7}
 800371c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800371e:	e7fe      	b.n	800371e <HardFault_Handler+0x4>

08003720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003724:	e7fe      	b.n	8003724 <MemManage_Handler+0x4>

08003726 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003726:	b480      	push	{r7}
 8003728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800372a:	e7fe      	b.n	800372a <BusFault_Handler+0x4>

0800372c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003730:	e7fe      	b.n	8003730 <UsageFault_Handler+0x4>

08003732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003732:	b480      	push	{r7}
 8003734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003736:	bf00      	nop
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003744:	4802      	ldr	r0, [pc, #8]	; (8003750 <TIM6_DAC_IRQHandler+0x10>)
 8003746:	f008 f92e 	bl	800b9a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800374a:	bf00      	nop
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	2000d838 	.word	0x2000d838

08003754 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003758:	4802      	ldr	r0, [pc, #8]	; (8003764 <ETH_IRQHandler+0x10>)
 800375a:	f001 ff53 	bl	8005604 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	2000a390 	.word	0x2000a390

08003768 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800376c:	4802      	ldr	r0, [pc, #8]	; (8003778 <OTG_FS_IRQHandler+0x10>)
 800376e:	f002 ffc1 	bl	80066f4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	2000dc5c 	.word	0x2000dc5c

0800377c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003780:	4802      	ldr	r0, [pc, #8]	; (800378c <LTDC_IRQHandler+0x10>)
 8003782:	f004 fc11 	bl	8007fa8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	2000d3b0 	.word	0x2000d3b0

08003790 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003794:	4802      	ldr	r0, [pc, #8]	; (80037a0 <DMA2D_IRQHandler+0x10>)
 8003796:	f001 f9af 	bl	8004af8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800379a:	bf00      	nop
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	2000d6f8 	.word	0x2000d6f8

080037a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	e00a      	b.n	80037cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80037b6:	f3af 8000 	nop.w
 80037ba:	4601      	mov	r1, r0
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	60ba      	str	r2, [r7, #8]
 80037c2:	b2ca      	uxtb	r2, r1
 80037c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	3301      	adds	r3, #1
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	dbf0      	blt.n	80037b6 <_read+0x12>
	}

return len;
 80037d4:	687b      	ldr	r3, [r7, #4]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b086      	sub	sp, #24
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	e009      	b.n	8003804 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	60ba      	str	r2, [r7, #8]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	3301      	adds	r3, #1
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	429a      	cmp	r2, r3
 800380a:	dbf1      	blt.n	80037f0 <_write+0x12>
	}
	return len;
 800380c:	687b      	ldr	r3, [r7, #4]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <_close>:

int _close(int file)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
	return -1;
 800381e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800383e:	605a      	str	r2, [r3, #4]
	return 0;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <_isatty>:

int _isatty(int file)
{
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
	return 1;
 8003856:	2301      	movs	r3, #1
}
 8003858:	4618      	mov	r0, r3
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
	return 0;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003888:	4b11      	ldr	r3, [pc, #68]	; (80038d0 <_sbrk+0x50>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d102      	bne.n	8003896 <_sbrk+0x16>
		heap_end = &end;
 8003890:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <_sbrk+0x50>)
 8003892:	4a10      	ldr	r2, [pc, #64]	; (80038d4 <_sbrk+0x54>)
 8003894:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003896:	4b0e      	ldr	r3, [pc, #56]	; (80038d0 <_sbrk+0x50>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800389c:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <_sbrk+0x50>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4413      	add	r3, r2
 80038a4:	466a      	mov	r2, sp
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d905      	bls.n	80038b6 <_sbrk+0x36>
	{
		errno = ENOMEM;
 80038aa:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <_sbrk+0x58>)
 80038ac:	220c      	movs	r2, #12
 80038ae:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80038b0:	f04f 33ff 	mov.w	r3, #4294967295
 80038b4:	e006      	b.n	80038c4 <_sbrk+0x44>
	}

	heap_end += incr;
 80038b6:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <_sbrk+0x50>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4413      	add	r3, r2
 80038be:	4a04      	ldr	r2, [pc, #16]	; (80038d0 <_sbrk+0x50>)
 80038c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80038c2:	68fb      	ldr	r3, [r7, #12]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	2000032c 	.word	0x2000032c
 80038d4:	20011840 	.word	0x20011840
 80038d8:	20011810 	.word	0x20011810

080038dc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80038e0:	2201      	movs	r2, #1
 80038e2:	490e      	ldr	r1, [pc, #56]	; (800391c <MX_USB_HOST_Init+0x40>)
 80038e4:	480e      	ldr	r0, [pc, #56]	; (8003920 <MX_USB_HOST_Init+0x44>)
 80038e6:	f01e fcf3 	bl	80222d0 <USBH_Init>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80038f0:	f7fe fdb0 	bl	8002454 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80038f4:	490b      	ldr	r1, [pc, #44]	; (8003924 <MX_USB_HOST_Init+0x48>)
 80038f6:	480a      	ldr	r0, [pc, #40]	; (8003920 <MX_USB_HOST_Init+0x44>)
 80038f8:	f01e fda0 	bl	802243c <USBH_RegisterClass>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8003902:	f7fe fda7 	bl	8002454 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8003906:	4806      	ldr	r0, [pc, #24]	; (8003920 <MX_USB_HOST_Init+0x44>)
 8003908:	f01e fe24 	bl	8022554 <USBH_Start>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8003912:	f7fe fd9f 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8003916:	bf00      	nop
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	08003929 	.word	0x08003929
 8003920:	2000d878 	.word	0x2000d878
 8003924:	20000024 	.word	0x20000024

08003928 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	3b01      	subs	r3, #1
 8003938:	2b04      	cmp	r3, #4
 800393a:	d819      	bhi.n	8003970 <USBH_UserProcess+0x48>
 800393c:	a201      	add	r2, pc, #4	; (adr r2, 8003944 <USBH_UserProcess+0x1c>)
 800393e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003942:	bf00      	nop
 8003944:	08003971 	.word	0x08003971
 8003948:	08003961 	.word	0x08003961
 800394c:	08003971 	.word	0x08003971
 8003950:	08003969 	.word	0x08003969
 8003954:	08003959 	.word	0x08003959
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8003958:	4b09      	ldr	r3, [pc, #36]	; (8003980 <USBH_UserProcess+0x58>)
 800395a:	2203      	movs	r2, #3
 800395c:	701a      	strb	r2, [r3, #0]
  break;
 800395e:	e008      	b.n	8003972 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8003960:	4b07      	ldr	r3, [pc, #28]	; (8003980 <USBH_UserProcess+0x58>)
 8003962:	2202      	movs	r2, #2
 8003964:	701a      	strb	r2, [r3, #0]
  break;
 8003966:	e004      	b.n	8003972 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <USBH_UserProcess+0x58>)
 800396a:	2201      	movs	r2, #1
 800396c:	701a      	strb	r2, [r3, #0]
  break;
 800396e:	e000      	b.n	8003972 <USBH_UserProcess+0x4a>

  default:
  break;
 8003970:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20000330 	.word	0x20000330

08003984 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08a      	sub	sp, #40	; 0x28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800398c:	f107 0314 	add.w	r3, r7, #20
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	60da      	str	r2, [r3, #12]
 800399a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039a4:	d13c      	bne.n	8003a20 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a6:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <HAL_HCD_MspInit+0xa4>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	4a1f      	ldr	r2, [pc, #124]	; (8003a28 <HAL_HCD_MspInit+0xa4>)
 80039ac:	f043 0301 	orr.w	r3, r3, #1
 80039b0:	6313      	str	r3, [r2, #48]	; 0x30
 80039b2:	4b1d      	ldr	r3, [pc, #116]	; (8003a28 <HAL_HCD_MspInit+0xa4>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80039be:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80039c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c4:	2302      	movs	r3, #2
 80039c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039cc:	2303      	movs	r3, #3
 80039ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80039d0:	230a      	movs	r3, #10
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d4:	f107 0314 	add.w	r3, r7, #20
 80039d8:	4619      	mov	r1, r3
 80039da:	4814      	ldr	r0, [pc, #80]	; (8003a2c <HAL_HCD_MspInit+0xa8>)
 80039dc:	f002 fa20 	bl	8005e20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80039e0:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <HAL_HCD_MspInit+0xa4>)
 80039e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e4:	4a10      	ldr	r2, [pc, #64]	; (8003a28 <HAL_HCD_MspInit+0xa4>)
 80039e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ea:	6353      	str	r3, [r2, #52]	; 0x34
 80039ec:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <HAL_HCD_MspInit+0xa4>)
 80039ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <HAL_HCD_MspInit+0xa4>)
 80039fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fc:	4a0a      	ldr	r2, [pc, #40]	; (8003a28 <HAL_HCD_MspInit+0xa4>)
 80039fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a02:	6453      	str	r3, [r2, #68]	; 0x44
 8003a04:	4b08      	ldr	r3, [pc, #32]	; (8003a28 <HAL_HCD_MspInit+0xa4>)
 8003a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8003a10:	2200      	movs	r2, #0
 8003a12:	2105      	movs	r1, #5
 8003a14:	2043      	movs	r0, #67	; 0x43
 8003a16:	f000 fdfd 	bl	8004614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8003a1a:	2043      	movs	r0, #67	; 0x43
 8003a1c:	f000 fe16 	bl	800464c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003a20:	bf00      	nop
 8003a22:	3728      	adds	r7, #40	; 0x28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	40020000 	.word	0x40020000

08003a30 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f01f fa35 	bl	8022eae <USBH_LL_IncTimer>
}
 8003a44:	bf00      	nop
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f01f fa79 	bl	8022f52 <USBH_LL_Connect>
}
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003a76:	4618      	mov	r0, r3
 8003a78:	f01f fa8e 	bl	8022f98 <USBH_LL_Disconnect>
}
 8003a7c:	bf00      	nop
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	70fb      	strb	r3, [r7, #3]
 8003a90:	4613      	mov	r3, r2
 8003a92:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f01f fac3 	bl	8023026 <USBH_LL_NotifyURBChange>
#endif
}
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f01f fa23 	bl	8022f02 <USBH_LL_PortEnabled>
} 
 8003abc:	bf00      	nop
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f01f fa2f 	bl	8022f36 <USBH_LL_PortDisabled>
} 
 8003ad8:	bf00      	nop
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d12a      	bne.n	8003b48 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8003af2:	4a18      	ldr	r2, [pc, #96]	; (8003b54 <USBH_LL_Init+0x74>)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a15      	ldr	r2, [pc, #84]	; (8003b54 <USBH_LL_Init+0x74>)
 8003afe:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003b02:	4b14      	ldr	r3, [pc, #80]	; (8003b54 <USBH_LL_Init+0x74>)
 8003b04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003b08:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8003b0a:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <USBH_LL_Init+0x74>)
 8003b0c:	2208      	movs	r2, #8
 8003b0e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8003b10:	4b10      	ldr	r3, [pc, #64]	; (8003b54 <USBH_LL_Init+0x74>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003b16:	4b0f      	ldr	r3, [pc, #60]	; (8003b54 <USBH_LL_Init+0x74>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8003b1c:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <USBH_LL_Init+0x74>)
 8003b1e:	2202      	movs	r2, #2
 8003b20:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003b22:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <USBH_LL_Init+0x74>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8003b28:	480a      	ldr	r0, [pc, #40]	; (8003b54 <USBH_LL_Init+0x74>)
 8003b2a:	f002 fb54 	bl	80061d6 <HAL_HCD_Init>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8003b34:	f7fe fc8e 	bl	8002454 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8003b38:	4806      	ldr	r0, [pc, #24]	; (8003b54 <USBH_LL_Init+0x74>)
 8003b3a:	f002 ff57 	bl	80069ec <HAL_HCD_GetCurrentFrame>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4619      	mov	r1, r3
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f01f f9a4 	bl	8022e90 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	2000dc5c 	.word	0x2000dc5c

08003b58 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f002 fec4 	bl	80068fc <HAL_HCD_Start>
 8003b74:	4603      	mov	r3, r0
 8003b76:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 f95c 	bl	8003e38 <USBH_Get_USB_Status>
 8003b80:	4603      	mov	r3, r0
 8003b82:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8003b84:	7bbb      	ldrb	r3, [r7, #14]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f002 fecc 	bl	8006942 <HAL_HCD_Stop>
 8003baa:	4603      	mov	r3, r0
 8003bac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8003bae:	7bfb      	ldrb	r3, [r7, #15]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 f941 	bl	8003e38 <USBH_Get_USB_Status>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8003bba:	7bbb      	ldrb	r3, [r7, #14]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f002 ff16 	bl	8006a08 <HAL_HCD_GetCurrentSpeed>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d007      	beq.n	8003bf2 <USBH_LL_GetSpeed+0x2e>
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d302      	bcc.n	8003bec <USBH_LL_GetSpeed+0x28>
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d006      	beq.n	8003bf8 <USBH_LL_GetSpeed+0x34>
 8003bea:	e008      	b.n	8003bfe <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8003bec:	2300      	movs	r3, #0
 8003bee:	73fb      	strb	r3, [r7, #15]
    break;
 8003bf0:	e008      	b.n	8003c04 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	73fb      	strb	r3, [r7, #15]
    break;
 8003bf6:	e005      	b.n	8003c04 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	73fb      	strb	r3, [r7, #15]
    break;
 8003bfc:	e002      	b.n	8003c04 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	73fb      	strb	r3, [r7, #15]
    break;
 8003c02:	bf00      	nop
  }
  return  speed;
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b084      	sub	sp, #16
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8003c24:	4618      	mov	r0, r3
 8003c26:	f002 fea9 	bl	800697c <HAL_HCD_ResetPort>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 f901 	bl	8003e38 <USBH_Get_USB_Status>
 8003c36:	4603      	mov	r3, r0
 8003c38:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8003c3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8003c56:	78fa      	ldrb	r2, [r7, #3]
 8003c58:	4611      	mov	r1, r2
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f002 feb1 	bl	80069c2 <HAL_HCD_HC_GetXferCount>
 8003c60:	4603      	mov	r3, r0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003c6a:	b590      	push	{r4, r7, lr}
 8003c6c:	b089      	sub	sp, #36	; 0x24
 8003c6e:	af04      	add	r7, sp, #16
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	4608      	mov	r0, r1
 8003c74:	4611      	mov	r1, r2
 8003c76:	461a      	mov	r2, r3
 8003c78:	4603      	mov	r3, r0
 8003c7a:	70fb      	strb	r3, [r7, #3]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	70bb      	strb	r3, [r7, #2]
 8003c80:	4613      	mov	r3, r2
 8003c82:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8003c92:	787c      	ldrb	r4, [r7, #1]
 8003c94:	78ba      	ldrb	r2, [r7, #2]
 8003c96:	78f9      	ldrb	r1, [r7, #3]
 8003c98:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003c9a:	9302      	str	r3, [sp, #8]
 8003c9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003ca0:	9301      	str	r3, [sp, #4]
 8003ca2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	4623      	mov	r3, r4
 8003caa:	f002 faf6 	bl	800629a <HAL_HCD_HC_Init>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 f8bf 	bl	8003e38 <USBH_Get_USB_Status>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8003cbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd90      	pop	{r4, r7, pc}

08003cc8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8003ce2:	78fa      	ldrb	r2, [r7, #3]
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f002 fb6f 	bl	80063ca <HAL_HCD_HC_Halt>
 8003cec:	4603      	mov	r3, r0
 8003cee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 f8a0 	bl	8003e38 <USBH_Get_USB_Status>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8003cfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8003d06:	b590      	push	{r4, r7, lr}
 8003d08:	b089      	sub	sp, #36	; 0x24
 8003d0a:	af04      	add	r7, sp, #16
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	4608      	mov	r0, r1
 8003d10:	4611      	mov	r1, r2
 8003d12:	461a      	mov	r2, r3
 8003d14:	4603      	mov	r3, r0
 8003d16:	70fb      	strb	r3, [r7, #3]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	70bb      	strb	r3, [r7, #2]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8003d2e:	787c      	ldrb	r4, [r7, #1]
 8003d30:	78ba      	ldrb	r2, [r7, #2]
 8003d32:	78f9      	ldrb	r1, [r7, #3]
 8003d34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003d38:	9303      	str	r3, [sp, #12]
 8003d3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003d3c:	9302      	str	r3, [sp, #8]
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	9301      	str	r3, [sp, #4]
 8003d42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	4623      	mov	r3, r4
 8003d4a:	f002 fb61 	bl	8006410 <HAL_HCD_HC_SubmitRequest>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 f86f 	bl	8003e38 <USBH_Get_USB_Status>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8003d5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd90      	pop	{r4, r7, pc}

08003d68 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f002 fe0a 	bl	8006998 <HAL_HCD_HC_GetURBState>
 8003d84:	4603      	mov	r3, r0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	460b      	mov	r3, r1
 8003d98:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d103      	bne.n	8003dac <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8003da4:	78fb      	ldrb	r3, [r7, #3]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 f872 	bl	8003e90 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8003dac:	20c8      	movs	r0, #200	; 0xc8
 8003dae:	f000 f8cf 	bl	8003f50 <HAL_Delay>
  return USBH_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	70fb      	strb	r3, [r7, #3]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8003dd2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8003dd4:	78fa      	ldrb	r2, [r7, #3]
 8003dd6:	68f9      	ldr	r1, [r7, #12]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	440b      	add	r3, r1
 8003de2:	333b      	adds	r3, #59	; 0x3b
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8003dea:	78fa      	ldrb	r2, [r7, #3]
 8003dec:	68f9      	ldr	r1, [r7, #12]
 8003dee:	4613      	mov	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	440b      	add	r3, r1
 8003df8:	3350      	adds	r3, #80	; 0x50
 8003dfa:	78ba      	ldrb	r2, [r7, #2]
 8003dfc:	701a      	strb	r2, [r3, #0]
 8003dfe:	e009      	b.n	8003e14 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8003e00:	78fa      	ldrb	r2, [r7, #3]
 8003e02:	68f9      	ldr	r1, [r7, #12]
 8003e04:	4613      	mov	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	440b      	add	r3, r1
 8003e0e:	3351      	adds	r3, #81	; 0x51
 8003e10:	78ba      	ldrb	r2, [r7, #2]
 8003e12:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f890 	bl	8003f50 <HAL_Delay>
}
 8003e30:	bf00      	nop
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d817      	bhi.n	8003e7c <USBH_Get_USB_Status+0x44>
 8003e4c:	a201      	add	r2, pc, #4	; (adr r2, 8003e54 <USBH_Get_USB_Status+0x1c>)
 8003e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e52:	bf00      	nop
 8003e54:	08003e65 	.word	0x08003e65
 8003e58:	08003e6b 	.word	0x08003e6b
 8003e5c:	08003e71 	.word	0x08003e71
 8003e60:	08003e77 	.word	0x08003e77
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	73fb      	strb	r3, [r7, #15]
    break;
 8003e68:	e00b      	b.n	8003e82 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	73fb      	strb	r3, [r7, #15]
    break;
 8003e6e:	e008      	b.n	8003e82 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
    break;
 8003e74:	e005      	b.n	8003e82 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8003e76:	2302      	movs	r3, #2
 8003e78:	73fb      	strb	r3, [r7, #15]
    break;
 8003e7a:	e002      	b.n	8003e82 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	73fb      	strb	r3, [r7, #15]
    break;
 8003e80:	bf00      	nop
  }
  return usb_status;
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	4603      	mov	r3, r0
 8003e98:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
 8003e9c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8003e9e:	79fb      	ldrb	r3, [r7, #7]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d102      	bne.n	8003eaa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	73fb      	strb	r3, [r7, #15]
 8003ea8:	e001      	b.n	8003eae <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	2120      	movs	r1, #32
 8003eb4:	4803      	ldr	r0, [pc, #12]	; (8003ec4 <MX_DriverVbusFS+0x34>)
 8003eb6:	f002 f975 	bl	80061a4 <HAL_GPIO_WritePin>
}
 8003eba:	bf00      	nop
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40020c00 	.word	0x40020c00

08003ec8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ecc:	4b08      	ldr	r3, [pc, #32]	; (8003ef0 <SystemInit+0x28>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed2:	4a07      	ldr	r2, [pc, #28]	; (8003ef0 <SystemInit+0x28>)
 8003ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003edc:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <SystemInit+0x28>)
 8003ede:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ee2:	609a      	str	r2, [r3, #8]
#endif
}
 8003ee4:	bf00      	nop
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	e000ed00 	.word	0xe000ed00

08003ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ef8:	2003      	movs	r0, #3
 8003efa:	f000 fb80 	bl	80045fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003efe:	2000      	movs	r0, #0
 8003f00:	f7ff fbac 	bl	800365c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003f04:	f7fe fc40 	bl	8002788 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	bd80      	pop	{r7, pc}
	...

08003f10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f14:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <HAL_IncTick+0x20>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_IncTick+0x24>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4413      	add	r3, r2
 8003f20:	4a04      	ldr	r2, [pc, #16]	; (8003f34 <HAL_IncTick+0x24>)
 8003f22:	6013      	str	r3, [r2, #0]
}
 8003f24:	bf00      	nop
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	2000000c 	.word	0x2000000c
 8003f34:	2000df20 	.word	0x2000df20

08003f38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f3c:	4b03      	ldr	r3, [pc, #12]	; (8003f4c <HAL_GetTick+0x14>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	2000df20 	.word	0x2000df20

08003f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f58:	f7ff ffee 	bl	8003f38 <HAL_GetTick>
 8003f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f68:	d005      	beq.n	8003f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f6a:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <HAL_Delay+0x40>)
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4413      	add	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f76:	bf00      	nop
 8003f78:	f7ff ffde 	bl	8003f38 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d8f7      	bhi.n	8003f78 <HAL_Delay+0x28>
  {
  }
}
 8003f88:	bf00      	nop
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	2000000c 	.word	0x2000000c

08003f94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e031      	b.n	800400e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d109      	bne.n	8003fc6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fe fc10 	bl	80027d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d116      	bne.n	8004000 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fd6:	4b10      	ldr	r3, [pc, #64]	; (8004018 <HAL_ADC_Init+0x84>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	f043 0202 	orr.w	r2, r3, #2
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f964 	bl	80042b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f023 0303 	bic.w	r3, r3, #3
 8003ff6:	f043 0201 	orr.w	r2, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40
 8003ffe:	e001      	b.n	8004004 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800400c:	7bfb      	ldrb	r3, [r7, #15]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	ffffeefd 	.word	0xffffeefd

0800401c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x1c>
 8004034:	2302      	movs	r3, #2
 8004036:	e12a      	b.n	800428e <HAL_ADC_ConfigChannel+0x272>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b09      	cmp	r3, #9
 8004046:	d93a      	bls.n	80040be <HAL_ADC_ConfigChannel+0xa2>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004050:	d035      	beq.n	80040be <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68d9      	ldr	r1, [r3, #12]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	b29b      	uxth	r3, r3
 800405e:	461a      	mov	r2, r3
 8004060:	4613      	mov	r3, r2
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	4413      	add	r3, r2
 8004066:	3b1e      	subs	r3, #30
 8004068:	2207      	movs	r2, #7
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	43da      	mvns	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	400a      	ands	r2, r1
 8004076:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a87      	ldr	r2, [pc, #540]	; (800429c <HAL_ADC_ConfigChannel+0x280>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d10a      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68d9      	ldr	r1, [r3, #12]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	061a      	lsls	r2, r3, #24
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004096:	e035      	b.n	8004104 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68d9      	ldr	r1, [r3, #12]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	4618      	mov	r0, r3
 80040aa:	4603      	mov	r3, r0
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	4403      	add	r3, r0
 80040b0:	3b1e      	subs	r3, #30
 80040b2:	409a      	lsls	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040bc:	e022      	b.n	8004104 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6919      	ldr	r1, [r3, #16]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	461a      	mov	r2, r3
 80040cc:	4613      	mov	r3, r2
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	4413      	add	r3, r2
 80040d2:	2207      	movs	r2, #7
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	43da      	mvns	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	400a      	ands	r2, r1
 80040e0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6919      	ldr	r1, [r3, #16]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	4618      	mov	r0, r3
 80040f4:	4603      	mov	r3, r0
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	4403      	add	r3, r0
 80040fa:	409a      	lsls	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2b06      	cmp	r3, #6
 800410a:	d824      	bhi.n	8004156 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	3b05      	subs	r3, #5
 800411e:	221f      	movs	r2, #31
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	43da      	mvns	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	400a      	ands	r2, r1
 800412c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	b29b      	uxth	r3, r3
 800413a:	4618      	mov	r0, r3
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	3b05      	subs	r3, #5
 8004148:	fa00 f203 	lsl.w	r2, r0, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	635a      	str	r2, [r3, #52]	; 0x34
 8004154:	e04c      	b.n	80041f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b0c      	cmp	r3, #12
 800415c:	d824      	bhi.n	80041a8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	4613      	mov	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	3b23      	subs	r3, #35	; 0x23
 8004170:	221f      	movs	r2, #31
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	43da      	mvns	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	400a      	ands	r2, r1
 800417e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	b29b      	uxth	r3, r3
 800418c:	4618      	mov	r0, r3
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	3b23      	subs	r3, #35	; 0x23
 800419a:	fa00 f203 	lsl.w	r2, r0, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	631a      	str	r2, [r3, #48]	; 0x30
 80041a6:	e023      	b.n	80041f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	3b41      	subs	r3, #65	; 0x41
 80041ba:	221f      	movs	r2, #31
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	43da      	mvns	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	400a      	ands	r2, r1
 80041c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	4618      	mov	r0, r3
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	3b41      	subs	r3, #65	; 0x41
 80041e4:	fa00 f203 	lsl.w	r2, r0, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a2a      	ldr	r2, [pc, #168]	; (80042a0 <HAL_ADC_ConfigChannel+0x284>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d10a      	bne.n	8004210 <HAL_ADC_ConfigChannel+0x1f4>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004202:	d105      	bne.n	8004210 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004204:	4b27      	ldr	r3, [pc, #156]	; (80042a4 <HAL_ADC_ConfigChannel+0x288>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	4a26      	ldr	r2, [pc, #152]	; (80042a4 <HAL_ADC_ConfigChannel+0x288>)
 800420a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800420e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a22      	ldr	r2, [pc, #136]	; (80042a0 <HAL_ADC_ConfigChannel+0x284>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d109      	bne.n	800422e <HAL_ADC_ConfigChannel+0x212>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b12      	cmp	r3, #18
 8004220:	d105      	bne.n	800422e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004222:	4b20      	ldr	r3, [pc, #128]	; (80042a4 <HAL_ADC_ConfigChannel+0x288>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	4a1f      	ldr	r2, [pc, #124]	; (80042a4 <HAL_ADC_ConfigChannel+0x288>)
 8004228:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800422c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a1b      	ldr	r2, [pc, #108]	; (80042a0 <HAL_ADC_ConfigChannel+0x284>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d125      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x268>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a17      	ldr	r2, [pc, #92]	; (800429c <HAL_ADC_ConfigChannel+0x280>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d003      	beq.n	800424a <HAL_ADC_ConfigChannel+0x22e>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b11      	cmp	r3, #17
 8004248:	d11c      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800424a:	4b16      	ldr	r3, [pc, #88]	; (80042a4 <HAL_ADC_ConfigChannel+0x288>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	4a15      	ldr	r2, [pc, #84]	; (80042a4 <HAL_ADC_ConfigChannel+0x288>)
 8004250:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004254:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a10      	ldr	r2, [pc, #64]	; (800429c <HAL_ADC_ConfigChannel+0x280>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d111      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004260:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <HAL_ADC_ConfigChannel+0x28c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a11      	ldr	r2, [pc, #68]	; (80042ac <HAL_ADC_ConfigChannel+0x290>)
 8004266:	fba2 2303 	umull	r2, r3, r2, r3
 800426a:	0c9a      	lsrs	r2, r3, #18
 800426c:	4613      	mov	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004276:	e002      	b.n	800427e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	3b01      	subs	r3, #1
 800427c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1f9      	bne.n	8004278 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	10000012 	.word	0x10000012
 80042a0:	40012000 	.word	0x40012000
 80042a4:	40012300 	.word	0x40012300
 80042a8:	20000004 	.word	0x20000004
 80042ac:	431bde83 	.word	0x431bde83

080042b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80042b8:	4b78      	ldr	r3, [pc, #480]	; (800449c <ADC_Init+0x1ec>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	4a77      	ldr	r2, [pc, #476]	; (800449c <ADC_Init+0x1ec>)
 80042be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80042c2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80042c4:	4b75      	ldr	r3, [pc, #468]	; (800449c <ADC_Init+0x1ec>)
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	4973      	ldr	r1, [pc, #460]	; (800449c <ADC_Init+0x1ec>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6859      	ldr	r1, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	021a      	lsls	r2, r3, #8
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004304:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6859      	ldr	r1, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004326:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6899      	ldr	r1, [r3, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	4a58      	ldr	r2, [pc, #352]	; (80044a0 <ADC_Init+0x1f0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d022      	beq.n	800438a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689a      	ldr	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004352:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6899      	ldr	r1, [r3, #8]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004374:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6899      	ldr	r1, [r3, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	609a      	str	r2, [r3, #8]
 8004388:	e00f      	b.n	80043aa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004398:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0202 	bic.w	r2, r2, #2
 80043b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6899      	ldr	r1, [r3, #8]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	005a      	lsls	r2, r3, #1
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d01b      	beq.n	8004410 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80043f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6859      	ldr	r1, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	3b01      	subs	r3, #1
 8004404:	035a      	lsls	r2, r3, #13
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	605a      	str	r2, [r3, #4]
 800440e:	e007      	b.n	8004420 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800441e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800442e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	3b01      	subs	r3, #1
 800443c:	051a      	lsls	r2, r3, #20
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004454:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6899      	ldr	r1, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004462:	025a      	lsls	r2, r3, #9
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800447a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6899      	ldr	r1, [r3, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	029a      	lsls	r2, r3, #10
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	609a      	str	r2, [r3, #8]
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	40012300 	.word	0x40012300
 80044a0:	0f000001 	.word	0x0f000001

080044a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044b4:	4b0b      	ldr	r3, [pc, #44]	; (80044e4 <__NVIC_SetPriorityGrouping+0x40>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044c0:	4013      	ands	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80044cc:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <__NVIC_SetPriorityGrouping+0x44>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044d2:	4a04      	ldr	r2, [pc, #16]	; (80044e4 <__NVIC_SetPriorityGrouping+0x40>)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	60d3      	str	r3, [r2, #12]
}
 80044d8:	bf00      	nop
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	e000ed00 	.word	0xe000ed00
 80044e8:	05fa0000 	.word	0x05fa0000

080044ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044f0:	4b04      	ldr	r3, [pc, #16]	; (8004504 <__NVIC_GetPriorityGrouping+0x18>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	0a1b      	lsrs	r3, r3, #8
 80044f6:	f003 0307 	and.w	r3, r3, #7
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	e000ed00 	.word	0xe000ed00

08004508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	4603      	mov	r3, r0
 8004510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004516:	2b00      	cmp	r3, #0
 8004518:	db0b      	blt.n	8004532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	f003 021f 	and.w	r2, r3, #31
 8004520:	4907      	ldr	r1, [pc, #28]	; (8004540 <__NVIC_EnableIRQ+0x38>)
 8004522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	2001      	movs	r0, #1
 800452a:	fa00 f202 	lsl.w	r2, r0, r2
 800452e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	e000e100 	.word	0xe000e100

08004544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	6039      	str	r1, [r7, #0]
 800454e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004554:	2b00      	cmp	r3, #0
 8004556:	db0a      	blt.n	800456e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	b2da      	uxtb	r2, r3
 800455c:	490c      	ldr	r1, [pc, #48]	; (8004590 <__NVIC_SetPriority+0x4c>)
 800455e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004562:	0112      	lsls	r2, r2, #4
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	440b      	add	r3, r1
 8004568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800456c:	e00a      	b.n	8004584 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	b2da      	uxtb	r2, r3
 8004572:	4908      	ldr	r1, [pc, #32]	; (8004594 <__NVIC_SetPriority+0x50>)
 8004574:	79fb      	ldrb	r3, [r7, #7]
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	3b04      	subs	r3, #4
 800457c:	0112      	lsls	r2, r2, #4
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	440b      	add	r3, r1
 8004582:	761a      	strb	r2, [r3, #24]
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	e000e100 	.word	0xe000e100
 8004594:	e000ed00 	.word	0xe000ed00

08004598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004598:	b480      	push	{r7}
 800459a:	b089      	sub	sp, #36	; 0x24
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	f1c3 0307 	rsb	r3, r3, #7
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	bf28      	it	cs
 80045b6:	2304      	movcs	r3, #4
 80045b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	3304      	adds	r3, #4
 80045be:	2b06      	cmp	r3, #6
 80045c0:	d902      	bls.n	80045c8 <NVIC_EncodePriority+0x30>
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3b03      	subs	r3, #3
 80045c6:	e000      	b.n	80045ca <NVIC_EncodePriority+0x32>
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045cc:	f04f 32ff 	mov.w	r2, #4294967295
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	fa02 f303 	lsl.w	r3, r2, r3
 80045d6:	43da      	mvns	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	401a      	ands	r2, r3
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045e0:	f04f 31ff 	mov.w	r1, #4294967295
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ea:	43d9      	mvns	r1, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045f0:	4313      	orrs	r3, r2
         );
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3724      	adds	r7, #36	; 0x24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff ff4c 	bl	80044a4 <__NVIC_SetPriorityGrouping>
}
 800460c:	bf00      	nop
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004622:	2300      	movs	r3, #0
 8004624:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004626:	f7ff ff61 	bl	80044ec <__NVIC_GetPriorityGrouping>
 800462a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	68b9      	ldr	r1, [r7, #8]
 8004630:	6978      	ldr	r0, [r7, #20]
 8004632:	f7ff ffb1 	bl	8004598 <NVIC_EncodePriority>
 8004636:	4602      	mov	r2, r0
 8004638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800463c:	4611      	mov	r1, r2
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff ff80 	bl	8004544 <__NVIC_SetPriority>
}
 8004644:	bf00      	nop
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	4603      	mov	r3, r0
 8004654:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff ff54 	bl	8004508 <__NVIC_EnableIRQ>
}
 8004660:	bf00      	nop
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e054      	b.n	8004724 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	7f5b      	ldrb	r3, [r3, #29]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d105      	bne.n	8004690 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7fe f8fe 	bl	800288c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	791b      	ldrb	r3, [r3, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10c      	bne.n	80046b8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a22      	ldr	r2, [pc, #136]	; (800472c <HAL_CRC_Init+0xc4>)
 80046a4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0218 	bic.w	r2, r2, #24
 80046b4:	609a      	str	r2, [r3, #8]
 80046b6:	e00c      	b.n	80046d2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6899      	ldr	r1, [r3, #8]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	461a      	mov	r2, r3
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 f834 	bl	8004730 <HAL_CRCEx_Polynomial_Set>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e028      	b.n	8004724 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	795b      	ldrb	r3, [r3, #5]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d105      	bne.n	80046e6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f04f 32ff 	mov.w	r2, #4294967295
 80046e2:	611a      	str	r2, [r3, #16]
 80046e4:	e004      	b.n	80046f0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6912      	ldr	r2, [r2, #16]
 80046ee:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695a      	ldr	r2, [r3, #20]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699a      	ldr	r2, [r3, #24]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	04c11db7 	.word	0x04c11db7

08004730 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004740:	231f      	movs	r3, #31
 8004742:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004744:	bf00      	nop
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1e5a      	subs	r2, r3, #1
 800474a:	613a      	str	r2, [r7, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d009      	beq.n	8004764 <HAL_CRCEx_Polynomial_Set+0x34>
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f003 031f 	and.w	r3, r3, #31
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	fa22 f303 	lsr.w	r3, r2, r3
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b18      	cmp	r3, #24
 8004768:	d846      	bhi.n	80047f8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800476a:	a201      	add	r2, pc, #4	; (adr r2, 8004770 <HAL_CRCEx_Polynomial_Set+0x40>)
 800476c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004770:	080047ff 	.word	0x080047ff
 8004774:	080047f9 	.word	0x080047f9
 8004778:	080047f9 	.word	0x080047f9
 800477c:	080047f9 	.word	0x080047f9
 8004780:	080047f9 	.word	0x080047f9
 8004784:	080047f9 	.word	0x080047f9
 8004788:	080047f9 	.word	0x080047f9
 800478c:	080047f9 	.word	0x080047f9
 8004790:	080047ed 	.word	0x080047ed
 8004794:	080047f9 	.word	0x080047f9
 8004798:	080047f9 	.word	0x080047f9
 800479c:	080047f9 	.word	0x080047f9
 80047a0:	080047f9 	.word	0x080047f9
 80047a4:	080047f9 	.word	0x080047f9
 80047a8:	080047f9 	.word	0x080047f9
 80047ac:	080047f9 	.word	0x080047f9
 80047b0:	080047e1 	.word	0x080047e1
 80047b4:	080047f9 	.word	0x080047f9
 80047b8:	080047f9 	.word	0x080047f9
 80047bc:	080047f9 	.word	0x080047f9
 80047c0:	080047f9 	.word	0x080047f9
 80047c4:	080047f9 	.word	0x080047f9
 80047c8:	080047f9 	.word	0x080047f9
 80047cc:	080047f9 	.word	0x080047f9
 80047d0:	080047d5 	.word	0x080047d5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	2b06      	cmp	r3, #6
 80047d8:	d913      	bls.n	8004802 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80047de:	e010      	b.n	8004802 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	2b07      	cmp	r3, #7
 80047e4:	d90f      	bls.n	8004806 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80047ea:	e00c      	b.n	8004806 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	2b0f      	cmp	r3, #15
 80047f0:	d90b      	bls.n	800480a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80047f6:	e008      	b.n	800480a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	75fb      	strb	r3, [r7, #23]
      break;
 80047fc:	e006      	b.n	800480c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80047fe:	bf00      	nop
 8004800:	e004      	b.n	800480c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004802:	bf00      	nop
 8004804:	e002      	b.n	800480c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004806:	bf00      	nop
 8004808:	e000      	b.n	800480c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800480a:	bf00      	nop
  }
  if (status == HAL_OK)
 800480c:	7dfb      	ldrb	r3, [r7, #23]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10d      	bne.n	800482e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f023 0118 	bic.w	r1, r3, #24
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	430a      	orrs	r2, r1
 800482c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800482e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004830:	4618      	mov	r0, r3
 8004832:	371c      	adds	r7, #28
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e069      	b.n	8004922 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d102      	bne.n	8004860 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7fe f836 	bl	80028cc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6819      	ldr	r1, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	4b2a      	ldr	r3, [pc, #168]	; (800492c <HAL_DCMI_Init+0xf0>)
 8004882:	400b      	ands	r3, r1
 8004884:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6819      	ldr	r1, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800489a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80048a6:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80048b2:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80048be:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c4:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80048ca:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b10      	cmp	r3, #16
 80048da:	d112      	bne.n	8004902 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	7f1b      	ldrb	r3, [r3, #28]
 80048e0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	7f5b      	ldrb	r3, [r3, #29]
 80048e6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80048e8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	7f9b      	ldrb	r3, [r3, #30]
 80048ee:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80048f0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	7fdb      	ldrb	r3, [r3, #31]
 80048f8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80048fe:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004900:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 021e 	orr.w	r2, r2, #30
 8004910:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	ffe0f007 	.word	0xffe0f007

08004930 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004946:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_DMA_Start_IT+0x26>
 8004952:	2302      	movs	r3, #2
 8004954:	e048      	b.n	80049e8 <HAL_DMA_Start_IT+0xb8>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b01      	cmp	r3, #1
 8004968:	d137      	bne.n	80049da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2202      	movs	r2, #2
 800496e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	68b9      	ldr	r1, [r7, #8]
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 f842 	bl	8004a08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004988:	223f      	movs	r2, #63	; 0x3f
 800498a:	409a      	lsls	r2, r3
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f042 0216 	orr.w	r2, r2, #22
 800499e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695a      	ldr	r2, [r3, #20]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049ae:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0208 	orr.w	r2, r2, #8
 80049c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0201 	orr.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	e005      	b.n	80049e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80049e2:	2302      	movs	r3, #2
 80049e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80049e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	2b40      	cmp	r3, #64	; 0x40
 8004a34:	d108      	bne.n	8004a48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a46:	e007      	b.n	8004a58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	60da      	str	r2, [r3, #12]
}
 8004a58:	bf00      	nop
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e039      	b.n	8004aea <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7fd ffdc 	bl	8002a48 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab4:	f023 0107 	bic.w	r1, r3, #7
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aca:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <HAL_DMA2D_Init+0x90>)
 8004acc:	4013      	ands	r3, r2
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	68d1      	ldr	r1, [r2, #12]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6812      	ldr	r2, [r2, #0]
 8004ad6:	430b      	orrs	r3, r1
 8004ad8:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	ffffc000 	.word	0xffffc000

08004af8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d026      	beq.n	8004b68 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d021      	beq.n	8004b68 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b32:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b38:	f043 0201 	orr.w	r2, r3, #1
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2201      	movs	r2, #1
 8004b46:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2204      	movs	r2, #4
 8004b4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d026      	beq.n	8004bc0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d021      	beq.n	8004bc0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b8a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2220      	movs	r2, #32
 8004b92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b98:	f043 0202 	orr.w	r2, r3, #2
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2204      	movs	r2, #4
 8004ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d026      	beq.n	8004c18 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d021      	beq.n	8004c18 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004be2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2208      	movs	r2, #8
 8004bea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf0:	f043 0204 	orr.w	r2, r3, #4
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2204      	movs	r2, #4
 8004bfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d013      	beq.n	8004c4a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00e      	beq.n	8004c4a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c3a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2204      	movs	r2, #4
 8004c42:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f853 	bl	8004cf0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d024      	beq.n	8004c9e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d01f      	beq.n	8004c9e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c6c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2202      	movs	r2, #2
 8004c74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d003      	beq.n	8004c9e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f003 0310 	and.w	r3, r3, #16
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01f      	beq.n	8004ce8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d01a      	beq.n	8004ce8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cc0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2210      	movs	r2, #16
 8004cc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f80e 	bl	8004d04 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004ce8:	bf00      	nop
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d101      	bne.n	8004d38 <HAL_DMA2D_ConfigLayer+0x20>
 8004d34:	2302      	movs	r3, #2
 8004d36:	e079      	b.n	8004e2c <HAL_DMA2D_ConfigLayer+0x114>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	3318      	adds	r3, #24
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	4413      	add	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	041b      	lsls	r3, r3, #16
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004d62:	4b35      	ldr	r3, [pc, #212]	; (8004e38 <HAL_DMA2D_ConfigLayer+0x120>)
 8004d64:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2b0a      	cmp	r3, #10
 8004d6c:	d003      	beq.n	8004d76 <HAL_DMA2D_ConfigLayer+0x5e>
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b09      	cmp	r3, #9
 8004d74:	d107      	bne.n	8004d86 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	e005      	b.n	8004d92 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	061b      	lsls	r3, r3, #24
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d120      	bne.n	8004dda <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	43db      	mvns	r3, r3
 8004da2:	ea02 0103 	and.w	r1, r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	6812      	ldr	r2, [r2, #0]
 8004db8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b0a      	cmp	r3, #10
 8004dc0:	d003      	beq.n	8004dca <HAL_DMA2D_ConfigLayer+0xb2>
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b09      	cmp	r3, #9
 8004dc8:	d127      	bne.n	8004e1a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004dd6:	629a      	str	r2, [r3, #40]	; 0x28
 8004dd8:	e01f      	b.n	8004e1a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69da      	ldr	r2, [r3, #28]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	43db      	mvns	r3, r3
 8004de4:	ea02 0103 	and.w	r1, r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	6812      	ldr	r2, [r2, #0]
 8004dfa:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b0a      	cmp	r3, #10
 8004e02:	d003      	beq.n	8004e0c <HAL_DMA2D_ConfigLayer+0xf4>
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2b09      	cmp	r3, #9
 8004e0a:	d106      	bne.n	8004e1a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004e18:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	371c      	adds	r7, #28
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	ff03000f 	.word	0xff03000f

08004e3c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b088      	sub	sp, #32
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8004e44:	2300      	movs	r3, #0
 8004e46:	61fb      	str	r3, [r7, #28]
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8004e4c:	4ba9      	ldr	r3, [pc, #676]	; (80050f4 <HAL_ETH_Init+0x2b8>)
 8004e4e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8004e50:	2300      	movs	r3, #0
 8004e52:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004e54:	2300      	movs	r3, #0
 8004e56:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e183      	b.n	800516a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d106      	bne.n	8004e7c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fb fc60 	bl	800073c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e7c:	4b9e      	ldr	r3, [pc, #632]	; (80050f8 <HAL_ETH_Init+0x2bc>)
 8004e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e80:	4a9d      	ldr	r2, [pc, #628]	; (80050f8 <HAL_ETH_Init+0x2bc>)
 8004e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e86:	6453      	str	r3, [r2, #68]	; 0x44
 8004e88:	4b9b      	ldr	r3, [pc, #620]	; (80050f8 <HAL_ETH_Init+0x2bc>)
 8004e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e90:	60bb      	str	r3, [r7, #8]
 8004e92:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004e94:	4b99      	ldr	r3, [pc, #612]	; (80050fc <HAL_ETH_Init+0x2c0>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	4a98      	ldr	r2, [pc, #608]	; (80050fc <HAL_ETH_Init+0x2c0>)
 8004e9a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e9e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004ea0:	4b96      	ldr	r3, [pc, #600]	; (80050fc <HAL_ETH_Init+0x2c0>)
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	4994      	ldr	r1, [pc, #592]	; (80050fc <HAL_ETH_Init+0x2c0>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f042 0201 	orr.w	r2, r2, #1
 8004ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ec4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004ec6:	f7ff f837 	bl	8003f38 <HAL_GetTick>
 8004eca:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004ecc:	e011      	b.n	8004ef2 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8004ece:	f7ff f833 	bl	8003f38 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004edc:	d909      	bls.n	8004ef2 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2203      	movs	r2, #3
 8004ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e13b      	b.n	800516a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0301 	and.w	r3, r3, #1
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e4      	bne.n	8004ece <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	f023 031c 	bic.w	r3, r3, #28
 8004f12:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004f14:	f004 f846 	bl	8008fa4 <HAL_RCC_GetHCLKFreq>
 8004f18:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	4a78      	ldr	r2, [pc, #480]	; (8005100 <HAL_ETH_Init+0x2c4>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d908      	bls.n	8004f34 <HAL_ETH_Init+0xf8>
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	4a77      	ldr	r2, [pc, #476]	; (8005104 <HAL_ETH_Init+0x2c8>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d804      	bhi.n	8004f34 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	f043 0308 	orr.w	r3, r3, #8
 8004f30:	61fb      	str	r3, [r7, #28]
 8004f32:	e027      	b.n	8004f84 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	4a73      	ldr	r2, [pc, #460]	; (8005104 <HAL_ETH_Init+0x2c8>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d908      	bls.n	8004f4e <HAL_ETH_Init+0x112>
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	4a72      	ldr	r2, [pc, #456]	; (8005108 <HAL_ETH_Init+0x2cc>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d804      	bhi.n	8004f4e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	f043 030c 	orr.w	r3, r3, #12
 8004f4a:	61fb      	str	r3, [r7, #28]
 8004f4c:	e01a      	b.n	8004f84 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	4a6d      	ldr	r2, [pc, #436]	; (8005108 <HAL_ETH_Init+0x2cc>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d903      	bls.n	8004f5e <HAL_ETH_Init+0x122>
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	4a6c      	ldr	r2, [pc, #432]	; (800510c <HAL_ETH_Init+0x2d0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d911      	bls.n	8004f82 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	4a6a      	ldr	r2, [pc, #424]	; (800510c <HAL_ETH_Init+0x2d0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d908      	bls.n	8004f78 <HAL_ETH_Init+0x13c>
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	4a69      	ldr	r2, [pc, #420]	; (8005110 <HAL_ETH_Init+0x2d4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d804      	bhi.n	8004f78 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	f043 0304 	orr.w	r3, r3, #4
 8004f74:	61fb      	str	r3, [r7, #28]
 8004f76:	e005      	b.n	8004f84 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	f043 0310 	orr.w	r3, r3, #16
 8004f7e:	61fb      	str	r3, [r7, #28]
 8004f80:	e000      	b.n	8004f84 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004f82:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	69fa      	ldr	r2, [r7, #28]
 8004f8a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004f8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004f90:	2100      	movs	r1, #0
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fc19 	bl	80057ca <HAL_ETH_WritePHYRegister>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00b      	beq.n	8004fb6 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8004fa2:	6939      	ldr	r1, [r7, #16]
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fca5 	bl	80058f4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e0d9      	b.n	800516a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8004fb6:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004fba:	f7fe ffc9 	bl	8003f50 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 80a6 	beq.w	8005114 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fc8:	f7fe ffb6 	bl	8003f38 <HAL_GetTick>
 8004fcc:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004fce:	f107 030c 	add.w	r3, r7, #12
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fb8f 	bl	80056fa <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004fdc:	f7fe ffac 	bl	8003f38 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d90f      	bls.n	800500e <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004ff2:	6939      	ldr	r1, [r7, #16]
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fc7d 	bl	80058f4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e0ad      	b.n	800516a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0da      	beq.n	8004fce <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8005018:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800501c:	2100      	movs	r1, #0
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fbd3 	bl	80057ca <HAL_ETH_WritePHYRegister>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00b      	beq.n	8005042 <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800502e:	6939      	ldr	r1, [r7, #16]
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 fc5f 	bl	80058f4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800503e:	2301      	movs	r3, #1
 8005040:	e093      	b.n	800516a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8005042:	f7fe ff79 	bl	8003f38 <HAL_GetTick>
 8005046:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8005048:	f107 030c 	add.w	r3, r7, #12
 800504c:	461a      	mov	r2, r3
 800504e:	2101      	movs	r1, #1
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fb52 	bl	80056fa <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8005056:	f7fe ff6f 	bl	8003f38 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	f241 3288 	movw	r2, #5000	; 0x1388
 8005064:	4293      	cmp	r3, r2
 8005066:	d90f      	bls.n	8005088 <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800506c:	6939      	ldr	r1, [r7, #16]
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fc40 	bl	80058f4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e070      	b.n	800516a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f003 0320 	and.w	r3, r3, #32
 800508e:	2b00      	cmp	r3, #0
 8005090:	d0da      	beq.n	8005048 <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8005092:	f107 030c 	add.w	r3, r7, #12
 8005096:	461a      	mov	r2, r3
 8005098:	211f      	movs	r1, #31
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fb2d 	bl	80056fa <HAL_ETH_ReadPHYRegister>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00b      	beq.n	80050be <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80050aa:	6939      	ldr	r1, [r7, #16]
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fc21 	bl	80058f4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80050ba:	2301      	movs	r3, #1
 80050bc:	e055      	b.n	800516a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f003 0310 	and.w	r3, r3, #16
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d004      	beq.n	80050d2 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050ce:	60da      	str	r2, [r3, #12]
 80050d0:	e002      	b.n	80050d8 <HAL_ETH_Init+0x29c>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f003 0304 	and.w	r3, r3, #4
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <HAL_ETH_Init+0x2ae>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	609a      	str	r2, [r3, #8]
 80050e8:	e036      	b.n	8005158 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80050f0:	609a      	str	r2, [r3, #8]
 80050f2:	e031      	b.n	8005158 <HAL_ETH_Init+0x31c>
 80050f4:	03938700 	.word	0x03938700
 80050f8:	40023800 	.word	0x40023800
 80050fc:	40013800 	.word	0x40013800
 8005100:	01312cff 	.word	0x01312cff
 8005104:	02160ebf 	.word	0x02160ebf
 8005108:	039386ff 	.word	0x039386ff
 800510c:	05f5e0ff 	.word	0x05f5e0ff
 8005110:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	08db      	lsrs	r3, r3, #3
 800511a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	085b      	lsrs	r3, r3, #1
 8005122:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8005124:	4313      	orrs	r3, r2
 8005126:	b29b      	uxth	r3, r3
 8005128:	461a      	mov	r2, r3
 800512a:	2100      	movs	r1, #0
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 fb4c 	bl	80057ca <HAL_ETH_WritePHYRegister>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00b      	beq.n	8005150 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800513c:	6939      	ldr	r1, [r7, #16]
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fbd8 	bl	80058f4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e00c      	b.n	800516a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8005150:	f640 70ff 	movw	r0, #4095	; 0xfff
 8005154:	f7fe fefc 	bl	8003f50 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8005158:	6939      	ldr	r1, [r7, #16]
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fbca 	bl	80058f4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3720      	adds	r7, #32
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop

08005174 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8005174:	b480      	push	{r7}
 8005176:	b087      	sub	sp, #28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800518c:	2b01      	cmp	r3, #1
 800518e:	d101      	bne.n	8005194 <HAL_ETH_DMATxDescListInit+0x20>
 8005190:	2302      	movs	r3, #2
 8005192:	e052      	b.n	800523a <HAL_ETH_DMATxDescListInit+0xc6>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80051aa:	2300      	movs	r3, #0
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	e030      	b.n	8005212 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	015b      	lsls	r3, r3, #5
 80051b4:	68ba      	ldr	r2, [r7, #8]
 80051b6:	4413      	add	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80051c0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80051c8:	fb02 f303 	mul.w	r3, r2, r3
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	4413      	add	r3, r2
 80051d0:	461a      	mov	r2, r3
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d105      	bne.n	80051ea <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	3b01      	subs	r3, #1
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d208      	bcs.n	8005206 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	3301      	adds	r3, #1
 80051f8:	015b      	lsls	r3, r3, #5
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	4413      	add	r3, r2
 80051fe:	461a      	mov	r2, r3
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	60da      	str	r2, [r3, #12]
 8005204:	e002      	b.n	800520c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	3301      	adds	r3, #1
 8005210:	617b      	str	r3, [r7, #20]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d3ca      	bcc.n	80051b0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6819      	ldr	r1, [r3, #0]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	f241 0310 	movw	r3, #4112	; 0x1010
 8005224:	440b      	add	r3, r1
 8005226:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8005246:	b480      	push	{r7}
 8005248:	b087      	sub	sp, #28
 800524a:	af00      	add	r7, sp, #0
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	607a      	str	r2, [r7, #4]
 8005252:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800525e:	2b01      	cmp	r3, #1
 8005260:	d101      	bne.n	8005266 <HAL_ETH_DMARxDescListInit+0x20>
 8005262:	2302      	movs	r3, #2
 8005264:	e056      	b.n	8005314 <HAL_ETH_DMARxDescListInit+0xce>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2202      	movs	r2, #2
 8005272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800527c:	2300      	movs	r3, #0
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	e034      	b.n	80052ec <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	015b      	lsls	r3, r3, #5
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	4413      	add	r3, r2
 800528a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005292:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800529a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80052a2:	fb02 f303 	mul.w	r3, r2, r3
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	4413      	add	r3, r2
 80052aa:	461a      	mov	r2, r3
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d105      	bne.n	80052c4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	3b01      	subs	r3, #1
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d208      	bcs.n	80052e0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	3301      	adds	r3, #1
 80052d2:	015b      	lsls	r3, r3, #5
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	4413      	add	r3, r2
 80052d8:	461a      	mov	r2, r3
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	60da      	str	r2, [r3, #12]
 80052de:	e002      	b.n	80052e6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	3301      	adds	r3, #1
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d3c6      	bcc.n	8005282 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6819      	ldr	r1, [r3, #0]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	f241 030c 	movw	r3, #4108	; 0x100c
 80052fe:	440b      	add	r3, r1
 8005300:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	371c      	adds	r7, #28
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800532a:	2300      	movs	r3, #0
 800532c:	617b      	str	r3, [r7, #20]
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
 8005332:	2300      	movs	r3, #0
 8005334:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800533c:	2b01      	cmp	r3, #1
 800533e:	d101      	bne.n	8005344 <HAL_ETH_TransmitFrame+0x24>
 8005340:	2302      	movs	r3, #2
 8005342:	e0cd      	b.n	80054e0 <HAL_ETH_TransmitFrame+0x1c0>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d109      	bne.n	800536e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800536a:	2301      	movs	r3, #1
 800536c:	e0b8      	b.n	80054e0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	da09      	bge.n	800538c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2212      	movs	r2, #18
 800537c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e0a9      	b.n	80054e0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005392:	4293      	cmp	r3, r2
 8005394:	d915      	bls.n	80053c2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	4a54      	ldr	r2, [pc, #336]	; (80054ec <HAL_ETH_TransmitFrame+0x1cc>)
 800539a:	fba2 2303 	umull	r2, r3, r2, r3
 800539e:	0a9b      	lsrs	r3, r3, #10
 80053a0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	4b51      	ldr	r3, [pc, #324]	; (80054ec <HAL_ETH_TransmitFrame+0x1cc>)
 80053a6:	fba3 1302 	umull	r1, r3, r3, r2
 80053aa:	0a9b      	lsrs	r3, r3, #10
 80053ac:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80053b0:	fb01 f303 	mul.w	r3, r1, r3
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d005      	beq.n	80053c6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	3301      	adds	r3, #1
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	e001      	b.n	80053c6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80053c2:	2301      	movs	r3, #1
 80053c4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d11c      	bne.n	8005406 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80053da:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e0:	683a      	ldr	r2, [r7, #0]
 80053e2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80053e6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80053f6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	461a      	mov	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	62da      	str	r2, [r3, #44]	; 0x2c
 8005404:	e04b      	b.n	800549e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8005406:	2300      	movs	r3, #0
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	e044      	b.n	8005496 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005416:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800541a:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d107      	bne.n	8005432 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005430:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005436:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800543a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	3b01      	subs	r3, #1
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	429a      	cmp	r2, r3
 8005444:	d116      	bne.n	8005474 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005450:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005454:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	4a25      	ldr	r2, [pc, #148]	; (80054f0 <HAL_ETH_TransmitFrame+0x1d0>)
 800545a:	fb02 f203 	mul.w	r2, r2, r3
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	4413      	add	r3, r2
 8005462:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005466:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8005472:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005482:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	461a      	mov	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	3301      	adds	r3, #1
 8005494:	613b      	str	r3, [r7, #16]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	429a      	cmp	r2, r3
 800549c:	d3b6      	bcc.n	800540c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	f241 0314 	movw	r3, #4116	; 0x1014
 80054a6:	4413      	add	r3, r2
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0304 	and.w	r3, r3, #4
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00d      	beq.n	80054ce <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	f241 0314 	movw	r3, #4116	; 0x1014
 80054ba:	4413      	add	r3, r2
 80054bc:	2204      	movs	r2, #4
 80054be:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	f241 0304 	movw	r3, #4100	; 0x1004
 80054c8:	4413      	add	r3, r2
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	371c      	adds	r7, #28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	ac02b00b 	.word	0xac02b00b
 80054f0:	fffffa0c 	.word	0xfffffa0c

080054f4 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 80054fc:	2300      	movs	r3, #0
 80054fe:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005506:	2b01      	cmp	r3, #1
 8005508:	d101      	bne.n	800550e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800550a:	2302      	movs	r3, #2
 800550c:	e074      	b.n	80055f8 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2202      	movs	r2, #2
 800551a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800551e:	e05a      	b.n	80055d6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	3301      	adds	r3, #1
 8005524:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005534:	d10d      	bne.n	8005552 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	461a      	mov	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	629a      	str	r2, [r3, #40]	; 0x28
 8005550:	e041      	b.n	80055d6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800555c:	2b00      	cmp	r3, #0
 800555e:	d10b      	bne.n	8005578 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005564:	1c5a      	adds	r2, r3, #1
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	461a      	mov	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	629a      	str	r2, [r3, #40]	; 0x28
 8005576:	e02e      	b.n	80055d6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005584:	1c5a      	adds	r2, r3, #1
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558e:	2b01      	cmp	r3, #1
 8005590:	d103      	bne.n	800559a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	0c1b      	lsrs	r3, r3, #16
 80055a2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80055a6:	1f1a      	subs	r2, r3, #4
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	461a      	mov	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80055d2:	2300      	movs	r3, #0
 80055d4:	e010      	b.n	80055f8 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	db02      	blt.n	80055e6 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	d99c      	bls.n	8005520 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	f241 0314 	movw	r3, #4116	; 0x1014
 8005614:	4413      	add	r3, r2
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561c:	2b40      	cmp	r3, #64	; 0x40
 800561e:	d112      	bne.n	8005646 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7fb f92d 	bl	8000880 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	f241 0314 	movw	r3, #4116	; 0x1014
 800562e:	4413      	add	r3, r2
 8005630:	2240      	movs	r2, #64	; 0x40
 8005632:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005644:	e01b      	b.n	800567e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	f241 0314 	movw	r3, #4116	; 0x1014
 800564e:	4413      	add	r3, r2
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b01      	cmp	r3, #1
 8005658:	d111      	bne.n	800567e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f839 	bl	80056d2 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	f241 0314 	movw	r3, #4116	; 0x1014
 8005668:	4413      	add	r3, r2
 800566a:	2201      	movs	r2, #1
 800566c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	f241 0314 	movw	r3, #4116	; 0x1014
 8005686:	4413      	add	r3, r2
 8005688:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800568c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	f241 0314 	movw	r3, #4116	; 0x1014
 8005696:	4413      	add	r3, r2
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800569e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a2:	d112      	bne.n	80056ca <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f81e 	bl	80056e6 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	f241 0314 	movw	r3, #4116	; 0x1014
 80056b2:	4413      	add	r3, r2
 80056b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80056b8:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80056ca:	bf00      	nop
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b086      	sub	sp, #24
 80056fe:	af00      	add	r7, sp, #0
 8005700:	60f8      	str	r0, [r7, #12]
 8005702:	460b      	mov	r3, r1
 8005704:	607a      	str	r2, [r7, #4]
 8005706:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8005708:	2300      	movs	r3, #0
 800570a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800570c:	2300      	movs	r3, #0
 800570e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b82      	cmp	r3, #130	; 0x82
 800571a:	d101      	bne.n	8005720 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800571c:	2302      	movs	r3, #2
 800571e:	e050      	b.n	80057c2 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2282      	movs	r2, #130	; 0x82
 8005724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f003 031c 	and.w	r3, r3, #28
 8005736:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8a1b      	ldrh	r3, [r3, #16]
 800573c:	02db      	lsls	r3, r3, #11
 800573e:	b29b      	uxth	r3, r3
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	4313      	orrs	r3, r2
 8005744:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8005746:	897b      	ldrh	r3, [r7, #10]
 8005748:	019b      	lsls	r3, r3, #6
 800574a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	4313      	orrs	r3, r2
 8005752:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f023 0302 	bic.w	r3, r3, #2
 800575a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800576c:	f7fe fbe4 	bl	8003f38 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005772:	e015      	b.n	80057a0 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8005774:	f7fe fbe0 	bl	8003f38 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005782:	d309      	bcc.n	8005798 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e014      	b.n	80057c2 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1e4      	bne.n	8005774 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	461a      	mov	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b086      	sub	sp, #24
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	460b      	mov	r3, r1
 80057d4:	607a      	str	r2, [r7, #4]
 80057d6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80057d8:	2300      	movs	r3, #0
 80057da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80057dc:	2300      	movs	r3, #0
 80057de:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b42      	cmp	r3, #66	; 0x42
 80057ea:	d101      	bne.n	80057f0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80057ec:	2302      	movs	r3, #2
 80057ee:	e04e      	b.n	800588e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2242      	movs	r2, #66	; 0x42
 80057f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f003 031c 	and.w	r3, r3, #28
 8005806:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8a1b      	ldrh	r3, [r3, #16]
 800580c:	02db      	lsls	r3, r3, #11
 800580e:	b29b      	uxth	r3, r3
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	4313      	orrs	r3, r2
 8005814:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8005816:	897b      	ldrh	r3, [r7, #10]
 8005818:	019b      	lsls	r3, r3, #6
 800581a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	4313      	orrs	r3, r2
 8005822:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f043 0302 	orr.w	r3, r3, #2
 800582a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f043 0301 	orr.w	r3, r3, #1
 8005832:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	b29a      	uxth	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005846:	f7fe fb77 	bl	8003f38 <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800584c:	e015      	b.n	800587a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800584e:	f7fe fb73 	bl	8003f38 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800585c:	d309      	bcc.n	8005872 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e00d      	b.n	800588e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1e4      	bne.n	800584e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3718      	adds	r7, #24
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8005896:	b580      	push	{r7, lr}
 8005898:	b082      	sub	sp, #8
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_ETH_Start+0x16>
 80058a8:	2302      	movs	r3, #2
 80058aa:	e01f      	b.n	80058ec <HAL_ETH_Start+0x56>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 fa1b 	bl	8005cf8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fa35 	bl	8005d32 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fa7f 	bl	8005dcc <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fa4c 	bl	8005d6c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fa61 	bl	8005d9c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3708      	adds	r7, #8
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b0b0      	sub	sp, #192	; 0xc0
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80058fe:	2300      	movs	r3, #0
 8005900:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d007      	beq.n	800591a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005910:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005918:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800591a:	2300      	movs	r3, #0
 800591c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800591e:	2300      	movs	r3, #0
 8005920:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8005922:	2300      	movs	r3, #0
 8005924:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8005926:	2300      	movs	r3, #0
 8005928:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800592a:	2300      	movs	r3, #0
 800592c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800592e:	2300      	movs	r3, #0
 8005930:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d103      	bne.n	8005942 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800593a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800593e:	663b      	str	r3, [r7, #96]	; 0x60
 8005940:	e001      	b.n	8005946 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8005942:	2300      	movs	r3, #0
 8005944:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8005946:	f44f 7300 	mov.w	r3, #512	; 0x200
 800594a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800594c:	2300      	movs	r3, #0
 800594e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005950:	2300      	movs	r3, #0
 8005952:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8005954:	2300      	movs	r3, #0
 8005956:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8005958:	2300      	movs	r3, #0
 800595a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800595c:	2300      	movs	r3, #0
 800595e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8005960:	2340      	movs	r3, #64	; 0x40
 8005962:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8005964:	2300      	movs	r3, #0
 8005966:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800596a:	2300      	movs	r3, #0
 800596c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8005970:	2300      	movs	r3, #0
 8005972:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8005976:	2300      	movs	r3, #0
 8005978:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800597c:	2300      	movs	r3, #0
 800597e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8005982:	2300      	movs	r3, #0
 8005984:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8005988:	2300      	movs	r3, #0
 800598a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800598e:	2300      	movs	r3, #0
 8005990:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8005994:	2380      	movs	r3, #128	; 0x80
 8005996:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800599a:	2300      	movs	r3, #0
 800599c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80059a0:	2300      	movs	r3, #0
 80059a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80059a6:	2300      	movs	r3, #0
 80059a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80059ac:	2300      	movs	r3, #0
 80059ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80059b2:	2300      	movs	r3, #0
 80059b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80059b8:	2300      	movs	r3, #0
 80059ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80059c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80059cc:	4bab      	ldr	r3, [pc, #684]	; (8005c7c <ETH_MACDMAConfig+0x388>)
 80059ce:	4013      	ands	r3, r2
 80059d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80059d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80059d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80059d8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80059da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80059dc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80059de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80059e0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80059e6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80059e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80059ea:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80059ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80059ee:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80059f4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80059f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80059f8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80059fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80059fc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80059fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8005a00:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8005a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8005a04:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8005a06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8005a08:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8005a0a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a1c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a28:	2001      	movs	r0, #1
 8005a2a:	f7fe fa91 	bl	8003f50 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a36:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005a38:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8005a3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005a3c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8005a3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8005a40:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8005a42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8005a46:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8005a48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8005a4c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8005a4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8005a52:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8005a54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8005a58:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8005a5c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8005a64:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005a66:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a72:	2001      	movs	r0, #1
 8005a74:	f7fe fa6c 	bl	8003f50 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005a80:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a8a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005a94:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8005aa0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005aa4:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8005aae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ab2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8005ab4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8005ab8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8005aba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8005abe:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8005ac0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8005ac4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8005ac6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8005aca:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8005acc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8005ad0:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8005ad2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005ae4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005af0:	2001      	movs	r0, #1
 8005af2:	f7fe fa2d 	bl	8003f50 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005afe:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005b00:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8005b04:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b1a:	2001      	movs	r0, #1
 8005b1c:	f7fe fa18 	bl	8003f50 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005b28:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8005b2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b32:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8005b34:	2300      	movs	r3, #0
 8005b36:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8005b38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b3c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8005b42:	2300      	movs	r3, #0
 8005b44:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8005b46:	2300      	movs	r3, #0
 8005b48:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8005b4e:	2304      	movs	r3, #4
 8005b50:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8005b52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8005b58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b5c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005b5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b62:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005b64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b68:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8005b6a:	2380      	movs	r3, #128	; 0x80
 8005b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005b72:	2300      	movs	r3, #0
 8005b74:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	f241 0318 	movw	r3, #4120	; 0x1018
 8005b7e:	4413      	add	r3, r2
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8005b86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005b8a:	4b3d      	ldr	r3, [pc, #244]	; (8005c80 <ETH_MACDMAConfig+0x38c>)
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005b92:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8005b94:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005b96:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8005b98:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8005b9a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8005b9c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8005b9e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8005ba0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8005ba2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8005ba4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8005ba6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8005baa:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8005bae:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8005bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8005bb2:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8005bb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	f241 0318 	movw	r3, #4120	; 0x1018
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005bcc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	f241 0318 	movw	r3, #4120	; 0x1018
 8005bd6:	4413      	add	r3, r2
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005bde:	2001      	movs	r0, #1
 8005be0:	f7fe f9b6 	bl	8003f50 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	f241 0318 	movw	r3, #4120	; 0x1018
 8005bec:	4413      	add	r3, r2
 8005bee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005bf2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005bf8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8005bfc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8005bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005c00:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8005c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8005c04:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8005c06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c08:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8005c0a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8005c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8005c0e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c1c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005c2c:	2001      	movs	r0, #1
 8005c2e:	f7fe f98f 	bl	8003f50 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005c3e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d10d      	bne.n	8005c64 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	f241 031c 	movw	r3, #4124	; 0x101c
 8005c50:	4413      	add	r3, r2
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6811      	ldr	r1, [r2, #0]
 8005c58:	4a0a      	ldr	r2, [pc, #40]	; (8005c84 <ETH_MACDMAConfig+0x390>)
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	f241 031c 	movw	r3, #4124	; 0x101c
 8005c60:	440b      	add	r3, r1
 8005c62:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 f80b 	bl	8005c88 <ETH_MACAddressConfig>
}
 8005c72:	bf00      	nop
 8005c74:	37c0      	adds	r7, #192	; 0xc0
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	ff20810f 	.word	0xff20810f
 8005c80:	f8de3f23 	.word	0xf8de3f23
 8005c84:	00010040 	.word	0x00010040

08005c88 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3305      	adds	r3, #5
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	021b      	lsls	r3, r3, #8
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	3204      	adds	r2, #4
 8005ca0:	7812      	ldrb	r2, [r2, #0]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	4b11      	ldr	r3, [pc, #68]	; (8005cf0 <ETH_MACAddressConfig+0x68>)
 8005caa:	4413      	add	r3, r2
 8005cac:	461a      	mov	r2, r3
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3303      	adds	r3, #3
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	061a      	lsls	r2, r3, #24
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	3302      	adds	r3, #2
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	041b      	lsls	r3, r3, #16
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	021b      	lsls	r3, r3, #8
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	7812      	ldrb	r2, [r2, #0]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	4b06      	ldr	r3, [pc, #24]	; (8005cf4 <ETH_MACAddressConfig+0x6c>)
 8005cda:	4413      	add	r3, r2
 8005cdc:	461a      	mov	r2, r3
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	6013      	str	r3, [r2, #0]
}
 8005ce2:	bf00      	nop
 8005ce4:	371c      	adds	r7, #28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40028040 	.word	0x40028040
 8005cf4:	40028044 	.word	0x40028044

08005cf8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005d00:	2300      	movs	r3, #0
 8005d02:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0208 	orr.w	r2, r2, #8
 8005d12:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005d1c:	2001      	movs	r0, #1
 8005d1e:	f7fe f917 	bl	8003f50 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	601a      	str	r2, [r3, #0]
}
 8005d2a:	bf00      	nop
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f042 0204 	orr.w	r2, r2, #4
 8005d4c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005d56:	2001      	movs	r0, #1
 8005d58:	f7fe f8fa 	bl	8003f50 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	601a      	str	r2, [r3, #0]
}
 8005d64:	bf00      	nop
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	f241 0318 	movw	r3, #4120	; 0x1018
 8005d7c:	4413      	add	r3, r2
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6811      	ldr	r1, [r2, #0]
 8005d84:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005d88:	f241 0318 	movw	r3, #4120	; 0x1018
 8005d8c:	440b      	add	r3, r1
 8005d8e:	601a      	str	r2, [r3, #0]
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	f241 0318 	movw	r3, #4120	; 0x1018
 8005dac:	4413      	add	r3, r2
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6811      	ldr	r1, [r2, #0]
 8005db4:	f043 0202 	orr.w	r2, r3, #2
 8005db8:	f241 0318 	movw	r3, #4120	; 0x1018
 8005dbc:	440b      	add	r3, r1
 8005dbe:	601a      	str	r2, [r3, #0]
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	f241 0318 	movw	r3, #4120	; 0x1018
 8005de0:	4413      	add	r3, r2
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	6811      	ldr	r1, [r2, #0]
 8005de8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005dec:	f241 0318 	movw	r3, #4120	; 0x1018
 8005df0:	440b      	add	r3, r1
 8005df2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	f241 0318 	movw	r3, #4120	; 0x1018
 8005dfc:	4413      	add	r3, r2
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005e02:	2001      	movs	r0, #1
 8005e04:	f7fe f8a4 	bl	8003f50 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6819      	ldr	r1, [r3, #0]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	f241 0318 	movw	r3, #4120	; 0x1018
 8005e12:	440b      	add	r3, r1
 8005e14:	601a      	str	r2, [r3, #0]
}
 8005e16:	bf00      	nop
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
	...

08005e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b089      	sub	sp, #36	; 0x24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005e32:	2300      	movs	r3, #0
 8005e34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005e36:	2300      	movs	r3, #0
 8005e38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	61fb      	str	r3, [r7, #28]
 8005e3e:	e175      	b.n	800612c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005e40:	2201      	movs	r2, #1
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	fa02 f303 	lsl.w	r3, r2, r3
 8005e48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	4013      	ands	r3, r2
 8005e52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	f040 8164 	bne.w	8006126 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	d00b      	beq.n	8005e7e <HAL_GPIO_Init+0x5e>
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d007      	beq.n	8005e7e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e72:	2b11      	cmp	r3, #17
 8005e74:	d003      	beq.n	8005e7e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	2b12      	cmp	r3, #18
 8005e7c:	d130      	bne.n	8005ee0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	2203      	movs	r2, #3
 8005e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8e:	43db      	mvns	r3, r3
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	4013      	ands	r3, r2
 8005e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	68da      	ldr	r2, [r3, #12]
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	091b      	lsrs	r3, r3, #4
 8005eca:	f003 0201 	and.w	r2, r3, #1
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	2203      	movs	r2, #3
 8005eec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef0:	43db      	mvns	r3, r3
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	fa02 f303 	lsl.w	r3, r2, r3
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	d003      	beq.n	8005f20 <HAL_GPIO_Init+0x100>
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	2b12      	cmp	r3, #18
 8005f1e:	d123      	bne.n	8005f68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	08da      	lsrs	r2, r3, #3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	3208      	adds	r2, #8
 8005f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	f003 0307 	and.w	r3, r3, #7
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	220f      	movs	r2, #15
 8005f38:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3c:	43db      	mvns	r3, r3
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	4013      	ands	r3, r2
 8005f42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	691a      	ldr	r2, [r3, #16]
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	f003 0307 	and.w	r3, r3, #7
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	fa02 f303 	lsl.w	r3, r2, r3
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	08da      	lsrs	r2, r3, #3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	3208      	adds	r2, #8
 8005f62:	69b9      	ldr	r1, [r7, #24]
 8005f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	2203      	movs	r2, #3
 8005f74:	fa02 f303 	lsl.w	r3, r2, r3
 8005f78:	43db      	mvns	r3, r3
 8005f7a:	69ba      	ldr	r2, [r7, #24]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f003 0203 	and.w	r2, r3, #3
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f90:	69ba      	ldr	r2, [r7, #24]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 80be 	beq.w	8006126 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005faa:	4b65      	ldr	r3, [pc, #404]	; (8006140 <HAL_GPIO_Init+0x320>)
 8005fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fae:	4a64      	ldr	r2, [pc, #400]	; (8006140 <HAL_GPIO_Init+0x320>)
 8005fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8005fb6:	4b62      	ldr	r3, [pc, #392]	; (8006140 <HAL_GPIO_Init+0x320>)
 8005fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005fc2:	4a60      	ldr	r2, [pc, #384]	; (8006144 <HAL_GPIO_Init+0x324>)
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	089b      	lsrs	r3, r3, #2
 8005fc8:	3302      	adds	r3, #2
 8005fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	220f      	movs	r2, #15
 8005fda:	fa02 f303 	lsl.w	r3, r2, r3
 8005fde:	43db      	mvns	r3, r3
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a57      	ldr	r2, [pc, #348]	; (8006148 <HAL_GPIO_Init+0x328>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d037      	beq.n	800605e <HAL_GPIO_Init+0x23e>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a56      	ldr	r2, [pc, #344]	; (800614c <HAL_GPIO_Init+0x32c>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d031      	beq.n	800605a <HAL_GPIO_Init+0x23a>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a55      	ldr	r2, [pc, #340]	; (8006150 <HAL_GPIO_Init+0x330>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d02b      	beq.n	8006056 <HAL_GPIO_Init+0x236>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a54      	ldr	r2, [pc, #336]	; (8006154 <HAL_GPIO_Init+0x334>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d025      	beq.n	8006052 <HAL_GPIO_Init+0x232>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a53      	ldr	r2, [pc, #332]	; (8006158 <HAL_GPIO_Init+0x338>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d01f      	beq.n	800604e <HAL_GPIO_Init+0x22e>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a52      	ldr	r2, [pc, #328]	; (800615c <HAL_GPIO_Init+0x33c>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d019      	beq.n	800604a <HAL_GPIO_Init+0x22a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a51      	ldr	r2, [pc, #324]	; (8006160 <HAL_GPIO_Init+0x340>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d013      	beq.n	8006046 <HAL_GPIO_Init+0x226>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a50      	ldr	r2, [pc, #320]	; (8006164 <HAL_GPIO_Init+0x344>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d00d      	beq.n	8006042 <HAL_GPIO_Init+0x222>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a4f      	ldr	r2, [pc, #316]	; (8006168 <HAL_GPIO_Init+0x348>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d007      	beq.n	800603e <HAL_GPIO_Init+0x21e>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a4e      	ldr	r2, [pc, #312]	; (800616c <HAL_GPIO_Init+0x34c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d101      	bne.n	800603a <HAL_GPIO_Init+0x21a>
 8006036:	2309      	movs	r3, #9
 8006038:	e012      	b.n	8006060 <HAL_GPIO_Init+0x240>
 800603a:	230a      	movs	r3, #10
 800603c:	e010      	b.n	8006060 <HAL_GPIO_Init+0x240>
 800603e:	2308      	movs	r3, #8
 8006040:	e00e      	b.n	8006060 <HAL_GPIO_Init+0x240>
 8006042:	2307      	movs	r3, #7
 8006044:	e00c      	b.n	8006060 <HAL_GPIO_Init+0x240>
 8006046:	2306      	movs	r3, #6
 8006048:	e00a      	b.n	8006060 <HAL_GPIO_Init+0x240>
 800604a:	2305      	movs	r3, #5
 800604c:	e008      	b.n	8006060 <HAL_GPIO_Init+0x240>
 800604e:	2304      	movs	r3, #4
 8006050:	e006      	b.n	8006060 <HAL_GPIO_Init+0x240>
 8006052:	2303      	movs	r3, #3
 8006054:	e004      	b.n	8006060 <HAL_GPIO_Init+0x240>
 8006056:	2302      	movs	r3, #2
 8006058:	e002      	b.n	8006060 <HAL_GPIO_Init+0x240>
 800605a:	2301      	movs	r3, #1
 800605c:	e000      	b.n	8006060 <HAL_GPIO_Init+0x240>
 800605e:	2300      	movs	r3, #0
 8006060:	69fa      	ldr	r2, [r7, #28]
 8006062:	f002 0203 	and.w	r2, r2, #3
 8006066:	0092      	lsls	r2, r2, #2
 8006068:	4093      	lsls	r3, r2
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	4313      	orrs	r3, r2
 800606e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006070:	4934      	ldr	r1, [pc, #208]	; (8006144 <HAL_GPIO_Init+0x324>)
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	089b      	lsrs	r3, r3, #2
 8006076:	3302      	adds	r3, #2
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800607e:	4b3c      	ldr	r3, [pc, #240]	; (8006170 <HAL_GPIO_Init+0x350>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	43db      	mvns	r3, r3
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	4013      	ands	r3, r2
 800608c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d003      	beq.n	80060a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	4313      	orrs	r3, r2
 80060a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80060a2:	4a33      	ldr	r2, [pc, #204]	; (8006170 <HAL_GPIO_Init+0x350>)
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80060a8:	4b31      	ldr	r3, [pc, #196]	; (8006170 <HAL_GPIO_Init+0x350>)
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	43db      	mvns	r3, r3
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	4013      	ands	r3, r2
 80060b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80060cc:	4a28      	ldr	r2, [pc, #160]	; (8006170 <HAL_GPIO_Init+0x350>)
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80060d2:	4b27      	ldr	r3, [pc, #156]	; (8006170 <HAL_GPIO_Init+0x350>)
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	43db      	mvns	r3, r3
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	4013      	ands	r3, r2
 80060e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060f6:	4a1e      	ldr	r2, [pc, #120]	; (8006170 <HAL_GPIO_Init+0x350>)
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060fc:	4b1c      	ldr	r3, [pc, #112]	; (8006170 <HAL_GPIO_Init+0x350>)
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	43db      	mvns	r3, r3
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	4013      	ands	r3, r2
 800610a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	4313      	orrs	r3, r2
 800611e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006120:	4a13      	ldr	r2, [pc, #76]	; (8006170 <HAL_GPIO_Init+0x350>)
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	3301      	adds	r3, #1
 800612a:	61fb      	str	r3, [r7, #28]
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	2b0f      	cmp	r3, #15
 8006130:	f67f ae86 	bls.w	8005e40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006134:	bf00      	nop
 8006136:	3724      	adds	r7, #36	; 0x24
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	40023800 	.word	0x40023800
 8006144:	40013800 	.word	0x40013800
 8006148:	40020000 	.word	0x40020000
 800614c:	40020400 	.word	0x40020400
 8006150:	40020800 	.word	0x40020800
 8006154:	40020c00 	.word	0x40020c00
 8006158:	40021000 	.word	0x40021000
 800615c:	40021400 	.word	0x40021400
 8006160:	40021800 	.word	0x40021800
 8006164:	40021c00 	.word	0x40021c00
 8006168:	40022000 	.word	0x40022000
 800616c:	40022400 	.word	0x40022400
 8006170:	40013c00 	.word	0x40013c00

08006174 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	460b      	mov	r3, r1
 800617e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691a      	ldr	r2, [r3, #16]
 8006184:	887b      	ldrh	r3, [r7, #2]
 8006186:	4013      	ands	r3, r2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800618c:	2301      	movs	r3, #1
 800618e:	73fb      	strb	r3, [r7, #15]
 8006190:	e001      	b.n	8006196 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006192:	2300      	movs	r3, #0
 8006194:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006196:	7bfb      	ldrb	r3, [r7, #15]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	460b      	mov	r3, r1
 80061ae:	807b      	strh	r3, [r7, #2]
 80061b0:	4613      	mov	r3, r2
 80061b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061b4:	787b      	ldrb	r3, [r7, #1]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061ba:	887a      	ldrh	r2, [r7, #2]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80061c0:	e003      	b.n	80061ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80061c2:	887b      	ldrh	r3, [r7, #2]
 80061c4:	041a      	lsls	r2, r3, #16
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	619a      	str	r2, [r3, #24]
}
 80061ca:	bf00      	nop
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80061d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061d8:	b08f      	sub	sp, #60	; 0x3c
 80061da:	af0a      	add	r7, sp, #40	; 0x28
 80061dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e054      	b.n	8006292 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d106      	bne.n	8006208 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7fd fbbe 	bl	8003984 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2203      	movs	r2, #3
 800620c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006218:	2b00      	cmp	r3, #0
 800621a:	d102      	bne.n	8006222 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4618      	mov	r0, r3
 8006228:	f007 fe8d 	bl	800df46 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	603b      	str	r3, [r7, #0]
 8006232:	687e      	ldr	r6, [r7, #4]
 8006234:	466d      	mov	r5, sp
 8006236:	f106 0410 	add.w	r4, r6, #16
 800623a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800623c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800623e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006240:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006242:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006246:	e885 0003 	stmia.w	r5, {r0, r1}
 800624a:	1d33      	adds	r3, r6, #4
 800624c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800624e:	6838      	ldr	r0, [r7, #0]
 8006250:	f007 fe10 	bl	800de74 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2101      	movs	r1, #1
 800625a:	4618      	mov	r0, r3
 800625c:	f007 fe84 	bl	800df68 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	603b      	str	r3, [r7, #0]
 8006266:	687e      	ldr	r6, [r7, #4]
 8006268:	466d      	mov	r5, sp
 800626a:	f106 0410 	add.w	r4, r6, #16
 800626e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006276:	e894 0003 	ldmia.w	r4, {r0, r1}
 800627a:	e885 0003 	stmia.w	r5, {r0, r1}
 800627e:	1d33      	adds	r3, r6, #4
 8006280:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006282:	6838      	ldr	r0, [r7, #0]
 8006284:	f007 ff96 	bl	800e1b4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800629a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800629a:	b590      	push	{r4, r7, lr}
 800629c:	b089      	sub	sp, #36	; 0x24
 800629e:	af04      	add	r7, sp, #16
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	4608      	mov	r0, r1
 80062a4:	4611      	mov	r1, r2
 80062a6:	461a      	mov	r2, r3
 80062a8:	4603      	mov	r3, r0
 80062aa:	70fb      	strb	r3, [r7, #3]
 80062ac:	460b      	mov	r3, r1
 80062ae:	70bb      	strb	r3, [r7, #2]
 80062b0:	4613      	mov	r3, r2
 80062b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d101      	bne.n	80062c2 <HAL_HCD_HC_Init+0x28>
 80062be:	2302      	movs	r3, #2
 80062c0:	e07f      	b.n	80063c2 <HAL_HCD_HC_Init+0x128>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80062ca:	78fa      	ldrb	r2, [r7, #3]
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	4613      	mov	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	00db      	lsls	r3, r3, #3
 80062d6:	440b      	add	r3, r1
 80062d8:	333d      	adds	r3, #61	; 0x3d
 80062da:	2200      	movs	r2, #0
 80062dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80062de:	78fa      	ldrb	r2, [r7, #3]
 80062e0:	6879      	ldr	r1, [r7, #4]
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	00db      	lsls	r3, r3, #3
 80062ea:	440b      	add	r3, r1
 80062ec:	3338      	adds	r3, #56	; 0x38
 80062ee:	787a      	ldrb	r2, [r7, #1]
 80062f0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80062f2:	78fa      	ldrb	r2, [r7, #3]
 80062f4:	6879      	ldr	r1, [r7, #4]
 80062f6:	4613      	mov	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	00db      	lsls	r3, r3, #3
 80062fe:	440b      	add	r3, r1
 8006300:	3340      	adds	r3, #64	; 0x40
 8006302:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006304:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006306:	78fa      	ldrb	r2, [r7, #3]
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	00db      	lsls	r3, r3, #3
 8006312:	440b      	add	r3, r1
 8006314:	3339      	adds	r3, #57	; 0x39
 8006316:	78fa      	ldrb	r2, [r7, #3]
 8006318:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800631a:	78fa      	ldrb	r2, [r7, #3]
 800631c:	6879      	ldr	r1, [r7, #4]
 800631e:	4613      	mov	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4413      	add	r3, r2
 8006324:	00db      	lsls	r3, r3, #3
 8006326:	440b      	add	r3, r1
 8006328:	333f      	adds	r3, #63	; 0x3f
 800632a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800632e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006330:	78fa      	ldrb	r2, [r7, #3]
 8006332:	78bb      	ldrb	r3, [r7, #2]
 8006334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006338:	b2d8      	uxtb	r0, r3
 800633a:	6879      	ldr	r1, [r7, #4]
 800633c:	4613      	mov	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	00db      	lsls	r3, r3, #3
 8006344:	440b      	add	r3, r1
 8006346:	333a      	adds	r3, #58	; 0x3a
 8006348:	4602      	mov	r2, r0
 800634a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800634c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006350:	2b00      	cmp	r3, #0
 8006352:	da0a      	bge.n	800636a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006354:	78fa      	ldrb	r2, [r7, #3]
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	4613      	mov	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	440b      	add	r3, r1
 8006362:	333b      	adds	r3, #59	; 0x3b
 8006364:	2201      	movs	r2, #1
 8006366:	701a      	strb	r2, [r3, #0]
 8006368:	e009      	b.n	800637e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800636a:	78fa      	ldrb	r2, [r7, #3]
 800636c:	6879      	ldr	r1, [r7, #4]
 800636e:	4613      	mov	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	440b      	add	r3, r1
 8006378:	333b      	adds	r3, #59	; 0x3b
 800637a:	2200      	movs	r2, #0
 800637c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800637e:	78fa      	ldrb	r2, [r7, #3]
 8006380:	6879      	ldr	r1, [r7, #4]
 8006382:	4613      	mov	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	00db      	lsls	r3, r3, #3
 800638a:	440b      	add	r3, r1
 800638c:	333c      	adds	r3, #60	; 0x3c
 800638e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006392:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6818      	ldr	r0, [r3, #0]
 8006398:	787c      	ldrb	r4, [r7, #1]
 800639a:	78ba      	ldrb	r2, [r7, #2]
 800639c:	78f9      	ldrb	r1, [r7, #3]
 800639e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80063a0:	9302      	str	r3, [sp, #8]
 80063a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80063a6:	9301      	str	r3, [sp, #4]
 80063a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80063ac:	9300      	str	r3, [sp, #0]
 80063ae:	4623      	mov	r3, r4
 80063b0:	f008 f876 	bl	800e4a0 <USB_HC_Init>
 80063b4:	4603      	mov	r3, r0
 80063b6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3714      	adds	r7, #20
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd90      	pop	{r4, r7, pc}

080063ca <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	460b      	mov	r3, r1
 80063d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80063d6:	2300      	movs	r3, #0
 80063d8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <HAL_HCD_HC_Halt+0x1e>
 80063e4:	2302      	movs	r3, #2
 80063e6:	e00f      	b.n	8006408 <HAL_HCD_HC_Halt+0x3e>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	78fa      	ldrb	r2, [r7, #3]
 80063f6:	4611      	mov	r1, r2
 80063f8:	4618      	mov	r0, r3
 80063fa:	f008 fab0 	bl	800e95e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8006406:	7bfb      	ldrb	r3, [r7, #15]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	4608      	mov	r0, r1
 800641a:	4611      	mov	r1, r2
 800641c:	461a      	mov	r2, r3
 800641e:	4603      	mov	r3, r0
 8006420:	70fb      	strb	r3, [r7, #3]
 8006422:	460b      	mov	r3, r1
 8006424:	70bb      	strb	r3, [r7, #2]
 8006426:	4613      	mov	r3, r2
 8006428:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800642a:	78fa      	ldrb	r2, [r7, #3]
 800642c:	6879      	ldr	r1, [r7, #4]
 800642e:	4613      	mov	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	440b      	add	r3, r1
 8006438:	333b      	adds	r3, #59	; 0x3b
 800643a:	78ba      	ldrb	r2, [r7, #2]
 800643c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800643e:	78fa      	ldrb	r2, [r7, #3]
 8006440:	6879      	ldr	r1, [r7, #4]
 8006442:	4613      	mov	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	440b      	add	r3, r1
 800644c:	333f      	adds	r3, #63	; 0x3f
 800644e:	787a      	ldrb	r2, [r7, #1]
 8006450:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8006452:	7c3b      	ldrb	r3, [r7, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d114      	bne.n	8006482 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006458:	78fa      	ldrb	r2, [r7, #3]
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	4613      	mov	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	440b      	add	r3, r1
 8006466:	3342      	adds	r3, #66	; 0x42
 8006468:	2203      	movs	r2, #3
 800646a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800646c:	78fa      	ldrb	r2, [r7, #3]
 800646e:	6879      	ldr	r1, [r7, #4]
 8006470:	4613      	mov	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	440b      	add	r3, r1
 800647a:	333d      	adds	r3, #61	; 0x3d
 800647c:	7f3a      	ldrb	r2, [r7, #28]
 800647e:	701a      	strb	r2, [r3, #0]
 8006480:	e009      	b.n	8006496 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006482:	78fa      	ldrb	r2, [r7, #3]
 8006484:	6879      	ldr	r1, [r7, #4]
 8006486:	4613      	mov	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	00db      	lsls	r3, r3, #3
 800648e:	440b      	add	r3, r1
 8006490:	3342      	adds	r3, #66	; 0x42
 8006492:	2202      	movs	r2, #2
 8006494:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8006496:	787b      	ldrb	r3, [r7, #1]
 8006498:	2b03      	cmp	r3, #3
 800649a:	f200 80d6 	bhi.w	800664a <HAL_HCD_HC_SubmitRequest+0x23a>
 800649e:	a201      	add	r2, pc, #4	; (adr r2, 80064a4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80064a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a4:	080064b5 	.word	0x080064b5
 80064a8:	08006635 	.word	0x08006635
 80064ac:	08006521 	.word	0x08006521
 80064b0:	080065ab 	.word	0x080065ab
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80064b4:	7c3b      	ldrb	r3, [r7, #16]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	f040 80c9 	bne.w	800664e <HAL_HCD_HC_SubmitRequest+0x23e>
 80064bc:	78bb      	ldrb	r3, [r7, #2]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f040 80c5 	bne.w	800664e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80064c4:	8b3b      	ldrh	r3, [r7, #24]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d109      	bne.n	80064de <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80064ca:	78fa      	ldrb	r2, [r7, #3]
 80064cc:	6879      	ldr	r1, [r7, #4]
 80064ce:	4613      	mov	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	440b      	add	r3, r1
 80064d8:	3351      	adds	r3, #81	; 0x51
 80064da:	2201      	movs	r2, #1
 80064dc:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80064de:	78fa      	ldrb	r2, [r7, #3]
 80064e0:	6879      	ldr	r1, [r7, #4]
 80064e2:	4613      	mov	r3, r2
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	00db      	lsls	r3, r3, #3
 80064ea:	440b      	add	r3, r1
 80064ec:	3351      	adds	r3, #81	; 0x51
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10a      	bne.n	800650a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80064f4:	78fa      	ldrb	r2, [r7, #3]
 80064f6:	6879      	ldr	r1, [r7, #4]
 80064f8:	4613      	mov	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	00db      	lsls	r3, r3, #3
 8006500:	440b      	add	r3, r1
 8006502:	3342      	adds	r3, #66	; 0x42
 8006504:	2200      	movs	r2, #0
 8006506:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006508:	e0a1      	b.n	800664e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800650a:	78fa      	ldrb	r2, [r7, #3]
 800650c:	6879      	ldr	r1, [r7, #4]
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	440b      	add	r3, r1
 8006518:	3342      	adds	r3, #66	; 0x42
 800651a:	2202      	movs	r2, #2
 800651c:	701a      	strb	r2, [r3, #0]
      break;
 800651e:	e096      	b.n	800664e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006520:	78bb      	ldrb	r3, [r7, #2]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d120      	bne.n	8006568 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006526:	78fa      	ldrb	r2, [r7, #3]
 8006528:	6879      	ldr	r1, [r7, #4]
 800652a:	4613      	mov	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	00db      	lsls	r3, r3, #3
 8006532:	440b      	add	r3, r1
 8006534:	3351      	adds	r3, #81	; 0x51
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10a      	bne.n	8006552 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800653c:	78fa      	ldrb	r2, [r7, #3]
 800653e:	6879      	ldr	r1, [r7, #4]
 8006540:	4613      	mov	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	00db      	lsls	r3, r3, #3
 8006548:	440b      	add	r3, r1
 800654a:	3342      	adds	r3, #66	; 0x42
 800654c:	2200      	movs	r2, #0
 800654e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8006550:	e07e      	b.n	8006650 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006552:	78fa      	ldrb	r2, [r7, #3]
 8006554:	6879      	ldr	r1, [r7, #4]
 8006556:	4613      	mov	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	4413      	add	r3, r2
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	440b      	add	r3, r1
 8006560:	3342      	adds	r3, #66	; 0x42
 8006562:	2202      	movs	r2, #2
 8006564:	701a      	strb	r2, [r3, #0]
      break;
 8006566:	e073      	b.n	8006650 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006568:	78fa      	ldrb	r2, [r7, #3]
 800656a:	6879      	ldr	r1, [r7, #4]
 800656c:	4613      	mov	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	00db      	lsls	r3, r3, #3
 8006574:	440b      	add	r3, r1
 8006576:	3350      	adds	r3, #80	; 0x50
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10a      	bne.n	8006594 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800657e:	78fa      	ldrb	r2, [r7, #3]
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	4613      	mov	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	00db      	lsls	r3, r3, #3
 800658a:	440b      	add	r3, r1
 800658c:	3342      	adds	r3, #66	; 0x42
 800658e:	2200      	movs	r2, #0
 8006590:	701a      	strb	r2, [r3, #0]
      break;
 8006592:	e05d      	b.n	8006650 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006594:	78fa      	ldrb	r2, [r7, #3]
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	4613      	mov	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	00db      	lsls	r3, r3, #3
 80065a0:	440b      	add	r3, r1
 80065a2:	3342      	adds	r3, #66	; 0x42
 80065a4:	2202      	movs	r2, #2
 80065a6:	701a      	strb	r2, [r3, #0]
      break;
 80065a8:	e052      	b.n	8006650 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80065aa:	78bb      	ldrb	r3, [r7, #2]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d120      	bne.n	80065f2 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80065b0:	78fa      	ldrb	r2, [r7, #3]
 80065b2:	6879      	ldr	r1, [r7, #4]
 80065b4:	4613      	mov	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	00db      	lsls	r3, r3, #3
 80065bc:	440b      	add	r3, r1
 80065be:	3351      	adds	r3, #81	; 0x51
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10a      	bne.n	80065dc <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80065c6:	78fa      	ldrb	r2, [r7, #3]
 80065c8:	6879      	ldr	r1, [r7, #4]
 80065ca:	4613      	mov	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	00db      	lsls	r3, r3, #3
 80065d2:	440b      	add	r3, r1
 80065d4:	3342      	adds	r3, #66	; 0x42
 80065d6:	2200      	movs	r2, #0
 80065d8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80065da:	e039      	b.n	8006650 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80065dc:	78fa      	ldrb	r2, [r7, #3]
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	4613      	mov	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	00db      	lsls	r3, r3, #3
 80065e8:	440b      	add	r3, r1
 80065ea:	3342      	adds	r3, #66	; 0x42
 80065ec:	2202      	movs	r2, #2
 80065ee:	701a      	strb	r2, [r3, #0]
      break;
 80065f0:	e02e      	b.n	8006650 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80065f2:	78fa      	ldrb	r2, [r7, #3]
 80065f4:	6879      	ldr	r1, [r7, #4]
 80065f6:	4613      	mov	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	440b      	add	r3, r1
 8006600:	3350      	adds	r3, #80	; 0x50
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10a      	bne.n	800661e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006608:	78fa      	ldrb	r2, [r7, #3]
 800660a:	6879      	ldr	r1, [r7, #4]
 800660c:	4613      	mov	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	440b      	add	r3, r1
 8006616:	3342      	adds	r3, #66	; 0x42
 8006618:	2200      	movs	r2, #0
 800661a:	701a      	strb	r2, [r3, #0]
      break;
 800661c:	e018      	b.n	8006650 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800661e:	78fa      	ldrb	r2, [r7, #3]
 8006620:	6879      	ldr	r1, [r7, #4]
 8006622:	4613      	mov	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4413      	add	r3, r2
 8006628:	00db      	lsls	r3, r3, #3
 800662a:	440b      	add	r3, r1
 800662c:	3342      	adds	r3, #66	; 0x42
 800662e:	2202      	movs	r2, #2
 8006630:	701a      	strb	r2, [r3, #0]
      break;
 8006632:	e00d      	b.n	8006650 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006634:	78fa      	ldrb	r2, [r7, #3]
 8006636:	6879      	ldr	r1, [r7, #4]
 8006638:	4613      	mov	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	00db      	lsls	r3, r3, #3
 8006640:	440b      	add	r3, r1
 8006642:	3342      	adds	r3, #66	; 0x42
 8006644:	2200      	movs	r2, #0
 8006646:	701a      	strb	r2, [r3, #0]
      break;
 8006648:	e002      	b.n	8006650 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800664a:	bf00      	nop
 800664c:	e000      	b.n	8006650 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800664e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006650:	78fa      	ldrb	r2, [r7, #3]
 8006652:	6879      	ldr	r1, [r7, #4]
 8006654:	4613      	mov	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	00db      	lsls	r3, r3, #3
 800665c:	440b      	add	r3, r1
 800665e:	3344      	adds	r3, #68	; 0x44
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006664:	78fa      	ldrb	r2, [r7, #3]
 8006666:	8b39      	ldrh	r1, [r7, #24]
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	4613      	mov	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	4403      	add	r3, r0
 8006674:	3348      	adds	r3, #72	; 0x48
 8006676:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006678:	78fa      	ldrb	r2, [r7, #3]
 800667a:	6879      	ldr	r1, [r7, #4]
 800667c:	4613      	mov	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	00db      	lsls	r3, r3, #3
 8006684:	440b      	add	r3, r1
 8006686:	335c      	adds	r3, #92	; 0x5c
 8006688:	2200      	movs	r2, #0
 800668a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800668c:	78fa      	ldrb	r2, [r7, #3]
 800668e:	6879      	ldr	r1, [r7, #4]
 8006690:	4613      	mov	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	00db      	lsls	r3, r3, #3
 8006698:	440b      	add	r3, r1
 800669a:	334c      	adds	r3, #76	; 0x4c
 800669c:	2200      	movs	r2, #0
 800669e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80066a0:	78fa      	ldrb	r2, [r7, #3]
 80066a2:	6879      	ldr	r1, [r7, #4]
 80066a4:	4613      	mov	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	00db      	lsls	r3, r3, #3
 80066ac:	440b      	add	r3, r1
 80066ae:	3339      	adds	r3, #57	; 0x39
 80066b0:	78fa      	ldrb	r2, [r7, #3]
 80066b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80066b4:	78fa      	ldrb	r2, [r7, #3]
 80066b6:	6879      	ldr	r1, [r7, #4]
 80066b8:	4613      	mov	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	00db      	lsls	r3, r3, #3
 80066c0:	440b      	add	r3, r1
 80066c2:	335d      	adds	r3, #93	; 0x5d
 80066c4:	2200      	movs	r2, #0
 80066c6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6818      	ldr	r0, [r3, #0]
 80066cc:	78fa      	ldrb	r2, [r7, #3]
 80066ce:	4613      	mov	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	00db      	lsls	r3, r3, #3
 80066d6:	3338      	adds	r3, #56	; 0x38
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	18d1      	adds	r1, r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	461a      	mov	r2, r3
 80066e4:	f007 ffe6 	bl	800e6b4 <USB_HC_StartXfer>
 80066e8:	4603      	mov	r3, r0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop

080066f4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4618      	mov	r0, r3
 800670c:	f007 fd0f 	bl	800e12e <USB_GetMode>
 8006710:	4603      	mov	r3, r0
 8006712:	2b01      	cmp	r3, #1
 8006714:	f040 80ef 	bne.w	80068f6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4618      	mov	r0, r3
 800671e:	f007 fcf3 	bl	800e108 <USB_ReadInterrupts>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 80e5 	beq.w	80068f4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4618      	mov	r0, r3
 8006730:	f007 fcea 	bl	800e108 <USB_ReadInterrupts>
 8006734:	4603      	mov	r3, r0
 8006736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800673a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800673e:	d104      	bne.n	800674a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006748:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4618      	mov	r0, r3
 8006750:	f007 fcda 	bl	800e108 <USB_ReadInterrupts>
 8006754:	4603      	mov	r3, r0
 8006756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800675a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800675e:	d104      	bne.n	800676a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006768:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4618      	mov	r0, r3
 8006770:	f007 fcca 	bl	800e108 <USB_ReadInterrupts>
 8006774:	4603      	mov	r3, r0
 8006776:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800677a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800677e:	d104      	bne.n	800678a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006788:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4618      	mov	r0, r3
 8006790:	f007 fcba 	bl	800e108 <USB_ReadInterrupts>
 8006794:	4603      	mov	r3, r0
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b02      	cmp	r3, #2
 800679c:	d103      	bne.n	80067a6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2202      	movs	r2, #2
 80067a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f007 fcac 	bl	800e108 <USB_ReadInterrupts>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ba:	d115      	bne.n	80067e8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80067c4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d108      	bne.n	80067e8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7fd f946 	bl	8003a68 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2101      	movs	r1, #1
 80067e2:	4618      	mov	r0, r3
 80067e4:	f007 fd96 	bl	800e314 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f007 fc8b 	bl	800e108 <USB_ReadInterrupts>
 80067f2:	4603      	mov	r3, r0
 80067f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067fc:	d102      	bne.n	8006804 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f001 f966 	bl	8007ad0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4618      	mov	r0, r3
 800680a:	f007 fc7d 	bl	800e108 <USB_ReadInterrupts>
 800680e:	4603      	mov	r3, r0
 8006810:	f003 0308 	and.w	r3, r3, #8
 8006814:	2b08      	cmp	r3, #8
 8006816:	d106      	bne.n	8006826 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7fd f909 	bl	8003a30 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2208      	movs	r2, #8
 8006824:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4618      	mov	r0, r3
 800682c:	f007 fc6c 	bl	800e108 <USB_ReadInterrupts>
 8006830:	4603      	mov	r3, r0
 8006832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006836:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800683a:	d138      	bne.n	80068ae <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4618      	mov	r0, r3
 8006842:	f008 f87b 	bl	800e93c <USB_HC_ReadInterrupt>
 8006846:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006848:	2300      	movs	r3, #0
 800684a:	617b      	str	r3, [r7, #20]
 800684c:	e025      	b.n	800689a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f003 030f 	and.w	r3, r3, #15
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	fa22 f303 	lsr.w	r3, r2, r3
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d018      	beq.n	8006894 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4413      	add	r3, r2
 800686a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006878:	d106      	bne.n	8006888 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	b2db      	uxtb	r3, r3
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f8cf 	bl	8006a24 <HCD_HC_IN_IRQHandler>
 8006886:	e005      	b.n	8006894 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	b2db      	uxtb	r3, r3
 800688c:	4619      	mov	r1, r3
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 fcfd 	bl	800728e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	3301      	adds	r3, #1
 8006898:	617b      	str	r3, [r7, #20]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d3d4      	bcc.n	800684e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80068ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f007 fc28 	bl	800e108 <USB_ReadInterrupts>
 80068b8:	4603      	mov	r3, r0
 80068ba:	f003 0310 	and.w	r3, r3, #16
 80068be:	2b10      	cmp	r3, #16
 80068c0:	d101      	bne.n	80068c6 <HAL_HCD_IRQHandler+0x1d2>
 80068c2:	2301      	movs	r3, #1
 80068c4:	e000      	b.n	80068c8 <HAL_HCD_IRQHandler+0x1d4>
 80068c6:	2300      	movs	r3, #0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d014      	beq.n	80068f6 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	699a      	ldr	r2, [r3, #24]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 0210 	bic.w	r2, r2, #16
 80068da:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f001 f84b 	bl	8007978 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	699a      	ldr	r2, [r3, #24]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f042 0210 	orr.w	r2, r2, #16
 80068f0:	619a      	str	r2, [r3, #24]
 80068f2:	e000      	b.n	80068f6 <HAL_HCD_IRQHandler+0x202>
      return;
 80068f4:	bf00      	nop
    }
  }
}
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800690a:	2b01      	cmp	r3, #1
 800690c:	d101      	bne.n	8006912 <HAL_HCD_Start+0x16>
 800690e:	2302      	movs	r3, #2
 8006910:	e013      	b.n	800693a <HAL_HCD_Start+0x3e>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4618      	mov	r0, r3
 8006920:	f007 fb00 	bl	800df24 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2101      	movs	r1, #1
 800692a:	4618      	mov	r0, r3
 800692c:	f007 fd56 	bl	800e3dc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b082      	sub	sp, #8
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8006950:	2b01      	cmp	r3, #1
 8006952:	d101      	bne.n	8006958 <HAL_HCD_Stop+0x16>
 8006954:	2302      	movs	r3, #2
 8006956:	e00d      	b.n	8006974 <HAL_HCD_Stop+0x32>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4618      	mov	r0, r3
 8006966:	f008 f935 	bl	800ebd4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4618      	mov	r0, r3
 800698a:	f007 fcfd 	bl	800e388 <USB_ResetPort>
 800698e:	4603      	mov	r3, r0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	460b      	mov	r3, r1
 80069a2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80069a4:	78fa      	ldrb	r2, [r7, #3]
 80069a6:	6879      	ldr	r1, [r7, #4]
 80069a8:	4613      	mov	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	00db      	lsls	r3, r3, #3
 80069b0:	440b      	add	r3, r1
 80069b2:	335c      	adds	r3, #92	; 0x5c
 80069b4:	781b      	ldrb	r3, [r3, #0]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b083      	sub	sp, #12
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	460b      	mov	r3, r1
 80069cc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80069ce:	78fa      	ldrb	r2, [r7, #3]
 80069d0:	6879      	ldr	r1, [r7, #4]
 80069d2:	4613      	mov	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	00db      	lsls	r3, r3, #3
 80069da:	440b      	add	r3, r1
 80069dc:	334c      	adds	r3, #76	; 0x4c
 80069de:	681b      	ldr	r3, [r3, #0]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4618      	mov	r0, r3
 80069fa:	f007 fd3f 	bl	800e47c <USB_GetCurrentFrame>
 80069fe:	4603      	mov	r3, r0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f007 fd1a 	bl	800e44e <USB_GetHostSpeed>
 8006a1a:	4603      	mov	r3, r0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006a3a:	78fb      	ldrb	r3, [r7, #3]
 8006a3c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f003 0304 	and.w	r3, r3, #4
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	d119      	bne.n	8006a88 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a60:	461a      	mov	r2, r3
 8006a62:	2304      	movs	r3, #4
 8006a64:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	0151      	lsls	r1, r2, #5
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	440a      	add	r2, r1
 8006a7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a80:	f043 0302 	orr.w	r3, r3, #2
 8006a84:	60d3      	str	r3, [r2, #12]
 8006a86:	e0ce      	b.n	8006c26 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a9e:	d12c      	bne.n	8006afa <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	015a      	lsls	r2, r3, #5
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aac:	461a      	mov	r2, r3
 8006aae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ab2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006ab4:	6879      	ldr	r1, [r7, #4]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	00db      	lsls	r3, r3, #3
 8006ac0:	440b      	add	r3, r1
 8006ac2:	335d      	adds	r3, #93	; 0x5d
 8006ac4:	2207      	movs	r2, #7
 8006ac6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	015a      	lsls	r2, r3, #5
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	0151      	lsls	r1, r2, #5
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	440a      	add	r2, r1
 8006ade:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ae2:	f043 0302 	orr.w	r3, r3, #2
 8006ae6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	b2d2      	uxtb	r2, r2
 8006af0:	4611      	mov	r1, r2
 8006af2:	4618      	mov	r0, r3
 8006af4:	f007 ff33 	bl	800e95e <USB_HC_Halt>
 8006af8:	e095      	b.n	8006c26 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	015a      	lsls	r2, r3, #5
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f003 0320 	and.w	r3, r3, #32
 8006b0c:	2b20      	cmp	r3, #32
 8006b0e:	d109      	bne.n	8006b24 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	2320      	movs	r3, #32
 8006b20:	6093      	str	r3, [r2, #8]
 8006b22:	e080      	b.n	8006c26 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f003 0308 	and.w	r3, r3, #8
 8006b36:	2b08      	cmp	r3, #8
 8006b38:	d134      	bne.n	8006ba4 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	0151      	lsls	r1, r2, #5
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	440a      	add	r2, r1
 8006b50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b54:	f043 0302 	orr.w	r3, r3, #2
 8006b58:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8006b5a:	6879      	ldr	r1, [r7, #4]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	4613      	mov	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4413      	add	r3, r2
 8006b64:	00db      	lsls	r3, r3, #3
 8006b66:	440b      	add	r3, r1
 8006b68:	335d      	adds	r3, #93	; 0x5d
 8006b6a:	2205      	movs	r2, #5
 8006b6c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	015a      	lsls	r2, r3, #5
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	4413      	add	r3, r2
 8006b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	2310      	movs	r3, #16
 8006b7e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	015a      	lsls	r2, r3, #5
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	2308      	movs	r3, #8
 8006b90:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	b2d2      	uxtb	r2, r2
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f007 fede 	bl	800e95e <USB_HC_Halt>
 8006ba2:	e040      	b.n	8006c26 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bba:	d134      	bne.n	8006c26 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	0151      	lsls	r1, r2, #5
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	440a      	add	r2, r1
 8006bd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bd6:	f043 0302 	orr.w	r3, r3, #2
 8006bda:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	b2d2      	uxtb	r2, r2
 8006be4:	4611      	mov	r1, r2
 8006be6:	4618      	mov	r0, r3
 8006be8:	f007 feb9 	bl	800e95e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	2310      	movs	r3, #16
 8006bfc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006bfe:	6879      	ldr	r1, [r7, #4]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	4613      	mov	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	00db      	lsls	r3, r3, #3
 8006c0a:	440b      	add	r3, r1
 8006c0c:	335d      	adds	r3, #93	; 0x5d
 8006c0e:	2208      	movs	r2, #8
 8006c10:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c1e:	461a      	mov	r2, r3
 8006c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c24:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	015a      	lsls	r2, r3, #5
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c3c:	d122      	bne.n	8006c84 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	0151      	lsls	r1, r2, #5
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	440a      	add	r2, r1
 8006c54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c58:	f043 0302 	orr.w	r3, r3, #2
 8006c5c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	b2d2      	uxtb	r2, r2
 8006c66:	4611      	mov	r1, r2
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f007 fe78 	bl	800e95e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c80:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8006c82:	e300      	b.n	8007286 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	f040 80fd 	bne.w	8006e96 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d01b      	beq.n	8006cdc <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8006ca4:	6879      	ldr	r1, [r7, #4]
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	00db      	lsls	r3, r3, #3
 8006cb0:	440b      	add	r3, r1
 8006cb2:	3348      	adds	r3, #72	; 0x48
 8006cb4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	0159      	lsls	r1, r3, #5
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	440b      	add	r3, r1
 8006cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8006cc8:	1ad1      	subs	r1, r2, r3
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	00db      	lsls	r3, r3, #3
 8006cd6:	4403      	add	r3, r0
 8006cd8:	334c      	adds	r3, #76	; 0x4c
 8006cda:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006cdc:	6879      	ldr	r1, [r7, #4]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	00db      	lsls	r3, r3, #3
 8006ce8:	440b      	add	r3, r1
 8006cea:	335d      	adds	r3, #93	; 0x5d
 8006cec:	2201      	movs	r2, #1
 8006cee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	00db      	lsls	r3, r3, #3
 8006cfc:	440b      	add	r3, r1
 8006cfe:	3358      	adds	r3, #88	; 0x58
 8006d00:	2200      	movs	r2, #0
 8006d02:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	015a      	lsls	r2, r3, #5
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d10:	461a      	mov	r2, r3
 8006d12:	2301      	movs	r3, #1
 8006d14:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006d16:	6879      	ldr	r1, [r7, #4]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	00db      	lsls	r3, r3, #3
 8006d22:	440b      	add	r3, r1
 8006d24:	333f      	adds	r3, #63	; 0x3f
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00a      	beq.n	8006d42 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006d2c:	6879      	ldr	r1, [r7, #4]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	4613      	mov	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	440b      	add	r3, r1
 8006d3a:	333f      	adds	r3, #63	; 0x3f
 8006d3c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d121      	bne.n	8006d86 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	0151      	lsls	r1, r2, #5
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	440a      	add	r2, r1
 8006d58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d5c:	f043 0302 	orr.w	r3, r3, #2
 8006d60:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	b2d2      	uxtb	r2, r2
 8006d6a:	4611      	mov	r1, r2
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f007 fdf6 	bl	800e95e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d7e:	461a      	mov	r2, r3
 8006d80:	2310      	movs	r3, #16
 8006d82:	6093      	str	r3, [r2, #8]
 8006d84:	e070      	b.n	8006e68 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8006d86:	6879      	ldr	r1, [r7, #4]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	00db      	lsls	r3, r3, #3
 8006d92:	440b      	add	r3, r1
 8006d94:	333f      	adds	r3, #63	; 0x3f
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	d12a      	bne.n	8006df2 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	0151      	lsls	r1, r2, #5
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	440a      	add	r2, r1
 8006db2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006db6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006dba:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006dbc:	6879      	ldr	r1, [r7, #4]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	00db      	lsls	r3, r3, #3
 8006dc8:	440b      	add	r3, r1
 8006dca:	335c      	adds	r3, #92	; 0x5c
 8006dcc:	2201      	movs	r2, #1
 8006dce:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	b2d8      	uxtb	r0, r3
 8006dd4:	6879      	ldr	r1, [r7, #4]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	00db      	lsls	r3, r3, #3
 8006de0:	440b      	add	r3, r1
 8006de2:	335c      	adds	r3, #92	; 0x5c
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	4601      	mov	r1, r0
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f7fc fe4a 	bl	8003a84 <HAL_HCD_HC_NotifyURBChange_Callback>
 8006df0:	e03a      	b.n	8006e68 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8006df2:	6879      	ldr	r1, [r7, #4]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	4613      	mov	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4413      	add	r3, r2
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	440b      	add	r3, r1
 8006e00:	333f      	adds	r3, #63	; 0x3f
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d12f      	bne.n	8006e68 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006e08:	6879      	ldr	r1, [r7, #4]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4413      	add	r3, r2
 8006e12:	00db      	lsls	r3, r3, #3
 8006e14:	440b      	add	r3, r1
 8006e16:	335c      	adds	r3, #92	; 0x5c
 8006e18:	2201      	movs	r2, #1
 8006e1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006e1c:	6879      	ldr	r1, [r7, #4]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	4613      	mov	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	00db      	lsls	r3, r3, #3
 8006e28:	440b      	add	r3, r1
 8006e2a:	3350      	adds	r3, #80	; 0x50
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	f083 0301 	eor.w	r3, r3, #1
 8006e32:	b2d8      	uxtb	r0, r3
 8006e34:	6879      	ldr	r1, [r7, #4]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	440b      	add	r3, r1
 8006e42:	3350      	adds	r3, #80	; 0x50
 8006e44:	4602      	mov	r2, r0
 8006e46:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	b2d8      	uxtb	r0, r3
 8006e4c:	6879      	ldr	r1, [r7, #4]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	4613      	mov	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	00db      	lsls	r3, r3, #3
 8006e58:	440b      	add	r3, r1
 8006e5a:	335c      	adds	r3, #92	; 0x5c
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	4601      	mov	r1, r0
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7fc fe0e 	bl	8003a84 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8006e68:	6879      	ldr	r1, [r7, #4]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	00db      	lsls	r3, r3, #3
 8006e74:	440b      	add	r3, r1
 8006e76:	3350      	adds	r3, #80	; 0x50
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	f083 0301 	eor.w	r3, r3, #1
 8006e7e:	b2d8      	uxtb	r0, r3
 8006e80:	6879      	ldr	r1, [r7, #4]
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	4613      	mov	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	00db      	lsls	r3, r3, #3
 8006e8c:	440b      	add	r3, r1
 8006e8e:	3350      	adds	r3, #80	; 0x50
 8006e90:	4602      	mov	r2, r0
 8006e92:	701a      	strb	r2, [r3, #0]
}
 8006e94:	e1f7      	b.n	8007286 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f003 0302 	and.w	r3, r3, #2
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	f040 811a 	bne.w	80070e2 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	0151      	lsls	r1, r2, #5
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	440a      	add	r2, r1
 8006ec4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ec8:	f023 0302 	bic.w	r3, r3, #2
 8006ecc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006ece:	6879      	ldr	r1, [r7, #4]
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4413      	add	r3, r2
 8006ed8:	00db      	lsls	r3, r3, #3
 8006eda:	440b      	add	r3, r1
 8006edc:	335d      	adds	r3, #93	; 0x5d
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d10a      	bne.n	8006efa <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	440b      	add	r3, r1
 8006ef2:	335c      	adds	r3, #92	; 0x5c
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	701a      	strb	r2, [r3, #0]
 8006ef8:	e0d9      	b.n	80070ae <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006efa:	6879      	ldr	r1, [r7, #4]
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	4613      	mov	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	00db      	lsls	r3, r3, #3
 8006f06:	440b      	add	r3, r1
 8006f08:	335d      	adds	r3, #93	; 0x5d
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	2b05      	cmp	r3, #5
 8006f0e:	d10a      	bne.n	8006f26 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006f10:	6879      	ldr	r1, [r7, #4]
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	4613      	mov	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4413      	add	r3, r2
 8006f1a:	00db      	lsls	r3, r3, #3
 8006f1c:	440b      	add	r3, r1
 8006f1e:	335c      	adds	r3, #92	; 0x5c
 8006f20:	2205      	movs	r2, #5
 8006f22:	701a      	strb	r2, [r3, #0]
 8006f24:	e0c3      	b.n	80070ae <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006f26:	6879      	ldr	r1, [r7, #4]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	00db      	lsls	r3, r3, #3
 8006f32:	440b      	add	r3, r1
 8006f34:	335d      	adds	r3, #93	; 0x5d
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	2b06      	cmp	r3, #6
 8006f3a:	d00a      	beq.n	8006f52 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006f3c:	6879      	ldr	r1, [r7, #4]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4613      	mov	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	00db      	lsls	r3, r3, #3
 8006f48:	440b      	add	r3, r1
 8006f4a:	335d      	adds	r3, #93	; 0x5d
 8006f4c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006f4e:	2b08      	cmp	r3, #8
 8006f50:	d156      	bne.n	8007000 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8006f52:	6879      	ldr	r1, [r7, #4]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	4613      	mov	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	00db      	lsls	r3, r3, #3
 8006f5e:	440b      	add	r3, r1
 8006f60:	3358      	adds	r3, #88	; 0x58
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	1c59      	adds	r1, r3, #1
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	00db      	lsls	r3, r3, #3
 8006f72:	4403      	add	r3, r0
 8006f74:	3358      	adds	r3, #88	; 0x58
 8006f76:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006f78:	6879      	ldr	r1, [r7, #4]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4413      	add	r3, r2
 8006f82:	00db      	lsls	r3, r3, #3
 8006f84:	440b      	add	r3, r1
 8006f86:	3358      	adds	r3, #88	; 0x58
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2b03      	cmp	r3, #3
 8006f8c:	d914      	bls.n	8006fb8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006f8e:	6879      	ldr	r1, [r7, #4]
 8006f90:	68fa      	ldr	r2, [r7, #12]
 8006f92:	4613      	mov	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	00db      	lsls	r3, r3, #3
 8006f9a:	440b      	add	r3, r1
 8006f9c:	3358      	adds	r3, #88	; 0x58
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006fa2:	6879      	ldr	r1, [r7, #4]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	00db      	lsls	r3, r3, #3
 8006fae:	440b      	add	r3, r1
 8006fb0:	335c      	adds	r3, #92	; 0x5c
 8006fb2:	2204      	movs	r2, #4
 8006fb4:	701a      	strb	r2, [r3, #0]
 8006fb6:	e009      	b.n	8006fcc <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006fb8:	6879      	ldr	r1, [r7, #4]
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	00db      	lsls	r3, r3, #3
 8006fc4:	440b      	add	r3, r1
 8006fc6:	335c      	adds	r3, #92	; 0x5c
 8006fc8:	2202      	movs	r2, #2
 8006fca:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fe2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fea:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	015a      	lsls	r2, r3, #5
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	e056      	b.n	80070ae <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007000:	6879      	ldr	r1, [r7, #4]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	4613      	mov	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4413      	add	r3, r2
 800700a:	00db      	lsls	r3, r3, #3
 800700c:	440b      	add	r3, r1
 800700e:	335d      	adds	r3, #93	; 0x5d
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	2b03      	cmp	r3, #3
 8007014:	d123      	bne.n	800705e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007016:	6879      	ldr	r1, [r7, #4]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	4613      	mov	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4413      	add	r3, r2
 8007020:	00db      	lsls	r3, r3, #3
 8007022:	440b      	add	r3, r1
 8007024:	335c      	adds	r3, #92	; 0x5c
 8007026:	2202      	movs	r2, #2
 8007028:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	4413      	add	r3, r2
 8007032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007040:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007048:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	4413      	add	r3, r2
 8007052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007056:	461a      	mov	r2, r3
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	e027      	b.n	80070ae <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800705e:	6879      	ldr	r1, [r7, #4]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	4613      	mov	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	440b      	add	r3, r1
 800706c:	335d      	adds	r3, #93	; 0x5d
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	2b07      	cmp	r3, #7
 8007072:	d11c      	bne.n	80070ae <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8007074:	6879      	ldr	r1, [r7, #4]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	4613      	mov	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	00db      	lsls	r3, r3, #3
 8007080:	440b      	add	r3, r1
 8007082:	3358      	adds	r3, #88	; 0x58
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	1c59      	adds	r1, r3, #1
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	4613      	mov	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	00db      	lsls	r3, r3, #3
 8007094:	4403      	add	r3, r0
 8007096:	3358      	adds	r3, #88	; 0x58
 8007098:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800709a:	6879      	ldr	r1, [r7, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	4613      	mov	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	00db      	lsls	r3, r3, #3
 80070a6:	440b      	add	r3, r1
 80070a8:	335c      	adds	r3, #92	; 0x5c
 80070aa:	2204      	movs	r2, #4
 80070ac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ba:	461a      	mov	r2, r3
 80070bc:	2302      	movs	r3, #2
 80070be:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	b2d8      	uxtb	r0, r3
 80070c4:	6879      	ldr	r1, [r7, #4]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	4613      	mov	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	4413      	add	r3, r2
 80070ce:	00db      	lsls	r3, r3, #3
 80070d0:	440b      	add	r3, r1
 80070d2:	335c      	adds	r3, #92	; 0x5c
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	461a      	mov	r2, r3
 80070d8:	4601      	mov	r1, r0
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7fc fcd2 	bl	8003a84 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80070e0:	e0d1      	b.n	8007286 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	015a      	lsls	r2, r3, #5
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	4413      	add	r3, r2
 80070ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f4:	2b80      	cmp	r3, #128	; 0x80
 80070f6:	d13e      	bne.n	8007176 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	68fa      	ldr	r2, [r7, #12]
 8007108:	0151      	lsls	r1, r2, #5
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	440a      	add	r2, r1
 800710e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007112:	f043 0302 	orr.w	r3, r3, #2
 8007116:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8007118:	6879      	ldr	r1, [r7, #4]
 800711a:	68fa      	ldr	r2, [r7, #12]
 800711c:	4613      	mov	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4413      	add	r3, r2
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	440b      	add	r3, r1
 8007126:	3358      	adds	r3, #88	; 0x58
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	1c59      	adds	r1, r3, #1
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	4613      	mov	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	00db      	lsls	r3, r3, #3
 8007138:	4403      	add	r3, r0
 800713a:	3358      	adds	r3, #88	; 0x58
 800713c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800713e:	6879      	ldr	r1, [r7, #4]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	4613      	mov	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	00db      	lsls	r3, r3, #3
 800714a:	440b      	add	r3, r1
 800714c:	335d      	adds	r3, #93	; 0x5d
 800714e:	2206      	movs	r2, #6
 8007150:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	b2d2      	uxtb	r2, r2
 800715a:	4611      	mov	r1, r2
 800715c:	4618      	mov	r0, r3
 800715e:	f007 fbfe 	bl	800e95e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	4413      	add	r3, r2
 800716a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800716e:	461a      	mov	r2, r3
 8007170:	2380      	movs	r3, #128	; 0x80
 8007172:	6093      	str	r3, [r2, #8]
}
 8007174:	e087      	b.n	8007286 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	015a      	lsls	r2, r3, #5
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	4413      	add	r3, r2
 800717e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f003 0310 	and.w	r3, r3, #16
 8007188:	2b10      	cmp	r3, #16
 800718a:	d17c      	bne.n	8007286 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800718c:	6879      	ldr	r1, [r7, #4]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	4613      	mov	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	00db      	lsls	r3, r3, #3
 8007198:	440b      	add	r3, r1
 800719a:	333f      	adds	r3, #63	; 0x3f
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d122      	bne.n	80071e8 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80071a2:	6879      	ldr	r1, [r7, #4]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	4613      	mov	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	00db      	lsls	r3, r3, #3
 80071ae:	440b      	add	r3, r1
 80071b0:	3358      	adds	r3, #88	; 0x58
 80071b2:	2200      	movs	r2, #0
 80071b4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	015a      	lsls	r2, r3, #5
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	4413      	add	r3, r2
 80071be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	0151      	lsls	r1, r2, #5
 80071c8:	693a      	ldr	r2, [r7, #16]
 80071ca:	440a      	add	r2, r1
 80071cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071d0:	f043 0302 	orr.w	r3, r3, #2
 80071d4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	b2d2      	uxtb	r2, r2
 80071de:	4611      	mov	r1, r2
 80071e0:	4618      	mov	r0, r3
 80071e2:	f007 fbbc 	bl	800e95e <USB_HC_Halt>
 80071e6:	e045      	b.n	8007274 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80071e8:	6879      	ldr	r1, [r7, #4]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	4613      	mov	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	00db      	lsls	r3, r3, #3
 80071f4:	440b      	add	r3, r1
 80071f6:	333f      	adds	r3, #63	; 0x3f
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00a      	beq.n	8007214 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80071fe:	6879      	ldr	r1, [r7, #4]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	4613      	mov	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	00db      	lsls	r3, r3, #3
 800720a:	440b      	add	r3, r1
 800720c:	333f      	adds	r3, #63	; 0x3f
 800720e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007210:	2b02      	cmp	r3, #2
 8007212:	d12f      	bne.n	8007274 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007214:	6879      	ldr	r1, [r7, #4]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	4613      	mov	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	00db      	lsls	r3, r3, #3
 8007220:	440b      	add	r3, r1
 8007222:	3358      	adds	r3, #88	; 0x58
 8007224:	2200      	movs	r2, #0
 8007226:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	691b      	ldr	r3, [r3, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d121      	bne.n	8007274 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8007230:	6879      	ldr	r1, [r7, #4]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	4613      	mov	r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	00db      	lsls	r3, r3, #3
 800723c:	440b      	add	r3, r1
 800723e:	335d      	adds	r3, #93	; 0x5d
 8007240:	2203      	movs	r2, #3
 8007242:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	4413      	add	r3, r2
 800724c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	0151      	lsls	r1, r2, #5
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	440a      	add	r2, r1
 800725a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800725e:	f043 0302 	orr.w	r3, r3, #2
 8007262:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	b2d2      	uxtb	r2, r2
 800726c:	4611      	mov	r1, r2
 800726e:	4618      	mov	r0, r3
 8007270:	f007 fb75 	bl	800e95e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	4413      	add	r3, r2
 800727c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007280:	461a      	mov	r2, r3
 8007282:	2310      	movs	r3, #16
 8007284:	6093      	str	r3, [r2, #8]
}
 8007286:	bf00      	nop
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b086      	sub	sp, #24
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	460b      	mov	r3, r1
 8007298:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80072a4:	78fb      	ldrb	r3, [r7, #3]
 80072a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	015a      	lsls	r2, r3, #5
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	4413      	add	r3, r2
 80072b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f003 0304 	and.w	r3, r3, #4
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	d119      	bne.n	80072f2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ca:	461a      	mov	r2, r3
 80072cc:	2304      	movs	r3, #4
 80072ce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	0151      	lsls	r1, r2, #5
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	440a      	add	r2, r1
 80072e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072ea:	f043 0302 	orr.w	r3, r3, #2
 80072ee:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80072f0:	e33e      	b.n	8007970 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	015a      	lsls	r2, r3, #5
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f003 0320 	and.w	r3, r3, #32
 8007304:	2b20      	cmp	r3, #32
 8007306:	d141      	bne.n	800738c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	4413      	add	r3, r2
 8007310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007314:	461a      	mov	r2, r3
 8007316:	2320      	movs	r3, #32
 8007318:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800731a:	6879      	ldr	r1, [r7, #4]
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	4613      	mov	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	00db      	lsls	r3, r3, #3
 8007326:	440b      	add	r3, r1
 8007328:	333d      	adds	r3, #61	; 0x3d
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2b01      	cmp	r3, #1
 800732e:	f040 831f 	bne.w	8007970 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8007332:	6879      	ldr	r1, [r7, #4]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	4613      	mov	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4413      	add	r3, r2
 800733c:	00db      	lsls	r3, r3, #3
 800733e:	440b      	add	r3, r1
 8007340:	333d      	adds	r3, #61	; 0x3d
 8007342:	2200      	movs	r2, #0
 8007344:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	4613      	mov	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	00db      	lsls	r3, r3, #3
 8007352:	440b      	add	r3, r1
 8007354:	335c      	adds	r3, #92	; 0x5c
 8007356:	2202      	movs	r2, #2
 8007358:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	4413      	add	r3, r2
 8007362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	0151      	lsls	r1, r2, #5
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	440a      	add	r2, r1
 8007370:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007374:	f043 0302 	orr.w	r3, r3, #2
 8007378:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	b2d2      	uxtb	r2, r2
 8007382:	4611      	mov	r1, r2
 8007384:	4618      	mov	r0, r3
 8007386:	f007 faea 	bl	800e95e <USB_HC_Halt>
}
 800738a:	e2f1      	b.n	8007970 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	4413      	add	r3, r2
 8007394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739e:	2b40      	cmp	r3, #64	; 0x40
 80073a0:	d13f      	bne.n	8007422 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80073a2:	6879      	ldr	r1, [r7, #4]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	4613      	mov	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4413      	add	r3, r2
 80073ac:	00db      	lsls	r3, r3, #3
 80073ae:	440b      	add	r3, r1
 80073b0:	335d      	adds	r3, #93	; 0x5d
 80073b2:	2204      	movs	r2, #4
 80073b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	4613      	mov	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	00db      	lsls	r3, r3, #3
 80073c2:	440b      	add	r3, r1
 80073c4:	333d      	adds	r3, #61	; 0x3d
 80073c6:	2201      	movs	r2, #1
 80073c8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80073ca:	6879      	ldr	r1, [r7, #4]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	4613      	mov	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	00db      	lsls	r3, r3, #3
 80073d6:	440b      	add	r3, r1
 80073d8:	3358      	adds	r3, #88	; 0x58
 80073da:	2200      	movs	r2, #0
 80073dc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	015a      	lsls	r2, r3, #5
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	4413      	add	r3, r2
 80073e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	0151      	lsls	r1, r2, #5
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	440a      	add	r2, r1
 80073f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073f8:	f043 0302 	orr.w	r3, r3, #2
 80073fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	b2d2      	uxtb	r2, r2
 8007406:	4611      	mov	r1, r2
 8007408:	4618      	mov	r0, r3
 800740a:	f007 faa8 	bl	800e95e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	4413      	add	r3, r2
 8007416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800741a:	461a      	mov	r2, r3
 800741c:	2340      	movs	r3, #64	; 0x40
 800741e:	6093      	str	r3, [r2, #8]
}
 8007420:	e2a6      	b.n	8007970 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	4413      	add	r3, r2
 800742a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007438:	d122      	bne.n	8007480 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	015a      	lsls	r2, r3, #5
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	4413      	add	r3, r2
 8007442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	0151      	lsls	r1, r2, #5
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	440a      	add	r2, r1
 8007450:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007454:	f043 0302 	orr.w	r3, r3, #2
 8007458:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	b2d2      	uxtb	r2, r2
 8007462:	4611      	mov	r1, r2
 8007464:	4618      	mov	r0, r3
 8007466:	f007 fa7a 	bl	800e95e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	4413      	add	r3, r2
 8007472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007476:	461a      	mov	r2, r3
 8007478:	f44f 7300 	mov.w	r3, #512	; 0x200
 800747c:	6093      	str	r3, [r2, #8]
}
 800747e:	e277      	b.n	8007970 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	4413      	add	r3, r2
 8007488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b01      	cmp	r3, #1
 8007494:	d135      	bne.n	8007502 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007496:	6879      	ldr	r1, [r7, #4]
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	4613      	mov	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	00db      	lsls	r3, r3, #3
 80074a2:	440b      	add	r3, r1
 80074a4:	3358      	adds	r3, #88	; 0x58
 80074a6:	2200      	movs	r2, #0
 80074a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	015a      	lsls	r2, r3, #5
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	0151      	lsls	r1, r2, #5
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	440a      	add	r2, r1
 80074c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074c4:	f043 0302 	orr.w	r3, r3, #2
 80074c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	b2d2      	uxtb	r2, r2
 80074d2:	4611      	mov	r1, r2
 80074d4:	4618      	mov	r0, r3
 80074d6:	f007 fa42 	bl	800e95e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	015a      	lsls	r2, r3, #5
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	4413      	add	r3, r2
 80074e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074e6:	461a      	mov	r2, r3
 80074e8:	2301      	movs	r3, #1
 80074ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80074ec:	6879      	ldr	r1, [r7, #4]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	4613      	mov	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	00db      	lsls	r3, r3, #3
 80074f8:	440b      	add	r3, r1
 80074fa:	335d      	adds	r3, #93	; 0x5d
 80074fc:	2201      	movs	r2, #1
 80074fe:	701a      	strb	r2, [r3, #0]
}
 8007500:	e236      	b.n	8007970 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	015a      	lsls	r2, r3, #5
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	4413      	add	r3, r2
 800750a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f003 0308 	and.w	r3, r3, #8
 8007514:	2b08      	cmp	r3, #8
 8007516:	d12b      	bne.n	8007570 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	015a      	lsls	r2, r3, #5
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	4413      	add	r3, r2
 8007520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007524:	461a      	mov	r2, r3
 8007526:	2308      	movs	r3, #8
 8007528:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	4413      	add	r3, r2
 8007532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	0151      	lsls	r1, r2, #5
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	440a      	add	r2, r1
 8007540:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007544:	f043 0302 	orr.w	r3, r3, #2
 8007548:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	b2d2      	uxtb	r2, r2
 8007552:	4611      	mov	r1, r2
 8007554:	4618      	mov	r0, r3
 8007556:	f007 fa02 	bl	800e95e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800755a:	6879      	ldr	r1, [r7, #4]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	4613      	mov	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4413      	add	r3, r2
 8007564:	00db      	lsls	r3, r3, #3
 8007566:	440b      	add	r3, r1
 8007568:	335d      	adds	r3, #93	; 0x5d
 800756a:	2205      	movs	r2, #5
 800756c:	701a      	strb	r2, [r3, #0]
}
 800756e:	e1ff      	b.n	8007970 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	4413      	add	r3, r2
 8007578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	f003 0310 	and.w	r3, r3, #16
 8007582:	2b10      	cmp	r3, #16
 8007584:	d155      	bne.n	8007632 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007586:	6879      	ldr	r1, [r7, #4]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	4613      	mov	r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4413      	add	r3, r2
 8007590:	00db      	lsls	r3, r3, #3
 8007592:	440b      	add	r3, r1
 8007594:	3358      	adds	r3, #88	; 0x58
 8007596:	2200      	movs	r2, #0
 8007598:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800759a:	6879      	ldr	r1, [r7, #4]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	4613      	mov	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	00db      	lsls	r3, r3, #3
 80075a6:	440b      	add	r3, r1
 80075a8:	335d      	adds	r3, #93	; 0x5d
 80075aa:	2203      	movs	r2, #3
 80075ac:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80075ae:	6879      	ldr	r1, [r7, #4]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	4613      	mov	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	00db      	lsls	r3, r3, #3
 80075ba:	440b      	add	r3, r1
 80075bc:	333d      	adds	r3, #61	; 0x3d
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d114      	bne.n	80075ee <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80075c4:	6879      	ldr	r1, [r7, #4]
 80075c6:	68fa      	ldr	r2, [r7, #12]
 80075c8:	4613      	mov	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	00db      	lsls	r3, r3, #3
 80075d0:	440b      	add	r3, r1
 80075d2:	333c      	adds	r3, #60	; 0x3c
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d109      	bne.n	80075ee <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80075da:	6879      	ldr	r1, [r7, #4]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	4613      	mov	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4413      	add	r3, r2
 80075e4:	00db      	lsls	r3, r3, #3
 80075e6:	440b      	add	r3, r1
 80075e8:	333d      	adds	r3, #61	; 0x3d
 80075ea:	2201      	movs	r2, #1
 80075ec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	015a      	lsls	r2, r3, #5
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	4413      	add	r3, r2
 80075f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	0151      	lsls	r1, r2, #5
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	440a      	add	r2, r1
 8007604:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007608:	f043 0302 	orr.w	r3, r3, #2
 800760c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	b2d2      	uxtb	r2, r2
 8007616:	4611      	mov	r1, r2
 8007618:	4618      	mov	r0, r3
 800761a:	f007 f9a0 	bl	800e95e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	015a      	lsls	r2, r3, #5
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	4413      	add	r3, r2
 8007626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800762a:	461a      	mov	r2, r3
 800762c:	2310      	movs	r3, #16
 800762e:	6093      	str	r3, [r2, #8]
}
 8007630:	e19e      	b.n	8007970 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	015a      	lsls	r2, r3, #5
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	4413      	add	r3, r2
 800763a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007644:	2b80      	cmp	r3, #128	; 0x80
 8007646:	d12b      	bne.n	80076a0 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	015a      	lsls	r2, r3, #5
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	4413      	add	r3, r2
 8007650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	0151      	lsls	r1, r2, #5
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	440a      	add	r2, r1
 800765e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007662:	f043 0302 	orr.w	r3, r3, #2
 8007666:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	b2d2      	uxtb	r2, r2
 8007670:	4611      	mov	r1, r2
 8007672:	4618      	mov	r0, r3
 8007674:	f007 f973 	bl	800e95e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8007678:	6879      	ldr	r1, [r7, #4]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	4613      	mov	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	00db      	lsls	r3, r3, #3
 8007684:	440b      	add	r3, r1
 8007686:	335d      	adds	r3, #93	; 0x5d
 8007688:	2206      	movs	r2, #6
 800768a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	015a      	lsls	r2, r3, #5
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	4413      	add	r3, r2
 8007694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007698:	461a      	mov	r2, r3
 800769a:	2380      	movs	r3, #128	; 0x80
 800769c:	6093      	str	r3, [r2, #8]
}
 800769e:	e167      	b.n	8007970 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076b6:	d135      	bne.n	8007724 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	0151      	lsls	r1, r2, #5
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	440a      	add	r2, r1
 80076ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076d2:	f043 0302 	orr.w	r3, r3, #2
 80076d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	b2d2      	uxtb	r2, r2
 80076e0:	4611      	mov	r1, r2
 80076e2:	4618      	mov	r0, r3
 80076e4:	f007 f93b 	bl	800e95e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	015a      	lsls	r2, r3, #5
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076f4:	461a      	mov	r2, r3
 80076f6:	2310      	movs	r3, #16
 80076f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	4413      	add	r3, r2
 8007702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007706:	461a      	mov	r2, r3
 8007708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800770c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800770e:	6879      	ldr	r1, [r7, #4]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	4613      	mov	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4413      	add	r3, r2
 8007718:	00db      	lsls	r3, r3, #3
 800771a:	440b      	add	r3, r1
 800771c:	335d      	adds	r3, #93	; 0x5d
 800771e:	2208      	movs	r2, #8
 8007720:	701a      	strb	r2, [r3, #0]
}
 8007722:	e125      	b.n	8007970 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	4413      	add	r3, r2
 800772c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b02      	cmp	r3, #2
 8007738:	f040 811a 	bne.w	8007970 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	4413      	add	r3, r2
 8007744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	0151      	lsls	r1, r2, #5
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	440a      	add	r2, r1
 8007752:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007756:	f023 0302 	bic.w	r3, r3, #2
 800775a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800775c:	6879      	ldr	r1, [r7, #4]
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	4613      	mov	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	00db      	lsls	r3, r3, #3
 8007768:	440b      	add	r3, r1
 800776a:	335d      	adds	r3, #93	; 0x5d
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d137      	bne.n	80077e2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007772:	6879      	ldr	r1, [r7, #4]
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	4613      	mov	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	00db      	lsls	r3, r3, #3
 800777e:	440b      	add	r3, r1
 8007780:	335c      	adds	r3, #92	; 0x5c
 8007782:	2201      	movs	r2, #1
 8007784:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007786:	6879      	ldr	r1, [r7, #4]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	4613      	mov	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	00db      	lsls	r3, r3, #3
 8007792:	440b      	add	r3, r1
 8007794:	333f      	adds	r3, #63	; 0x3f
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b02      	cmp	r3, #2
 800779a:	d00b      	beq.n	80077b4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800779c:	6879      	ldr	r1, [r7, #4]
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	4613      	mov	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4413      	add	r3, r2
 80077a6:	00db      	lsls	r3, r3, #3
 80077a8:	440b      	add	r3, r1
 80077aa:	333f      	adds	r3, #63	; 0x3f
 80077ac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	f040 80c5 	bne.w	800793e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80077b4:	6879      	ldr	r1, [r7, #4]
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	4613      	mov	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	440b      	add	r3, r1
 80077c2:	3351      	adds	r3, #81	; 0x51
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	f083 0301 	eor.w	r3, r3, #1
 80077ca:	b2d8      	uxtb	r0, r3
 80077cc:	6879      	ldr	r1, [r7, #4]
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	4613      	mov	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	00db      	lsls	r3, r3, #3
 80077d8:	440b      	add	r3, r1
 80077da:	3351      	adds	r3, #81	; 0x51
 80077dc:	4602      	mov	r2, r0
 80077de:	701a      	strb	r2, [r3, #0]
 80077e0:	e0ad      	b.n	800793e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80077e2:	6879      	ldr	r1, [r7, #4]
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	4613      	mov	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4413      	add	r3, r2
 80077ec:	00db      	lsls	r3, r3, #3
 80077ee:	440b      	add	r3, r1
 80077f0:	335d      	adds	r3, #93	; 0x5d
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	2b03      	cmp	r3, #3
 80077f6:	d10a      	bne.n	800780e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80077f8:	6879      	ldr	r1, [r7, #4]
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	4613      	mov	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	4413      	add	r3, r2
 8007802:	00db      	lsls	r3, r3, #3
 8007804:	440b      	add	r3, r1
 8007806:	335c      	adds	r3, #92	; 0x5c
 8007808:	2202      	movs	r2, #2
 800780a:	701a      	strb	r2, [r3, #0]
 800780c:	e097      	b.n	800793e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800780e:	6879      	ldr	r1, [r7, #4]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	4613      	mov	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	00db      	lsls	r3, r3, #3
 800781a:	440b      	add	r3, r1
 800781c:	335d      	adds	r3, #93	; 0x5d
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	2b04      	cmp	r3, #4
 8007822:	d10a      	bne.n	800783a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007824:	6879      	ldr	r1, [r7, #4]
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	4613      	mov	r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	00db      	lsls	r3, r3, #3
 8007830:	440b      	add	r3, r1
 8007832:	335c      	adds	r3, #92	; 0x5c
 8007834:	2202      	movs	r2, #2
 8007836:	701a      	strb	r2, [r3, #0]
 8007838:	e081      	b.n	800793e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800783a:	6879      	ldr	r1, [r7, #4]
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	4613      	mov	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4413      	add	r3, r2
 8007844:	00db      	lsls	r3, r3, #3
 8007846:	440b      	add	r3, r1
 8007848:	335d      	adds	r3, #93	; 0x5d
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	2b05      	cmp	r3, #5
 800784e:	d10a      	bne.n	8007866 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007850:	6879      	ldr	r1, [r7, #4]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	4613      	mov	r3, r2
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	00db      	lsls	r3, r3, #3
 800785c:	440b      	add	r3, r1
 800785e:	335c      	adds	r3, #92	; 0x5c
 8007860:	2205      	movs	r2, #5
 8007862:	701a      	strb	r2, [r3, #0]
 8007864:	e06b      	b.n	800793e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007866:	6879      	ldr	r1, [r7, #4]
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	4613      	mov	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	00db      	lsls	r3, r3, #3
 8007872:	440b      	add	r3, r1
 8007874:	335d      	adds	r3, #93	; 0x5d
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2b06      	cmp	r3, #6
 800787a:	d00a      	beq.n	8007892 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800787c:	6879      	ldr	r1, [r7, #4]
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	4613      	mov	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	4413      	add	r3, r2
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	440b      	add	r3, r1
 800788a:	335d      	adds	r3, #93	; 0x5d
 800788c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800788e:	2b08      	cmp	r3, #8
 8007890:	d155      	bne.n	800793e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8007892:	6879      	ldr	r1, [r7, #4]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	4613      	mov	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4413      	add	r3, r2
 800789c:	00db      	lsls	r3, r3, #3
 800789e:	440b      	add	r3, r1
 80078a0:	3358      	adds	r3, #88	; 0x58
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	1c59      	adds	r1, r3, #1
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	4613      	mov	r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	00db      	lsls	r3, r3, #3
 80078b2:	4403      	add	r3, r0
 80078b4:	3358      	adds	r3, #88	; 0x58
 80078b6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80078b8:	6879      	ldr	r1, [r7, #4]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	4613      	mov	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4413      	add	r3, r2
 80078c2:	00db      	lsls	r3, r3, #3
 80078c4:	440b      	add	r3, r1
 80078c6:	3358      	adds	r3, #88	; 0x58
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b03      	cmp	r3, #3
 80078cc:	d914      	bls.n	80078f8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80078ce:	6879      	ldr	r1, [r7, #4]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	4613      	mov	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4413      	add	r3, r2
 80078d8:	00db      	lsls	r3, r3, #3
 80078da:	440b      	add	r3, r1
 80078dc:	3358      	adds	r3, #88	; 0x58
 80078de:	2200      	movs	r2, #0
 80078e0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80078e2:	6879      	ldr	r1, [r7, #4]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	4613      	mov	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	00db      	lsls	r3, r3, #3
 80078ee:	440b      	add	r3, r1
 80078f0:	335c      	adds	r3, #92	; 0x5c
 80078f2:	2204      	movs	r2, #4
 80078f4:	701a      	strb	r2, [r3, #0]
 80078f6:	e009      	b.n	800790c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80078f8:	6879      	ldr	r1, [r7, #4]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	4613      	mov	r3, r2
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	4413      	add	r3, r2
 8007902:	00db      	lsls	r3, r3, #3
 8007904:	440b      	add	r3, r1
 8007906:	335c      	adds	r3, #92	; 0x5c
 8007908:	2202      	movs	r2, #2
 800790a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	015a      	lsls	r2, r3, #5
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	4413      	add	r3, r2
 8007914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007922:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800792a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	4413      	add	r3, r2
 8007934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007938:	461a      	mov	r2, r3
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	015a      	lsls	r2, r3, #5
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	4413      	add	r3, r2
 8007946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800794a:	461a      	mov	r2, r3
 800794c:	2302      	movs	r3, #2
 800794e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	b2d8      	uxtb	r0, r3
 8007954:	6879      	ldr	r1, [r7, #4]
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	4613      	mov	r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	00db      	lsls	r3, r3, #3
 8007960:	440b      	add	r3, r1
 8007962:	335c      	adds	r3, #92	; 0x5c
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	4601      	mov	r1, r0
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7fc f88a 	bl	8003a84 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007970:	bf00      	nop
 8007972:	3718      	adds	r7, #24
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b08a      	sub	sp, #40	; 0x28
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007988:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	f003 030f 	and.w	r3, r3, #15
 8007998:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	0c5b      	lsrs	r3, r3, #17
 800799e:	f003 030f 	and.w	r3, r3, #15
 80079a2:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	091b      	lsrs	r3, r3, #4
 80079a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079ac:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d003      	beq.n	80079bc <HCD_RXQLVL_IRQHandler+0x44>
 80079b4:	2b05      	cmp	r3, #5
 80079b6:	f000 8082 	beq.w	8007abe <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80079ba:	e083      	b.n	8007ac4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d07f      	beq.n	8007ac2 <HCD_RXQLVL_IRQHandler+0x14a>
 80079c2:	6879      	ldr	r1, [r7, #4]
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	4613      	mov	r3, r2
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	4413      	add	r3, r2
 80079cc:	00db      	lsls	r3, r3, #3
 80079ce:	440b      	add	r3, r1
 80079d0:	3344      	adds	r3, #68	; 0x44
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d074      	beq.n	8007ac2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6818      	ldr	r0, [r3, #0]
 80079dc:	6879      	ldr	r1, [r7, #4]
 80079de:	69ba      	ldr	r2, [r7, #24]
 80079e0:	4613      	mov	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4413      	add	r3, r2
 80079e6:	00db      	lsls	r3, r3, #3
 80079e8:	440b      	add	r3, r1
 80079ea:	3344      	adds	r3, #68	; 0x44
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	b292      	uxth	r2, r2
 80079f2:	4619      	mov	r1, r3
 80079f4:	f006 fb5f 	bl	800e0b6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80079f8:	6879      	ldr	r1, [r7, #4]
 80079fa:	69ba      	ldr	r2, [r7, #24]
 80079fc:	4613      	mov	r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	4413      	add	r3, r2
 8007a02:	00db      	lsls	r3, r3, #3
 8007a04:	440b      	add	r3, r1
 8007a06:	3344      	adds	r3, #68	; 0x44
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	18d1      	adds	r1, r2, r3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	69ba      	ldr	r2, [r7, #24]
 8007a12:	4613      	mov	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	00db      	lsls	r3, r3, #3
 8007a1a:	4403      	add	r3, r0
 8007a1c:	3344      	adds	r3, #68	; 0x44
 8007a1e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8007a20:	6879      	ldr	r1, [r7, #4]
 8007a22:	69ba      	ldr	r2, [r7, #24]
 8007a24:	4613      	mov	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	00db      	lsls	r3, r3, #3
 8007a2c:	440b      	add	r3, r1
 8007a2e:	334c      	adds	r3, #76	; 0x4c
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	18d1      	adds	r1, r2, r3
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	69ba      	ldr	r2, [r7, #24]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	00db      	lsls	r3, r3, #3
 8007a42:	4403      	add	r3, r0
 8007a44:	334c      	adds	r3, #76	; 0x4c
 8007a46:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	6a3b      	ldr	r3, [r7, #32]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a54:	691a      	ldr	r2, [r3, #16]
 8007a56:	4b1d      	ldr	r3, [pc, #116]	; (8007acc <HCD_RXQLVL_IRQHandler+0x154>)
 8007a58:	4013      	ands	r3, r2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d031      	beq.n	8007ac2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	015a      	lsls	r2, r3, #5
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	4413      	add	r3, r2
 8007a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a74:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a7c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	015a      	lsls	r2, r3, #5
 8007a82:	6a3b      	ldr	r3, [r7, #32]
 8007a84:	4413      	add	r3, r2
 8007a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8007a90:	6879      	ldr	r1, [r7, #4]
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	4613      	mov	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4413      	add	r3, r2
 8007a9a:	00db      	lsls	r3, r3, #3
 8007a9c:	440b      	add	r3, r1
 8007a9e:	3350      	adds	r3, #80	; 0x50
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	f083 0301 	eor.w	r3, r3, #1
 8007aa6:	b2d8      	uxtb	r0, r3
 8007aa8:	6879      	ldr	r1, [r7, #4]
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	4613      	mov	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	440b      	add	r3, r1
 8007ab6:	3350      	adds	r3, #80	; 0x50
 8007ab8:	4602      	mov	r2, r0
 8007aba:	701a      	strb	r2, [r3, #0]
      break;
 8007abc:	e001      	b.n	8007ac2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8007abe:	bf00      	nop
 8007ac0:	e000      	b.n	8007ac4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8007ac2:	bf00      	nop
  }
}
 8007ac4:	bf00      	nop
 8007ac6:	3728      	adds	r7, #40	; 0x28
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	1ff80000 	.word	0x1ff80000

08007ad0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007afc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d10b      	bne.n	8007b20 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f003 0301 	and.w	r3, r3, #1
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d102      	bne.n	8007b18 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7fb ff9a 	bl	8003a4c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	f043 0302 	orr.w	r3, r3, #2
 8007b1e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f003 0308 	and.w	r3, r3, #8
 8007b26:	2b08      	cmp	r3, #8
 8007b28:	d132      	bne.n	8007b90 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	f043 0308 	orr.w	r3, r3, #8
 8007b30:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f003 0304 	and.w	r3, r3, #4
 8007b38:	2b04      	cmp	r3, #4
 8007b3a:	d126      	bne.n	8007b8a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d113      	bne.n	8007b6c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007b4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b4e:	d106      	bne.n	8007b5e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2102      	movs	r1, #2
 8007b56:	4618      	mov	r0, r3
 8007b58:	f006 fbdc 	bl	800e314 <USB_InitFSLSPClkSel>
 8007b5c:	e011      	b.n	8007b82 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2101      	movs	r1, #1
 8007b64:	4618      	mov	r0, r3
 8007b66:	f006 fbd5 	bl	800e314 <USB_InitFSLSPClkSel>
 8007b6a:	e00a      	b.n	8007b82 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d106      	bne.n	8007b82 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007b80:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7fb ff90 	bl	8003aa8 <HAL_HCD_PortEnabled_Callback>
 8007b88:	e002      	b.n	8007b90 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f7fb ff9a 	bl	8003ac4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f003 0320 	and.w	r3, r3, #32
 8007b96:	2b20      	cmp	r3, #32
 8007b98:	d103      	bne.n	8007ba2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	f043 0320 	orr.w	r3, r3, #32
 8007ba0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007ba8:	461a      	mov	r2, r3
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	6013      	str	r3, [r2, #0]
}
 8007bae:	bf00      	nop
 8007bb0:	3718      	adds	r7, #24
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d101      	bne.n	8007bca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e07f      	b.n	8007cca <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d106      	bne.n	8007be4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f7fa ff58 	bl	8002a94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2224      	movs	r2, #36	; 0x24
 8007be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f022 0201 	bic.w	r2, r2, #1
 8007bfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007c08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	689a      	ldr	r2, [r3, #8]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d107      	bne.n	8007c32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	689a      	ldr	r2, [r3, #8]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c2e:	609a      	str	r2, [r3, #8]
 8007c30:	e006      	b.n	8007c40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	689a      	ldr	r2, [r3, #8]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007c3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d104      	bne.n	8007c52 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c50:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6859      	ldr	r1, [r3, #4]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	4b1d      	ldr	r3, [pc, #116]	; (8007cd4 <HAL_I2C_Init+0x11c>)
 8007c5e:	430b      	orrs	r3, r1
 8007c60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68da      	ldr	r2, [r3, #12]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	691a      	ldr	r2, [r3, #16]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	ea42 0103 	orr.w	r1, r2, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	021a      	lsls	r2, r3, #8
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	69d9      	ldr	r1, [r3, #28]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a1a      	ldr	r2, [r3, #32]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	430a      	orrs	r2, r1
 8007c9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f042 0201 	orr.w	r2, r2, #1
 8007caa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2220      	movs	r2, #32
 8007cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3708      	adds	r7, #8
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	02008000 	.word	0x02008000

08007cd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	2b20      	cmp	r3, #32
 8007cec:	d138      	bne.n	8007d60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d101      	bne.n	8007cfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	e032      	b.n	8007d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2224      	movs	r2, #36	; 0x24
 8007d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 0201 	bic.w	r2, r2, #1
 8007d1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007d2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6819      	ldr	r1, [r3, #0]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681a      	ldr	r2, [r3, #0]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f042 0201 	orr.w	r2, r2, #1
 8007d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2220      	movs	r2, #32
 8007d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	e000      	b.n	8007d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d60:	2302      	movs	r3, #2
  }
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	370c      	adds	r7, #12
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr

08007d6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b085      	sub	sp, #20
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	2b20      	cmp	r3, #32
 8007d82:	d139      	bne.n	8007df8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d101      	bne.n	8007d92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007d8e:	2302      	movs	r3, #2
 8007d90:	e033      	b.n	8007dfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2224      	movs	r2, #36	; 0x24
 8007d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f022 0201 	bic.w	r2, r2, #1
 8007db0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007dc0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	021b      	lsls	r3, r3, #8
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f042 0201 	orr.w	r2, r2, #1
 8007de2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2220      	movs	r2, #32
 8007de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	e000      	b.n	8007dfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007df8:	2302      	movs	r3, #2
  }
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
	...

08007e08 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e0bf      	b.n	8007f9a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d106      	bne.n	8007e34 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7fa fea8 	bl	8002b84 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	699a      	ldr	r2, [r3, #24]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007e4a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6999      	ldr	r1, [r3, #24]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007e60:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6899      	ldr	r1, [r3, #8]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	4b4a      	ldr	r3, [pc, #296]	; (8007fa4 <HAL_LTDC_Init+0x19c>)
 8007e7c:	400b      	ands	r3, r1
 8007e7e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	695b      	ldr	r3, [r3, #20]
 8007e84:	041b      	lsls	r3, r3, #16
 8007e86:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	6899      	ldr	r1, [r3, #8]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	699a      	ldr	r2, [r3, #24]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	431a      	orrs	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68d9      	ldr	r1, [r3, #12]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	4b3e      	ldr	r3, [pc, #248]	; (8007fa4 <HAL_LTDC_Init+0x19c>)
 8007eaa:	400b      	ands	r3, r1
 8007eac:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	69db      	ldr	r3, [r3, #28]
 8007eb2:	041b      	lsls	r3, r3, #16
 8007eb4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68d9      	ldr	r1, [r3, #12]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a1a      	ldr	r2, [r3, #32]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	6919      	ldr	r1, [r3, #16]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	4b33      	ldr	r3, [pc, #204]	; (8007fa4 <HAL_LTDC_Init+0x19c>)
 8007ed8:	400b      	ands	r3, r1
 8007eda:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee0:	041b      	lsls	r3, r3, #16
 8007ee2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6919      	ldr	r1, [r3, #16]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	431a      	orrs	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	430a      	orrs	r2, r1
 8007ef8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6959      	ldr	r1, [r3, #20]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	4b27      	ldr	r3, [pc, #156]	; (8007fa4 <HAL_LTDC_Init+0x19c>)
 8007f06:	400b      	ands	r3, r1
 8007f08:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0e:	041b      	lsls	r3, r3, #16
 8007f10:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	6959      	ldr	r1, [r3, #20]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	431a      	orrs	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	430a      	orrs	r2, r1
 8007f26:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f2e:	021b      	lsls	r3, r3, #8
 8007f30:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007f38:	041b      	lsls	r3, r3, #16
 8007f3a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007f5e:	431a      	orrs	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	430a      	orrs	r2, r1
 8007f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f042 0206 	orr.w	r2, r2, #6
 8007f76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	699a      	ldr	r2, [r3, #24]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f042 0201 	orr.w	r2, r2, #1
 8007f86:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	f000f800 	.word	0xf000f800

08007fa8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fbe:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f003 0304 	and.w	r3, r3, #4
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d023      	beq.n	8008012 <HAL_LTDC_IRQHandler+0x6a>
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	f003 0304 	and.w	r3, r3, #4
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d01e      	beq.n	8008012 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f022 0204 	bic.w	r2, r2, #4
 8007fe2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2204      	movs	r2, #4
 8007fea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ff2:	f043 0201 	orr.w	r2, r3, #1
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2204      	movs	r2, #4
 8008000:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f86f 	bl	80080f0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f003 0302 	and.w	r3, r3, #2
 8008018:	2b00      	cmp	r3, #0
 800801a:	d023      	beq.n	8008064 <HAL_LTDC_IRQHandler+0xbc>
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	f003 0302 	and.w	r3, r3, #2
 8008022:	2b00      	cmp	r3, #0
 8008024:	d01e      	beq.n	8008064 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f022 0202 	bic.w	r2, r2, #2
 8008034:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2202      	movs	r2, #2
 800803c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008044:	f043 0202 	orr.w	r2, r3, #2
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2204      	movs	r2, #4
 8008052:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f846 	bl	80080f0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	2b00      	cmp	r3, #0
 800806c:	d01b      	beq.n	80080a6 <HAL_LTDC_IRQHandler+0xfe>
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	2b00      	cmp	r3, #0
 8008076:	d016      	beq.n	80080a6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f022 0201 	bic.w	r2, r2, #1
 8008086:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2201      	movs	r2, #1
 800808e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f82f 	bl	8008104 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f003 0308 	and.w	r3, r3, #8
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d01b      	beq.n	80080e8 <HAL_LTDC_IRQHandler+0x140>
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	f003 0308 	and.w	r3, r3, #8
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d016      	beq.n	80080e8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f022 0208 	bic.w	r2, r2, #8
 80080c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2208      	movs	r2, #8
 80080d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f818 	bl	8008118 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80080e8:	bf00      	nop
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800812c:	b5b0      	push	{r4, r5, r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800813e:	2b01      	cmp	r3, #1
 8008140:	d101      	bne.n	8008146 <HAL_LTDC_ConfigLayer+0x1a>
 8008142:	2302      	movs	r3, #2
 8008144:	e02c      	b.n	80081a0 <HAL_LTDC_ConfigLayer+0x74>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2202      	movs	r2, #2
 8008152:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2134      	movs	r1, #52	; 0x34
 800815c:	fb01 f303 	mul.w	r3, r1, r3
 8008160:	4413      	add	r3, r2
 8008162:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	4614      	mov	r4, r2
 800816a:	461d      	mov	r5, r3
 800816c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800816e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008178:	682b      	ldr	r3, [r5, #0]
 800817a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	68b9      	ldr	r1, [r7, #8]
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f000 f811 	bl	80081a8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2201      	movs	r2, #1
 800818c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2201      	movs	r2, #1
 8008192:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bdb0      	pop	{r4, r5, r7, pc}

080081a8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b089      	sub	sp, #36	; 0x24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	685a      	ldr	r2, [r3, #4]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	0c1b      	lsrs	r3, r3, #16
 80081c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081c4:	4413      	add	r3, r2
 80081c6:	041b      	lsls	r3, r3, #16
 80081c8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	461a      	mov	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	01db      	lsls	r3, r3, #7
 80081d4:	4413      	add	r3, r2
 80081d6:	3384      	adds	r3, #132	; 0x84
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	6812      	ldr	r2, [r2, #0]
 80081de:	4611      	mov	r1, r2
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	01d2      	lsls	r2, r2, #7
 80081e4:	440a      	add	r2, r1
 80081e6:	3284      	adds	r2, #132	; 0x84
 80081e8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80081ec:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	0c1b      	lsrs	r3, r3, #16
 80081fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081fe:	4413      	add	r3, r2
 8008200:	1c5a      	adds	r2, r3, #1
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4619      	mov	r1, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	01db      	lsls	r3, r3, #7
 800820c:	440b      	add	r3, r1
 800820e:	3384      	adds	r3, #132	; 0x84
 8008210:	4619      	mov	r1, r3
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	4313      	orrs	r3, r2
 8008216:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	68da      	ldr	r2, [r3, #12]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008226:	4413      	add	r3, r2
 8008228:	041b      	lsls	r3, r3, #16
 800822a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	461a      	mov	r2, r3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	01db      	lsls	r3, r3, #7
 8008236:	4413      	add	r3, r2
 8008238:	3384      	adds	r3, #132	; 0x84
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	6812      	ldr	r2, [r2, #0]
 8008240:	4611      	mov	r1, r2
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	01d2      	lsls	r2, r2, #7
 8008246:	440a      	add	r2, r1
 8008248:	3284      	adds	r2, #132	; 0x84
 800824a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800824e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	689a      	ldr	r2, [r3, #8]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800825e:	4413      	add	r3, r2
 8008260:	1c5a      	adds	r2, r3, #1
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4619      	mov	r1, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	01db      	lsls	r3, r3, #7
 800826c:	440b      	add	r3, r1
 800826e:	3384      	adds	r3, #132	; 0x84
 8008270:	4619      	mov	r1, r3
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	4313      	orrs	r3, r2
 8008276:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	461a      	mov	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	01db      	lsls	r3, r3, #7
 8008282:	4413      	add	r3, r2
 8008284:	3384      	adds	r3, #132	; 0x84
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	6812      	ldr	r2, [r2, #0]
 800828c:	4611      	mov	r1, r2
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	01d2      	lsls	r2, r2, #7
 8008292:	440a      	add	r2, r1
 8008294:	3284      	adds	r2, #132	; 0x84
 8008296:	f023 0307 	bic.w	r3, r3, #7
 800829a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	461a      	mov	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	01db      	lsls	r3, r3, #7
 80082a6:	4413      	add	r3, r2
 80082a8:	3384      	adds	r3, #132	; 0x84
 80082aa:	461a      	mov	r2, r3
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80082b8:	021b      	lsls	r3, r3, #8
 80082ba:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80082c2:	041b      	lsls	r3, r3, #16
 80082c4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	699b      	ldr	r3, [r3, #24]
 80082ca:	061b      	lsls	r3, r3, #24
 80082cc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	461a      	mov	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	01db      	lsls	r3, r3, #7
 80082d8:	4413      	add	r3, r2
 80082da:	3384      	adds	r3, #132	; 0x84
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	461a      	mov	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	01db      	lsls	r3, r3, #7
 80082e8:	4413      	add	r3, r2
 80082ea:	3384      	adds	r3, #132	; 0x84
 80082ec:	461a      	mov	r2, r3
 80082ee:	2300      	movs	r3, #0
 80082f0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80082f8:	461a      	mov	r2, r3
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	431a      	orrs	r2, r3
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	431a      	orrs	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4619      	mov	r1, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	01db      	lsls	r3, r3, #7
 800830c:	440b      	add	r3, r1
 800830e:	3384      	adds	r3, #132	; 0x84
 8008310:	4619      	mov	r1, r3
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	4313      	orrs	r3, r2
 8008316:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	461a      	mov	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	01db      	lsls	r3, r3, #7
 8008322:	4413      	add	r3, r2
 8008324:	3384      	adds	r3, #132	; 0x84
 8008326:	695b      	ldr	r3, [r3, #20]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	6812      	ldr	r2, [r2, #0]
 800832c:	4611      	mov	r1, r2
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	01d2      	lsls	r2, r2, #7
 8008332:	440a      	add	r2, r1
 8008334:	3284      	adds	r2, #132	; 0x84
 8008336:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800833a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	461a      	mov	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	01db      	lsls	r3, r3, #7
 8008346:	4413      	add	r3, r2
 8008348:	3384      	adds	r3, #132	; 0x84
 800834a:	461a      	mov	r2, r3
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	695b      	ldr	r3, [r3, #20]
 8008350:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	01db      	lsls	r3, r3, #7
 800835c:	4413      	add	r3, r2
 800835e:	3384      	adds	r3, #132	; 0x84
 8008360:	69da      	ldr	r2, [r3, #28]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4619      	mov	r1, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	01db      	lsls	r3, r3, #7
 800836c:	440b      	add	r3, r1
 800836e:	3384      	adds	r3, #132	; 0x84
 8008370:	4619      	mov	r1, r3
 8008372:	4b58      	ldr	r3, [pc, #352]	; (80084d4 <LTDC_SetConfig+0x32c>)
 8008374:	4013      	ands	r3, r2
 8008376:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	69da      	ldr	r2, [r3, #28]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	6a1b      	ldr	r3, [r3, #32]
 8008380:	68f9      	ldr	r1, [r7, #12]
 8008382:	6809      	ldr	r1, [r1, #0]
 8008384:	4608      	mov	r0, r1
 8008386:	6879      	ldr	r1, [r7, #4]
 8008388:	01c9      	lsls	r1, r1, #7
 800838a:	4401      	add	r1, r0
 800838c:	3184      	adds	r1, #132	; 0x84
 800838e:	4313      	orrs	r3, r2
 8008390:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	461a      	mov	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	01db      	lsls	r3, r3, #7
 800839c:	4413      	add	r3, r2
 800839e:	3384      	adds	r3, #132	; 0x84
 80083a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	461a      	mov	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	01db      	lsls	r3, r3, #7
 80083ac:	4413      	add	r3, r2
 80083ae:	3384      	adds	r3, #132	; 0x84
 80083b0:	461a      	mov	r2, r3
 80083b2:	2300      	movs	r3, #0
 80083b4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	461a      	mov	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	01db      	lsls	r3, r3, #7
 80083c0:	4413      	add	r3, r2
 80083c2:	3384      	adds	r3, #132	; 0x84
 80083c4:	461a      	mov	r2, r3
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ca:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d102      	bne.n	80083da <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80083d4:	2304      	movs	r3, #4
 80083d6:	61fb      	str	r3, [r7, #28]
 80083d8:	e01b      	b.n	8008412 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d102      	bne.n	80083e8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80083e2:	2303      	movs	r3, #3
 80083e4:	61fb      	str	r3, [r7, #28]
 80083e6:	e014      	b.n	8008412 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	2b04      	cmp	r3, #4
 80083ee:	d00b      	beq.n	8008408 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d007      	beq.n	8008408 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80083fc:	2b03      	cmp	r3, #3
 80083fe:	d003      	beq.n	8008408 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008404:	2b07      	cmp	r3, #7
 8008406:	d102      	bne.n	800840e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008408:	2302      	movs	r3, #2
 800840a:	61fb      	str	r3, [r7, #28]
 800840c:	e001      	b.n	8008412 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800840e:	2301      	movs	r3, #1
 8008410:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	461a      	mov	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	01db      	lsls	r3, r3, #7
 800841c:	4413      	add	r3, r2
 800841e:	3384      	adds	r3, #132	; 0x84
 8008420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	6812      	ldr	r2, [r2, #0]
 8008426:	4611      	mov	r1, r2
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	01d2      	lsls	r2, r2, #7
 800842c:	440a      	add	r2, r1
 800842e:	3284      	adds	r2, #132	; 0x84
 8008430:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008434:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843a:	69fa      	ldr	r2, [r7, #28]
 800843c:	fb02 f303 	mul.w	r3, r2, r3
 8008440:	041a      	lsls	r2, r3, #16
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	6859      	ldr	r1, [r3, #4]
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	1acb      	subs	r3, r1, r3
 800844c:	69f9      	ldr	r1, [r7, #28]
 800844e:	fb01 f303 	mul.w	r3, r1, r3
 8008452:	3303      	adds	r3, #3
 8008454:	68f9      	ldr	r1, [r7, #12]
 8008456:	6809      	ldr	r1, [r1, #0]
 8008458:	4608      	mov	r0, r1
 800845a:	6879      	ldr	r1, [r7, #4]
 800845c:	01c9      	lsls	r1, r1, #7
 800845e:	4401      	add	r1, r0
 8008460:	3184      	adds	r1, #132	; 0x84
 8008462:	4313      	orrs	r3, r2
 8008464:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	461a      	mov	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	01db      	lsls	r3, r3, #7
 8008470:	4413      	add	r3, r2
 8008472:	3384      	adds	r3, #132	; 0x84
 8008474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4619      	mov	r1, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	01db      	lsls	r3, r3, #7
 8008480:	440b      	add	r3, r1
 8008482:	3384      	adds	r3, #132	; 0x84
 8008484:	4619      	mov	r1, r3
 8008486:	4b14      	ldr	r3, [pc, #80]	; (80084d8 <LTDC_SetConfig+0x330>)
 8008488:	4013      	ands	r3, r2
 800848a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	461a      	mov	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	01db      	lsls	r3, r3, #7
 8008496:	4413      	add	r3, r2
 8008498:	3384      	adds	r3, #132	; 0x84
 800849a:	461a      	mov	r2, r3
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	461a      	mov	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	01db      	lsls	r3, r3, #7
 80084ac:	4413      	add	r3, r2
 80084ae:	3384      	adds	r3, #132	; 0x84
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	6812      	ldr	r2, [r2, #0]
 80084b6:	4611      	mov	r1, r2
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	01d2      	lsls	r2, r2, #7
 80084bc:	440a      	add	r2, r1
 80084be:	3284      	adds	r2, #132	; 0x84
 80084c0:	f043 0301 	orr.w	r3, r3, #1
 80084c4:	6013      	str	r3, [r2, #0]
}
 80084c6:	bf00      	nop
 80084c8:	3724      	adds	r7, #36	; 0x24
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	fffff8f8 	.word	0xfffff8f8
 80084d8:	fffff800 	.word	0xfffff800

080084dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80084dc:	b480      	push	{r7}
 80084de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80084e0:	4b05      	ldr	r3, [pc, #20]	; (80084f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a04      	ldr	r2, [pc, #16]	; (80084f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80084e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084ea:	6013      	str	r3, [r2, #0]
}
 80084ec:	bf00      	nop
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	40007000 	.word	0x40007000

080084fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008502:	2300      	movs	r3, #0
 8008504:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008506:	4b23      	ldr	r3, [pc, #140]	; (8008594 <HAL_PWREx_EnableOverDrive+0x98>)
 8008508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850a:	4a22      	ldr	r2, [pc, #136]	; (8008594 <HAL_PWREx_EnableOverDrive+0x98>)
 800850c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008510:	6413      	str	r3, [r2, #64]	; 0x40
 8008512:	4b20      	ldr	r3, [pc, #128]	; (8008594 <HAL_PWREx_EnableOverDrive+0x98>)
 8008514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800851a:	603b      	str	r3, [r7, #0]
 800851c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800851e:	4b1e      	ldr	r3, [pc, #120]	; (8008598 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a1d      	ldr	r2, [pc, #116]	; (8008598 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008528:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800852a:	f7fb fd05 	bl	8003f38 <HAL_GetTick>
 800852e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008530:	e009      	b.n	8008546 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008532:	f7fb fd01 	bl	8003f38 <HAL_GetTick>
 8008536:	4602      	mov	r2, r0
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008540:	d901      	bls.n	8008546 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e022      	b.n	800858c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008546:	4b14      	ldr	r3, [pc, #80]	; (8008598 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800854e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008552:	d1ee      	bne.n	8008532 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008554:	4b10      	ldr	r3, [pc, #64]	; (8008598 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a0f      	ldr	r2, [pc, #60]	; (8008598 <HAL_PWREx_EnableOverDrive+0x9c>)
 800855a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800855e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008560:	f7fb fcea 	bl	8003f38 <HAL_GetTick>
 8008564:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008566:	e009      	b.n	800857c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008568:	f7fb fce6 	bl	8003f38 <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008576:	d901      	bls.n	800857c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008578:	2303      	movs	r3, #3
 800857a:	e007      	b.n	800858c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800857c:	4b06      	ldr	r3, [pc, #24]	; (8008598 <HAL_PWREx_EnableOverDrive+0x9c>)
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008584:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008588:	d1ee      	bne.n	8008568 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	40023800 	.word	0x40023800
 8008598:	40007000 	.word	0x40007000

0800859c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af02      	add	r7, sp, #8
 80085a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80085a4:	f7fb fcc8 	bl	8003f38 <HAL_GetTick>
 80085a8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d101      	bne.n	80085b4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e067      	b.n	8008684 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d10b      	bne.n	80085d8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f7fa fba3 	bl	8002d14 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80085ce:	f241 3188 	movw	r1, #5000	; 0x1388
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f85e 	bl	8008694 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	3b01      	subs	r3, #1
 80085e8:	021a      	lsls	r2, r3, #8
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	430a      	orrs	r2, r1
 80085f0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085f6:	9300      	str	r3, [sp, #0]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2200      	movs	r2, #0
 80085fc:	2120      	movs	r1, #32
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f856 	bl	80086b0 <QSPI_WaitFlagStateUntilTimeout>
 8008604:	4603      	mov	r3, r0
 8008606:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008608:	7afb      	ldrb	r3, [r7, #11]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d135      	bne.n	800867a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	4b1d      	ldr	r3, [pc, #116]	; (800868c <HAL_QSPI_Init+0xf0>)
 8008616:	4013      	ands	r3, r2
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	6852      	ldr	r2, [r2, #4]
 800861c:	0611      	lsls	r1, r2, #24
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	68d2      	ldr	r2, [r2, #12]
 8008622:	4311      	orrs	r1, r2
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	69d2      	ldr	r2, [r2, #28]
 8008628:	4311      	orrs	r1, r2
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	6a12      	ldr	r2, [r2, #32]
 800862e:	4311      	orrs	r1, r2
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	6812      	ldr	r2, [r2, #0]
 8008634:	430b      	orrs	r3, r1
 8008636:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	685a      	ldr	r2, [r3, #4]
 800863e:	4b14      	ldr	r3, [pc, #80]	; (8008690 <HAL_QSPI_Init+0xf4>)
 8008640:	4013      	ands	r3, r2
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	6912      	ldr	r2, [r2, #16]
 8008646:	0411      	lsls	r1, r2, #16
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	6952      	ldr	r2, [r2, #20]
 800864c:	4311      	orrs	r1, r2
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	6992      	ldr	r2, [r2, #24]
 8008652:	4311      	orrs	r1, r2
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	6812      	ldr	r2, [r2, #0]
 8008658:	430b      	orrs	r3, r1
 800865a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f042 0201 	orr.w	r2, r2, #1
 800866a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008682:	7afb      	ldrb	r3, [r7, #11]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	00ffff2f 	.word	0x00ffff2f
 8008690:	ffe0f8fe 	.word	0xffe0f8fe

08008694 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	683a      	ldr	r2, [r7, #0]
 80086a2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	603b      	str	r3, [r7, #0]
 80086bc:	4613      	mov	r3, r2
 80086be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80086c0:	e01a      	b.n	80086f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c8:	d016      	beq.n	80086f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086ca:	f7fb fc35 	bl	8003f38 <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	69ba      	ldr	r2, [r7, #24]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d302      	bcc.n	80086e0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10b      	bne.n	80086f8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2204      	movs	r2, #4
 80086e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ec:	f043 0201 	orr.w	r2, r3, #1
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e00e      	b.n	8008716 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	689a      	ldr	r2, [r3, #8]
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	4013      	ands	r3, r2
 8008702:	2b00      	cmp	r3, #0
 8008704:	bf14      	ite	ne
 8008706:	2301      	movne	r3, #1
 8008708:	2300      	moveq	r3, #0
 800870a:	b2db      	uxtb	r3, r3
 800870c:	461a      	mov	r2, r3
 800870e:	79fb      	ldrb	r3, [r7, #7]
 8008710:	429a      	cmp	r2, r3
 8008712:	d1d6      	bne.n	80086c2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
	...

08008720 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008728:	2300      	movs	r3, #0
 800872a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d101      	bne.n	8008736 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e291      	b.n	8008c5a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	2b00      	cmp	r3, #0
 8008740:	f000 8087 	beq.w	8008852 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008744:	4b96      	ldr	r3, [pc, #600]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f003 030c 	and.w	r3, r3, #12
 800874c:	2b04      	cmp	r3, #4
 800874e:	d00c      	beq.n	800876a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008750:	4b93      	ldr	r3, [pc, #588]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	f003 030c 	and.w	r3, r3, #12
 8008758:	2b08      	cmp	r3, #8
 800875a:	d112      	bne.n	8008782 <HAL_RCC_OscConfig+0x62>
 800875c:	4b90      	ldr	r3, [pc, #576]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008764:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008768:	d10b      	bne.n	8008782 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800876a:	4b8d      	ldr	r3, [pc, #564]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008772:	2b00      	cmp	r3, #0
 8008774:	d06c      	beq.n	8008850 <HAL_RCC_OscConfig+0x130>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d168      	bne.n	8008850 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e26b      	b.n	8008c5a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800878a:	d106      	bne.n	800879a <HAL_RCC_OscConfig+0x7a>
 800878c:	4b84      	ldr	r3, [pc, #528]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a83      	ldr	r2, [pc, #524]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 8008792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008796:	6013      	str	r3, [r2, #0]
 8008798:	e02e      	b.n	80087f8 <HAL_RCC_OscConfig+0xd8>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10c      	bne.n	80087bc <HAL_RCC_OscConfig+0x9c>
 80087a2:	4b7f      	ldr	r3, [pc, #508]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a7e      	ldr	r2, [pc, #504]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 80087a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087ac:	6013      	str	r3, [r2, #0]
 80087ae:	4b7c      	ldr	r3, [pc, #496]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a7b      	ldr	r2, [pc, #492]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 80087b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087b8:	6013      	str	r3, [r2, #0]
 80087ba:	e01d      	b.n	80087f8 <HAL_RCC_OscConfig+0xd8>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087c4:	d10c      	bne.n	80087e0 <HAL_RCC_OscConfig+0xc0>
 80087c6:	4b76      	ldr	r3, [pc, #472]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a75      	ldr	r2, [pc, #468]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 80087cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087d0:	6013      	str	r3, [r2, #0]
 80087d2:	4b73      	ldr	r3, [pc, #460]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a72      	ldr	r2, [pc, #456]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 80087d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087dc:	6013      	str	r3, [r2, #0]
 80087de:	e00b      	b.n	80087f8 <HAL_RCC_OscConfig+0xd8>
 80087e0:	4b6f      	ldr	r3, [pc, #444]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a6e      	ldr	r2, [pc, #440]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 80087e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087ea:	6013      	str	r3, [r2, #0]
 80087ec:	4b6c      	ldr	r3, [pc, #432]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a6b      	ldr	r2, [pc, #428]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 80087f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d013      	beq.n	8008828 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008800:	f7fb fb9a 	bl	8003f38 <HAL_GetTick>
 8008804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008806:	e008      	b.n	800881a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008808:	f7fb fb96 	bl	8003f38 <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	2b64      	cmp	r3, #100	; 0x64
 8008814:	d901      	bls.n	800881a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e21f      	b.n	8008c5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800881a:	4b61      	ldr	r3, [pc, #388]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008822:	2b00      	cmp	r3, #0
 8008824:	d0f0      	beq.n	8008808 <HAL_RCC_OscConfig+0xe8>
 8008826:	e014      	b.n	8008852 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008828:	f7fb fb86 	bl	8003f38 <HAL_GetTick>
 800882c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800882e:	e008      	b.n	8008842 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008830:	f7fb fb82 	bl	8003f38 <HAL_GetTick>
 8008834:	4602      	mov	r2, r0
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	2b64      	cmp	r3, #100	; 0x64
 800883c:	d901      	bls.n	8008842 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e20b      	b.n	8008c5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008842:	4b57      	ldr	r3, [pc, #348]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1f0      	bne.n	8008830 <HAL_RCC_OscConfig+0x110>
 800884e:	e000      	b.n	8008852 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 0302 	and.w	r3, r3, #2
 800885a:	2b00      	cmp	r3, #0
 800885c:	d069      	beq.n	8008932 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800885e:	4b50      	ldr	r3, [pc, #320]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	f003 030c 	and.w	r3, r3, #12
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00b      	beq.n	8008882 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800886a:	4b4d      	ldr	r3, [pc, #308]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	f003 030c 	and.w	r3, r3, #12
 8008872:	2b08      	cmp	r3, #8
 8008874:	d11c      	bne.n	80088b0 <HAL_RCC_OscConfig+0x190>
 8008876:	4b4a      	ldr	r3, [pc, #296]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d116      	bne.n	80088b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008882:	4b47      	ldr	r3, [pc, #284]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 0302 	and.w	r3, r3, #2
 800888a:	2b00      	cmp	r3, #0
 800888c:	d005      	beq.n	800889a <HAL_RCC_OscConfig+0x17a>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d001      	beq.n	800889a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e1df      	b.n	8008c5a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800889a:	4b41      	ldr	r3, [pc, #260]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	00db      	lsls	r3, r3, #3
 80088a8:	493d      	ldr	r1, [pc, #244]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 80088aa:	4313      	orrs	r3, r2
 80088ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80088ae:	e040      	b.n	8008932 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d023      	beq.n	8008900 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088b8:	4b39      	ldr	r3, [pc, #228]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a38      	ldr	r2, [pc, #224]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 80088be:	f043 0301 	orr.w	r3, r3, #1
 80088c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088c4:	f7fb fb38 	bl	8003f38 <HAL_GetTick>
 80088c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088ca:	e008      	b.n	80088de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088cc:	f7fb fb34 	bl	8003f38 <HAL_GetTick>
 80088d0:	4602      	mov	r2, r0
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d901      	bls.n	80088de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80088da:	2303      	movs	r3, #3
 80088dc:	e1bd      	b.n	8008c5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088de:	4b30      	ldr	r3, [pc, #192]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0302 	and.w	r3, r3, #2
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d0f0      	beq.n	80088cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088ea:	4b2d      	ldr	r3, [pc, #180]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	00db      	lsls	r3, r3, #3
 80088f8:	4929      	ldr	r1, [pc, #164]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 80088fa:	4313      	orrs	r3, r2
 80088fc:	600b      	str	r3, [r1, #0]
 80088fe:	e018      	b.n	8008932 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008900:	4b27      	ldr	r3, [pc, #156]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	4a26      	ldr	r2, [pc, #152]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 8008906:	f023 0301 	bic.w	r3, r3, #1
 800890a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800890c:	f7fb fb14 	bl	8003f38 <HAL_GetTick>
 8008910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008912:	e008      	b.n	8008926 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008914:	f7fb fb10 	bl	8003f38 <HAL_GetTick>
 8008918:	4602      	mov	r2, r0
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	2b02      	cmp	r3, #2
 8008920:	d901      	bls.n	8008926 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e199      	b.n	8008c5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008926:	4b1e      	ldr	r3, [pc, #120]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0302 	and.w	r3, r3, #2
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1f0      	bne.n	8008914 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 0308 	and.w	r3, r3, #8
 800893a:	2b00      	cmp	r3, #0
 800893c:	d038      	beq.n	80089b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	695b      	ldr	r3, [r3, #20]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d019      	beq.n	800897a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008946:	4b16      	ldr	r3, [pc, #88]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 8008948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800894a:	4a15      	ldr	r2, [pc, #84]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 800894c:	f043 0301 	orr.w	r3, r3, #1
 8008950:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008952:	f7fb faf1 	bl	8003f38 <HAL_GetTick>
 8008956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008958:	e008      	b.n	800896c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800895a:	f7fb faed 	bl	8003f38 <HAL_GetTick>
 800895e:	4602      	mov	r2, r0
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	2b02      	cmp	r3, #2
 8008966:	d901      	bls.n	800896c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008968:	2303      	movs	r3, #3
 800896a:	e176      	b.n	8008c5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800896c:	4b0c      	ldr	r3, [pc, #48]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 800896e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008970:	f003 0302 	and.w	r3, r3, #2
 8008974:	2b00      	cmp	r3, #0
 8008976:	d0f0      	beq.n	800895a <HAL_RCC_OscConfig+0x23a>
 8008978:	e01a      	b.n	80089b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800897a:	4b09      	ldr	r3, [pc, #36]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 800897c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800897e:	4a08      	ldr	r2, [pc, #32]	; (80089a0 <HAL_RCC_OscConfig+0x280>)
 8008980:	f023 0301 	bic.w	r3, r3, #1
 8008984:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008986:	f7fb fad7 	bl	8003f38 <HAL_GetTick>
 800898a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800898c:	e00a      	b.n	80089a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800898e:	f7fb fad3 	bl	8003f38 <HAL_GetTick>
 8008992:	4602      	mov	r2, r0
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	2b02      	cmp	r3, #2
 800899a:	d903      	bls.n	80089a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800899c:	2303      	movs	r3, #3
 800899e:	e15c      	b.n	8008c5a <HAL_RCC_OscConfig+0x53a>
 80089a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80089a4:	4b91      	ldr	r3, [pc, #580]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 80089a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089a8:	f003 0302 	and.w	r3, r3, #2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1ee      	bne.n	800898e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0304 	and.w	r3, r3, #4
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 80a4 	beq.w	8008b06 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089be:	4b8b      	ldr	r3, [pc, #556]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 80089c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d10d      	bne.n	80089e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80089ca:	4b88      	ldr	r3, [pc, #544]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 80089cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ce:	4a87      	ldr	r2, [pc, #540]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 80089d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089d4:	6413      	str	r3, [r2, #64]	; 0x40
 80089d6:	4b85      	ldr	r3, [pc, #532]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 80089d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089de:	60bb      	str	r3, [r7, #8]
 80089e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089e2:	2301      	movs	r3, #1
 80089e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089e6:	4b82      	ldr	r3, [pc, #520]	; (8008bf0 <HAL_RCC_OscConfig+0x4d0>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d118      	bne.n	8008a24 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80089f2:	4b7f      	ldr	r3, [pc, #508]	; (8008bf0 <HAL_RCC_OscConfig+0x4d0>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a7e      	ldr	r2, [pc, #504]	; (8008bf0 <HAL_RCC_OscConfig+0x4d0>)
 80089f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089fe:	f7fb fa9b 	bl	8003f38 <HAL_GetTick>
 8008a02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a04:	e008      	b.n	8008a18 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a06:	f7fb fa97 	bl	8003f38 <HAL_GetTick>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	2b64      	cmp	r3, #100	; 0x64
 8008a12:	d901      	bls.n	8008a18 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008a14:	2303      	movs	r3, #3
 8008a16:	e120      	b.n	8008c5a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a18:	4b75      	ldr	r3, [pc, #468]	; (8008bf0 <HAL_RCC_OscConfig+0x4d0>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d0f0      	beq.n	8008a06 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d106      	bne.n	8008a3a <HAL_RCC_OscConfig+0x31a>
 8008a2c:	4b6f      	ldr	r3, [pc, #444]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a30:	4a6e      	ldr	r2, [pc, #440]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008a32:	f043 0301 	orr.w	r3, r3, #1
 8008a36:	6713      	str	r3, [r2, #112]	; 0x70
 8008a38:	e02d      	b.n	8008a96 <HAL_RCC_OscConfig+0x376>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10c      	bne.n	8008a5c <HAL_RCC_OscConfig+0x33c>
 8008a42:	4b6a      	ldr	r3, [pc, #424]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a46:	4a69      	ldr	r2, [pc, #420]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008a48:	f023 0301 	bic.w	r3, r3, #1
 8008a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8008a4e:	4b67      	ldr	r3, [pc, #412]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a52:	4a66      	ldr	r2, [pc, #408]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008a54:	f023 0304 	bic.w	r3, r3, #4
 8008a58:	6713      	str	r3, [r2, #112]	; 0x70
 8008a5a:	e01c      	b.n	8008a96 <HAL_RCC_OscConfig+0x376>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	2b05      	cmp	r3, #5
 8008a62:	d10c      	bne.n	8008a7e <HAL_RCC_OscConfig+0x35e>
 8008a64:	4b61      	ldr	r3, [pc, #388]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a68:	4a60      	ldr	r2, [pc, #384]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008a6a:	f043 0304 	orr.w	r3, r3, #4
 8008a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8008a70:	4b5e      	ldr	r3, [pc, #376]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a74:	4a5d      	ldr	r2, [pc, #372]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008a76:	f043 0301 	orr.w	r3, r3, #1
 8008a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8008a7c:	e00b      	b.n	8008a96 <HAL_RCC_OscConfig+0x376>
 8008a7e:	4b5b      	ldr	r3, [pc, #364]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a82:	4a5a      	ldr	r2, [pc, #360]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008a84:	f023 0301 	bic.w	r3, r3, #1
 8008a88:	6713      	str	r3, [r2, #112]	; 0x70
 8008a8a:	4b58      	ldr	r3, [pc, #352]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a8e:	4a57      	ldr	r2, [pc, #348]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008a90:	f023 0304 	bic.w	r3, r3, #4
 8008a94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d015      	beq.n	8008aca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a9e:	f7fb fa4b 	bl	8003f38 <HAL_GetTick>
 8008aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008aa4:	e00a      	b.n	8008abc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008aa6:	f7fb fa47 	bl	8003f38 <HAL_GetTick>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d901      	bls.n	8008abc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e0ce      	b.n	8008c5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008abc:	4b4b      	ldr	r3, [pc, #300]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac0:	f003 0302 	and.w	r3, r3, #2
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d0ee      	beq.n	8008aa6 <HAL_RCC_OscConfig+0x386>
 8008ac8:	e014      	b.n	8008af4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aca:	f7fb fa35 	bl	8003f38 <HAL_GetTick>
 8008ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ad0:	e00a      	b.n	8008ae8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ad2:	f7fb fa31 	bl	8003f38 <HAL_GetTick>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d901      	bls.n	8008ae8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e0b8      	b.n	8008c5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ae8:	4b40      	ldr	r3, [pc, #256]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aec:	f003 0302 	and.w	r3, r3, #2
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1ee      	bne.n	8008ad2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008af4:	7dfb      	ldrb	r3, [r7, #23]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d105      	bne.n	8008b06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008afa:	4b3c      	ldr	r3, [pc, #240]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afe:	4a3b      	ldr	r2, [pc, #236]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 80a4 	beq.w	8008c58 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b10:	4b36      	ldr	r3, [pc, #216]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	f003 030c 	and.w	r3, r3, #12
 8008b18:	2b08      	cmp	r3, #8
 8008b1a:	d06b      	beq.n	8008bf4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d149      	bne.n	8008bb8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b24:	4b31      	ldr	r3, [pc, #196]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a30      	ldr	r2, [pc, #192]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008b2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b30:	f7fb fa02 	bl	8003f38 <HAL_GetTick>
 8008b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b36:	e008      	b.n	8008b4a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b38:	f7fb f9fe 	bl	8003f38 <HAL_GetTick>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d901      	bls.n	8008b4a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008b46:	2303      	movs	r3, #3
 8008b48:	e087      	b.n	8008c5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b4a:	4b28      	ldr	r3, [pc, #160]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1f0      	bne.n	8008b38 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	69da      	ldr	r2, [r3, #28]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	431a      	orrs	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b64:	019b      	lsls	r3, r3, #6
 8008b66:	431a      	orrs	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b6c:	085b      	lsrs	r3, r3, #1
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	041b      	lsls	r3, r3, #16
 8008b72:	431a      	orrs	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b78:	061b      	lsls	r3, r3, #24
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	4a1b      	ldr	r2, [pc, #108]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008b7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b82:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b84:	4b19      	ldr	r3, [pc, #100]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a18      	ldr	r2, [pc, #96]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b90:	f7fb f9d2 	bl	8003f38 <HAL_GetTick>
 8008b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b96:	e008      	b.n	8008baa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b98:	f7fb f9ce 	bl	8003f38 <HAL_GetTick>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d901      	bls.n	8008baa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	e057      	b.n	8008c5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008baa:	4b10      	ldr	r3, [pc, #64]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d0f0      	beq.n	8008b98 <HAL_RCC_OscConfig+0x478>
 8008bb6:	e04f      	b.n	8008c58 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bb8:	4b0c      	ldr	r3, [pc, #48]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a0b      	ldr	r2, [pc, #44]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008bbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bc4:	f7fb f9b8 	bl	8003f38 <HAL_GetTick>
 8008bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bca:	e008      	b.n	8008bde <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bcc:	f7fb f9b4 	bl	8003f38 <HAL_GetTick>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	1ad3      	subs	r3, r2, r3
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	d901      	bls.n	8008bde <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008bda:	2303      	movs	r3, #3
 8008bdc:	e03d      	b.n	8008c5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bde:	4b03      	ldr	r3, [pc, #12]	; (8008bec <HAL_RCC_OscConfig+0x4cc>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1f0      	bne.n	8008bcc <HAL_RCC_OscConfig+0x4ac>
 8008bea:	e035      	b.n	8008c58 <HAL_RCC_OscConfig+0x538>
 8008bec:	40023800 	.word	0x40023800
 8008bf0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008bf4:	4b1b      	ldr	r3, [pc, #108]	; (8008c64 <HAL_RCC_OscConfig+0x544>)
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d028      	beq.n	8008c54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d121      	bne.n	8008c54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d11a      	bne.n	8008c54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008c24:	4013      	ands	r3, r2
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008c2a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d111      	bne.n	8008c54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3a:	085b      	lsrs	r3, r3, #1
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d107      	bne.n	8008c54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d001      	beq.n	8008c58 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e000      	b.n	8008c5a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3718      	adds	r7, #24
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	40023800 	.word	0x40023800

08008c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008c72:	2300      	movs	r3, #0
 8008c74:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d101      	bne.n	8008c80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e0d0      	b.n	8008e22 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c80:	4b6a      	ldr	r3, [pc, #424]	; (8008e2c <HAL_RCC_ClockConfig+0x1c4>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 030f 	and.w	r3, r3, #15
 8008c88:	683a      	ldr	r2, [r7, #0]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d910      	bls.n	8008cb0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c8e:	4b67      	ldr	r3, [pc, #412]	; (8008e2c <HAL_RCC_ClockConfig+0x1c4>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f023 020f 	bic.w	r2, r3, #15
 8008c96:	4965      	ldr	r1, [pc, #404]	; (8008e2c <HAL_RCC_ClockConfig+0x1c4>)
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c9e:	4b63      	ldr	r3, [pc, #396]	; (8008e2c <HAL_RCC_ClockConfig+0x1c4>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 030f 	and.w	r3, r3, #15
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d001      	beq.n	8008cb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e0b8      	b.n	8008e22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 0302 	and.w	r3, r3, #2
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d020      	beq.n	8008cfe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 0304 	and.w	r3, r3, #4
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d005      	beq.n	8008cd4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008cc8:	4b59      	ldr	r3, [pc, #356]	; (8008e30 <HAL_RCC_ClockConfig+0x1c8>)
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	4a58      	ldr	r2, [pc, #352]	; (8008e30 <HAL_RCC_ClockConfig+0x1c8>)
 8008cce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008cd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 0308 	and.w	r3, r3, #8
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d005      	beq.n	8008cec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008ce0:	4b53      	ldr	r3, [pc, #332]	; (8008e30 <HAL_RCC_ClockConfig+0x1c8>)
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	4a52      	ldr	r2, [pc, #328]	; (8008e30 <HAL_RCC_ClockConfig+0x1c8>)
 8008ce6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008cea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cec:	4b50      	ldr	r3, [pc, #320]	; (8008e30 <HAL_RCC_ClockConfig+0x1c8>)
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	494d      	ldr	r1, [pc, #308]	; (8008e30 <HAL_RCC_ClockConfig+0x1c8>)
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d040      	beq.n	8008d8c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d107      	bne.n	8008d22 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d12:	4b47      	ldr	r3, [pc, #284]	; (8008e30 <HAL_RCC_ClockConfig+0x1c8>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d115      	bne.n	8008d4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e07f      	b.n	8008e22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d107      	bne.n	8008d3a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d2a:	4b41      	ldr	r3, [pc, #260]	; (8008e30 <HAL_RCC_ClockConfig+0x1c8>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d109      	bne.n	8008d4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e073      	b.n	8008e22 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d3a:	4b3d      	ldr	r3, [pc, #244]	; (8008e30 <HAL_RCC_ClockConfig+0x1c8>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 0302 	and.w	r3, r3, #2
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d101      	bne.n	8008d4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e06b      	b.n	8008e22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d4a:	4b39      	ldr	r3, [pc, #228]	; (8008e30 <HAL_RCC_ClockConfig+0x1c8>)
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	f023 0203 	bic.w	r2, r3, #3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	4936      	ldr	r1, [pc, #216]	; (8008e30 <HAL_RCC_ClockConfig+0x1c8>)
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d5c:	f7fb f8ec 	bl	8003f38 <HAL_GetTick>
 8008d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d62:	e00a      	b.n	8008d7a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d64:	f7fb f8e8 	bl	8003f38 <HAL_GetTick>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d901      	bls.n	8008d7a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008d76:	2303      	movs	r3, #3
 8008d78:	e053      	b.n	8008e22 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d7a:	4b2d      	ldr	r3, [pc, #180]	; (8008e30 <HAL_RCC_ClockConfig+0x1c8>)
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	f003 020c 	and.w	r2, r3, #12
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d1eb      	bne.n	8008d64 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008d8c:	4b27      	ldr	r3, [pc, #156]	; (8008e2c <HAL_RCC_ClockConfig+0x1c4>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 030f 	and.w	r3, r3, #15
 8008d94:	683a      	ldr	r2, [r7, #0]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d210      	bcs.n	8008dbc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d9a:	4b24      	ldr	r3, [pc, #144]	; (8008e2c <HAL_RCC_ClockConfig+0x1c4>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f023 020f 	bic.w	r2, r3, #15
 8008da2:	4922      	ldr	r1, [pc, #136]	; (8008e2c <HAL_RCC_ClockConfig+0x1c4>)
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008daa:	4b20      	ldr	r3, [pc, #128]	; (8008e2c <HAL_RCC_ClockConfig+0x1c4>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 030f 	and.w	r3, r3, #15
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d001      	beq.n	8008dbc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	e032      	b.n	8008e22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 0304 	and.w	r3, r3, #4
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d008      	beq.n	8008dda <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008dc8:	4b19      	ldr	r3, [pc, #100]	; (8008e30 <HAL_RCC_ClockConfig+0x1c8>)
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	4916      	ldr	r1, [pc, #88]	; (8008e30 <HAL_RCC_ClockConfig+0x1c8>)
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0308 	and.w	r3, r3, #8
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d009      	beq.n	8008dfa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008de6:	4b12      	ldr	r3, [pc, #72]	; (8008e30 <HAL_RCC_ClockConfig+0x1c8>)
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	00db      	lsls	r3, r3, #3
 8008df4:	490e      	ldr	r1, [pc, #56]	; (8008e30 <HAL_RCC_ClockConfig+0x1c8>)
 8008df6:	4313      	orrs	r3, r2
 8008df8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008dfa:	f000 f821 	bl	8008e40 <HAL_RCC_GetSysClockFreq>
 8008dfe:	4601      	mov	r1, r0
 8008e00:	4b0b      	ldr	r3, [pc, #44]	; (8008e30 <HAL_RCC_ClockConfig+0x1c8>)
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	091b      	lsrs	r3, r3, #4
 8008e06:	f003 030f 	and.w	r3, r3, #15
 8008e0a:	4a0a      	ldr	r2, [pc, #40]	; (8008e34 <HAL_RCC_ClockConfig+0x1cc>)
 8008e0c:	5cd3      	ldrb	r3, [r2, r3]
 8008e0e:	fa21 f303 	lsr.w	r3, r1, r3
 8008e12:	4a09      	ldr	r2, [pc, #36]	; (8008e38 <HAL_RCC_ClockConfig+0x1d0>)
 8008e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008e16:	4b09      	ldr	r3, [pc, #36]	; (8008e3c <HAL_RCC_ClockConfig+0x1d4>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7fa fc1e 	bl	800365c <HAL_InitTick>

  return HAL_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	40023c00 	.word	0x40023c00
 8008e30:	40023800 	.word	0x40023800
 8008e34:	080289fc 	.word	0x080289fc
 8008e38:	20000004 	.word	0x20000004
 8008e3c:	20000008 	.word	0x20000008

08008e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008e46:	2300      	movs	r3, #0
 8008e48:	607b      	str	r3, [r7, #4]
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	60fb      	str	r3, [r7, #12]
 8008e4e:	2300      	movs	r3, #0
 8008e50:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008e52:	2300      	movs	r3, #0
 8008e54:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e56:	4b50      	ldr	r3, [pc, #320]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x158>)
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	f003 030c 	and.w	r3, r3, #12
 8008e5e:	2b04      	cmp	r3, #4
 8008e60:	d007      	beq.n	8008e72 <HAL_RCC_GetSysClockFreq+0x32>
 8008e62:	2b08      	cmp	r3, #8
 8008e64:	d008      	beq.n	8008e78 <HAL_RCC_GetSysClockFreq+0x38>
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f040 808d 	bne.w	8008f86 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008e6c:	4b4b      	ldr	r3, [pc, #300]	; (8008f9c <HAL_RCC_GetSysClockFreq+0x15c>)
 8008e6e:	60bb      	str	r3, [r7, #8]
      break;
 8008e70:	e08c      	b.n	8008f8c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008e72:	4b4b      	ldr	r3, [pc, #300]	; (8008fa0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008e74:	60bb      	str	r3, [r7, #8]
      break;
 8008e76:	e089      	b.n	8008f8c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008e78:	4b47      	ldr	r3, [pc, #284]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x158>)
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e80:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008e82:	4b45      	ldr	r3, [pc, #276]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x158>)
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d023      	beq.n	8008ed6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e8e:	4b42      	ldr	r3, [pc, #264]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x158>)
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	099b      	lsrs	r3, r3, #6
 8008e94:	f04f 0400 	mov.w	r4, #0
 8008e98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008e9c:	f04f 0200 	mov.w	r2, #0
 8008ea0:	ea03 0501 	and.w	r5, r3, r1
 8008ea4:	ea04 0602 	and.w	r6, r4, r2
 8008ea8:	4a3d      	ldr	r2, [pc, #244]	; (8008fa0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008eaa:	fb02 f106 	mul.w	r1, r2, r6
 8008eae:	2200      	movs	r2, #0
 8008eb0:	fb02 f205 	mul.w	r2, r2, r5
 8008eb4:	440a      	add	r2, r1
 8008eb6:	493a      	ldr	r1, [pc, #232]	; (8008fa0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008eb8:	fba5 0101 	umull	r0, r1, r5, r1
 8008ebc:	1853      	adds	r3, r2, r1
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f04f 0400 	mov.w	r4, #0
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	4623      	mov	r3, r4
 8008eca:	f7f7 f9f9 	bl	80002c0 <__aeabi_uldivmod>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	460c      	mov	r4, r1
 8008ed2:	60fb      	str	r3, [r7, #12]
 8008ed4:	e049      	b.n	8008f6a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ed6:	4b30      	ldr	r3, [pc, #192]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x158>)
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	099b      	lsrs	r3, r3, #6
 8008edc:	f04f 0400 	mov.w	r4, #0
 8008ee0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008ee4:	f04f 0200 	mov.w	r2, #0
 8008ee8:	ea03 0501 	and.w	r5, r3, r1
 8008eec:	ea04 0602 	and.w	r6, r4, r2
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	4632      	mov	r2, r6
 8008ef4:	f04f 0300 	mov.w	r3, #0
 8008ef8:	f04f 0400 	mov.w	r4, #0
 8008efc:	0154      	lsls	r4, r2, #5
 8008efe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008f02:	014b      	lsls	r3, r1, #5
 8008f04:	4619      	mov	r1, r3
 8008f06:	4622      	mov	r2, r4
 8008f08:	1b49      	subs	r1, r1, r5
 8008f0a:	eb62 0206 	sbc.w	r2, r2, r6
 8008f0e:	f04f 0300 	mov.w	r3, #0
 8008f12:	f04f 0400 	mov.w	r4, #0
 8008f16:	0194      	lsls	r4, r2, #6
 8008f18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008f1c:	018b      	lsls	r3, r1, #6
 8008f1e:	1a5b      	subs	r3, r3, r1
 8008f20:	eb64 0402 	sbc.w	r4, r4, r2
 8008f24:	f04f 0100 	mov.w	r1, #0
 8008f28:	f04f 0200 	mov.w	r2, #0
 8008f2c:	00e2      	lsls	r2, r4, #3
 8008f2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008f32:	00d9      	lsls	r1, r3, #3
 8008f34:	460b      	mov	r3, r1
 8008f36:	4614      	mov	r4, r2
 8008f38:	195b      	adds	r3, r3, r5
 8008f3a:	eb44 0406 	adc.w	r4, r4, r6
 8008f3e:	f04f 0100 	mov.w	r1, #0
 8008f42:	f04f 0200 	mov.w	r2, #0
 8008f46:	02a2      	lsls	r2, r4, #10
 8008f48:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008f4c:	0299      	lsls	r1, r3, #10
 8008f4e:	460b      	mov	r3, r1
 8008f50:	4614      	mov	r4, r2
 8008f52:	4618      	mov	r0, r3
 8008f54:	4621      	mov	r1, r4
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f04f 0400 	mov.w	r4, #0
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	4623      	mov	r3, r4
 8008f60:	f7f7 f9ae 	bl	80002c0 <__aeabi_uldivmod>
 8008f64:	4603      	mov	r3, r0
 8008f66:	460c      	mov	r4, r1
 8008f68:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008f6a:	4b0b      	ldr	r3, [pc, #44]	; (8008f98 <HAL_RCC_GetSysClockFreq+0x158>)
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	0c1b      	lsrs	r3, r3, #16
 8008f70:	f003 0303 	and.w	r3, r3, #3
 8008f74:	3301      	adds	r3, #1
 8008f76:	005b      	lsls	r3, r3, #1
 8008f78:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f82:	60bb      	str	r3, [r7, #8]
      break;
 8008f84:	e002      	b.n	8008f8c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f86:	4b05      	ldr	r3, [pc, #20]	; (8008f9c <HAL_RCC_GetSysClockFreq+0x15c>)
 8008f88:	60bb      	str	r3, [r7, #8]
      break;
 8008f8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f8c:	68bb      	ldr	r3, [r7, #8]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3714      	adds	r7, #20
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f96:	bf00      	nop
 8008f98:	40023800 	.word	0x40023800
 8008f9c:	00f42400 	.word	0x00f42400
 8008fa0:	017d7840 	.word	0x017d7840

08008fa4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008fa8:	4b03      	ldr	r3, [pc, #12]	; (8008fb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008faa:	681b      	ldr	r3, [r3, #0]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr
 8008fb6:	bf00      	nop
 8008fb8:	20000004 	.word	0x20000004

08008fbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008fc0:	f7ff fff0 	bl	8008fa4 <HAL_RCC_GetHCLKFreq>
 8008fc4:	4601      	mov	r1, r0
 8008fc6:	4b05      	ldr	r3, [pc, #20]	; (8008fdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	0a9b      	lsrs	r3, r3, #10
 8008fcc:	f003 0307 	and.w	r3, r3, #7
 8008fd0:	4a03      	ldr	r2, [pc, #12]	; (8008fe0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008fd2:	5cd3      	ldrb	r3, [r2, r3]
 8008fd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	bd80      	pop	{r7, pc}
 8008fdc:	40023800 	.word	0x40023800
 8008fe0:	08028a0c 	.word	0x08028a0c

08008fe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008fe8:	f7ff ffdc 	bl	8008fa4 <HAL_RCC_GetHCLKFreq>
 8008fec:	4601      	mov	r1, r0
 8008fee:	4b05      	ldr	r3, [pc, #20]	; (8009004 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	0b5b      	lsrs	r3, r3, #13
 8008ff4:	f003 0307 	and.w	r3, r3, #7
 8008ff8:	4a03      	ldr	r2, [pc, #12]	; (8009008 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ffa:	5cd3      	ldrb	r3, [r2, r3]
 8008ffc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009000:	4618      	mov	r0, r3
 8009002:	bd80      	pop	{r7, pc}
 8009004:	40023800 	.word	0x40023800
 8009008:	08028a0c 	.word	0x08028a0c

0800900c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	220f      	movs	r2, #15
 800901a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800901c:	4b12      	ldr	r3, [pc, #72]	; (8009068 <HAL_RCC_GetClockConfig+0x5c>)
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	f003 0203 	and.w	r2, r3, #3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009028:	4b0f      	ldr	r3, [pc, #60]	; (8009068 <HAL_RCC_GetClockConfig+0x5c>)
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009034:	4b0c      	ldr	r3, [pc, #48]	; (8009068 <HAL_RCC_GetClockConfig+0x5c>)
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009040:	4b09      	ldr	r3, [pc, #36]	; (8009068 <HAL_RCC_GetClockConfig+0x5c>)
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	08db      	lsrs	r3, r3, #3
 8009046:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800904e:	4b07      	ldr	r3, [pc, #28]	; (800906c <HAL_RCC_GetClockConfig+0x60>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f003 020f 	and.w	r2, r3, #15
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	601a      	str	r2, [r3, #0]
}
 800905a:	bf00      	nop
 800905c:	370c      	adds	r7, #12
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	40023800 	.word	0x40023800
 800906c:	40023c00 	.word	0x40023c00

08009070 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b088      	sub	sp, #32
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009078:	2300      	movs	r3, #0
 800907a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800907c:	2300      	movs	r3, #0
 800907e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009080:	2300      	movs	r3, #0
 8009082:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009084:	2300      	movs	r3, #0
 8009086:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009088:	2300      	movs	r3, #0
 800908a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0301 	and.w	r3, r3, #1
 8009094:	2b00      	cmp	r3, #0
 8009096:	d012      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009098:	4b69      	ldr	r3, [pc, #420]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	4a68      	ldr	r2, [pc, #416]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800909e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80090a2:	6093      	str	r3, [r2, #8]
 80090a4:	4b66      	ldr	r3, [pc, #408]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090a6:	689a      	ldr	r2, [r3, #8]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ac:	4964      	ldr	r1, [pc, #400]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090ae:	4313      	orrs	r3, r2
 80090b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d101      	bne.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80090ba:	2301      	movs	r3, #1
 80090bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d017      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80090ca:	4b5d      	ldr	r3, [pc, #372]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090d8:	4959      	ldr	r1, [pc, #356]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090da:	4313      	orrs	r3, r2
 80090dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090e8:	d101      	bne.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80090ea:	2301      	movs	r3, #1
 80090ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d101      	bne.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80090f6:	2301      	movs	r3, #1
 80090f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009102:	2b00      	cmp	r3, #0
 8009104:	d017      	beq.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009106:	4b4e      	ldr	r3, [pc, #312]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800910c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009114:	494a      	ldr	r1, [pc, #296]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009116:	4313      	orrs	r3, r2
 8009118:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009120:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009124:	d101      	bne.n	800912a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009126:	2301      	movs	r3, #1
 8009128:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912e:	2b00      	cmp	r3, #0
 8009130:	d101      	bne.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009132:	2301      	movs	r3, #1
 8009134:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d001      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009142:	2301      	movs	r3, #1
 8009144:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 0320 	and.w	r3, r3, #32
 800914e:	2b00      	cmp	r3, #0
 8009150:	f000 808b 	beq.w	800926a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009154:	4b3a      	ldr	r3, [pc, #232]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009158:	4a39      	ldr	r2, [pc, #228]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800915a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800915e:	6413      	str	r3, [r2, #64]	; 0x40
 8009160:	4b37      	ldr	r3, [pc, #220]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009168:	60bb      	str	r3, [r7, #8]
 800916a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800916c:	4b35      	ldr	r3, [pc, #212]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a34      	ldr	r2, [pc, #208]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009176:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009178:	f7fa fede 	bl	8003f38 <HAL_GetTick>
 800917c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800917e:	e008      	b.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009180:	f7fa feda 	bl	8003f38 <HAL_GetTick>
 8009184:	4602      	mov	r2, r0
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	2b64      	cmp	r3, #100	; 0x64
 800918c:	d901      	bls.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800918e:	2303      	movs	r3, #3
 8009190:	e355      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009192:	4b2c      	ldr	r3, [pc, #176]	; (8009244 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800919a:	2b00      	cmp	r3, #0
 800919c:	d0f0      	beq.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800919e:	4b28      	ldr	r3, [pc, #160]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d035      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091b6:	693a      	ldr	r2, [r7, #16]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d02e      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80091bc:	4b20      	ldr	r3, [pc, #128]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80091c6:	4b1e      	ldr	r3, [pc, #120]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ca:	4a1d      	ldr	r2, [pc, #116]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091d0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80091d2:	4b1b      	ldr	r3, [pc, #108]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091d6:	4a1a      	ldr	r2, [pc, #104]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80091de:	4a18      	ldr	r2, [pc, #96]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80091e4:	4b16      	ldr	r3, [pc, #88]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091e8:	f003 0301 	and.w	r3, r3, #1
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d114      	bne.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091f0:	f7fa fea2 	bl	8003f38 <HAL_GetTick>
 80091f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091f6:	e00a      	b.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091f8:	f7fa fe9e 	bl	8003f38 <HAL_GetTick>
 80091fc:	4602      	mov	r2, r0
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	f241 3288 	movw	r2, #5000	; 0x1388
 8009206:	4293      	cmp	r3, r2
 8009208:	d901      	bls.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800920a:	2303      	movs	r3, #3
 800920c:	e317      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800920e:	4b0c      	ldr	r3, [pc, #48]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009212:	f003 0302 	and.w	r3, r3, #2
 8009216:	2b00      	cmp	r3, #0
 8009218:	d0ee      	beq.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800921e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009222:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009226:	d111      	bne.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009228:	4b05      	ldr	r3, [pc, #20]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009234:	4b04      	ldr	r3, [pc, #16]	; (8009248 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009236:	400b      	ands	r3, r1
 8009238:	4901      	ldr	r1, [pc, #4]	; (8009240 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800923a:	4313      	orrs	r3, r2
 800923c:	608b      	str	r3, [r1, #8]
 800923e:	e00b      	b.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009240:	40023800 	.word	0x40023800
 8009244:	40007000 	.word	0x40007000
 8009248:	0ffffcff 	.word	0x0ffffcff
 800924c:	4bb0      	ldr	r3, [pc, #704]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	4aaf      	ldr	r2, [pc, #700]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009252:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009256:	6093      	str	r3, [r2, #8]
 8009258:	4bad      	ldr	r3, [pc, #692]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800925a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009264:	49aa      	ldr	r1, [pc, #680]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009266:	4313      	orrs	r3, r2
 8009268:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 0310 	and.w	r3, r3, #16
 8009272:	2b00      	cmp	r3, #0
 8009274:	d010      	beq.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009276:	4ba6      	ldr	r3, [pc, #664]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800927c:	4aa4      	ldr	r2, [pc, #656]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800927e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009282:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009286:	4ba2      	ldr	r3, [pc, #648]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009288:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009290:	499f      	ldr	r1, [pc, #636]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009292:	4313      	orrs	r3, r2
 8009294:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00a      	beq.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80092a4:	4b9a      	ldr	r3, [pc, #616]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80092a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092b2:	4997      	ldr	r1, [pc, #604]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80092b4:	4313      	orrs	r3, r2
 80092b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00a      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80092c6:	4b92      	ldr	r3, [pc, #584]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80092c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092d4:	498e      	ldr	r1, [pc, #568]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80092d6:	4313      	orrs	r3, r2
 80092d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00a      	beq.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80092e8:	4b89      	ldr	r3, [pc, #548]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80092ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092f6:	4986      	ldr	r1, [pc, #536]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80092f8:	4313      	orrs	r3, r2
 80092fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00a      	beq.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800930a:	4b81      	ldr	r3, [pc, #516]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800930c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009310:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009318:	497d      	ldr	r1, [pc, #500]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800931a:	4313      	orrs	r3, r2
 800931c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00a      	beq.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800932c:	4b78      	ldr	r3, [pc, #480]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800932e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009332:	f023 0203 	bic.w	r2, r3, #3
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800933a:	4975      	ldr	r1, [pc, #468]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800933c:	4313      	orrs	r3, r2
 800933e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00a      	beq.n	8009364 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800934e:	4b70      	ldr	r3, [pc, #448]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009354:	f023 020c 	bic.w	r2, r3, #12
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800935c:	496c      	ldr	r1, [pc, #432]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800935e:	4313      	orrs	r3, r2
 8009360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00a      	beq.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009370:	4b67      	ldr	r3, [pc, #412]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009376:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800937e:	4964      	ldr	r1, [pc, #400]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009380:	4313      	orrs	r3, r2
 8009382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00a      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009392:	4b5f      	ldr	r3, [pc, #380]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009398:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093a0:	495b      	ldr	r1, [pc, #364]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80093a2:	4313      	orrs	r3, r2
 80093a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00a      	beq.n	80093ca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80093b4:	4b56      	ldr	r3, [pc, #344]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80093b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c2:	4953      	ldr	r1, [pc, #332]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80093c4:	4313      	orrs	r3, r2
 80093c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00a      	beq.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80093d6:	4b4e      	ldr	r3, [pc, #312]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80093d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093e4:	494a      	ldr	r1, [pc, #296]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80093e6:	4313      	orrs	r3, r2
 80093e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00a      	beq.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80093f8:	4b45      	ldr	r3, [pc, #276]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80093fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009406:	4942      	ldr	r1, [pc, #264]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009408:	4313      	orrs	r3, r2
 800940a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00a      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800941a:	4b3d      	ldr	r3, [pc, #244]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800941c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009420:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009428:	4939      	ldr	r1, [pc, #228]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800942a:	4313      	orrs	r3, r2
 800942c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00a      	beq.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800943c:	4b34      	ldr	r3, [pc, #208]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800943e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009442:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800944a:	4931      	ldr	r1, [pc, #196]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800944c:	4313      	orrs	r3, r2
 800944e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800945a:	2b00      	cmp	r3, #0
 800945c:	d011      	beq.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800945e:	4b2c      	ldr	r3, [pc, #176]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009464:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800946c:	4928      	ldr	r1, [pc, #160]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800946e:	4313      	orrs	r3, r2
 8009470:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009478:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800947c:	d101      	bne.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800947e:	2301      	movs	r3, #1
 8009480:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f003 0308 	and.w	r3, r3, #8
 800948a:	2b00      	cmp	r3, #0
 800948c:	d001      	beq.n	8009492 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800948e:	2301      	movs	r3, #1
 8009490:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00a      	beq.n	80094b4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800949e:	4b1c      	ldr	r3, [pc, #112]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80094a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094a4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094ac:	4918      	ldr	r1, [pc, #96]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80094ae:	4313      	orrs	r3, r2
 80094b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00b      	beq.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80094c0:	4b13      	ldr	r3, [pc, #76]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80094c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094d0:	490f      	ldr	r1, [pc, #60]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80094d2:	4313      	orrs	r3, r2
 80094d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d005      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094e6:	f040 80d8 	bne.w	800969a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80094ea:	4b09      	ldr	r3, [pc, #36]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a08      	ldr	r2, [pc, #32]	; (8009510 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80094f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80094f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094f6:	f7fa fd1f 	bl	8003f38 <HAL_GetTick>
 80094fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80094fc:	e00a      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80094fe:	f7fa fd1b 	bl	8003f38 <HAL_GetTick>
 8009502:	4602      	mov	r2, r0
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	2b64      	cmp	r3, #100	; 0x64
 800950a:	d903      	bls.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800950c:	2303      	movs	r3, #3
 800950e:	e196      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8009510:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009514:	4b6c      	ldr	r3, [pc, #432]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1ee      	bne.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 0301 	and.w	r3, r3, #1
 8009528:	2b00      	cmp	r3, #0
 800952a:	d021      	beq.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009530:	2b00      	cmp	r3, #0
 8009532:	d11d      	bne.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009534:	4b64      	ldr	r3, [pc, #400]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800953a:	0c1b      	lsrs	r3, r3, #16
 800953c:	f003 0303 	and.w	r3, r3, #3
 8009540:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009542:	4b61      	ldr	r3, [pc, #388]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009548:	0e1b      	lsrs	r3, r3, #24
 800954a:	f003 030f 	and.w	r3, r3, #15
 800954e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	019a      	lsls	r2, r3, #6
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	041b      	lsls	r3, r3, #16
 800955a:	431a      	orrs	r2, r3
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	061b      	lsls	r3, r3, #24
 8009560:	431a      	orrs	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	071b      	lsls	r3, r3, #28
 8009568:	4957      	ldr	r1, [pc, #348]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800956a:	4313      	orrs	r3, r2
 800956c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d004      	beq.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009584:	d00a      	beq.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800958e:	2b00      	cmp	r3, #0
 8009590:	d02e      	beq.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009596:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800959a:	d129      	bne.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800959c:	4b4a      	ldr	r3, [pc, #296]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800959e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095a2:	0c1b      	lsrs	r3, r3, #16
 80095a4:	f003 0303 	and.w	r3, r3, #3
 80095a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80095aa:	4b47      	ldr	r3, [pc, #284]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80095ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095b0:	0f1b      	lsrs	r3, r3, #28
 80095b2:	f003 0307 	and.w	r3, r3, #7
 80095b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	019a      	lsls	r2, r3, #6
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	041b      	lsls	r3, r3, #16
 80095c2:	431a      	orrs	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	061b      	lsls	r3, r3, #24
 80095ca:	431a      	orrs	r2, r3
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	071b      	lsls	r3, r3, #28
 80095d0:	493d      	ldr	r1, [pc, #244]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80095d2:	4313      	orrs	r3, r2
 80095d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80095d8:	4b3b      	ldr	r3, [pc, #236]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80095da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095de:	f023 021f 	bic.w	r2, r3, #31
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e6:	3b01      	subs	r3, #1
 80095e8:	4937      	ldr	r1, [pc, #220]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80095ea:	4313      	orrs	r3, r2
 80095ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d01d      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80095fc:	4b32      	ldr	r3, [pc, #200]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80095fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009602:	0e1b      	lsrs	r3, r3, #24
 8009604:	f003 030f 	and.w	r3, r3, #15
 8009608:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800960a:	4b2f      	ldr	r3, [pc, #188]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800960c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009610:	0f1b      	lsrs	r3, r3, #28
 8009612:	f003 0307 	and.w	r3, r3, #7
 8009616:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	019a      	lsls	r2, r3, #6
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	041b      	lsls	r3, r3, #16
 8009624:	431a      	orrs	r2, r3
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	061b      	lsls	r3, r3, #24
 800962a:	431a      	orrs	r2, r3
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	071b      	lsls	r3, r3, #28
 8009630:	4925      	ldr	r1, [pc, #148]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009632:	4313      	orrs	r3, r2
 8009634:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009640:	2b00      	cmp	r3, #0
 8009642:	d011      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	019a      	lsls	r2, r3, #6
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	041b      	lsls	r3, r3, #16
 8009650:	431a      	orrs	r2, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	061b      	lsls	r3, r3, #24
 8009658:	431a      	orrs	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	071b      	lsls	r3, r3, #28
 8009660:	4919      	ldr	r1, [pc, #100]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009662:	4313      	orrs	r3, r2
 8009664:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009668:	4b17      	ldr	r3, [pc, #92]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a16      	ldr	r2, [pc, #88]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800966e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009672:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009674:	f7fa fc60 	bl	8003f38 <HAL_GetTick>
 8009678:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800967a:	e008      	b.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800967c:	f7fa fc5c 	bl	8003f38 <HAL_GetTick>
 8009680:	4602      	mov	r2, r0
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	1ad3      	subs	r3, r2, r3
 8009686:	2b64      	cmp	r3, #100	; 0x64
 8009688:	d901      	bls.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800968a:	2303      	movs	r3, #3
 800968c:	e0d7      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800968e:	4b0e      	ldr	r3, [pc, #56]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009696:	2b00      	cmp	r3, #0
 8009698:	d0f0      	beq.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	2b01      	cmp	r3, #1
 800969e:	f040 80cd 	bne.w	800983c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80096a2:	4b09      	ldr	r3, [pc, #36]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a08      	ldr	r2, [pc, #32]	; (80096c8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80096a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096ae:	f7fa fc43 	bl	8003f38 <HAL_GetTick>
 80096b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80096b4:	e00a      	b.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80096b6:	f7fa fc3f 	bl	8003f38 <HAL_GetTick>
 80096ba:	4602      	mov	r2, r0
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	2b64      	cmp	r3, #100	; 0x64
 80096c2:	d903      	bls.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80096c4:	2303      	movs	r3, #3
 80096c6:	e0ba      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80096c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80096cc:	4b5e      	ldr	r3, [pc, #376]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096d8:	d0ed      	beq.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d003      	beq.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d009      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d02e      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d12a      	bne.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009702:	4b51      	ldr	r3, [pc, #324]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009708:	0c1b      	lsrs	r3, r3, #16
 800970a:	f003 0303 	and.w	r3, r3, #3
 800970e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009710:	4b4d      	ldr	r3, [pc, #308]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009716:	0f1b      	lsrs	r3, r3, #28
 8009718:	f003 0307 	and.w	r3, r3, #7
 800971c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	695b      	ldr	r3, [r3, #20]
 8009722:	019a      	lsls	r2, r3, #6
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	041b      	lsls	r3, r3, #16
 8009728:	431a      	orrs	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	699b      	ldr	r3, [r3, #24]
 800972e:	061b      	lsls	r3, r3, #24
 8009730:	431a      	orrs	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	071b      	lsls	r3, r3, #28
 8009736:	4944      	ldr	r1, [pc, #272]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009738:	4313      	orrs	r3, r2
 800973a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800973e:	4b42      	ldr	r3, [pc, #264]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009744:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800974c:	3b01      	subs	r3, #1
 800974e:	021b      	lsls	r3, r3, #8
 8009750:	493d      	ldr	r1, [pc, #244]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009752:	4313      	orrs	r3, r2
 8009754:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d022      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800976c:	d11d      	bne.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800976e:	4b36      	ldr	r3, [pc, #216]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009774:	0e1b      	lsrs	r3, r3, #24
 8009776:	f003 030f 	and.w	r3, r3, #15
 800977a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800977c:	4b32      	ldr	r3, [pc, #200]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800977e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009782:	0f1b      	lsrs	r3, r3, #28
 8009784:	f003 0307 	and.w	r3, r3, #7
 8009788:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	695b      	ldr	r3, [r3, #20]
 800978e:	019a      	lsls	r2, r3, #6
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6a1b      	ldr	r3, [r3, #32]
 8009794:	041b      	lsls	r3, r3, #16
 8009796:	431a      	orrs	r2, r3
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	061b      	lsls	r3, r3, #24
 800979c:	431a      	orrs	r2, r3
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	071b      	lsls	r3, r3, #28
 80097a2:	4929      	ldr	r1, [pc, #164]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80097a4:	4313      	orrs	r3, r2
 80097a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 0308 	and.w	r3, r3, #8
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d028      	beq.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80097b6:	4b24      	ldr	r3, [pc, #144]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80097b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097bc:	0e1b      	lsrs	r3, r3, #24
 80097be:	f003 030f 	and.w	r3, r3, #15
 80097c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80097c4:	4b20      	ldr	r3, [pc, #128]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80097c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ca:	0c1b      	lsrs	r3, r3, #16
 80097cc:	f003 0303 	and.w	r3, r3, #3
 80097d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	695b      	ldr	r3, [r3, #20]
 80097d6:	019a      	lsls	r2, r3, #6
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	041b      	lsls	r3, r3, #16
 80097dc:	431a      	orrs	r2, r3
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	061b      	lsls	r3, r3, #24
 80097e2:	431a      	orrs	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	69db      	ldr	r3, [r3, #28]
 80097e8:	071b      	lsls	r3, r3, #28
 80097ea:	4917      	ldr	r1, [pc, #92]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80097ec:	4313      	orrs	r3, r2
 80097ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80097f2:	4b15      	ldr	r3, [pc, #84]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80097f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009800:	4911      	ldr	r1, [pc, #68]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009802:	4313      	orrs	r3, r2
 8009804:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009808:	4b0f      	ldr	r3, [pc, #60]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a0e      	ldr	r2, [pc, #56]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800980e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009812:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009814:	f7fa fb90 	bl	8003f38 <HAL_GetTick>
 8009818:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800981a:	e008      	b.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800981c:	f7fa fb8c 	bl	8003f38 <HAL_GetTick>
 8009820:	4602      	mov	r2, r0
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	2b64      	cmp	r3, #100	; 0x64
 8009828:	d901      	bls.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800982a:	2303      	movs	r3, #3
 800982c:	e007      	b.n	800983e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800982e:	4b06      	ldr	r3, [pc, #24]	; (8009848 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009836:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800983a:	d1ef      	bne.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3720      	adds	r7, #32
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	40023800 	.word	0x40023800

0800984c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800984c:	b480      	push	{r7}
 800984e:	b087      	sub	sp, #28
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009854:	2300      	movs	r3, #0
 8009856:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8009858:	2300      	movs	r3, #0
 800985a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800985c:	2300      	movs	r3, #0
 800985e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8009860:	2300      	movs	r3, #0
 8009862:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800986a:	f040 8086 	bne.w	800997a <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 800986e:	4b8d      	ldr	r3, [pc, #564]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009874:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800987c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009884:	d03e      	beq.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8009886:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800988a:	d073      	beq.n	8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 800988c:	2b00      	cmp	r3, #0
 800988e:	d000      	beq.n	8009892 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009890:	e074      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009892:	4b84      	ldr	r3, [pc, #528]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d108      	bne.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800989e:	4b81      	ldr	r3, [pc, #516]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098a6:	4a80      	ldr	r2, [pc, #512]	; (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80098a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ac:	613b      	str	r3, [r7, #16]
 80098ae:	e007      	b.n	80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80098b0:	4b7c      	ldr	r3, [pc, #496]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098b8:	4a7c      	ldr	r2, [pc, #496]	; (8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80098ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80098be:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80098c0:	4b78      	ldr	r3, [pc, #480]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80098c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098c6:	0e1b      	lsrs	r3, r3, #24
 80098c8:	f003 030f 	and.w	r3, r3, #15
 80098cc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80098ce:	4b75      	ldr	r3, [pc, #468]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80098d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098d4:	099b      	lsrs	r3, r3, #6
 80098d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098da:	693a      	ldr	r2, [r7, #16]
 80098dc:	fb02 f203 	mul.w	r2, r2, r3
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80098e6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80098e8:	4b6e      	ldr	r3, [pc, #440]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80098ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098ee:	0a1b      	lsrs	r3, r3, #8
 80098f0:	f003 031f 	and.w	r3, r3, #31
 80098f4:	3301      	adds	r3, #1
 80098f6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80098f8:	697a      	ldr	r2, [r7, #20]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009900:	617b      	str	r3, [r7, #20]
        break;
 8009902:	e03b      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009904:	4b67      	ldr	r3, [pc, #412]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800990c:	2b00      	cmp	r3, #0
 800990e:	d108      	bne.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009910:	4b64      	ldr	r3, [pc, #400]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009918:	4a63      	ldr	r2, [pc, #396]	; (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800991a:	fbb2 f3f3 	udiv	r3, r2, r3
 800991e:	613b      	str	r3, [r7, #16]
 8009920:	e007      	b.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009922:	4b60      	ldr	r3, [pc, #384]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800992a:	4a60      	ldr	r2, [pc, #384]	; (8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800992c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009930:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009932:	4b5c      	ldr	r3, [pc, #368]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009934:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009938:	0e1b      	lsrs	r3, r3, #24
 800993a:	f003 030f 	and.w	r3, r3, #15
 800993e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009940:	4b58      	ldr	r3, [pc, #352]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009946:	099b      	lsrs	r3, r3, #6
 8009948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800994c:	693a      	ldr	r2, [r7, #16]
 800994e:	fb02 f203 	mul.w	r2, r2, r3
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	fbb2 f3f3 	udiv	r3, r2, r3
 8009958:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800995a:	4b52      	ldr	r3, [pc, #328]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800995c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009960:	f003 031f 	and.w	r3, r3, #31
 8009964:	3301      	adds	r3, #1
 8009966:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009968:	697a      	ldr	r2, [r7, #20]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009970:	617b      	str	r3, [r7, #20]
        break;
 8009972:	e003      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009974:	4b4e      	ldr	r3, [pc, #312]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8009976:	617b      	str	r3, [r7, #20]
        break;
 8009978:	e000      	b.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 800997a:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009982:	f040 8086 	bne.w	8009a92 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009986:	4b47      	ldr	r3, [pc, #284]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800998c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009994:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800999c:	d03e      	beq.n	8009a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800999e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80099a2:	d073      	beq.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d000      	beq.n	80099aa <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80099a8:	e074      	b.n	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80099aa:	4b3e      	ldr	r3, [pc, #248]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d108      	bne.n	80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80099b6:	4b3b      	ldr	r3, [pc, #236]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099be:	4a3a      	ldr	r2, [pc, #232]	; (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80099c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80099c4:	613b      	str	r3, [r7, #16]
 80099c6:	e007      	b.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80099c8:	4b36      	ldr	r3, [pc, #216]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80099ca:	685b      	ldr	r3, [r3, #4]
 80099cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099d0:	4a36      	ldr	r2, [pc, #216]	; (8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80099d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099d6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80099d8:	4b32      	ldr	r3, [pc, #200]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80099da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099de:	0e1b      	lsrs	r3, r3, #24
 80099e0:	f003 030f 	and.w	r3, r3, #15
 80099e4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80099e6:	4b2f      	ldr	r3, [pc, #188]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80099e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099ec:	099b      	lsrs	r3, r3, #6
 80099ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099f2:	693a      	ldr	r2, [r7, #16]
 80099f4:	fb02 f203 	mul.w	r2, r2, r3
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80099fe:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009a00:	4b28      	ldr	r3, [pc, #160]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a06:	0a1b      	lsrs	r3, r3, #8
 8009a08:	f003 031f 	and.w	r3, r3, #31
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009a10:	697a      	ldr	r2, [r7, #20]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a18:	617b      	str	r3, [r7, #20]
        break;
 8009a1a:	e03b      	b.n	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009a1c:	4b21      	ldr	r3, [pc, #132]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d108      	bne.n	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009a28:	4b1e      	ldr	r3, [pc, #120]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a30:	4a1d      	ldr	r2, [pc, #116]	; (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8009a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a36:	613b      	str	r3, [r7, #16]
 8009a38:	e007      	b.n	8009a4a <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009a3a:	4b1a      	ldr	r3, [pc, #104]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a42:	4a1a      	ldr	r2, [pc, #104]	; (8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8009a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a48:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009a4a:	4b16      	ldr	r3, [pc, #88]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a50:	0e1b      	lsrs	r3, r3, #24
 8009a52:	f003 030f 	and.w	r3, r3, #15
 8009a56:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009a58:	4b12      	ldr	r3, [pc, #72]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a5e:	099b      	lsrs	r3, r3, #6
 8009a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a64:	693a      	ldr	r2, [r7, #16]
 8009a66:	fb02 f203 	mul.w	r2, r2, r3
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a70:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009a72:	4b0c      	ldr	r3, [pc, #48]	; (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8009a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a78:	f003 031f 	and.w	r3, r3, #31
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009a80:	697a      	ldr	r2, [r7, #20]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a88:	617b      	str	r3, [r7, #20]
        break;
 8009a8a:	e003      	b.n	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009a8c:	4b08      	ldr	r3, [pc, #32]	; (8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8009a8e:	617b      	str	r3, [r7, #20]
        break;
 8009a90:	e000      	b.n	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8009a92:	bf00      	nop

  return frequency;
 8009a94:	697b      	ldr	r3, [r7, #20]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	371c      	adds	r7, #28
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	40023800 	.word	0x40023800
 8009aa8:	00f42400 	.word	0x00f42400
 8009aac:	017d7840 	.word	0x017d7840
 8009ab0:	00bb8000 	.word	0x00bb8000

08009ab4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d101      	bne.n	8009ac6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e06b      	b.n	8009b9e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	7f5b      	ldrb	r3, [r3, #29]
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d105      	bne.n	8009adc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f7f9 f9ac 	bl	8002e34 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2202      	movs	r2, #2
 8009ae0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	22ca      	movs	r2, #202	; 0xca
 8009ae8:	625a      	str	r2, [r3, #36]	; 0x24
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2253      	movs	r2, #83	; 0x53
 8009af0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 fb00 	bl	800a0f8 <RTC_EnterInitMode>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d008      	beq.n	8009b10 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	22ff      	movs	r2, #255	; 0xff
 8009b04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2204      	movs	r2, #4
 8009b0a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e046      	b.n	8009b9e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	6899      	ldr	r1, [r3, #8]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	4b23      	ldr	r3, [pc, #140]	; (8009ba8 <HAL_RTC_Init+0xf4>)
 8009b1c:	400b      	ands	r3, r1
 8009b1e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	6899      	ldr	r1, [r3, #8]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	685a      	ldr	r2, [r3, #4]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	431a      	orrs	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	695b      	ldr	r3, [r3, #20]
 8009b34:	431a      	orrs	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	430a      	orrs	r2, r1
 8009b3c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	68d2      	ldr	r2, [r2, #12]
 8009b46:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	6919      	ldr	r1, [r3, #16]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	041a      	lsls	r2, r3, #16
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	430a      	orrs	r2, r1
 8009b5a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68da      	ldr	r2, [r3, #12]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b6a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f022 0208 	bic.w	r2, r2, #8
 8009b7a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	699a      	ldr	r2, [r3, #24]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	430a      	orrs	r2, r1
 8009b8c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	22ff      	movs	r2, #255	; 0xff
 8009b94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
  }
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	ff8fffbf 	.word	0xff8fffbf

08009bac <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009bac:	b590      	push	{r4, r7, lr}
 8009bae:	b087      	sub	sp, #28
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	7f1b      	ldrb	r3, [r3, #28]
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d101      	bne.n	8009bc8 <HAL_RTC_SetTime+0x1c>
 8009bc4:	2302      	movs	r3, #2
 8009bc6:	e0a8      	b.n	8009d1a <HAL_RTC_SetTime+0x16e>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2202      	movs	r2, #2
 8009bd2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d126      	bne.n	8009c28 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d102      	bne.n	8009bee <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	2200      	movs	r2, #0
 8009bec:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f000 faac 	bl	800a150 <RTC_ByteToBcd2>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	785b      	ldrb	r3, [r3, #1]
 8009c00:	4618      	mov	r0, r3
 8009c02:	f000 faa5 	bl	800a150 <RTC_ByteToBcd2>
 8009c06:	4603      	mov	r3, r0
 8009c08:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009c0a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	789b      	ldrb	r3, [r3, #2]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f000 fa9d 	bl	800a150 <RTC_ByteToBcd2>
 8009c16:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009c18:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	7b1b      	ldrb	r3, [r3, #12]
 8009c20:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009c22:	4313      	orrs	r3, r2
 8009c24:	617b      	str	r3, [r7, #20]
 8009c26:	e018      	b.n	8009c5a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d102      	bne.n	8009c3c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	785b      	ldrb	r3, [r3, #1]
 8009c46:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009c48:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009c4a:	68ba      	ldr	r2, [r7, #8]
 8009c4c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009c4e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	7b1b      	ldrb	r3, [r3, #12]
 8009c54:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009c56:	4313      	orrs	r3, r2
 8009c58:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	22ca      	movs	r2, #202	; 0xca
 8009c60:	625a      	str	r2, [r3, #36]	; 0x24
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	2253      	movs	r2, #83	; 0x53
 8009c68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f000 fa44 	bl	800a0f8 <RTC_EnterInitMode>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00b      	beq.n	8009c8e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	22ff      	movs	r2, #255	; 0xff
 8009c7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2204      	movs	r2, #4
 8009c82:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e045      	b.n	8009d1a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	6979      	ldr	r1, [r7, #20]
 8009c94:	4b23      	ldr	r3, [pc, #140]	; (8009d24 <HAL_RTC_SetTime+0x178>)
 8009c96:	400b      	ands	r3, r1
 8009c98:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	689a      	ldr	r2, [r3, #8]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009ca8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	6899      	ldr	r1, [r3, #8]
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	691a      	ldr	r2, [r3, #16]
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	695b      	ldr	r3, [r3, #20]
 8009cb8:	431a      	orrs	r2, r3
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	430a      	orrs	r2, r1
 8009cc0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68da      	ldr	r2, [r3, #12]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009cd0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	f003 0320 	and.w	r3, r3, #32
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d111      	bne.n	8009d04 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 f9e1 	bl	800a0a8 <HAL_RTC_WaitForSynchro>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d00b      	beq.n	8009d04 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	22ff      	movs	r2, #255	; 0xff
 8009cf2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2204      	movs	r2, #4
 8009cf8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	e00a      	b.n	8009d1a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	22ff      	movs	r2, #255	; 0xff
 8009d0a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8009d18:	2300      	movs	r3, #0
  }
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	371c      	adds	r7, #28
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd90      	pop	{r4, r7, pc}
 8009d22:	bf00      	nop
 8009d24:	007f7f7f 	.word	0x007f7f7f

08009d28 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009d28:	b590      	push	{r4, r7, lr}
 8009d2a:	b087      	sub	sp, #28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8009d34:	2300      	movs	r3, #0
 8009d36:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	7f1b      	ldrb	r3, [r3, #28]
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d101      	bne.n	8009d44 <HAL_RTC_SetDate+0x1c>
 8009d40:	2302      	movs	r3, #2
 8009d42:	e092      	b.n	8009e6a <HAL_RTC_SetDate+0x142>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2201      	movs	r2, #1
 8009d48:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2202      	movs	r2, #2
 8009d4e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d10e      	bne.n	8009d74 <HAL_RTC_SetDate+0x4c>
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	785b      	ldrb	r3, [r3, #1]
 8009d5a:	f003 0310 	and.w	r3, r3, #16
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d008      	beq.n	8009d74 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	785b      	ldrb	r3, [r3, #1]
 8009d66:	f023 0310 	bic.w	r3, r3, #16
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	330a      	adds	r3, #10
 8009d6e:	b2da      	uxtb	r2, r3
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d11c      	bne.n	8009db4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	78db      	ldrb	r3, [r3, #3]
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f000 f9e6 	bl	800a150 <RTC_ByteToBcd2>
 8009d84:	4603      	mov	r3, r0
 8009d86:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	785b      	ldrb	r3, [r3, #1]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f000 f9df 	bl	800a150 <RTC_ByteToBcd2>
 8009d92:	4603      	mov	r3, r0
 8009d94:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009d96:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	789b      	ldrb	r3, [r3, #2]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f000 f9d7 	bl	800a150 <RTC_ByteToBcd2>
 8009da2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009da4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009dae:	4313      	orrs	r3, r2
 8009db0:	617b      	str	r3, [r7, #20]
 8009db2:	e00e      	b.n	8009dd2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	78db      	ldrb	r3, [r3, #3]
 8009db8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	785b      	ldrb	r3, [r3, #1]
 8009dbe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009dc0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009dc2:	68ba      	ldr	r2, [r7, #8]
 8009dc4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8009dc6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	22ca      	movs	r2, #202	; 0xca
 8009dd8:	625a      	str	r2, [r3, #36]	; 0x24
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2253      	movs	r2, #83	; 0x53
 8009de0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009de2:	68f8      	ldr	r0, [r7, #12]
 8009de4:	f000 f988 	bl	800a0f8 <RTC_EnterInitMode>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00b      	beq.n	8009e06 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	22ff      	movs	r2, #255	; 0xff
 8009df4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2204      	movs	r2, #4
 8009dfa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e031      	b.n	8009e6a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	6979      	ldr	r1, [r7, #20]
 8009e0c:	4b19      	ldr	r3, [pc, #100]	; (8009e74 <HAL_RTC_SetDate+0x14c>)
 8009e0e:	400b      	ands	r3, r1
 8009e10:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68da      	ldr	r2, [r3, #12]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e20:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	f003 0320 	and.w	r3, r3, #32
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d111      	bne.n	8009e54 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f000 f939 	bl	800a0a8 <HAL_RTC_WaitForSynchro>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00b      	beq.n	8009e54 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	22ff      	movs	r2, #255	; 0xff
 8009e42:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2204      	movs	r2, #4
 8009e48:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009e50:	2301      	movs	r3, #1
 8009e52:	e00a      	b.n	8009e6a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	22ff      	movs	r2, #255	; 0xff
 8009e5a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2200      	movs	r2, #0
 8009e66:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009e68:	2300      	movs	r3, #0
  }
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	371c      	adds	r7, #28
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd90      	pop	{r4, r7, pc}
 8009e72:	bf00      	nop
 8009e74:	00ffff3f 	.word	0x00ffff3f

08009e78 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009e78:	b590      	push	{r4, r7, lr}
 8009e7a:	b089      	sub	sp, #36	; 0x24
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8009e84:	2300      	movs	r3, #0
 8009e86:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	61fb      	str	r3, [r7, #28]
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	7f1b      	ldrb	r3, [r3, #28]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d101      	bne.n	8009e9c <HAL_RTC_SetAlarm+0x24>
 8009e98:	2302      	movs	r3, #2
 8009e9a:	e101      	b.n	800a0a0 <HAL_RTC_SetAlarm+0x228>
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2202      	movs	r2, #2
 8009ea6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d137      	bne.n	8009f1e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d102      	bne.n	8009ec2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f000 f942 	bl	800a150 <RTC_ByteToBcd2>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	785b      	ldrb	r3, [r3, #1]
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f000 f93b 	bl	800a150 <RTC_ByteToBcd2>
 8009eda:	4603      	mov	r3, r0
 8009edc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009ede:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	789b      	ldrb	r3, [r3, #2]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f000 f933 	bl	800a150 <RTC_ByteToBcd2>
 8009eea:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009eec:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	7b1b      	ldrb	r3, [r3, #12]
 8009ef4:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009ef6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009f00:	4618      	mov	r0, r3
 8009f02:	f000 f925 	bl	800a150 <RTC_ByteToBcd2>
 8009f06:	4603      	mov	r3, r0
 8009f08:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009f0a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009f12:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	61fb      	str	r3, [r7, #28]
 8009f1c:	e023      	b.n	8009f66 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d102      	bne.n	8009f32 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	785b      	ldrb	r3, [r3, #1]
 8009f3c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009f3e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009f44:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	7b1b      	ldrb	r3, [r3, #12]
 8009f4a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009f4c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009f54:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009f56:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009f5c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009f62:	4313      	orrs	r3, r2
 8009f64:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	685a      	ldr	r2, [r3, #4]
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	69db      	ldr	r3, [r3, #28]
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	22ca      	movs	r2, #202	; 0xca
 8009f78:	625a      	str	r2, [r3, #36]	; 0x24
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	2253      	movs	r2, #83	; 0x53
 8009f80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f8a:	d13f      	bne.n	800a00c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	689a      	ldr	r2, [r3, #8]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f9a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	689a      	ldr	r2, [r3, #8]
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009faa:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009fac:	f7f9 ffc4 	bl	8003f38 <HAL_GetTick>
 8009fb0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009fb2:	e013      	b.n	8009fdc <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009fb4:	f7f9 ffc0 	bl	8003f38 <HAL_GetTick>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	1ad3      	subs	r3, r2, r3
 8009fbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009fc2:	d90b      	bls.n	8009fdc <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	22ff      	movs	r2, #255	; 0xff
 8009fca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2203      	movs	r2, #3
 8009fd0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009fd8:	2303      	movs	r3, #3
 8009fda:	e061      	b.n	800a0a0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	f003 0301 	and.w	r3, r3, #1
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d0e4      	beq.n	8009fb4 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	69fa      	ldr	r2, [r7, #28]
 8009ff0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	697a      	ldr	r2, [r7, #20]
 8009ff8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	689a      	ldr	r2, [r3, #8]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a008:	609a      	str	r2, [r3, #8]
 800a00a:	e03e      	b.n	800a08a <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	689a      	ldr	r2, [r3, #8]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a01a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	689a      	ldr	r2, [r3, #8]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a02a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a02c:	f7f9 ff84 	bl	8003f38 <HAL_GetTick>
 800a030:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a032:	e013      	b.n	800a05c <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a034:	f7f9 ff80 	bl	8003f38 <HAL_GetTick>
 800a038:	4602      	mov	r2, r0
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	1ad3      	subs	r3, r2, r3
 800a03e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a042:	d90b      	bls.n	800a05c <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	22ff      	movs	r2, #255	; 0xff
 800a04a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2203      	movs	r2, #3
 800a050:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a058:	2303      	movs	r3, #3
 800a05a:	e021      	b.n	800a0a0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	f003 0302 	and.w	r3, r3, #2
 800a066:	2b00      	cmp	r3, #0
 800a068:	d0e4      	beq.n	800a034 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	69fa      	ldr	r2, [r7, #28]
 800a070:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	697a      	ldr	r2, [r7, #20]
 800a078:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	689a      	ldr	r2, [r3, #8]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a088:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	22ff      	movs	r2, #255	; 0xff
 800a090:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2201      	movs	r2, #1
 800a096:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2200      	movs	r2, #0
 800a09c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3724      	adds	r7, #36	; 0x24
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd90      	pop	{r4, r7, pc}

0800a0a8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	68da      	ldr	r2, [r3, #12]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a0c2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a0c4:	f7f9 ff38 	bl	8003f38 <HAL_GetTick>
 800a0c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a0ca:	e009      	b.n	800a0e0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a0cc:	f7f9 ff34 	bl	8003f38 <HAL_GetTick>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	1ad3      	subs	r3, r2, r3
 800a0d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a0da:	d901      	bls.n	800a0e0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a0dc:	2303      	movs	r3, #3
 800a0de:	e007      	b.n	800a0f0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	f003 0320 	and.w	r3, r3, #32
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d0ee      	beq.n	800a0cc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a0ee:	2300      	movs	r3, #0
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3710      	adds	r7, #16
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a100:	2300      	movs	r3, #0
 800a102:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d119      	bne.n	800a146 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f04f 32ff 	mov.w	r2, #4294967295
 800a11a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a11c:	f7f9 ff0c 	bl	8003f38 <HAL_GetTick>
 800a120:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a122:	e009      	b.n	800a138 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a124:	f7f9 ff08 	bl	8003f38 <HAL_GetTick>
 800a128:	4602      	mov	r2, r0
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a132:	d901      	bls.n	800a138 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a134:	2303      	movs	r3, #3
 800a136:	e007      	b.n	800a148 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a142:	2b00      	cmp	r3, #0
 800a144:	d0ee      	beq.n	800a124 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a146:	2300      	movs	r3, #0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3710      	adds	r7, #16
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a150:	b480      	push	{r7}
 800a152:	b085      	sub	sp, #20
 800a154:	af00      	add	r7, sp, #0
 800a156:	4603      	mov	r3, r0
 800a158:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800a15a:	2300      	movs	r3, #0
 800a15c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800a15e:	e005      	b.n	800a16c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	3301      	adds	r3, #1
 800a164:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800a166:	79fb      	ldrb	r3, [r7, #7]
 800a168:	3b0a      	subs	r3, #10
 800a16a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800a16c:	79fb      	ldrb	r3, [r7, #7]
 800a16e:	2b09      	cmp	r3, #9
 800a170:	d8f6      	bhi.n	800a160 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	b2db      	uxtb	r3, r3
 800a176:	011b      	lsls	r3, r3, #4
 800a178:	b2da      	uxtb	r2, r3
 800a17a:	79fb      	ldrb	r3, [r7, #7]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	b2db      	uxtb	r3, r3
}
 800a180:	4618      	mov	r0, r3
 800a182:	3714      	adds	r7, #20
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b087      	sub	sp, #28
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a198:	2300      	movs	r3, #0
 800a19a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	7f1b      	ldrb	r3, [r3, #28]
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d101      	bne.n	800a1a8 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a1a4:	2302      	movs	r3, #2
 800a1a6:	e03e      	b.n	800a226 <HAL_RTCEx_SetTimeStamp+0x9a>
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2202      	movs	r2, #2
 800a1b2:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	689a      	ldr	r2, [r3, #8]
 800a1ba:	4b1e      	ldr	r3, [pc, #120]	; (800a234 <HAL_RTCEx_SetTimeStamp+0xa8>)
 800a1bc:	4013      	ands	r3, r2
 800a1be:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800a1c0:	697a      	ldr	r2, [r7, #20]
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	22ca      	movs	r2, #202	; 0xca
 800a1ce:	625a      	str	r2, [r3, #36]	; 0x24
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2253      	movs	r2, #83	; 0x53
 800a1d6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f022 0206 	bic.w	r2, r2, #6
 800a1e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	430a      	orrs	r2, r1
 800a1f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	689a      	ldr	r2, [r3, #8]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a20e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	22ff      	movs	r2, #255	; 0xff
 800a216:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2201      	movs	r2, #1
 800a21c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2200      	movs	r2, #0
 800a222:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	371c      	adds	r7, #28
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	fffff7f7 	.word	0xfffff7f7

0800a238 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b088      	sub	sp, #32
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800a240:	2300      	movs	r3, #0
 800a242:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800a244:	2300      	movs	r3, #0
 800a246:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800a248:	2300      	movs	r3, #0
 800a24a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d101      	bne.n	800a256 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	e149      	b.n	800a4ea <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d106      	bne.n	800a270 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f7f9 f98c 	bl	8003588 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2202      	movs	r2, #2
 800a274:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 f94f 	bl	800a51c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	2b01      	cmp	r3, #1
 800a284:	d007      	beq.n	800a296 <HAL_SAI_Init+0x5e>
 800a286:	2b01      	cmp	r3, #1
 800a288:	d302      	bcc.n	800a290 <HAL_SAI_Init+0x58>
 800a28a:	2b02      	cmp	r3, #2
 800a28c:	d006      	beq.n	800a29c <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 800a28e:	e008      	b.n	800a2a2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 800a290:	2300      	movs	r3, #0
 800a292:	61fb      	str	r3, [r7, #28]
      break;
 800a294:	e005      	b.n	800a2a2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a296:	2310      	movs	r3, #16
 800a298:	61fb      	str	r3, [r7, #28]
      break;
 800a29a:	e002      	b.n	800a2a2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a29c:	2320      	movs	r3, #32
 800a29e:	61fb      	str	r3, [r7, #28]
      break;
 800a2a0:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	2b03      	cmp	r3, #3
 800a2a8:	d81d      	bhi.n	800a2e6 <HAL_SAI_Init+0xae>
 800a2aa:	a201      	add	r2, pc, #4	; (adr r2, 800a2b0 <HAL_SAI_Init+0x78>)
 800a2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2b0:	0800a2c1 	.word	0x0800a2c1
 800a2b4:	0800a2c7 	.word	0x0800a2c7
 800a2b8:	0800a2cf 	.word	0x0800a2cf
 800a2bc:	0800a2d7 	.word	0x0800a2d7
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	617b      	str	r3, [r7, #20]
      }
      break;
 800a2c4:	e010      	b.n	800a2e8 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800a2c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2ca:	617b      	str	r3, [r7, #20]
      }
      break;
 800a2cc:	e00c      	b.n	800a2e8 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800a2ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a2d2:	617b      	str	r3, [r7, #20]
      }
      break;
 800a2d4:	e008      	b.n	800a2e8 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800a2d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a2da:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	f043 0301 	orr.w	r3, r3, #1
 800a2e2:	61fb      	str	r3, [r7, #28]
      }
      break;
 800a2e4:	e000      	b.n	800a2e8 <HAL_SAI_Init+0xb0>
  default:
    break;
 800a2e6:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a81      	ldr	r2, [pc, #516]	; (800a4f4 <HAL_SAI_Init+0x2bc>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d004      	beq.n	800a2fc <HAL_SAI_Init+0xc4>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a80      	ldr	r2, [pc, #512]	; (800a4f8 <HAL_SAI_Init+0x2c0>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d103      	bne.n	800a304 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 800a2fc:	4a7f      	ldr	r2, [pc, #508]	; (800a4fc <HAL_SAI_Init+0x2c4>)
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	6013      	str	r3, [r2, #0]
 800a302:	e002      	b.n	800a30a <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a304:	4a7e      	ldr	r2, [pc, #504]	; (800a500 <HAL_SAI_Init+0x2c8>)
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	69db      	ldr	r3, [r3, #28]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d043      	beq.n	800a39a <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800a312:	2300      	movs	r3, #0
 800a314:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a76      	ldr	r2, [pc, #472]	; (800a4f4 <HAL_SAI_Init+0x2bc>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d004      	beq.n	800a32a <HAL_SAI_Init+0xf2>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a74      	ldr	r2, [pc, #464]	; (800a4f8 <HAL_SAI_Init+0x2c0>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d104      	bne.n	800a334 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a32a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a32e:	f7ff fa8d 	bl	800984c <HAL_RCCEx_GetPeriphCLKFreq>
 800a332:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a72      	ldr	r2, [pc, #456]	; (800a504 <HAL_SAI_Init+0x2cc>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d004      	beq.n	800a348 <HAL_SAI_Init+0x110>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a71      	ldr	r2, [pc, #452]	; (800a508 <HAL_SAI_Init+0x2d0>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d104      	bne.n	800a352 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a348:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800a34c:	f7ff fa7e 	bl	800984c <HAL_RCCEx_GetPeriphCLKFreq>
 800a350:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800a352:	693a      	ldr	r2, [r7, #16]
 800a354:	4613      	mov	r3, r2
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	4413      	add	r3, r2
 800a35a:	005b      	lsls	r3, r3, #1
 800a35c:	461a      	mov	r2, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	69db      	ldr	r3, [r3, #28]
 800a362:	025b      	lsls	r3, r3, #9
 800a364:	fbb2 f3f3 	udiv	r3, r2, r3
 800a368:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	4a67      	ldr	r2, [pc, #412]	; (800a50c <HAL_SAI_Init+0x2d4>)
 800a36e:	fba2 2303 	umull	r2, r3, r2, r3
 800a372:	08da      	lsrs	r2, r3, #3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 800a378:	68f9      	ldr	r1, [r7, #12]
 800a37a:	4b64      	ldr	r3, [pc, #400]	; (800a50c <HAL_SAI_Init+0x2d4>)
 800a37c:	fba3 2301 	umull	r2, r3, r3, r1
 800a380:	08da      	lsrs	r2, r3, #3
 800a382:	4613      	mov	r3, r2
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	4413      	add	r3, r2
 800a388:	005b      	lsls	r3, r3, #1
 800a38a:	1aca      	subs	r2, r1, r3
 800a38c:	2a08      	cmp	r2, #8
 800a38e:	d904      	bls.n	800a39a <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6a1b      	ldr	r3, [r3, #32]
 800a394:	1c5a      	adds	r2, r3, #1
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d003      	beq.n	800a3aa <HAL_SAI_Init+0x172>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d109      	bne.n	800a3be <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d101      	bne.n	800a3b6 <HAL_SAI_Init+0x17e>
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	e001      	b.n	800a3ba <HAL_SAI_Init+0x182>
 800a3b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3ba:	61bb      	str	r3, [r7, #24]
 800a3bc:	e008      	b.n	800a3d0 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d102      	bne.n	800a3cc <HAL_SAI_Init+0x194>
 800a3c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3ca:	e000      	b.n	800a3ce <HAL_SAI_Init+0x196>
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	6819      	ldr	r1, [r3, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	4b4d      	ldr	r3, [pc, #308]	; (800a510 <HAL_SAI_Init+0x2d8>)
 800a3dc:	400b      	ands	r3, r1
 800a3de:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	6819      	ldr	r1, [r3, #0]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	685a      	ldr	r2, [r3, #4]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ee:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a3f4:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3fa:	431a      	orrs	r2, r3
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 800a408:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a414:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	051b      	lsls	r3, r3, #20
 800a41c:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	430a      	orrs	r2, r1
 800a424:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	6859      	ldr	r1, [r3, #4]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	4b38      	ldr	r3, [pc, #224]	; (800a514 <HAL_SAI_Init+0x2dc>)
 800a432:	400b      	ands	r3, r1
 800a434:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	6859      	ldr	r1, [r3, #4]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	699a      	ldr	r2, [r3, #24]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a444:	431a      	orrs	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44a:	431a      	orrs	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	430a      	orrs	r2, r1
 800a452:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	6899      	ldr	r1, [r3, #8]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	4b2e      	ldr	r3, [pc, #184]	; (800a518 <HAL_SAI_Init+0x2e0>)
 800a460:	400b      	ands	r3, r1
 800a462:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	6899      	ldr	r1, [r3, #8]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a46e:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800a474:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 800a47a:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 800a480:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a486:	3b01      	subs	r3, #1
 800a488:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 800a48a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	430a      	orrs	r2, r1
 800a492:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	68d9      	ldr	r1, [r3, #12]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a4a2:	400b      	ands	r3, r1
 800a4a4:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68d9      	ldr	r1, [r3, #12]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4b4:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4ba:	041b      	lsls	r3, r3, #16
 800a4bc:	431a      	orrs	r2, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4c2:	3b01      	subs	r3, #1
 800a4c4:	021b      	lsls	r3, r3, #8
 800a4c6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	430a      	orrs	r2, r1
 800a4ce:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3720      	adds	r7, #32
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	40015804 	.word	0x40015804
 800a4f8:	40015824 	.word	0x40015824
 800a4fc:	40015800 	.word	0x40015800
 800a500:	40015c00 	.word	0x40015c00
 800a504:	40015c04 	.word	0x40015c04
 800a508:	40015c24 	.word	0x40015c24
 800a50c:	cccccccd 	.word	0xcccccccd
 800a510:	ff05c010 	.word	0xff05c010
 800a514:	ffff1ff0 	.word	0xffff1ff0
 800a518:	fff88000 	.word	0xfff88000

0800a51c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a51c:	b490      	push	{r4, r7}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800a524:	4b16      	ldr	r3, [pc, #88]	; (800a580 <SAI_Disable+0x64>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4a16      	ldr	r2, [pc, #88]	; (800a584 <SAI_Disable+0x68>)
 800a52a:	fba2 2303 	umull	r2, r3, r2, r3
 800a52e:	0b1b      	lsrs	r3, r3, #12
 800a530:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800a532:	2300      	movs	r3, #0
 800a534:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	681a      	ldr	r2, [r3, #0]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a544:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800a546:	4623      	mov	r3, r4
 800a548:	1e5c      	subs	r4, r3, #1
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d10a      	bne.n	800a564 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a554:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800a55e:	2303      	movs	r3, #3
 800a560:	73fb      	strb	r3, [r7, #15]
      break;
 800a562:	e006      	b.n	800a572 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d1e9      	bne.n	800a546 <SAI_Disable+0x2a>

  return status;
 800a572:	7bfb      	ldrb	r3, [r7, #15]
}
 800a574:	4618      	mov	r0, r3
 800a576:	3710      	adds	r7, #16
 800a578:	46bd      	mov	sp, r7
 800a57a:	bc90      	pop	{r4, r7}
 800a57c:	4770      	bx	lr
 800a57e:	bf00      	nop
 800a580:	20000004 	.word	0x20000004
 800a584:	95cbec1b 	.word	0x95cbec1b

0800a588 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d101      	bne.n	800a59a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	e022      	b.n	800a5e0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d105      	bne.n	800a5b2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f7f8 fc5b 	bl	8002e68 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2203      	movs	r2, #3
 800a5b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 f814 	bl	800a5e8 <HAL_SD_InitCard>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d001      	beq.n	800a5ca <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e00a      	b.n	800a5e0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2201      	movs	r2, #1
 800a5da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a5de:	2300      	movs	r3, #0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a5e8:	b5b0      	push	{r4, r5, r7, lr}
 800a5ea:	b08e      	sub	sp, #56	; 0x38
 800a5ec:	af04      	add	r7, sp, #16
 800a5ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a600:	2300      	movs	r3, #0
 800a602:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800a604:	2376      	movs	r3, #118	; 0x76
 800a606:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681d      	ldr	r5, [r3, #0]
 800a60c:	466c      	mov	r4, sp
 800a60e:	f107 0314 	add.w	r3, r7, #20
 800a612:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a616:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a61a:	f107 0308 	add.w	r3, r7, #8
 800a61e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a620:	4628      	mov	r0, r5
 800a622:	f002 fed1 	bl	800d3c8 <SDMMC_Init>
 800a626:	4603      	mov	r3, r0
 800a628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a62c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a630:	2b00      	cmp	r3, #0
 800a632:	d001      	beq.n	800a638 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	e03b      	b.n	800a6b0 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	685a      	ldr	r2, [r3, #4]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a646:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4618      	mov	r0, r3
 800a64e:	f002 fef4 	bl	800d43a <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	685a      	ldr	r2, [r3, #4]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a660:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 fde6 	bl	800b234 <SD_PowerON>
 800a668:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a66a:	6a3b      	ldr	r3, [r7, #32]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d00b      	beq.n	800a688 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a67c:	6a3b      	ldr	r3, [r7, #32]
 800a67e:	431a      	orrs	r2, r3
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	e013      	b.n	800a6b0 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 fd05 	bl	800b098 <SD_InitCard>
 800a68e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a690:	6a3b      	ldr	r3, [r7, #32]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00b      	beq.n	800a6ae <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2201      	movs	r2, #1
 800a69a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6a2:	6a3b      	ldr	r3, [r7, #32]
 800a6a4:	431a      	orrs	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e000      	b.n	800a6b0 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3728      	adds	r7, #40	; 0x28
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bdb0      	pop	{r4, r5, r7, pc}

0800a6b8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b08c      	sub	sp, #48	; 0x30
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
 800a6c4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d107      	bne.n	800a6e0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e0cc      	b.n	800a87a <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	f040 80c5 	bne.w	800a878 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a6f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	441a      	add	r2, r3
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d907      	bls.n	800a712 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a706:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	e0b3      	b.n	800a87a <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2203      	movs	r2, #3
 800a716:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2200      	movs	r2, #0
 800a720:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a730:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a736:	4a53      	ldr	r2, [pc, #332]	; (800a884 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800a738:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73e:	4a52      	ldr	r2, [pc, #328]	; (800a888 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800a740:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a746:	2200      	movs	r2, #0
 800a748:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	3380      	adds	r3, #128	; 0x80
 800a754:	4619      	mov	r1, r3
 800a756:	68ba      	ldr	r2, [r7, #8]
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	025b      	lsls	r3, r3, #9
 800a75c:	089b      	lsrs	r3, r3, #2
 800a75e:	f7fa f8e7 	bl	8004930 <HAL_DMA_Start_IT>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d017      	beq.n	800a798 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a776:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a43      	ldr	r2, [pc, #268]	; (800a88c <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800a77e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a784:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2201      	movs	r2, #1
 800a790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	e070      	b.n	800a87a <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f042 0208 	orr.w	r2, r2, #8
 800a7a6:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d002      	beq.n	800a7b6 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 800a7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b2:	025b      	lsls	r3, r3, #9
 800a7b4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f002 fece 	bl	800d560 <SDMMC_CmdBlockLength>
 800a7c4:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800a7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d00f      	beq.n	800a7ec <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a2e      	ldr	r2, [pc, #184]	; (800a88c <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800a7d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7da:	431a      	orrs	r2, r3
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e046      	b.n	800a87a <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a7ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a7f0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	025b      	lsls	r3, r3, #9
 800a7f6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a7f8:	2390      	movs	r3, #144	; 0x90
 800a7fa:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a7fc:	2302      	movs	r3, #2
 800a7fe:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a800:	2300      	movs	r3, #0
 800a802:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a804:	2301      	movs	r3, #1
 800a806:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f107 0210 	add.w	r2, r7, #16
 800a810:	4611      	mov	r1, r2
 800a812:	4618      	mov	r0, r3
 800a814:	f002 fe78 	bl	800d508 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d90a      	bls.n	800a834 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2282      	movs	r2, #130	; 0x82
 800a822:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a82a:	4618      	mov	r0, r3
 800a82c:	f002 fedc 	bl	800d5e8 <SDMMC_CmdReadMultiBlock>
 800a830:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a832:	e009      	b.n	800a848 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2281      	movs	r2, #129	; 0x81
 800a838:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a840:	4618      	mov	r0, r3
 800a842:	f002 feaf 	bl	800d5a4 <SDMMC_CmdReadSingleBlock>
 800a846:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d012      	beq.n	800a874 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a0e      	ldr	r2, [pc, #56]	; (800a88c <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800a854:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a85c:	431a      	orrs	r2, r3
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2201      	movs	r2, #1
 800a866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2200      	movs	r2, #0
 800a86e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	e002      	b.n	800a87a <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 800a874:	2300      	movs	r3, #0
 800a876:	e000      	b.n	800a87a <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 800a878:	2302      	movs	r3, #2
  }
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3730      	adds	r7, #48	; 0x30
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	0800af83 	.word	0x0800af83
 800a888:	0800aff5 	.word	0x0800aff5
 800a88c:	004005ff 	.word	0x004005ff

0800a890 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b08c      	sub	sp, #48	; 0x30
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	607a      	str	r2, [r7, #4]
 800a89c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d107      	bne.n	800a8b8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e0cf      	b.n	800aa58 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	f040 80c8 	bne.w	800aa56 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a8cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	441a      	add	r2, r3
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d907      	bls.n	800a8ea <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8de:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e0b6      	b.n	800aa58 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2203      	movs	r2, #3
 800a8ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f042 021a 	orr.w	r2, r2, #26
 800a908:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a90e:	4a54      	ldr	r2, [pc, #336]	; (800aa60 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a910:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a916:	4a53      	ldr	r2, [pc, #332]	; (800aa64 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800a918:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a91e:	2200      	movs	r2, #0
 800a920:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a926:	2b01      	cmp	r3, #1
 800a928:	d002      	beq.n	800a930 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92c:	025b      	lsls	r3, r3, #9
 800a92e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a938:	4618      	mov	r0, r3
 800a93a:	f002 fe11 	bl	800d560 <SDMMC_CmdBlockLength>
 800a93e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00f      	beq.n	800a966 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a47      	ldr	r2, [pc, #284]	; (800aa68 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800a94c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a954:	431a      	orrs	r2, r3
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2201      	movs	r2, #1
 800a95e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a962:	2301      	movs	r3, #1
 800a964:	e078      	b.n	800aa58 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d90a      	bls.n	800a982 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	22a0      	movs	r2, #160	; 0xa0
 800a970:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a978:	4618      	mov	r0, r3
 800a97a:	f002 fe79 	bl	800d670 <SDMMC_CmdWriteMultiBlock>
 800a97e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a980:	e009      	b.n	800a996 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2290      	movs	r2, #144	; 0x90
 800a986:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a98e:	4618      	mov	r0, r3
 800a990:	f002 fe4c 	bl	800d62c <SDMMC_CmdWriteSingleBlock>
 800a994:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d012      	beq.n	800a9c2 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a31      	ldr	r2, [pc, #196]	; (800aa68 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800a9a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9aa:	431a      	orrs	r2, r3
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e04a      	b.n	800aa58 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f042 0208 	orr.w	r2, r2, #8
 800a9d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a9d6:	68b9      	ldr	r1, [r7, #8]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	3380      	adds	r3, #128	; 0x80
 800a9de:	461a      	mov	r2, r3
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	025b      	lsls	r3, r3, #9
 800a9e4:	089b      	lsrs	r3, r3, #2
 800a9e6:	f7f9 ffa3 	bl	8004930 <HAL_DMA_Start_IT>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d01a      	beq.n	800aa26 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f022 021a 	bic.w	r2, r2, #26
 800a9fe:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a18      	ldr	r2, [pc, #96]	; (800aa68 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800aa06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800aa22:	2301      	movs	r3, #1
 800aa24:	e018      	b.n	800aa58 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aa26:	f04f 33ff 	mov.w	r3, #4294967295
 800aa2a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	025b      	lsls	r3, r3, #9
 800aa30:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800aa32:	2390      	movs	r3, #144	; 0x90
 800aa34:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800aa36:	2300      	movs	r3, #0
 800aa38:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f107 0210 	add.w	r2, r7, #16
 800aa4a:	4611      	mov	r1, r2
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f002 fd5b 	bl	800d508 <SDMMC_ConfigData>

      return HAL_OK;
 800aa52:	2300      	movs	r3, #0
 800aa54:	e000      	b.n	800aa58 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 800aa56:	2302      	movs	r3, #2
  }
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3730      	adds	r7, #48	; 0x30
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}
 800aa60:	0800af59 	.word	0x0800af59
 800aa64:	0800aff5 	.word	0x0800aff5
 800aa68:	004005ff 	.word	0x004005ff

0800aa6c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800aa74:	bf00      	nop
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa8e:	0f9b      	lsrs	r3, r3, #30
 800aa90:	b2da      	uxtb	r2, r3
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa9a:	0e9b      	lsrs	r3, r3, #26
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	f003 030f 	and.w	r3, r3, #15
 800aaa2:	b2da      	uxtb	r2, r3
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aaac:	0e1b      	lsrs	r3, r3, #24
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	f003 0303 	and.w	r3, r3, #3
 800aab4:	b2da      	uxtb	r2, r3
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aabe:	0c1b      	lsrs	r3, r3, #16
 800aac0:	b2da      	uxtb	r2, r3
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aaca:	0a1b      	lsrs	r3, r3, #8
 800aacc:	b2da      	uxtb	r2, r3
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aad6:	b2da      	uxtb	r2, r3
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aae0:	0d1b      	lsrs	r3, r3, #20
 800aae2:	b29a      	uxth	r2, r3
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aaec:	0c1b      	lsrs	r3, r3, #16
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	f003 030f 	and.w	r3, r3, #15
 800aaf4:	b2da      	uxtb	r2, r3
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aafe:	0bdb      	lsrs	r3, r3, #15
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	f003 0301 	and.w	r3, r3, #1
 800ab06:	b2da      	uxtb	r2, r3
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab10:	0b9b      	lsrs	r3, r3, #14
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	f003 0301 	and.w	r3, r3, #1
 800ab18:	b2da      	uxtb	r2, r3
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab22:	0b5b      	lsrs	r3, r3, #13
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	f003 0301 	and.w	r3, r3, #1
 800ab2a:	b2da      	uxtb	r2, r3
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab34:	0b1b      	lsrs	r3, r3, #12
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	f003 0301 	and.w	r3, r3, #1
 800ab3c:	b2da      	uxtb	r2, r3
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	2200      	movs	r2, #0
 800ab46:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d163      	bne.n	800ac18 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab54:	009a      	lsls	r2, r3, #2
 800ab56:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ab5a:	4013      	ands	r3, r2
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ab60:	0f92      	lsrs	r2, r2, #30
 800ab62:	431a      	orrs	r2, r3
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab6c:	0edb      	lsrs	r3, r3, #27
 800ab6e:	b2db      	uxtb	r3, r3
 800ab70:	f003 0307 	and.w	r3, r3, #7
 800ab74:	b2da      	uxtb	r2, r3
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab7e:	0e1b      	lsrs	r3, r3, #24
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	f003 0307 	and.w	r3, r3, #7
 800ab86:	b2da      	uxtb	r2, r3
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab90:	0d5b      	lsrs	r3, r3, #21
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	f003 0307 	and.w	r3, r3, #7
 800ab98:	b2da      	uxtb	r2, r3
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aba2:	0c9b      	lsrs	r3, r3, #18
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	f003 0307 	and.w	r3, r3, #7
 800abaa:	b2da      	uxtb	r2, r3
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abb4:	0bdb      	lsrs	r3, r3, #15
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	f003 0307 	and.w	r3, r3, #7
 800abbc:	b2da      	uxtb	r2, r3
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	691b      	ldr	r3, [r3, #16]
 800abc6:	1c5a      	adds	r2, r3, #1
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	7e1b      	ldrb	r3, [r3, #24]
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	f003 0307 	and.w	r3, r3, #7
 800abd6:	3302      	adds	r3, #2
 800abd8:	2201      	movs	r2, #1
 800abda:	fa02 f303 	lsl.w	r3, r2, r3
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800abe2:	fb02 f203 	mul.w	r2, r2, r3
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	7a1b      	ldrb	r3, [r3, #8]
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	f003 030f 	and.w	r3, r3, #15
 800abf4:	2201      	movs	r2, #1
 800abf6:	409a      	lsls	r2, r3
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800ac04:	0a52      	lsrs	r2, r2, #9
 800ac06:	fb02 f203 	mul.w	r2, r2, r3
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac14:	661a      	str	r2, [r3, #96]	; 0x60
 800ac16:	e031      	b.n	800ac7c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d11d      	bne.n	800ac5c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac24:	041b      	lsls	r3, r3, #16
 800ac26:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac2e:	0c1b      	lsrs	r3, r3, #16
 800ac30:	431a      	orrs	r2, r3
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	691b      	ldr	r3, [r3, #16]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	029a      	lsls	r2, r3, #10
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac50:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	661a      	str	r2, [r3, #96]	; 0x60
 800ac5a:	e00f      	b.n	800ac7c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a58      	ldr	r2, [pc, #352]	; (800adc4 <HAL_SD_GetCardCSD+0x344>)
 800ac62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	e09d      	b.n	800adb8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac80:	0b9b      	lsrs	r3, r3, #14
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	f003 0301 	and.w	r3, r3, #1
 800ac88:	b2da      	uxtb	r2, r3
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac92:	09db      	lsrs	r3, r3, #7
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac9a:	b2da      	uxtb	r2, r3
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acaa:	b2da      	uxtb	r2, r3
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acb4:	0fdb      	lsrs	r3, r3, #31
 800acb6:	b2da      	uxtb	r2, r3
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acc0:	0f5b      	lsrs	r3, r3, #29
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	f003 0303 	and.w	r3, r3, #3
 800acc8:	b2da      	uxtb	r2, r3
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acd2:	0e9b      	lsrs	r3, r3, #26
 800acd4:	b2db      	uxtb	r3, r3
 800acd6:	f003 0307 	and.w	r3, r3, #7
 800acda:	b2da      	uxtb	r2, r3
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ace4:	0d9b      	lsrs	r3, r3, #22
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	f003 030f 	and.w	r3, r3, #15
 800acec:	b2da      	uxtb	r2, r3
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acf6:	0d5b      	lsrs	r3, r3, #21
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	f003 0301 	and.w	r3, r3, #1
 800acfe:	b2da      	uxtb	r2, r3
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad12:	0c1b      	lsrs	r3, r3, #16
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	f003 0301 	and.w	r3, r3, #1
 800ad1a:	b2da      	uxtb	r2, r3
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad26:	0bdb      	lsrs	r3, r3, #15
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	f003 0301 	and.w	r3, r3, #1
 800ad2e:	b2da      	uxtb	r2, r3
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad3a:	0b9b      	lsrs	r3, r3, #14
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	f003 0301 	and.w	r3, r3, #1
 800ad42:	b2da      	uxtb	r2, r3
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad4e:	0b5b      	lsrs	r3, r3, #13
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	f003 0301 	and.w	r3, r3, #1
 800ad56:	b2da      	uxtb	r2, r3
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad62:	0b1b      	lsrs	r3, r3, #12
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	f003 0301 	and.w	r3, r3, #1
 800ad6a:	b2da      	uxtb	r2, r3
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad76:	0a9b      	lsrs	r3, r3, #10
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	f003 0303 	and.w	r3, r3, #3
 800ad7e:	b2da      	uxtb	r2, r3
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad8a:	0a1b      	lsrs	r3, r3, #8
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	f003 0303 	and.w	r3, r3, #3
 800ad92:	b2da      	uxtb	r2, r3
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad9e:	085b      	lsrs	r3, r3, #1
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ada6:	b2da      	uxtb	r2, r3
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	2201      	movs	r2, #1
 800adb2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	370c      	adds	r7, #12
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr
 800adc4:	004005ff 	.word	0x004005ff

0800adc8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ae12:	2300      	movs	r3, #0
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ae20:	b5b0      	push	{r4, r5, r7, lr}
 800ae22:	b08e      	sub	sp, #56	; 0x38
 800ae24:	af04      	add	r7, sp, #16
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2203      	movs	r2, #3
 800ae2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae36:	2b03      	cmp	r3, #3
 800ae38:	d02e      	beq.n	800ae98 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae40:	d106      	bne.n	800ae50 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae46:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	639a      	str	r2, [r3, #56]	; 0x38
 800ae4e:	e029      	b.n	800aea4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae56:	d10a      	bne.n	800ae6e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 faa1 	bl	800b3a0 <SD_WideBus_Enable>
 800ae5e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae66:	431a      	orrs	r2, r3
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	639a      	str	r2, [r3, #56]	; 0x38
 800ae6c:	e01a      	b.n	800aea4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d10a      	bne.n	800ae8a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 fade 	bl	800b436 <SD_WideBus_Disable>
 800ae7a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae82:	431a      	orrs	r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	639a      	str	r2, [r3, #56]	; 0x38
 800ae88:	e00c      	b.n	800aea4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	639a      	str	r2, [r3, #56]	; 0x38
 800ae96:	e005      	b.n	800aea4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae9c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d009      	beq.n	800aec0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a18      	ldr	r2, [pc, #96]	; (800af14 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800aeb2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	e024      	b.n	800af0a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	68db      	ldr	r3, [r3, #12]
 800aed0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	695b      	ldr	r3, [r3, #20]
 800aeda:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	699b      	ldr	r3, [r3, #24]
 800aee0:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681d      	ldr	r5, [r3, #0]
 800aee6:	466c      	mov	r4, sp
 800aee8:	f107 0318 	add.w	r3, r7, #24
 800aeec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aef0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aef4:	f107 030c 	add.w	r3, r7, #12
 800aef8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aefa:	4628      	mov	r0, r5
 800aefc:	f002 fa64 	bl	800d3c8 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2201      	movs	r2, #1
 800af04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3728      	adds	r7, #40	; 0x28
 800af0e:	46bd      	mov	sp, r7
 800af10:	bdb0      	pop	{r4, r5, r7, pc}
 800af12:	bf00      	nop
 800af14:	004005ff 	.word	0x004005ff

0800af18 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b086      	sub	sp, #24
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800af20:	2300      	movs	r3, #0
 800af22:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800af24:	f107 030c 	add.w	r3, r7, #12
 800af28:	4619      	mov	r1, r3
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 fa10 	bl	800b350 <SD_SendStatus>
 800af30:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d005      	beq.n	800af44 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	431a      	orrs	r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	0a5b      	lsrs	r3, r3, #9
 800af48:	f003 030f 	and.w	r3, r3, #15
 800af4c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800af4e:	693b      	ldr	r3, [r7, #16]
}
 800af50:	4618      	mov	r0, r3
 800af52:	3718      	adds	r7, #24
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af64:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af74:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800af76:	bf00      	nop
 800af78:	3714      	adds	r7, #20
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr

0800af82 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800af82:	b580      	push	{r7, lr}
 800af84:	b084      	sub	sp, #16
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af8e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af94:	2b82      	cmp	r3, #130	; 0x82
 800af96:	d111      	bne.n	800afbc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4618      	mov	r0, r3
 800af9e:	f002 fb89 	bl	800d6b4 <SDMMC_CmdStopTransfer>
 800afa2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d008      	beq.n	800afbc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	431a      	orrs	r2, r3
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800afb6:	68f8      	ldr	r0, [r7, #12]
 800afb8:	f7ff fd58 	bl	800aa6c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f022 0208 	bic.w	r2, r2, #8
 800afca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f240 523a 	movw	r2, #1338	; 0x53a
 800afd4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2201      	movs	r2, #1
 800afda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2200      	movs	r2, #0
 800afe2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800afe4:	68f8      	ldr	r0, [r7, #12]
 800afe6:	f7f5 fb8d 	bl	8000704 <HAL_SD_RxCpltCallback>
#endif
}
 800afea:	bf00      	nop
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
	...

0800aff4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b086      	sub	sp, #24
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b000:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7f9 fcf4 	bl	80049f0 <HAL_DMA_GetError>
 800b008:	4603      	mov	r3, r0
 800b00a:	2b02      	cmp	r3, #2
 800b00c:	d03e      	beq.n	800b08c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b014:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b01a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b01c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	2b01      	cmp	r3, #1
 800b022:	d002      	beq.n	800b02a <SD_DMAError+0x36>
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2b01      	cmp	r3, #1
 800b028:	d12d      	bne.n	800b086 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a19      	ldr	r2, [pc, #100]	; (800b094 <SD_DMAError+0xa0>)
 800b030:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b040:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b046:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b04e:	6978      	ldr	r0, [r7, #20]
 800b050:	f7ff ff62 	bl	800af18 <HAL_SD_GetCardState>
 800b054:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	2b06      	cmp	r3, #6
 800b05a:	d002      	beq.n	800b062 <SD_DMAError+0x6e>
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	2b05      	cmp	r3, #5
 800b060:	d10a      	bne.n	800b078 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4618      	mov	r0, r3
 800b068:	f002 fb24 	bl	800d6b4 <SDMMC_CmdStopTransfer>
 800b06c:	4602      	mov	r2, r0
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b072:	431a      	orrs	r2, r3
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	2201      	movs	r2, #1
 800b07c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	2200      	movs	r2, #0
 800b084:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b086:	6978      	ldr	r0, [r7, #20]
 800b088:	f7ff fcf0 	bl	800aa6c <HAL_SD_ErrorCallback>
#endif
  }
}
 800b08c:	bf00      	nop
 800b08e:	3718      	adds	r7, #24
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	004005ff 	.word	0x004005ff

0800b098 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b098:	b5b0      	push	{r4, r5, r7, lr}
 800b09a:	b094      	sub	sp, #80	; 0x50
 800b09c:	af04      	add	r7, sp, #16
 800b09e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f002 f9d5 	bl	800d458 <SDMMC_GetPowerState>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d102      	bne.n	800b0ba <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b0b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b0b8:	e0b7      	b.n	800b22a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0be:	2b03      	cmp	r3, #3
 800b0c0:	d02f      	beq.n	800b122 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f002 fbff 	bl	800d8ca <SDMMC_CmdSendCID>
 800b0cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d001      	beq.n	800b0d8 <SD_InitCard+0x40>
    {
      return errorstate;
 800b0d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0d6:	e0a8      	b.n	800b22a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	2100      	movs	r1, #0
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f002 f9ff 	bl	800d4e2 <SDMMC_GetResponse>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	2104      	movs	r1, #4
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f002 f9f6 	bl	800d4e2 <SDMMC_GetResponse>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	2108      	movs	r1, #8
 800b102:	4618      	mov	r0, r3
 800b104:	f002 f9ed 	bl	800d4e2 <SDMMC_GetResponse>
 800b108:	4602      	mov	r2, r0
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	210c      	movs	r1, #12
 800b114:	4618      	mov	r0, r3
 800b116:	f002 f9e4 	bl	800d4e2 <SDMMC_GetResponse>
 800b11a:	4602      	mov	r2, r0
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b126:	2b03      	cmp	r3, #3
 800b128:	d00d      	beq.n	800b146 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f107 020e 	add.w	r2, r7, #14
 800b132:	4611      	mov	r1, r2
 800b134:	4618      	mov	r0, r3
 800b136:	f002 fc05 	bl	800d944 <SDMMC_CmdSetRelAdd>
 800b13a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b13c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d001      	beq.n	800b146 <SD_InitCard+0xae>
    {
      return errorstate;
 800b142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b144:	e071      	b.n	800b22a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b14a:	2b03      	cmp	r3, #3
 800b14c:	d036      	beq.n	800b1bc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b14e:	89fb      	ldrh	r3, [r7, #14]
 800b150:	461a      	mov	r2, r3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b15e:	041b      	lsls	r3, r3, #16
 800b160:	4619      	mov	r1, r3
 800b162:	4610      	mov	r0, r2
 800b164:	f002 fbcf 	bl	800d906 <SDMMC_CmdSendCSD>
 800b168:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b16a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d001      	beq.n	800b174 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b172:	e05a      	b.n	800b22a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	2100      	movs	r1, #0
 800b17a:	4618      	mov	r0, r3
 800b17c:	f002 f9b1 	bl	800d4e2 <SDMMC_GetResponse>
 800b180:	4602      	mov	r2, r0
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2104      	movs	r1, #4
 800b18c:	4618      	mov	r0, r3
 800b18e:	f002 f9a8 	bl	800d4e2 <SDMMC_GetResponse>
 800b192:	4602      	mov	r2, r0
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2108      	movs	r1, #8
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f002 f99f 	bl	800d4e2 <SDMMC_GetResponse>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	210c      	movs	r1, #12
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f002 f996 	bl	800d4e2 <SDMMC_GetResponse>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2104      	movs	r1, #4
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f002 f98d 	bl	800d4e2 <SDMMC_GetResponse>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	0d1a      	lsrs	r2, r3, #20
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b1d0:	f107 0310 	add.w	r3, r7, #16
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f7ff fc52 	bl	800aa80 <HAL_SD_GetCardCSD>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d002      	beq.n	800b1e8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b1e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b1e6:	e020      	b.n	800b22a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6819      	ldr	r1, [r3, #0]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1f0:	041b      	lsls	r3, r3, #16
 800b1f2:	f04f 0400 	mov.w	r4, #0
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	4623      	mov	r3, r4
 800b1fa:	4608      	mov	r0, r1
 800b1fc:	f002 fa7c 	bl	800d6f8 <SDMMC_CmdSelDesel>
 800b200:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b204:	2b00      	cmp	r3, #0
 800b206:	d001      	beq.n	800b20c <SD_InitCard+0x174>
  {
    return errorstate;
 800b208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b20a:	e00e      	b.n	800b22a <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681d      	ldr	r5, [r3, #0]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	466c      	mov	r4, sp
 800b214:	f103 0210 	add.w	r2, r3, #16
 800b218:	ca07      	ldmia	r2, {r0, r1, r2}
 800b21a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b21e:	3304      	adds	r3, #4
 800b220:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b222:	4628      	mov	r0, r5
 800b224:	f002 f8d0 	bl	800d3c8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b228:	2300      	movs	r3, #0
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3740      	adds	r7, #64	; 0x40
 800b22e:	46bd      	mov	sp, r7
 800b230:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b234 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b086      	sub	sp, #24
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b23c:	2300      	movs	r3, #0
 800b23e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b240:	2300      	movs	r3, #0
 800b242:	617b      	str	r3, [r7, #20]
 800b244:	2300      	movs	r3, #0
 800b246:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4618      	mov	r0, r3
 800b24e:	f002 fa76 	bl	800d73e <SDMMC_CmdGoIdleState>
 800b252:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d001      	beq.n	800b25e <SD_PowerON+0x2a>
  {
    return errorstate;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	e072      	b.n	800b344 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4618      	mov	r0, r3
 800b264:	f002 fa89 	bl	800d77a <SDMMC_CmdOperCond>
 800b268:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d00d      	beq.n	800b28c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4618      	mov	r0, r3
 800b27c:	f002 fa5f 	bl	800d73e <SDMMC_CmdGoIdleState>
 800b280:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d004      	beq.n	800b292 <SD_PowerON+0x5e>
    {
      return errorstate;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	e05b      	b.n	800b344 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2201      	movs	r2, #1
 800b290:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b296:	2b01      	cmp	r3, #1
 800b298:	d137      	bne.n	800b30a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2100      	movs	r1, #0
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f002 fa89 	bl	800d7b8 <SDMMC_CmdAppCommand>
 800b2a6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d02d      	beq.n	800b30a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b2ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b2b2:	e047      	b.n	800b344 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f002 fa7c 	bl	800d7b8 <SDMMC_CmdAppCommand>
 800b2c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d001      	beq.n	800b2cc <SD_PowerON+0x98>
    {
      return errorstate;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	e03b      	b.n	800b344 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	491e      	ldr	r1, [pc, #120]	; (800b34c <SD_PowerON+0x118>)
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f002 fa92 	bl	800d7fc <SDMMC_CmdAppOperCommand>
 800b2d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d002      	beq.n	800b2e6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b2e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b2e4:	e02e      	b.n	800b344 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2100      	movs	r1, #0
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f002 f8f8 	bl	800d4e2 <SDMMC_GetResponse>
 800b2f2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	0fdb      	lsrs	r3, r3, #31
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d101      	bne.n	800b300 <SD_PowerON+0xcc>
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e000      	b.n	800b302 <SD_PowerON+0xce>
 800b300:	2300      	movs	r3, #0
 800b302:	613b      	str	r3, [r7, #16]

    count++;
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	3301      	adds	r3, #1
 800b308:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b310:	4293      	cmp	r3, r2
 800b312:	d802      	bhi.n	800b31a <SD_PowerON+0xe6>
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d0cc      	beq.n	800b2b4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b320:	4293      	cmp	r3, r2
 800b322:	d902      	bls.n	800b32a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b324:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b328:	e00c      	b.n	800b344 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b330:	2b00      	cmp	r3, #0
 800b332:	d003      	beq.n	800b33c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2201      	movs	r2, #1
 800b338:	645a      	str	r2, [r3, #68]	; 0x44
 800b33a:	e002      	b.n	800b342 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2200      	movs	r2, #0
 800b340:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b342:	2300      	movs	r3, #0
}
 800b344:	4618      	mov	r0, r3
 800b346:	3718      	adds	r7, #24
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	c1100000 	.word	0xc1100000

0800b350 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d102      	bne.n	800b366 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b360:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b364:	e018      	b.n	800b398 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b36e:	041b      	lsls	r3, r3, #16
 800b370:	4619      	mov	r1, r3
 800b372:	4610      	mov	r0, r2
 800b374:	f002 fb07 	bl	800d986 <SDMMC_CmdSendStatus>
 800b378:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d001      	beq.n	800b384 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	e009      	b.n	800b398 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2100      	movs	r1, #0
 800b38a:	4618      	mov	r0, r3
 800b38c:	f002 f8a9 	bl	800d4e2 <SDMMC_GetResponse>
 800b390:	4602      	mov	r2, r0
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b396:	2300      	movs	r3, #0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3710      	adds	r7, #16
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b086      	sub	sp, #24
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	60fb      	str	r3, [r7, #12]
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f002 f893 	bl	800d4e2 <SDMMC_GetResponse>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3c6:	d102      	bne.n	800b3ce <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b3c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b3cc:	e02f      	b.n	800b42e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b3ce:	f107 030c 	add.w	r3, r7, #12
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	6878      	ldr	r0, [r7, #4]
 800b3d6:	f000 f879 	bl	800b4cc <SD_FindSCR>
 800b3da:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d001      	beq.n	800b3e6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	e023      	b.n	800b42e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d01c      	beq.n	800b42a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3f8:	041b      	lsls	r3, r3, #16
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	4610      	mov	r0, r2
 800b3fe:	f002 f9db 	bl	800d7b8 <SDMMC_CmdAppCommand>
 800b402:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d001      	beq.n	800b40e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	e00f      	b.n	800b42e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2102      	movs	r1, #2
 800b414:	4618      	mov	r0, r3
 800b416:	f002 fa15 	bl	800d844 <SDMMC_CmdBusWidth>
 800b41a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d001      	beq.n	800b426 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	e003      	b.n	800b42e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b426:	2300      	movs	r3, #0
 800b428:	e001      	b.n	800b42e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b42a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3718      	adds	r7, #24
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b436:	b580      	push	{r7, lr}
 800b438:	b086      	sub	sp, #24
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b43e:	2300      	movs	r3, #0
 800b440:	60fb      	str	r3, [r7, #12]
 800b442:	2300      	movs	r3, #0
 800b444:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2100      	movs	r1, #0
 800b44c:	4618      	mov	r0, r3
 800b44e:	f002 f848 	bl	800d4e2 <SDMMC_GetResponse>
 800b452:	4603      	mov	r3, r0
 800b454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b458:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b45c:	d102      	bne.n	800b464 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b45e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b462:	e02f      	b.n	800b4c4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b464:	f107 030c 	add.w	r3, r7, #12
 800b468:	4619      	mov	r1, r3
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 f82e 	bl	800b4cc <SD_FindSCR>
 800b470:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d001      	beq.n	800b47c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	e023      	b.n	800b4c4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b482:	2b00      	cmp	r3, #0
 800b484:	d01c      	beq.n	800b4c0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681a      	ldr	r2, [r3, #0]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b48e:	041b      	lsls	r3, r3, #16
 800b490:	4619      	mov	r1, r3
 800b492:	4610      	mov	r0, r2
 800b494:	f002 f990 	bl	800d7b8 <SDMMC_CmdAppCommand>
 800b498:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d001      	beq.n	800b4a4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	e00f      	b.n	800b4c4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f002 f9ca 	bl	800d844 <SDMMC_CmdBusWidth>
 800b4b0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d001      	beq.n	800b4bc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	e003      	b.n	800b4c4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	e001      	b.n	800b4c4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b4c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3718      	adds	r7, #24
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b4cc:	b590      	push	{r4, r7, lr}
 800b4ce:	b08f      	sub	sp, #60	; 0x3c
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b4d6:	f7f8 fd2f 	bl	8003f38 <HAL_GetTick>
 800b4da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	60bb      	str	r3, [r7, #8]
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	2108      	movs	r1, #8
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f002 f834 	bl	800d560 <SDMMC_CmdBlockLength>
 800b4f8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d001      	beq.n	800b504 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b502:	e0a9      	b.n	800b658 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681a      	ldr	r2, [r3, #0]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b50c:	041b      	lsls	r3, r3, #16
 800b50e:	4619      	mov	r1, r3
 800b510:	4610      	mov	r0, r2
 800b512:	f002 f951 	bl	800d7b8 <SDMMC_CmdAppCommand>
 800b516:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d001      	beq.n	800b522 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b520:	e09a      	b.n	800b658 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b522:	f04f 33ff 	mov.w	r3, #4294967295
 800b526:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b528:	2308      	movs	r3, #8
 800b52a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b52c:	2330      	movs	r3, #48	; 0x30
 800b52e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b530:	2302      	movs	r3, #2
 800b532:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b534:	2300      	movs	r3, #0
 800b536:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b538:	2301      	movs	r3, #1
 800b53a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f107 0210 	add.w	r2, r7, #16
 800b544:	4611      	mov	r1, r2
 800b546:	4618      	mov	r0, r3
 800b548:	f001 ffde 	bl	800d508 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4618      	mov	r0, r3
 800b552:	f002 f999 	bl	800d888 <SDMMC_CmdSendSCR>
 800b556:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d022      	beq.n	800b5a4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800b55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b560:	e07a      	b.n	800b658 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00e      	beq.n	800b58e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6819      	ldr	r1, [r3, #0]
 800b574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	f107 0208 	add.w	r2, r7, #8
 800b57c:	18d4      	adds	r4, r2, r3
 800b57e:	4608      	mov	r0, r1
 800b580:	f001 ff4e 	bl	800d420 <SDMMC_ReadFIFO>
 800b584:	4603      	mov	r3, r0
 800b586:	6023      	str	r3, [r4, #0]
      index++;
 800b588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b58a:	3301      	adds	r3, #1
 800b58c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b58e:	f7f8 fcd3 	bl	8003f38 <HAL_GetTick>
 800b592:	4602      	mov	r2, r0
 800b594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b596:	1ad3      	subs	r3, r2, r3
 800b598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b59c:	d102      	bne.n	800b5a4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b59e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b5a2:	e059      	b.n	800b658 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5aa:	f240 432a 	movw	r3, #1066	; 0x42a
 800b5ae:	4013      	ands	r3, r2
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d0d6      	beq.n	800b562 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5ba:	f003 0308 	and.w	r3, r3, #8
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d005      	beq.n	800b5ce <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	2208      	movs	r2, #8
 800b5c8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b5ca:	2308      	movs	r3, #8
 800b5cc:	e044      	b.n	800b658 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5d4:	f003 0302 	and.w	r3, r3, #2
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d005      	beq.n	800b5e8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2202      	movs	r2, #2
 800b5e2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b5e4:	2302      	movs	r3, #2
 800b5e6:	e037      	b.n	800b658 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5ee:	f003 0320 	and.w	r3, r3, #32
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d005      	beq.n	800b602 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2220      	movs	r2, #32
 800b5fc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b5fe:	2320      	movs	r3, #32
 800b600:	e02a      	b.n	800b658 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f240 523a 	movw	r2, #1338	; 0x53a
 800b60a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	061a      	lsls	r2, r3, #24
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	021b      	lsls	r3, r3, #8
 800b614:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b618:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	0a1b      	lsrs	r3, r3, #8
 800b61e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b622:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	0e1b      	lsrs	r3, r3, #24
 800b628:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62c:	601a      	str	r2, [r3, #0]
    scr++;
 800b62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b630:	3304      	adds	r3, #4
 800b632:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	061a      	lsls	r2, r3, #24
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	021b      	lsls	r3, r3, #8
 800b63c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b640:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	0a1b      	lsrs	r3, r3, #8
 800b646:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b64a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	0e1b      	lsrs	r3, r3, #24
 800b650:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b654:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b656:	2300      	movs	r3, #0
}
 800b658:	4618      	mov	r0, r3
 800b65a:	373c      	adds	r7, #60	; 0x3c
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd90      	pop	{r4, r7, pc}

0800b660 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d101      	bne.n	800b674 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b670:	2301      	movs	r3, #1
 800b672:	e025      	b.n	800b6c0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d106      	bne.n	800b68e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2200      	movs	r2, #0
 800b684:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f7f7 ff73 	bl	8003574 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2202      	movs	r2, #2
 800b692:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	3304      	adds	r3, #4
 800b69e:	4619      	mov	r1, r3
 800b6a0:	4610      	mov	r0, r2
 800b6a2:	f001 fd9f 	bl	800d1e4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6818      	ldr	r0, [r3, #0]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	6839      	ldr	r1, [r7, #0]
 800b6b2:	f001 fe09 	bl	800d2c8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800b6be:	2300      	movs	r3, #0
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3708      	adds	r7, #8
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d101      	bne.n	800b6da <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	e04c      	b.n	800b774 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d106      	bne.n	800b6f4 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f7f7 fc1c 	bl	8002f2c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2202      	movs	r2, #2
 800b6f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f022 0203 	bic.w	r2, r2, #3
 800b70a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800b714:	68fa      	ldr	r2, [r7, #12]
 800b716:	4b19      	ldr	r3, [pc, #100]	; (800b77c <HAL_SPDIFRX_Init+0xb4>)
 800b718:	4013      	ands	r3, r2
 800b71a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800b724:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800b72a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800b730:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800b736:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800b73c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800b742:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800b748:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 800b74e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 800b754:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800b756:	68fa      	ldr	r2, [r7, #12]
 800b758:	4313      	orrs	r3, r2
 800b75a:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2201      	movs	r2, #1
 800b76e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800b772:	2300      	movs	r3, #0
}
 800b774:	4618      	mov	r0, r3
 800b776:	3710      	adds	r7, #16
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	fff88407 	.word	0xfff88407

0800b780 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d101      	bne.n	800b792 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b78e:	2301      	movs	r3, #1
 800b790:	e084      	b.n	800b89c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2200      	movs	r2, #0
 800b796:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d106      	bne.n	800b7b2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f7f7 fbff 	bl	8002fb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2202      	movs	r2, #2
 800b7b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7c8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b7d2:	d902      	bls.n	800b7da <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	60fb      	str	r3, [r7, #12]
 800b7d8:	e002      	b.n	800b7e0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b7da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	68db      	ldr	r3, [r3, #12]
 800b7e4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b7e8:	d007      	beq.n	800b7fa <HAL_SPI_Init+0x7a>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b7f2:	d002      	beq.n	800b7fa <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d10b      	bne.n	800b81a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	68db      	ldr	r3, [r3, #12]
 800b806:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b80a:	d903      	bls.n	800b814 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2202      	movs	r2, #2
 800b810:	631a      	str	r2, [r3, #48]	; 0x30
 800b812:	e002      	b.n	800b81a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2201      	movs	r2, #1
 800b818:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	685a      	ldr	r2, [r3, #4]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	689b      	ldr	r3, [r3, #8]
 800b822:	431a      	orrs	r2, r3
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	691b      	ldr	r3, [r3, #16]
 800b828:	431a      	orrs	r2, r3
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	695b      	ldr	r3, [r3, #20]
 800b82e:	431a      	orrs	r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	699b      	ldr	r3, [r3, #24]
 800b834:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b838:	431a      	orrs	r2, r3
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	69db      	ldr	r3, [r3, #28]
 800b83e:	431a      	orrs	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6a1b      	ldr	r3, [r3, #32]
 800b844:	ea42 0103 	orr.w	r1, r2, r3
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	430a      	orrs	r2, r1
 800b852:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	699b      	ldr	r3, [r3, #24]
 800b858:	0c1b      	lsrs	r3, r3, #16
 800b85a:	f003 0204 	and.w	r2, r3, #4
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b862:	431a      	orrs	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b868:	431a      	orrs	r2, r3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	ea42 0103 	orr.w	r1, r2, r3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	68fa      	ldr	r2, [r7, #12]
 800b878:	430a      	orrs	r2, r1
 800b87a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	69da      	ldr	r2, [r3, #28]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b88a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2200      	movs	r2, #0
 800b890:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2201      	movs	r2, #1
 800b896:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b89a:	2300      	movs	r3, #0
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3710      	adds	r7, #16
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d101      	bne.n	800b8b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	e01d      	b.n	800b8f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d106      	bne.n	800b8d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f7f7 fbd2 	bl	8003074 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2202      	movs	r2, #2
 800b8d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	3304      	adds	r3, #4
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	4610      	mov	r0, r2
 800b8e4:	f000 fb78 	bl	800bfd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b8f0:	2300      	movs	r3, #0
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
	...

0800b8fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b085      	sub	sp, #20
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	68da      	ldr	r2, [r3, #12]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f042 0201 	orr.w	r2, r2, #1
 800b912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	689a      	ldr	r2, [r3, #8]
 800b91a:	4b0c      	ldr	r3, [pc, #48]	; (800b94c <HAL_TIM_Base_Start_IT+0x50>)
 800b91c:	4013      	ands	r3, r2
 800b91e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2b06      	cmp	r3, #6
 800b924:	d00b      	beq.n	800b93e <HAL_TIM_Base_Start_IT+0x42>
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b92c:	d007      	beq.n	800b93e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f042 0201 	orr.w	r2, r2, #1
 800b93c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b93e:	2300      	movs	r3, #0
}
 800b940:	4618      	mov	r0, r3
 800b942:	3714      	adds	r7, #20
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr
 800b94c:	00010007 	.word	0x00010007

0800b950 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d101      	bne.n	800b962 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b95e:	2301      	movs	r3, #1
 800b960:	e01d      	b.n	800b99e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d106      	bne.n	800b97c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f7f7 fbea 	bl	8003150 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2202      	movs	r2, #2
 800b980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	3304      	adds	r3, #4
 800b98c:	4619      	mov	r1, r3
 800b98e:	4610      	mov	r0, r2
 800b990:	f000 fb22 	bl	800bfd8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2201      	movs	r2, #1
 800b998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b99c:	2300      	movs	r3, #0
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3708      	adds	r7, #8
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b082      	sub	sp, #8
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	691b      	ldr	r3, [r3, #16]
 800b9b4:	f003 0302 	and.w	r3, r3, #2
 800b9b8:	2b02      	cmp	r3, #2
 800b9ba:	d122      	bne.n	800ba02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	68db      	ldr	r3, [r3, #12]
 800b9c2:	f003 0302 	and.w	r3, r3, #2
 800b9c6:	2b02      	cmp	r3, #2
 800b9c8:	d11b      	bne.n	800ba02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f06f 0202 	mvn.w	r2, #2
 800b9d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	699b      	ldr	r3, [r3, #24]
 800b9e0:	f003 0303 	and.w	r3, r3, #3
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d003      	beq.n	800b9f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 fad7 	bl	800bf9c <HAL_TIM_IC_CaptureCallback>
 800b9ee:	e005      	b.n	800b9fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 fac9 	bl	800bf88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 fada 	bl	800bfb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	691b      	ldr	r3, [r3, #16]
 800ba08:	f003 0304 	and.w	r3, r3, #4
 800ba0c:	2b04      	cmp	r3, #4
 800ba0e:	d122      	bne.n	800ba56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	68db      	ldr	r3, [r3, #12]
 800ba16:	f003 0304 	and.w	r3, r3, #4
 800ba1a:	2b04      	cmp	r3, #4
 800ba1c:	d11b      	bne.n	800ba56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f06f 0204 	mvn.w	r2, #4
 800ba26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2202      	movs	r2, #2
 800ba2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	699b      	ldr	r3, [r3, #24]
 800ba34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d003      	beq.n	800ba44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 faad 	bl	800bf9c <HAL_TIM_IC_CaptureCallback>
 800ba42:	e005      	b.n	800ba50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 fa9f 	bl	800bf88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 fab0 	bl	800bfb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	691b      	ldr	r3, [r3, #16]
 800ba5c:	f003 0308 	and.w	r3, r3, #8
 800ba60:	2b08      	cmp	r3, #8
 800ba62:	d122      	bne.n	800baaa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	68db      	ldr	r3, [r3, #12]
 800ba6a:	f003 0308 	and.w	r3, r3, #8
 800ba6e:	2b08      	cmp	r3, #8
 800ba70:	d11b      	bne.n	800baaa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f06f 0208 	mvn.w	r2, #8
 800ba7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2204      	movs	r2, #4
 800ba80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	69db      	ldr	r3, [r3, #28]
 800ba88:	f003 0303 	and.w	r3, r3, #3
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d003      	beq.n	800ba98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 fa83 	bl	800bf9c <HAL_TIM_IC_CaptureCallback>
 800ba96:	e005      	b.n	800baa4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	f000 fa75 	bl	800bf88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 fa86 	bl	800bfb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	691b      	ldr	r3, [r3, #16]
 800bab0:	f003 0310 	and.w	r3, r3, #16
 800bab4:	2b10      	cmp	r3, #16
 800bab6:	d122      	bne.n	800bafe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	68db      	ldr	r3, [r3, #12]
 800babe:	f003 0310 	and.w	r3, r3, #16
 800bac2:	2b10      	cmp	r3, #16
 800bac4:	d11b      	bne.n	800bafe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f06f 0210 	mvn.w	r2, #16
 800bace:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2208      	movs	r2, #8
 800bad4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	69db      	ldr	r3, [r3, #28]
 800badc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d003      	beq.n	800baec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f000 fa59 	bl	800bf9c <HAL_TIM_IC_CaptureCallback>
 800baea:	e005      	b.n	800baf8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 fa4b 	bl	800bf88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 fa5c 	bl	800bfb0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	691b      	ldr	r3, [r3, #16]
 800bb04:	f003 0301 	and.w	r3, r3, #1
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d10e      	bne.n	800bb2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	68db      	ldr	r3, [r3, #12]
 800bb12:	f003 0301 	and.w	r3, r3, #1
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d107      	bne.n	800bb2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f06f 0201 	mvn.w	r2, #1
 800bb22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f7f6 fc83 	bl	8002430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb34:	2b80      	cmp	r3, #128	; 0x80
 800bb36:	d10e      	bne.n	800bb56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	68db      	ldr	r3, [r3, #12]
 800bb3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb42:	2b80      	cmp	r3, #128	; 0x80
 800bb44:	d107      	bne.n	800bb56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bb4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 feef 	bl	800c934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	691b      	ldr	r3, [r3, #16]
 800bb5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb64:	d10e      	bne.n	800bb84 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb70:	2b80      	cmp	r3, #128	; 0x80
 800bb72:	d107      	bne.n	800bb84 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bb7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 fee2 	bl	800c948 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	691b      	ldr	r3, [r3, #16]
 800bb8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb8e:	2b40      	cmp	r3, #64	; 0x40
 800bb90:	d10e      	bne.n	800bbb0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb9c:	2b40      	cmp	r3, #64	; 0x40
 800bb9e:	d107      	bne.n	800bbb0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	f000 fa0a 	bl	800bfc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	691b      	ldr	r3, [r3, #16]
 800bbb6:	f003 0320 	and.w	r3, r3, #32
 800bbba:	2b20      	cmp	r3, #32
 800bbbc:	d10e      	bne.n	800bbdc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	f003 0320 	and.w	r3, r3, #32
 800bbc8:	2b20      	cmp	r3, #32
 800bbca:	d107      	bne.n	800bbdc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f06f 0220 	mvn.w	r2, #32
 800bbd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f000 fea2 	bl	800c920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bbdc:	bf00      	nop
 800bbde:	3708      	adds	r7, #8
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	60f8      	str	r0, [r7, #12]
 800bbec:	60b9      	str	r1, [r7, #8]
 800bbee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbf6:	2b01      	cmp	r3, #1
 800bbf8:	d101      	bne.n	800bbfe <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bbfa:	2302      	movs	r3, #2
 800bbfc:	e105      	b.n	800be0a <HAL_TIM_PWM_ConfigChannel+0x226>
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2201      	movs	r2, #1
 800bc02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2202      	movs	r2, #2
 800bc0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2b14      	cmp	r3, #20
 800bc12:	f200 80f0 	bhi.w	800bdf6 <HAL_TIM_PWM_ConfigChannel+0x212>
 800bc16:	a201      	add	r2, pc, #4	; (adr r2, 800bc1c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800bc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc1c:	0800bc71 	.word	0x0800bc71
 800bc20:	0800bdf7 	.word	0x0800bdf7
 800bc24:	0800bdf7 	.word	0x0800bdf7
 800bc28:	0800bdf7 	.word	0x0800bdf7
 800bc2c:	0800bcb1 	.word	0x0800bcb1
 800bc30:	0800bdf7 	.word	0x0800bdf7
 800bc34:	0800bdf7 	.word	0x0800bdf7
 800bc38:	0800bdf7 	.word	0x0800bdf7
 800bc3c:	0800bcf3 	.word	0x0800bcf3
 800bc40:	0800bdf7 	.word	0x0800bdf7
 800bc44:	0800bdf7 	.word	0x0800bdf7
 800bc48:	0800bdf7 	.word	0x0800bdf7
 800bc4c:	0800bd33 	.word	0x0800bd33
 800bc50:	0800bdf7 	.word	0x0800bdf7
 800bc54:	0800bdf7 	.word	0x0800bdf7
 800bc58:	0800bdf7 	.word	0x0800bdf7
 800bc5c:	0800bd75 	.word	0x0800bd75
 800bc60:	0800bdf7 	.word	0x0800bdf7
 800bc64:	0800bdf7 	.word	0x0800bdf7
 800bc68:	0800bdf7 	.word	0x0800bdf7
 800bc6c:	0800bdb5 	.word	0x0800bdb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	68b9      	ldr	r1, [r7, #8]
 800bc76:	4618      	mov	r0, r3
 800bc78:	f000 fa4e 	bl	800c118 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	699a      	ldr	r2, [r3, #24]
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f042 0208 	orr.w	r2, r2, #8
 800bc8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	699a      	ldr	r2, [r3, #24]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f022 0204 	bic.w	r2, r2, #4
 800bc9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	6999      	ldr	r1, [r3, #24]
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	691a      	ldr	r2, [r3, #16]
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	430a      	orrs	r2, r1
 800bcac:	619a      	str	r2, [r3, #24]
      break;
 800bcae:	e0a3      	b.n	800bdf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	68b9      	ldr	r1, [r7, #8]
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f000 faa0 	bl	800c1fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	699a      	ldr	r2, [r3, #24]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bcca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	699a      	ldr	r2, [r3, #24]
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bcda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	6999      	ldr	r1, [r3, #24]
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	691b      	ldr	r3, [r3, #16]
 800bce6:	021a      	lsls	r2, r3, #8
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	430a      	orrs	r2, r1
 800bcee:	619a      	str	r2, [r3, #24]
      break;
 800bcf0:	e082      	b.n	800bdf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	68b9      	ldr	r1, [r7, #8]
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f000 faf7 	bl	800c2ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	69da      	ldr	r2, [r3, #28]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f042 0208 	orr.w	r2, r2, #8
 800bd0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	69da      	ldr	r2, [r3, #28]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f022 0204 	bic.w	r2, r2, #4
 800bd1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	69d9      	ldr	r1, [r3, #28]
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	691a      	ldr	r2, [r3, #16]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	430a      	orrs	r2, r1
 800bd2e:	61da      	str	r2, [r3, #28]
      break;
 800bd30:	e062      	b.n	800bdf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	68b9      	ldr	r1, [r7, #8]
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f000 fb4d 	bl	800c3d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	69da      	ldr	r2, [r3, #28]
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	69da      	ldr	r2, [r3, #28]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	69d9      	ldr	r1, [r3, #28]
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	691b      	ldr	r3, [r3, #16]
 800bd68:	021a      	lsls	r2, r3, #8
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	430a      	orrs	r2, r1
 800bd70:	61da      	str	r2, [r3, #28]
      break;
 800bd72:	e041      	b.n	800bdf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	68b9      	ldr	r1, [r7, #8]
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f000 fb84 	bl	800c488 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f042 0208 	orr.w	r2, r2, #8
 800bd8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f022 0204 	bic.w	r2, r2, #4
 800bd9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	691a      	ldr	r2, [r3, #16]
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	430a      	orrs	r2, r1
 800bdb0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bdb2:	e021      	b.n	800bdf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	68b9      	ldr	r1, [r7, #8]
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f000 fbb6 	bl	800c52c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bdce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	691b      	ldr	r3, [r3, #16]
 800bdea:	021a      	lsls	r2, r3, #8
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	430a      	orrs	r2, r1
 800bdf2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bdf4:	e000      	b.n	800bdf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800bdf6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2200      	movs	r2, #0
 800be04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
 800be12:	bf00      	nop

0800be14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be24:	2b01      	cmp	r3, #1
 800be26:	d101      	bne.n	800be2c <HAL_TIM_ConfigClockSource+0x18>
 800be28:	2302      	movs	r3, #2
 800be2a:	e0a6      	b.n	800bf7a <HAL_TIM_ConfigClockSource+0x166>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2201      	movs	r2, #1
 800be30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2202      	movs	r2, #2
 800be38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800be44:	68fa      	ldr	r2, [r7, #12]
 800be46:	4b4f      	ldr	r3, [pc, #316]	; (800bf84 <HAL_TIM_ConfigClockSource+0x170>)
 800be48:	4013      	ands	r3, r2
 800be4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	68fa      	ldr	r2, [r7, #12]
 800be5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	2b40      	cmp	r3, #64	; 0x40
 800be62:	d067      	beq.n	800bf34 <HAL_TIM_ConfigClockSource+0x120>
 800be64:	2b40      	cmp	r3, #64	; 0x40
 800be66:	d80b      	bhi.n	800be80 <HAL_TIM_ConfigClockSource+0x6c>
 800be68:	2b10      	cmp	r3, #16
 800be6a:	d073      	beq.n	800bf54 <HAL_TIM_ConfigClockSource+0x140>
 800be6c:	2b10      	cmp	r3, #16
 800be6e:	d802      	bhi.n	800be76 <HAL_TIM_ConfigClockSource+0x62>
 800be70:	2b00      	cmp	r3, #0
 800be72:	d06f      	beq.n	800bf54 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800be74:	e078      	b.n	800bf68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800be76:	2b20      	cmp	r3, #32
 800be78:	d06c      	beq.n	800bf54 <HAL_TIM_ConfigClockSource+0x140>
 800be7a:	2b30      	cmp	r3, #48	; 0x30
 800be7c:	d06a      	beq.n	800bf54 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800be7e:	e073      	b.n	800bf68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800be80:	2b70      	cmp	r3, #112	; 0x70
 800be82:	d00d      	beq.n	800bea0 <HAL_TIM_ConfigClockSource+0x8c>
 800be84:	2b70      	cmp	r3, #112	; 0x70
 800be86:	d804      	bhi.n	800be92 <HAL_TIM_ConfigClockSource+0x7e>
 800be88:	2b50      	cmp	r3, #80	; 0x50
 800be8a:	d033      	beq.n	800bef4 <HAL_TIM_ConfigClockSource+0xe0>
 800be8c:	2b60      	cmp	r3, #96	; 0x60
 800be8e:	d041      	beq.n	800bf14 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800be90:	e06a      	b.n	800bf68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800be92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be96:	d066      	beq.n	800bf66 <HAL_TIM_ConfigClockSource+0x152>
 800be98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be9c:	d017      	beq.n	800bece <HAL_TIM_ConfigClockSource+0xba>
      break;
 800be9e:	e063      	b.n	800bf68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6818      	ldr	r0, [r3, #0]
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	6899      	ldr	r1, [r3, #8]
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	685a      	ldr	r2, [r3, #4]
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	f000 fc0a 	bl	800c6c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	689b      	ldr	r3, [r3, #8]
 800beba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bec2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	68fa      	ldr	r2, [r7, #12]
 800beca:	609a      	str	r2, [r3, #8]
      break;
 800becc:	e04c      	b.n	800bf68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6818      	ldr	r0, [r3, #0]
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	6899      	ldr	r1, [r3, #8]
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	685a      	ldr	r2, [r3, #4]
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	68db      	ldr	r3, [r3, #12]
 800bede:	f000 fbf3 	bl	800c6c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	689a      	ldr	r2, [r3, #8]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bef0:	609a      	str	r2, [r3, #8]
      break;
 800bef2:	e039      	b.n	800bf68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6818      	ldr	r0, [r3, #0]
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	6859      	ldr	r1, [r3, #4]
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	68db      	ldr	r3, [r3, #12]
 800bf00:	461a      	mov	r2, r3
 800bf02:	f000 fb67 	bl	800c5d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	2150      	movs	r1, #80	; 0x50
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f000 fbc0 	bl	800c692 <TIM_ITRx_SetConfig>
      break;
 800bf12:	e029      	b.n	800bf68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6818      	ldr	r0, [r3, #0]
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	6859      	ldr	r1, [r3, #4]
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	461a      	mov	r2, r3
 800bf22:	f000 fb86 	bl	800c632 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	2160      	movs	r1, #96	; 0x60
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f000 fbb0 	bl	800c692 <TIM_ITRx_SetConfig>
      break;
 800bf32:	e019      	b.n	800bf68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6818      	ldr	r0, [r3, #0]
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	6859      	ldr	r1, [r3, #4]
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	68db      	ldr	r3, [r3, #12]
 800bf40:	461a      	mov	r2, r3
 800bf42:	f000 fb47 	bl	800c5d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	2140      	movs	r1, #64	; 0x40
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f000 fba0 	bl	800c692 <TIM_ITRx_SetConfig>
      break;
 800bf52:	e009      	b.n	800bf68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681a      	ldr	r2, [r3, #0]
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	4610      	mov	r0, r2
 800bf60:	f000 fb97 	bl	800c692 <TIM_ITRx_SetConfig>
      break;
 800bf64:	e000      	b.n	800bf68 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800bf66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3710      	adds	r7, #16
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	fffeff88 	.word	0xfffeff88

0800bf88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b083      	sub	sp, #12
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bf90:	bf00      	nop
 800bf92:	370c      	adds	r7, #12
 800bf94:	46bd      	mov	sp, r7
 800bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9a:	4770      	bx	lr

0800bf9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bfa4:	bf00      	nop
 800bfa6:	370c      	adds	r7, #12
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr

0800bfb0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bfb8:	bf00      	nop
 800bfba:	370c      	adds	r7, #12
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bfcc:	bf00      	nop
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	4a40      	ldr	r2, [pc, #256]	; (800c0ec <TIM_Base_SetConfig+0x114>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d013      	beq.n	800c018 <TIM_Base_SetConfig+0x40>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bff6:	d00f      	beq.n	800c018 <TIM_Base_SetConfig+0x40>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	4a3d      	ldr	r2, [pc, #244]	; (800c0f0 <TIM_Base_SetConfig+0x118>)
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d00b      	beq.n	800c018 <TIM_Base_SetConfig+0x40>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	4a3c      	ldr	r2, [pc, #240]	; (800c0f4 <TIM_Base_SetConfig+0x11c>)
 800c004:	4293      	cmp	r3, r2
 800c006:	d007      	beq.n	800c018 <TIM_Base_SetConfig+0x40>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	4a3b      	ldr	r2, [pc, #236]	; (800c0f8 <TIM_Base_SetConfig+0x120>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d003      	beq.n	800c018 <TIM_Base_SetConfig+0x40>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	4a3a      	ldr	r2, [pc, #232]	; (800c0fc <TIM_Base_SetConfig+0x124>)
 800c014:	4293      	cmp	r3, r2
 800c016:	d108      	bne.n	800c02a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c01e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	68fa      	ldr	r2, [r7, #12]
 800c026:	4313      	orrs	r3, r2
 800c028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	4a2f      	ldr	r2, [pc, #188]	; (800c0ec <TIM_Base_SetConfig+0x114>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d02b      	beq.n	800c08a <TIM_Base_SetConfig+0xb2>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c038:	d027      	beq.n	800c08a <TIM_Base_SetConfig+0xb2>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	4a2c      	ldr	r2, [pc, #176]	; (800c0f0 <TIM_Base_SetConfig+0x118>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d023      	beq.n	800c08a <TIM_Base_SetConfig+0xb2>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	4a2b      	ldr	r2, [pc, #172]	; (800c0f4 <TIM_Base_SetConfig+0x11c>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d01f      	beq.n	800c08a <TIM_Base_SetConfig+0xb2>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	4a2a      	ldr	r2, [pc, #168]	; (800c0f8 <TIM_Base_SetConfig+0x120>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d01b      	beq.n	800c08a <TIM_Base_SetConfig+0xb2>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	4a29      	ldr	r2, [pc, #164]	; (800c0fc <TIM_Base_SetConfig+0x124>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d017      	beq.n	800c08a <TIM_Base_SetConfig+0xb2>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	4a28      	ldr	r2, [pc, #160]	; (800c100 <TIM_Base_SetConfig+0x128>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d013      	beq.n	800c08a <TIM_Base_SetConfig+0xb2>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	4a27      	ldr	r2, [pc, #156]	; (800c104 <TIM_Base_SetConfig+0x12c>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d00f      	beq.n	800c08a <TIM_Base_SetConfig+0xb2>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	4a26      	ldr	r2, [pc, #152]	; (800c108 <TIM_Base_SetConfig+0x130>)
 800c06e:	4293      	cmp	r3, r2
 800c070:	d00b      	beq.n	800c08a <TIM_Base_SetConfig+0xb2>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	4a25      	ldr	r2, [pc, #148]	; (800c10c <TIM_Base_SetConfig+0x134>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d007      	beq.n	800c08a <TIM_Base_SetConfig+0xb2>
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	4a24      	ldr	r2, [pc, #144]	; (800c110 <TIM_Base_SetConfig+0x138>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d003      	beq.n	800c08a <TIM_Base_SetConfig+0xb2>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	4a23      	ldr	r2, [pc, #140]	; (800c114 <TIM_Base_SetConfig+0x13c>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d108      	bne.n	800c09c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	68db      	ldr	r3, [r3, #12]
 800c096:	68fa      	ldr	r2, [r7, #12]
 800c098:	4313      	orrs	r3, r2
 800c09a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	695b      	ldr	r3, [r3, #20]
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	68fa      	ldr	r2, [r7, #12]
 800c0ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	689a      	ldr	r2, [r3, #8]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	4a0a      	ldr	r2, [pc, #40]	; (800c0ec <TIM_Base_SetConfig+0x114>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d003      	beq.n	800c0d0 <TIM_Base_SetConfig+0xf8>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	4a0c      	ldr	r2, [pc, #48]	; (800c0fc <TIM_Base_SetConfig+0x124>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d103      	bne.n	800c0d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	691a      	ldr	r2, [r3, #16]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	615a      	str	r2, [r3, #20]
}
 800c0de:	bf00      	nop
 800c0e0:	3714      	adds	r7, #20
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr
 800c0ea:	bf00      	nop
 800c0ec:	40010000 	.word	0x40010000
 800c0f0:	40000400 	.word	0x40000400
 800c0f4:	40000800 	.word	0x40000800
 800c0f8:	40000c00 	.word	0x40000c00
 800c0fc:	40010400 	.word	0x40010400
 800c100:	40014000 	.word	0x40014000
 800c104:	40014400 	.word	0x40014400
 800c108:	40014800 	.word	0x40014800
 800c10c:	40001800 	.word	0x40001800
 800c110:	40001c00 	.word	0x40001c00
 800c114:	40002000 	.word	0x40002000

0800c118 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c118:	b480      	push	{r7}
 800c11a:	b087      	sub	sp, #28
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6a1b      	ldr	r3, [r3, #32]
 800c126:	f023 0201 	bic.w	r2, r3, #1
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6a1b      	ldr	r3, [r3, #32]
 800c132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	699b      	ldr	r3, [r3, #24]
 800c13e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c140:	68fa      	ldr	r2, [r7, #12]
 800c142:	4b2b      	ldr	r3, [pc, #172]	; (800c1f0 <TIM_OC1_SetConfig+0xd8>)
 800c144:	4013      	ands	r3, r2
 800c146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f023 0303 	bic.w	r3, r3, #3
 800c14e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	68fa      	ldr	r2, [r7, #12]
 800c156:	4313      	orrs	r3, r2
 800c158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	f023 0302 	bic.w	r3, r3, #2
 800c160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	697a      	ldr	r2, [r7, #20]
 800c168:	4313      	orrs	r3, r2
 800c16a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	4a21      	ldr	r2, [pc, #132]	; (800c1f4 <TIM_OC1_SetConfig+0xdc>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d003      	beq.n	800c17c <TIM_OC1_SetConfig+0x64>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	4a20      	ldr	r2, [pc, #128]	; (800c1f8 <TIM_OC1_SetConfig+0xe0>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d10c      	bne.n	800c196 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	f023 0308 	bic.w	r3, r3, #8
 800c182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	68db      	ldr	r3, [r3, #12]
 800c188:	697a      	ldr	r2, [r7, #20]
 800c18a:	4313      	orrs	r3, r2
 800c18c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	f023 0304 	bic.w	r3, r3, #4
 800c194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	4a16      	ldr	r2, [pc, #88]	; (800c1f4 <TIM_OC1_SetConfig+0xdc>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d003      	beq.n	800c1a6 <TIM_OC1_SetConfig+0x8e>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	4a15      	ldr	r2, [pc, #84]	; (800c1f8 <TIM_OC1_SetConfig+0xe0>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d111      	bne.n	800c1ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c1b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	695b      	ldr	r3, [r3, #20]
 800c1ba:	693a      	ldr	r2, [r7, #16]
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	699b      	ldr	r3, [r3, #24]
 800c1c4:	693a      	ldr	r2, [r7, #16]
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	693a      	ldr	r2, [r7, #16]
 800c1ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	68fa      	ldr	r2, [r7, #12]
 800c1d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	685a      	ldr	r2, [r3, #4]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	697a      	ldr	r2, [r7, #20]
 800c1e2:	621a      	str	r2, [r3, #32]
}
 800c1e4:	bf00      	nop
 800c1e6:	371c      	adds	r7, #28
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr
 800c1f0:	fffeff8f 	.word	0xfffeff8f
 800c1f4:	40010000 	.word	0x40010000
 800c1f8:	40010400 	.word	0x40010400

0800c1fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b087      	sub	sp, #28
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6a1b      	ldr	r3, [r3, #32]
 800c20a:	f023 0210 	bic.w	r2, r3, #16
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6a1b      	ldr	r3, [r3, #32]
 800c216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	699b      	ldr	r3, [r3, #24]
 800c222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c224:	68fa      	ldr	r2, [r7, #12]
 800c226:	4b2e      	ldr	r3, [pc, #184]	; (800c2e0 <TIM_OC2_SetConfig+0xe4>)
 800c228:	4013      	ands	r3, r2
 800c22a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	021b      	lsls	r3, r3, #8
 800c23a:	68fa      	ldr	r2, [r7, #12]
 800c23c:	4313      	orrs	r3, r2
 800c23e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	f023 0320 	bic.w	r3, r3, #32
 800c246:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	689b      	ldr	r3, [r3, #8]
 800c24c:	011b      	lsls	r3, r3, #4
 800c24e:	697a      	ldr	r2, [r7, #20]
 800c250:	4313      	orrs	r3, r2
 800c252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	4a23      	ldr	r2, [pc, #140]	; (800c2e4 <TIM_OC2_SetConfig+0xe8>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d003      	beq.n	800c264 <TIM_OC2_SetConfig+0x68>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	4a22      	ldr	r2, [pc, #136]	; (800c2e8 <TIM_OC2_SetConfig+0xec>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d10d      	bne.n	800c280 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c26a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	011b      	lsls	r3, r3, #4
 800c272:	697a      	ldr	r2, [r7, #20]
 800c274:	4313      	orrs	r3, r2
 800c276:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c27e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	4a18      	ldr	r2, [pc, #96]	; (800c2e4 <TIM_OC2_SetConfig+0xe8>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d003      	beq.n	800c290 <TIM_OC2_SetConfig+0x94>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	4a17      	ldr	r2, [pc, #92]	; (800c2e8 <TIM_OC2_SetConfig+0xec>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d113      	bne.n	800c2b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c296:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c29e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	695b      	ldr	r3, [r3, #20]
 800c2a4:	009b      	lsls	r3, r3, #2
 800c2a6:	693a      	ldr	r2, [r7, #16]
 800c2a8:	4313      	orrs	r3, r2
 800c2aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	699b      	ldr	r3, [r3, #24]
 800c2b0:	009b      	lsls	r3, r3, #2
 800c2b2:	693a      	ldr	r2, [r7, #16]
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	693a      	ldr	r2, [r7, #16]
 800c2bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	68fa      	ldr	r2, [r7, #12]
 800c2c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	685a      	ldr	r2, [r3, #4]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	697a      	ldr	r2, [r7, #20]
 800c2d0:	621a      	str	r2, [r3, #32]
}
 800c2d2:	bf00      	nop
 800c2d4:	371c      	adds	r7, #28
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr
 800c2de:	bf00      	nop
 800c2e0:	feff8fff 	.word	0xfeff8fff
 800c2e4:	40010000 	.word	0x40010000
 800c2e8:	40010400 	.word	0x40010400

0800c2ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b087      	sub	sp, #28
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6a1b      	ldr	r3, [r3, #32]
 800c2fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6a1b      	ldr	r3, [r3, #32]
 800c306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	69db      	ldr	r3, [r3, #28]
 800c312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c314:	68fa      	ldr	r2, [r7, #12]
 800c316:	4b2d      	ldr	r3, [pc, #180]	; (800c3cc <TIM_OC3_SetConfig+0xe0>)
 800c318:	4013      	ands	r3, r2
 800c31a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f023 0303 	bic.w	r3, r3, #3
 800c322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	68fa      	ldr	r2, [r7, #12]
 800c32a:	4313      	orrs	r3, r2
 800c32c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	021b      	lsls	r3, r3, #8
 800c33c:	697a      	ldr	r2, [r7, #20]
 800c33e:	4313      	orrs	r3, r2
 800c340:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4a22      	ldr	r2, [pc, #136]	; (800c3d0 <TIM_OC3_SetConfig+0xe4>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d003      	beq.n	800c352 <TIM_OC3_SetConfig+0x66>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	4a21      	ldr	r2, [pc, #132]	; (800c3d4 <TIM_OC3_SetConfig+0xe8>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d10d      	bne.n	800c36e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	68db      	ldr	r3, [r3, #12]
 800c35e:	021b      	lsls	r3, r3, #8
 800c360:	697a      	ldr	r2, [r7, #20]
 800c362:	4313      	orrs	r3, r2
 800c364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c36c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	4a17      	ldr	r2, [pc, #92]	; (800c3d0 <TIM_OC3_SetConfig+0xe4>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d003      	beq.n	800c37e <TIM_OC3_SetConfig+0x92>
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	4a16      	ldr	r2, [pc, #88]	; (800c3d4 <TIM_OC3_SetConfig+0xe8>)
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d113      	bne.n	800c3a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c38c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	695b      	ldr	r3, [r3, #20]
 800c392:	011b      	lsls	r3, r3, #4
 800c394:	693a      	ldr	r2, [r7, #16]
 800c396:	4313      	orrs	r3, r2
 800c398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	699b      	ldr	r3, [r3, #24]
 800c39e:	011b      	lsls	r3, r3, #4
 800c3a0:	693a      	ldr	r2, [r7, #16]
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	693a      	ldr	r2, [r7, #16]
 800c3aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	685a      	ldr	r2, [r3, #4]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	697a      	ldr	r2, [r7, #20]
 800c3be:	621a      	str	r2, [r3, #32]
}
 800c3c0:	bf00      	nop
 800c3c2:	371c      	adds	r7, #28
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr
 800c3cc:	fffeff8f 	.word	0xfffeff8f
 800c3d0:	40010000 	.word	0x40010000
 800c3d4:	40010400 	.word	0x40010400

0800c3d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b087      	sub	sp, #28
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6a1b      	ldr	r3, [r3, #32]
 800c3e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6a1b      	ldr	r3, [r3, #32]
 800c3f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	69db      	ldr	r3, [r3, #28]
 800c3fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c400:	68fa      	ldr	r2, [r7, #12]
 800c402:	4b1e      	ldr	r3, [pc, #120]	; (800c47c <TIM_OC4_SetConfig+0xa4>)
 800c404:	4013      	ands	r3, r2
 800c406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c40e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	021b      	lsls	r3, r3, #8
 800c416:	68fa      	ldr	r2, [r7, #12]
 800c418:	4313      	orrs	r3, r2
 800c41a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c422:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	031b      	lsls	r3, r3, #12
 800c42a:	693a      	ldr	r2, [r7, #16]
 800c42c:	4313      	orrs	r3, r2
 800c42e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	4a13      	ldr	r2, [pc, #76]	; (800c480 <TIM_OC4_SetConfig+0xa8>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d003      	beq.n	800c440 <TIM_OC4_SetConfig+0x68>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	4a12      	ldr	r2, [pc, #72]	; (800c484 <TIM_OC4_SetConfig+0xac>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d109      	bne.n	800c454 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c446:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	695b      	ldr	r3, [r3, #20]
 800c44c:	019b      	lsls	r3, r3, #6
 800c44e:	697a      	ldr	r2, [r7, #20]
 800c450:	4313      	orrs	r3, r2
 800c452:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	697a      	ldr	r2, [r7, #20]
 800c458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	68fa      	ldr	r2, [r7, #12]
 800c45e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	685a      	ldr	r2, [r3, #4]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	693a      	ldr	r2, [r7, #16]
 800c46c:	621a      	str	r2, [r3, #32]
}
 800c46e:	bf00      	nop
 800c470:	371c      	adds	r7, #28
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr
 800c47a:	bf00      	nop
 800c47c:	feff8fff 	.word	0xfeff8fff
 800c480:	40010000 	.word	0x40010000
 800c484:	40010400 	.word	0x40010400

0800c488 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c488:	b480      	push	{r7}
 800c48a:	b087      	sub	sp, #28
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6a1b      	ldr	r3, [r3, #32]
 800c496:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6a1b      	ldr	r3, [r3, #32]
 800c4a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c4b0:	68fa      	ldr	r2, [r7, #12]
 800c4b2:	4b1b      	ldr	r3, [pc, #108]	; (800c520 <TIM_OC5_SetConfig+0x98>)
 800c4b4:	4013      	ands	r3, r2
 800c4b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	68fa      	ldr	r2, [r7, #12]
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c4c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	689b      	ldr	r3, [r3, #8]
 800c4ce:	041b      	lsls	r3, r3, #16
 800c4d0:	693a      	ldr	r2, [r7, #16]
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	4a12      	ldr	r2, [pc, #72]	; (800c524 <TIM_OC5_SetConfig+0x9c>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d003      	beq.n	800c4e6 <TIM_OC5_SetConfig+0x5e>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	4a11      	ldr	r2, [pc, #68]	; (800c528 <TIM_OC5_SetConfig+0xa0>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d109      	bne.n	800c4fa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c4ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	695b      	ldr	r3, [r3, #20]
 800c4f2:	021b      	lsls	r3, r3, #8
 800c4f4:	697a      	ldr	r2, [r7, #20]
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	697a      	ldr	r2, [r7, #20]
 800c4fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	68fa      	ldr	r2, [r7, #12]
 800c504:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	685a      	ldr	r2, [r3, #4]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	693a      	ldr	r2, [r7, #16]
 800c512:	621a      	str	r2, [r3, #32]
}
 800c514:	bf00      	nop
 800c516:	371c      	adds	r7, #28
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr
 800c520:	fffeff8f 	.word	0xfffeff8f
 800c524:	40010000 	.word	0x40010000
 800c528:	40010400 	.word	0x40010400

0800c52c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b087      	sub	sp, #28
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6a1b      	ldr	r3, [r3, #32]
 800c53a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6a1b      	ldr	r3, [r3, #32]
 800c546:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c554:	68fa      	ldr	r2, [r7, #12]
 800c556:	4b1c      	ldr	r3, [pc, #112]	; (800c5c8 <TIM_OC6_SetConfig+0x9c>)
 800c558:	4013      	ands	r3, r2
 800c55a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	021b      	lsls	r3, r3, #8
 800c562:	68fa      	ldr	r2, [r7, #12]
 800c564:	4313      	orrs	r3, r2
 800c566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c56e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	689b      	ldr	r3, [r3, #8]
 800c574:	051b      	lsls	r3, r3, #20
 800c576:	693a      	ldr	r2, [r7, #16]
 800c578:	4313      	orrs	r3, r2
 800c57a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	4a13      	ldr	r2, [pc, #76]	; (800c5cc <TIM_OC6_SetConfig+0xa0>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d003      	beq.n	800c58c <TIM_OC6_SetConfig+0x60>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	4a12      	ldr	r2, [pc, #72]	; (800c5d0 <TIM_OC6_SetConfig+0xa4>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d109      	bne.n	800c5a0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c592:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	695b      	ldr	r3, [r3, #20]
 800c598:	029b      	lsls	r3, r3, #10
 800c59a:	697a      	ldr	r2, [r7, #20]
 800c59c:	4313      	orrs	r3, r2
 800c59e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	697a      	ldr	r2, [r7, #20]
 800c5a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	68fa      	ldr	r2, [r7, #12]
 800c5aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	685a      	ldr	r2, [r3, #4]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	693a      	ldr	r2, [r7, #16]
 800c5b8:	621a      	str	r2, [r3, #32]
}
 800c5ba:	bf00      	nop
 800c5bc:	371c      	adds	r7, #28
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr
 800c5c6:	bf00      	nop
 800c5c8:	feff8fff 	.word	0xfeff8fff
 800c5cc:	40010000 	.word	0x40010000
 800c5d0:	40010400 	.word	0x40010400

0800c5d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b087      	sub	sp, #28
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	6a1b      	ldr	r3, [r3, #32]
 800c5e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	6a1b      	ldr	r3, [r3, #32]
 800c5ea:	f023 0201 	bic.w	r2, r3, #1
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	699b      	ldr	r3, [r3, #24]
 800c5f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c5fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	011b      	lsls	r3, r3, #4
 800c604:	693a      	ldr	r2, [r7, #16]
 800c606:	4313      	orrs	r3, r2
 800c608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c60a:	697b      	ldr	r3, [r7, #20]
 800c60c:	f023 030a 	bic.w	r3, r3, #10
 800c610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c612:	697a      	ldr	r2, [r7, #20]
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	4313      	orrs	r3, r2
 800c618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	693a      	ldr	r2, [r7, #16]
 800c61e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	697a      	ldr	r2, [r7, #20]
 800c624:	621a      	str	r2, [r3, #32]
}
 800c626:	bf00      	nop
 800c628:	371c      	adds	r7, #28
 800c62a:	46bd      	mov	sp, r7
 800c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c630:	4770      	bx	lr

0800c632 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c632:	b480      	push	{r7}
 800c634:	b087      	sub	sp, #28
 800c636:	af00      	add	r7, sp, #0
 800c638:	60f8      	str	r0, [r7, #12]
 800c63a:	60b9      	str	r1, [r7, #8]
 800c63c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	6a1b      	ldr	r3, [r3, #32]
 800c642:	f023 0210 	bic.w	r2, r3, #16
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	699b      	ldr	r3, [r3, #24]
 800c64e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	6a1b      	ldr	r3, [r3, #32]
 800c654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c65c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	031b      	lsls	r3, r3, #12
 800c662:	697a      	ldr	r2, [r7, #20]
 800c664:	4313      	orrs	r3, r2
 800c666:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c66e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	011b      	lsls	r3, r3, #4
 800c674:	693a      	ldr	r2, [r7, #16]
 800c676:	4313      	orrs	r3, r2
 800c678:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	697a      	ldr	r2, [r7, #20]
 800c67e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	693a      	ldr	r2, [r7, #16]
 800c684:	621a      	str	r2, [r3, #32]
}
 800c686:	bf00      	nop
 800c688:	371c      	adds	r7, #28
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr

0800c692 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c692:	b480      	push	{r7}
 800c694:	b085      	sub	sp, #20
 800c696:	af00      	add	r7, sp, #0
 800c698:	6078      	str	r0, [r7, #4]
 800c69a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	689b      	ldr	r3, [r3, #8]
 800c6a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c6aa:	683a      	ldr	r2, [r7, #0]
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	f043 0307 	orr.w	r3, r3, #7
 800c6b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	68fa      	ldr	r2, [r7, #12]
 800c6ba:	609a      	str	r2, [r3, #8]
}
 800c6bc:	bf00      	nop
 800c6be:	3714      	adds	r7, #20
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr

0800c6c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b087      	sub	sp, #28
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	60f8      	str	r0, [r7, #12]
 800c6d0:	60b9      	str	r1, [r7, #8]
 800c6d2:	607a      	str	r2, [r7, #4]
 800c6d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	689b      	ldr	r3, [r3, #8]
 800c6da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c6e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	021a      	lsls	r2, r3, #8
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	431a      	orrs	r2, r3
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	697a      	ldr	r2, [r7, #20]
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	697a      	ldr	r2, [r7, #20]
 800c6fa:	609a      	str	r2, [r3, #8]
}
 800c6fc:	bf00      	nop
 800c6fe:	371c      	adds	r7, #28
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr

0800c708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c708:	b480      	push	{r7}
 800c70a:	b085      	sub	sp, #20
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c718:	2b01      	cmp	r3, #1
 800c71a:	d101      	bne.n	800c720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c71c:	2302      	movs	r3, #2
 800c71e:	e06d      	b.n	800c7fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2201      	movs	r2, #1
 800c724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2202      	movs	r2, #2
 800c72c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a30      	ldr	r2, [pc, #192]	; (800c808 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d004      	beq.n	800c754 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4a2f      	ldr	r2, [pc, #188]	; (800c80c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d108      	bne.n	800c766 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c75a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	68fa      	ldr	r2, [r7, #12]
 800c762:	4313      	orrs	r3, r2
 800c764:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c76c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	68fa      	ldr	r2, [r7, #12]
 800c774:	4313      	orrs	r3, r2
 800c776:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	68fa      	ldr	r2, [r7, #12]
 800c77e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4a20      	ldr	r2, [pc, #128]	; (800c808 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d022      	beq.n	800c7d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c792:	d01d      	beq.n	800c7d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a1d      	ldr	r2, [pc, #116]	; (800c810 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d018      	beq.n	800c7d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4a1c      	ldr	r2, [pc, #112]	; (800c814 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d013      	beq.n	800c7d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4a1a      	ldr	r2, [pc, #104]	; (800c818 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d00e      	beq.n	800c7d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4a15      	ldr	r2, [pc, #84]	; (800c80c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	d009      	beq.n	800c7d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a16      	ldr	r2, [pc, #88]	; (800c81c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d004      	beq.n	800c7d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4a15      	ldr	r2, [pc, #84]	; (800c820 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d10c      	bne.n	800c7ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	689b      	ldr	r3, [r3, #8]
 800c7dc:	68ba      	ldr	r2, [r7, #8]
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	68ba      	ldr	r2, [r7, #8]
 800c7e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c7fa:	2300      	movs	r3, #0
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3714      	adds	r7, #20
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr
 800c808:	40010000 	.word	0x40010000
 800c80c:	40010400 	.word	0x40010400
 800c810:	40000400 	.word	0x40000400
 800c814:	40000800 	.word	0x40000800
 800c818:	40000c00 	.word	0x40000c00
 800c81c:	40014000 	.word	0x40014000
 800c820:	40001800 	.word	0x40001800

0800c824 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c824:	b480      	push	{r7}
 800c826:	b085      	sub	sp, #20
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c82e:	2300      	movs	r3, #0
 800c830:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d101      	bne.n	800c840 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c83c:	2302      	movs	r3, #2
 800c83e:	e065      	b.n	800c90c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2201      	movs	r2, #1
 800c844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	68db      	ldr	r3, [r3, #12]
 800c852:	4313      	orrs	r3, r2
 800c854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	4313      	orrs	r3, r2
 800c862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	4313      	orrs	r3, r2
 800c870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4313      	orrs	r3, r2
 800c87e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	691b      	ldr	r3, [r3, #16]
 800c88a:	4313      	orrs	r3, r2
 800c88c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	695b      	ldr	r3, [r3, #20]
 800c898:	4313      	orrs	r3, r2
 800c89a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8a6:	4313      	orrs	r3, r2
 800c8a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	699b      	ldr	r3, [r3, #24]
 800c8b4:	041b      	lsls	r3, r3, #16
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a16      	ldr	r2, [pc, #88]	; (800c918 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d004      	beq.n	800c8ce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4a14      	ldr	r2, [pc, #80]	; (800c91c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d115      	bne.n	800c8fa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8d8:	051b      	lsls	r3, r3, #20
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	69db      	ldr	r3, [r3, #28]
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	6a1b      	ldr	r3, [r3, #32]
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	68fa      	ldr	r2, [r7, #12]
 800c900:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2200      	movs	r2, #0
 800c906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c90a:	2300      	movs	r3, #0
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	3714      	adds	r7, #20
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr
 800c918:	40010000 	.word	0x40010000
 800c91c:	40010400 	.word	0x40010400

0800c920 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c920:	b480      	push	{r7}
 800c922:	b083      	sub	sp, #12
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c928:	bf00      	nop
 800c92a:	370c      	adds	r7, #12
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr

0800c934 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c934:	b480      	push	{r7}
 800c936:	b083      	sub	sp, #12
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c93c:	bf00      	nop
 800c93e:	370c      	adds	r7, #12
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr

0800c948 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c948:	b480      	push	{r7}
 800c94a:	b083      	sub	sp, #12
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c950:	bf00      	nop
 800c952:	370c      	adds	r7, #12
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr

0800c95c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d101      	bne.n	800c96e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c96a:	2301      	movs	r3, #1
 800c96c:	e040      	b.n	800c9f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c972:	2b00      	cmp	r3, #0
 800c974:	d106      	bne.n	800c984 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2200      	movs	r2, #0
 800c97a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f7f6 fcd4 	bl	800332c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2224      	movs	r2, #36	; 0x24
 800c988:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f022 0201 	bic.w	r2, r2, #1
 800c998:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 f82c 	bl	800c9f8 <UART_SetConfig>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d101      	bne.n	800c9aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	e022      	b.n	800c9f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d002      	beq.n	800c9b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f000 faca 	bl	800cf4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	685a      	ldr	r2, [r3, #4]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c9c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	689a      	ldr	r2, [r3, #8]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c9d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f042 0201 	orr.w	r2, r2, #1
 800c9e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f000 fb51 	bl	800d090 <UART_CheckIdleState>
 800c9ee:	4603      	mov	r3, r0
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3708      	adds	r7, #8
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b088      	sub	sp, #32
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800ca00:	2300      	movs	r3, #0
 800ca02:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800ca04:	2300      	movs	r3, #0
 800ca06:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	689a      	ldr	r2, [r3, #8]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	691b      	ldr	r3, [r3, #16]
 800ca10:	431a      	orrs	r2, r3
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	695b      	ldr	r3, [r3, #20]
 800ca16:	431a      	orrs	r2, r3
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	69db      	ldr	r3, [r3, #28]
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	4bb1      	ldr	r3, [pc, #708]	; (800ccec <UART_SetConfig+0x2f4>)
 800ca28:	4013      	ands	r3, r2
 800ca2a:	687a      	ldr	r2, [r7, #4]
 800ca2c:	6812      	ldr	r2, [r2, #0]
 800ca2e:	6939      	ldr	r1, [r7, #16]
 800ca30:	430b      	orrs	r3, r1
 800ca32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	685b      	ldr	r3, [r3, #4]
 800ca3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	68da      	ldr	r2, [r3, #12]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	430a      	orrs	r2, r1
 800ca48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	699b      	ldr	r3, [r3, #24]
 800ca4e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6a1b      	ldr	r3, [r3, #32]
 800ca54:	693a      	ldr	r2, [r7, #16]
 800ca56:	4313      	orrs	r3, r2
 800ca58:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	689b      	ldr	r3, [r3, #8]
 800ca60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	693a      	ldr	r2, [r7, #16]
 800ca6a:	430a      	orrs	r2, r1
 800ca6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4a9f      	ldr	r2, [pc, #636]	; (800ccf0 <UART_SetConfig+0x2f8>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d121      	bne.n	800cabc <UART_SetConfig+0xc4>
 800ca78:	4b9e      	ldr	r3, [pc, #632]	; (800ccf4 <UART_SetConfig+0x2fc>)
 800ca7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca7e:	f003 0303 	and.w	r3, r3, #3
 800ca82:	2b03      	cmp	r3, #3
 800ca84:	d816      	bhi.n	800cab4 <UART_SetConfig+0xbc>
 800ca86:	a201      	add	r2, pc, #4	; (adr r2, 800ca8c <UART_SetConfig+0x94>)
 800ca88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca8c:	0800ca9d 	.word	0x0800ca9d
 800ca90:	0800caa9 	.word	0x0800caa9
 800ca94:	0800caa3 	.word	0x0800caa3
 800ca98:	0800caaf 	.word	0x0800caaf
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	77fb      	strb	r3, [r7, #31]
 800caa0:	e151      	b.n	800cd46 <UART_SetConfig+0x34e>
 800caa2:	2302      	movs	r3, #2
 800caa4:	77fb      	strb	r3, [r7, #31]
 800caa6:	e14e      	b.n	800cd46 <UART_SetConfig+0x34e>
 800caa8:	2304      	movs	r3, #4
 800caaa:	77fb      	strb	r3, [r7, #31]
 800caac:	e14b      	b.n	800cd46 <UART_SetConfig+0x34e>
 800caae:	2308      	movs	r3, #8
 800cab0:	77fb      	strb	r3, [r7, #31]
 800cab2:	e148      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cab4:	2310      	movs	r3, #16
 800cab6:	77fb      	strb	r3, [r7, #31]
 800cab8:	bf00      	nop
 800caba:	e144      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a8d      	ldr	r2, [pc, #564]	; (800ccf8 <UART_SetConfig+0x300>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d134      	bne.n	800cb30 <UART_SetConfig+0x138>
 800cac6:	4b8b      	ldr	r3, [pc, #556]	; (800ccf4 <UART_SetConfig+0x2fc>)
 800cac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cacc:	f003 030c 	and.w	r3, r3, #12
 800cad0:	2b0c      	cmp	r3, #12
 800cad2:	d829      	bhi.n	800cb28 <UART_SetConfig+0x130>
 800cad4:	a201      	add	r2, pc, #4	; (adr r2, 800cadc <UART_SetConfig+0xe4>)
 800cad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cada:	bf00      	nop
 800cadc:	0800cb11 	.word	0x0800cb11
 800cae0:	0800cb29 	.word	0x0800cb29
 800cae4:	0800cb29 	.word	0x0800cb29
 800cae8:	0800cb29 	.word	0x0800cb29
 800caec:	0800cb1d 	.word	0x0800cb1d
 800caf0:	0800cb29 	.word	0x0800cb29
 800caf4:	0800cb29 	.word	0x0800cb29
 800caf8:	0800cb29 	.word	0x0800cb29
 800cafc:	0800cb17 	.word	0x0800cb17
 800cb00:	0800cb29 	.word	0x0800cb29
 800cb04:	0800cb29 	.word	0x0800cb29
 800cb08:	0800cb29 	.word	0x0800cb29
 800cb0c:	0800cb23 	.word	0x0800cb23
 800cb10:	2300      	movs	r3, #0
 800cb12:	77fb      	strb	r3, [r7, #31]
 800cb14:	e117      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cb16:	2302      	movs	r3, #2
 800cb18:	77fb      	strb	r3, [r7, #31]
 800cb1a:	e114      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cb1c:	2304      	movs	r3, #4
 800cb1e:	77fb      	strb	r3, [r7, #31]
 800cb20:	e111      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cb22:	2308      	movs	r3, #8
 800cb24:	77fb      	strb	r3, [r7, #31]
 800cb26:	e10e      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cb28:	2310      	movs	r3, #16
 800cb2a:	77fb      	strb	r3, [r7, #31]
 800cb2c:	bf00      	nop
 800cb2e:	e10a      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	4a71      	ldr	r2, [pc, #452]	; (800ccfc <UART_SetConfig+0x304>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d120      	bne.n	800cb7c <UART_SetConfig+0x184>
 800cb3a:	4b6e      	ldr	r3, [pc, #440]	; (800ccf4 <UART_SetConfig+0x2fc>)
 800cb3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cb44:	2b10      	cmp	r3, #16
 800cb46:	d00f      	beq.n	800cb68 <UART_SetConfig+0x170>
 800cb48:	2b10      	cmp	r3, #16
 800cb4a:	d802      	bhi.n	800cb52 <UART_SetConfig+0x15a>
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d005      	beq.n	800cb5c <UART_SetConfig+0x164>
 800cb50:	e010      	b.n	800cb74 <UART_SetConfig+0x17c>
 800cb52:	2b20      	cmp	r3, #32
 800cb54:	d005      	beq.n	800cb62 <UART_SetConfig+0x16a>
 800cb56:	2b30      	cmp	r3, #48	; 0x30
 800cb58:	d009      	beq.n	800cb6e <UART_SetConfig+0x176>
 800cb5a:	e00b      	b.n	800cb74 <UART_SetConfig+0x17c>
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	77fb      	strb	r3, [r7, #31]
 800cb60:	e0f1      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cb62:	2302      	movs	r3, #2
 800cb64:	77fb      	strb	r3, [r7, #31]
 800cb66:	e0ee      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cb68:	2304      	movs	r3, #4
 800cb6a:	77fb      	strb	r3, [r7, #31]
 800cb6c:	e0eb      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cb6e:	2308      	movs	r3, #8
 800cb70:	77fb      	strb	r3, [r7, #31]
 800cb72:	e0e8      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cb74:	2310      	movs	r3, #16
 800cb76:	77fb      	strb	r3, [r7, #31]
 800cb78:	bf00      	nop
 800cb7a:	e0e4      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4a5f      	ldr	r2, [pc, #380]	; (800cd00 <UART_SetConfig+0x308>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d120      	bne.n	800cbc8 <UART_SetConfig+0x1d0>
 800cb86:	4b5b      	ldr	r3, [pc, #364]	; (800ccf4 <UART_SetConfig+0x2fc>)
 800cb88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800cb90:	2b40      	cmp	r3, #64	; 0x40
 800cb92:	d00f      	beq.n	800cbb4 <UART_SetConfig+0x1bc>
 800cb94:	2b40      	cmp	r3, #64	; 0x40
 800cb96:	d802      	bhi.n	800cb9e <UART_SetConfig+0x1a6>
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d005      	beq.n	800cba8 <UART_SetConfig+0x1b0>
 800cb9c:	e010      	b.n	800cbc0 <UART_SetConfig+0x1c8>
 800cb9e:	2b80      	cmp	r3, #128	; 0x80
 800cba0:	d005      	beq.n	800cbae <UART_SetConfig+0x1b6>
 800cba2:	2bc0      	cmp	r3, #192	; 0xc0
 800cba4:	d009      	beq.n	800cbba <UART_SetConfig+0x1c2>
 800cba6:	e00b      	b.n	800cbc0 <UART_SetConfig+0x1c8>
 800cba8:	2300      	movs	r3, #0
 800cbaa:	77fb      	strb	r3, [r7, #31]
 800cbac:	e0cb      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cbae:	2302      	movs	r3, #2
 800cbb0:	77fb      	strb	r3, [r7, #31]
 800cbb2:	e0c8      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cbb4:	2304      	movs	r3, #4
 800cbb6:	77fb      	strb	r3, [r7, #31]
 800cbb8:	e0c5      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cbba:	2308      	movs	r3, #8
 800cbbc:	77fb      	strb	r3, [r7, #31]
 800cbbe:	e0c2      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cbc0:	2310      	movs	r3, #16
 800cbc2:	77fb      	strb	r3, [r7, #31]
 800cbc4:	bf00      	nop
 800cbc6:	e0be      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	4a4d      	ldr	r2, [pc, #308]	; (800cd04 <UART_SetConfig+0x30c>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d124      	bne.n	800cc1c <UART_SetConfig+0x224>
 800cbd2:	4b48      	ldr	r3, [pc, #288]	; (800ccf4 <UART_SetConfig+0x2fc>)
 800cbd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbe0:	d012      	beq.n	800cc08 <UART_SetConfig+0x210>
 800cbe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbe6:	d802      	bhi.n	800cbee <UART_SetConfig+0x1f6>
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d007      	beq.n	800cbfc <UART_SetConfig+0x204>
 800cbec:	e012      	b.n	800cc14 <UART_SetConfig+0x21c>
 800cbee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbf2:	d006      	beq.n	800cc02 <UART_SetConfig+0x20a>
 800cbf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cbf8:	d009      	beq.n	800cc0e <UART_SetConfig+0x216>
 800cbfa:	e00b      	b.n	800cc14 <UART_SetConfig+0x21c>
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	77fb      	strb	r3, [r7, #31]
 800cc00:	e0a1      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cc02:	2302      	movs	r3, #2
 800cc04:	77fb      	strb	r3, [r7, #31]
 800cc06:	e09e      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cc08:	2304      	movs	r3, #4
 800cc0a:	77fb      	strb	r3, [r7, #31]
 800cc0c:	e09b      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cc0e:	2308      	movs	r3, #8
 800cc10:	77fb      	strb	r3, [r7, #31]
 800cc12:	e098      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cc14:	2310      	movs	r3, #16
 800cc16:	77fb      	strb	r3, [r7, #31]
 800cc18:	bf00      	nop
 800cc1a:	e094      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a39      	ldr	r2, [pc, #228]	; (800cd08 <UART_SetConfig+0x310>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d124      	bne.n	800cc70 <UART_SetConfig+0x278>
 800cc26:	4b33      	ldr	r3, [pc, #204]	; (800ccf4 <UART_SetConfig+0x2fc>)
 800cc28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cc30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc34:	d012      	beq.n	800cc5c <UART_SetConfig+0x264>
 800cc36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc3a:	d802      	bhi.n	800cc42 <UART_SetConfig+0x24a>
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d007      	beq.n	800cc50 <UART_SetConfig+0x258>
 800cc40:	e012      	b.n	800cc68 <UART_SetConfig+0x270>
 800cc42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc46:	d006      	beq.n	800cc56 <UART_SetConfig+0x25e>
 800cc48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cc4c:	d009      	beq.n	800cc62 <UART_SetConfig+0x26a>
 800cc4e:	e00b      	b.n	800cc68 <UART_SetConfig+0x270>
 800cc50:	2301      	movs	r3, #1
 800cc52:	77fb      	strb	r3, [r7, #31]
 800cc54:	e077      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cc56:	2302      	movs	r3, #2
 800cc58:	77fb      	strb	r3, [r7, #31]
 800cc5a:	e074      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cc5c:	2304      	movs	r3, #4
 800cc5e:	77fb      	strb	r3, [r7, #31]
 800cc60:	e071      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cc62:	2308      	movs	r3, #8
 800cc64:	77fb      	strb	r3, [r7, #31]
 800cc66:	e06e      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cc68:	2310      	movs	r3, #16
 800cc6a:	77fb      	strb	r3, [r7, #31]
 800cc6c:	bf00      	nop
 800cc6e:	e06a      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4a25      	ldr	r2, [pc, #148]	; (800cd0c <UART_SetConfig+0x314>)
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d124      	bne.n	800ccc4 <UART_SetConfig+0x2cc>
 800cc7a:	4b1e      	ldr	r3, [pc, #120]	; (800ccf4 <UART_SetConfig+0x2fc>)
 800cc7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc80:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800cc84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc88:	d012      	beq.n	800ccb0 <UART_SetConfig+0x2b8>
 800cc8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc8e:	d802      	bhi.n	800cc96 <UART_SetConfig+0x29e>
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d007      	beq.n	800cca4 <UART_SetConfig+0x2ac>
 800cc94:	e012      	b.n	800ccbc <UART_SetConfig+0x2c4>
 800cc96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc9a:	d006      	beq.n	800ccaa <UART_SetConfig+0x2b2>
 800cc9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cca0:	d009      	beq.n	800ccb6 <UART_SetConfig+0x2be>
 800cca2:	e00b      	b.n	800ccbc <UART_SetConfig+0x2c4>
 800cca4:	2300      	movs	r3, #0
 800cca6:	77fb      	strb	r3, [r7, #31]
 800cca8:	e04d      	b.n	800cd46 <UART_SetConfig+0x34e>
 800ccaa:	2302      	movs	r3, #2
 800ccac:	77fb      	strb	r3, [r7, #31]
 800ccae:	e04a      	b.n	800cd46 <UART_SetConfig+0x34e>
 800ccb0:	2304      	movs	r3, #4
 800ccb2:	77fb      	strb	r3, [r7, #31]
 800ccb4:	e047      	b.n	800cd46 <UART_SetConfig+0x34e>
 800ccb6:	2308      	movs	r3, #8
 800ccb8:	77fb      	strb	r3, [r7, #31]
 800ccba:	e044      	b.n	800cd46 <UART_SetConfig+0x34e>
 800ccbc:	2310      	movs	r3, #16
 800ccbe:	77fb      	strb	r3, [r7, #31]
 800ccc0:	bf00      	nop
 800ccc2:	e040      	b.n	800cd46 <UART_SetConfig+0x34e>
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	4a11      	ldr	r2, [pc, #68]	; (800cd10 <UART_SetConfig+0x318>)
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d139      	bne.n	800cd42 <UART_SetConfig+0x34a>
 800ccce:	4b09      	ldr	r3, [pc, #36]	; (800ccf4 <UART_SetConfig+0x2fc>)
 800ccd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ccd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ccd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ccdc:	d027      	beq.n	800cd2e <UART_SetConfig+0x336>
 800ccde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cce2:	d817      	bhi.n	800cd14 <UART_SetConfig+0x31c>
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d01c      	beq.n	800cd22 <UART_SetConfig+0x32a>
 800cce8:	e027      	b.n	800cd3a <UART_SetConfig+0x342>
 800ccea:	bf00      	nop
 800ccec:	efff69f3 	.word	0xefff69f3
 800ccf0:	40011000 	.word	0x40011000
 800ccf4:	40023800 	.word	0x40023800
 800ccf8:	40004400 	.word	0x40004400
 800ccfc:	40004800 	.word	0x40004800
 800cd00:	40004c00 	.word	0x40004c00
 800cd04:	40005000 	.word	0x40005000
 800cd08:	40011400 	.word	0x40011400
 800cd0c:	40007800 	.word	0x40007800
 800cd10:	40007c00 	.word	0x40007c00
 800cd14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd18:	d006      	beq.n	800cd28 <UART_SetConfig+0x330>
 800cd1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cd1e:	d009      	beq.n	800cd34 <UART_SetConfig+0x33c>
 800cd20:	e00b      	b.n	800cd3a <UART_SetConfig+0x342>
 800cd22:	2300      	movs	r3, #0
 800cd24:	77fb      	strb	r3, [r7, #31]
 800cd26:	e00e      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cd28:	2302      	movs	r3, #2
 800cd2a:	77fb      	strb	r3, [r7, #31]
 800cd2c:	e00b      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cd2e:	2304      	movs	r3, #4
 800cd30:	77fb      	strb	r3, [r7, #31]
 800cd32:	e008      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cd34:	2308      	movs	r3, #8
 800cd36:	77fb      	strb	r3, [r7, #31]
 800cd38:	e005      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cd3a:	2310      	movs	r3, #16
 800cd3c:	77fb      	strb	r3, [r7, #31]
 800cd3e:	bf00      	nop
 800cd40:	e001      	b.n	800cd46 <UART_SetConfig+0x34e>
 800cd42:	2310      	movs	r3, #16
 800cd44:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	69db      	ldr	r3, [r3, #28]
 800cd4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd4e:	d17f      	bne.n	800ce50 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800cd50:	7ffb      	ldrb	r3, [r7, #31]
 800cd52:	2b08      	cmp	r3, #8
 800cd54:	d85c      	bhi.n	800ce10 <UART_SetConfig+0x418>
 800cd56:	a201      	add	r2, pc, #4	; (adr r2, 800cd5c <UART_SetConfig+0x364>)
 800cd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd5c:	0800cd81 	.word	0x0800cd81
 800cd60:	0800cda1 	.word	0x0800cda1
 800cd64:	0800cdc1 	.word	0x0800cdc1
 800cd68:	0800ce11 	.word	0x0800ce11
 800cd6c:	0800cdd9 	.word	0x0800cdd9
 800cd70:	0800ce11 	.word	0x0800ce11
 800cd74:	0800ce11 	.word	0x0800ce11
 800cd78:	0800ce11 	.word	0x0800ce11
 800cd7c:	0800cdf9 	.word	0x0800cdf9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd80:	f7fc f91c 	bl	8008fbc <HAL_RCC_GetPCLK1Freq>
 800cd84:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	005a      	lsls	r2, r3, #1
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	085b      	lsrs	r3, r3, #1
 800cd90:	441a      	add	r2, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd9a:	b29b      	uxth	r3, r3
 800cd9c:	61bb      	str	r3, [r7, #24]
        break;
 800cd9e:	e03a      	b.n	800ce16 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cda0:	f7fc f920 	bl	8008fe4 <HAL_RCC_GetPCLK2Freq>
 800cda4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	005a      	lsls	r2, r3, #1
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	685b      	ldr	r3, [r3, #4]
 800cdae:	085b      	lsrs	r3, r3, #1
 800cdb0:	441a      	add	r2, r3
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdba:	b29b      	uxth	r3, r3
 800cdbc:	61bb      	str	r3, [r7, #24]
        break;
 800cdbe:	e02a      	b.n	800ce16 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	085a      	lsrs	r2, r3, #1
 800cdc6:	4b5f      	ldr	r3, [pc, #380]	; (800cf44 <UART_SetConfig+0x54c>)
 800cdc8:	4413      	add	r3, r2
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	6852      	ldr	r2, [r2, #4]
 800cdce:	fbb3 f3f2 	udiv	r3, r3, r2
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	61bb      	str	r3, [r7, #24]
        break;
 800cdd6:	e01e      	b.n	800ce16 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cdd8:	f7fc f832 	bl	8008e40 <HAL_RCC_GetSysClockFreq>
 800cddc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	005a      	lsls	r2, r3, #1
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	085b      	lsrs	r3, r3, #1
 800cde8:	441a      	add	r2, r3
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	61bb      	str	r3, [r7, #24]
        break;
 800cdf6:	e00e      	b.n	800ce16 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	685b      	ldr	r3, [r3, #4]
 800cdfc:	085b      	lsrs	r3, r3, #1
 800cdfe:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	61bb      	str	r3, [r7, #24]
        break;
 800ce0e:	e002      	b.n	800ce16 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800ce10:	2301      	movs	r3, #1
 800ce12:	75fb      	strb	r3, [r7, #23]
        break;
 800ce14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ce16:	69bb      	ldr	r3, [r7, #24]
 800ce18:	2b0f      	cmp	r3, #15
 800ce1a:	d916      	bls.n	800ce4a <UART_SetConfig+0x452>
 800ce1c:	69bb      	ldr	r3, [r7, #24]
 800ce1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce22:	d212      	bcs.n	800ce4a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ce24:	69bb      	ldr	r3, [r7, #24]
 800ce26:	b29b      	uxth	r3, r3
 800ce28:	f023 030f 	bic.w	r3, r3, #15
 800ce2c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ce2e:	69bb      	ldr	r3, [r7, #24]
 800ce30:	085b      	lsrs	r3, r3, #1
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	f003 0307 	and.w	r3, r3, #7
 800ce38:	b29a      	uxth	r2, r3
 800ce3a:	897b      	ldrh	r3, [r7, #10]
 800ce3c:	4313      	orrs	r3, r2
 800ce3e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	897a      	ldrh	r2, [r7, #10]
 800ce46:	60da      	str	r2, [r3, #12]
 800ce48:	e070      	b.n	800cf2c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	75fb      	strb	r3, [r7, #23]
 800ce4e:	e06d      	b.n	800cf2c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800ce50:	7ffb      	ldrb	r3, [r7, #31]
 800ce52:	2b08      	cmp	r3, #8
 800ce54:	d859      	bhi.n	800cf0a <UART_SetConfig+0x512>
 800ce56:	a201      	add	r2, pc, #4	; (adr r2, 800ce5c <UART_SetConfig+0x464>)
 800ce58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce5c:	0800ce81 	.word	0x0800ce81
 800ce60:	0800ce9f 	.word	0x0800ce9f
 800ce64:	0800cebd 	.word	0x0800cebd
 800ce68:	0800cf0b 	.word	0x0800cf0b
 800ce6c:	0800ced5 	.word	0x0800ced5
 800ce70:	0800cf0b 	.word	0x0800cf0b
 800ce74:	0800cf0b 	.word	0x0800cf0b
 800ce78:	0800cf0b 	.word	0x0800cf0b
 800ce7c:	0800cef3 	.word	0x0800cef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce80:	f7fc f89c 	bl	8008fbc <HAL_RCC_GetPCLK1Freq>
 800ce84:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	085a      	lsrs	r2, r3, #1
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	441a      	add	r2, r3
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	61bb      	str	r3, [r7, #24]
        break;
 800ce9c:	e038      	b.n	800cf10 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ce9e:	f7fc f8a1 	bl	8008fe4 <HAL_RCC_GetPCLK2Freq>
 800cea2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	085a      	lsrs	r2, r3, #1
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	441a      	add	r2, r3
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	685b      	ldr	r3, [r3, #4]
 800ceb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ceb6:	b29b      	uxth	r3, r3
 800ceb8:	61bb      	str	r3, [r7, #24]
        break;
 800ceba:	e029      	b.n	800cf10 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	085a      	lsrs	r2, r3, #1
 800cec2:	4b21      	ldr	r3, [pc, #132]	; (800cf48 <UART_SetConfig+0x550>)
 800cec4:	4413      	add	r3, r2
 800cec6:	687a      	ldr	r2, [r7, #4]
 800cec8:	6852      	ldr	r2, [r2, #4]
 800ceca:	fbb3 f3f2 	udiv	r3, r3, r2
 800cece:	b29b      	uxth	r3, r3
 800ced0:	61bb      	str	r3, [r7, #24]
        break;
 800ced2:	e01d      	b.n	800cf10 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ced4:	f7fb ffb4 	bl	8008e40 <HAL_RCC_GetSysClockFreq>
 800ced8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	685b      	ldr	r3, [r3, #4]
 800cede:	085a      	lsrs	r2, r3, #1
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	441a      	add	r2, r3
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	685b      	ldr	r3, [r3, #4]
 800cee8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ceec:	b29b      	uxth	r3, r3
 800ceee:	61bb      	str	r3, [r7, #24]
        break;
 800cef0:	e00e      	b.n	800cf10 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	685b      	ldr	r3, [r3, #4]
 800cef6:	085b      	lsrs	r3, r3, #1
 800cef8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	685b      	ldr	r3, [r3, #4]
 800cf00:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf04:	b29b      	uxth	r3, r3
 800cf06:	61bb      	str	r3, [r7, #24]
        break;
 800cf08:	e002      	b.n	800cf10 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	75fb      	strb	r3, [r7, #23]
        break;
 800cf0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf10:	69bb      	ldr	r3, [r7, #24]
 800cf12:	2b0f      	cmp	r3, #15
 800cf14:	d908      	bls.n	800cf28 <UART_SetConfig+0x530>
 800cf16:	69bb      	ldr	r3, [r7, #24]
 800cf18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf1c:	d204      	bcs.n	800cf28 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	69ba      	ldr	r2, [r7, #24]
 800cf24:	60da      	str	r2, [r3, #12]
 800cf26:	e001      	b.n	800cf2c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2200      	movs	r2, #0
 800cf36:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800cf38:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3720      	adds	r7, #32
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}
 800cf42:	bf00      	nop
 800cf44:	01e84800 	.word	0x01e84800
 800cf48:	00f42400 	.word	0x00f42400

0800cf4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b083      	sub	sp, #12
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf58:	f003 0301 	and.w	r3, r3, #1
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d00a      	beq.n	800cf76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	430a      	orrs	r2, r1
 800cf74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf7a:	f003 0302 	and.w	r3, r3, #2
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d00a      	beq.n	800cf98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	685b      	ldr	r3, [r3, #4]
 800cf88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	430a      	orrs	r2, r1
 800cf96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf9c:	f003 0304 	and.w	r3, r3, #4
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d00a      	beq.n	800cfba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	685b      	ldr	r3, [r3, #4]
 800cfaa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	430a      	orrs	r2, r1
 800cfb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfbe:	f003 0308 	and.w	r3, r3, #8
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d00a      	beq.n	800cfdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	430a      	orrs	r2, r1
 800cfda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe0:	f003 0310 	and.w	r3, r3, #16
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d00a      	beq.n	800cffe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	689b      	ldr	r3, [r3, #8]
 800cfee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	430a      	orrs	r2, r1
 800cffc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d002:	f003 0320 	and.w	r3, r3, #32
 800d006:	2b00      	cmp	r3, #0
 800d008:	d00a      	beq.n	800d020 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	689b      	ldr	r3, [r3, #8]
 800d010:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	430a      	orrs	r2, r1
 800d01e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d01a      	beq.n	800d062 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	685b      	ldr	r3, [r3, #4]
 800d032:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	430a      	orrs	r2, r1
 800d040:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d04a:	d10a      	bne.n	800d062 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	685b      	ldr	r3, [r3, #4]
 800d052:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	430a      	orrs	r2, r1
 800d060:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d00a      	beq.n	800d084 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	430a      	orrs	r2, r1
 800d082:	605a      	str	r2, [r3, #4]
  }
}
 800d084:	bf00      	nop
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr

0800d090 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b086      	sub	sp, #24
 800d094:	af02      	add	r7, sp, #8
 800d096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2200      	movs	r2, #0
 800d09c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800d09e:	f7f6 ff4b 	bl	8003f38 <HAL_GetTick>
 800d0a2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f003 0308 	and.w	r3, r3, #8
 800d0ae:	2b08      	cmp	r3, #8
 800d0b0:	d10e      	bne.n	800d0d0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d0b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d0b6:	9300      	str	r3, [sp, #0]
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f000 f814 	bl	800d0ee <UART_WaitOnFlagUntilTimeout>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d001      	beq.n	800d0d0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d0cc:	2303      	movs	r3, #3
 800d0ce:	e00a      	b.n	800d0e6 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2220      	movs	r2, #32
 800d0d4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2220      	movs	r2, #32
 800d0da:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800d0e4:	2300      	movs	r3, #0
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3710      	adds	r7, #16
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}

0800d0ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d0ee:	b580      	push	{r7, lr}
 800d0f0:	b084      	sub	sp, #16
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	60f8      	str	r0, [r7, #12]
 800d0f6:	60b9      	str	r1, [r7, #8]
 800d0f8:	603b      	str	r3, [r7, #0]
 800d0fa:	4613      	mov	r3, r2
 800d0fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0fe:	e05d      	b.n	800d1bc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d100:	69bb      	ldr	r3, [r7, #24]
 800d102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d106:	d059      	beq.n	800d1bc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d108:	f7f6 ff16 	bl	8003f38 <HAL_GetTick>
 800d10c:	4602      	mov	r2, r0
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	1ad3      	subs	r3, r2, r3
 800d112:	69ba      	ldr	r2, [r7, #24]
 800d114:	429a      	cmp	r2, r3
 800d116:	d302      	bcc.n	800d11e <UART_WaitOnFlagUntilTimeout+0x30>
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d11b      	bne.n	800d156 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	681a      	ldr	r2, [r3, #0]
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d12c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	689a      	ldr	r2, [r3, #8]
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f022 0201 	bic.w	r2, r2, #1
 800d13c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2220      	movs	r2, #32
 800d142:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2220      	movs	r2, #32
 800d148:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2200      	movs	r2, #0
 800d14e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800d152:	2303      	movs	r3, #3
 800d154:	e042      	b.n	800d1dc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f003 0304 	and.w	r3, r3, #4
 800d160:	2b00      	cmp	r3, #0
 800d162:	d02b      	beq.n	800d1bc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	69db      	ldr	r3, [r3, #28]
 800d16a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d16e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d172:	d123      	bne.n	800d1bc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d17c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	681a      	ldr	r2, [r3, #0]
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d18c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	689a      	ldr	r2, [r3, #8]
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f022 0201 	bic.w	r2, r2, #1
 800d19c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2220      	movs	r2, #32
 800d1a2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2220      	movs	r2, #32
 800d1a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2220      	movs	r2, #32
 800d1ae:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800d1b8:	2303      	movs	r3, #3
 800d1ba:	e00f      	b.n	800d1dc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	69da      	ldr	r2, [r3, #28]
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	4013      	ands	r3, r2
 800d1c6:	68ba      	ldr	r2, [r7, #8]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	bf0c      	ite	eq
 800d1cc:	2301      	moveq	r3, #1
 800d1ce:	2300      	movne	r3, #0
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	79fb      	ldrb	r3, [r7, #7]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d092      	beq.n	800d100 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d1da:	2300      	movs	r3, #0
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3710      	adds	r7, #16
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}

0800d1e4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b085      	sub	sp, #20
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	2b01      	cmp	r3, #1
 800d1fc:	d027      	beq.n	800d24e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800d204:	68fa      	ldr	r2, [r7, #12]
 800d206:	4b2f      	ldr	r3, [pc, #188]	; (800d2c4 <FMC_SDRAM_Init+0xe0>)
 800d208:	4013      	ands	r3, r2
 800d20a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800d214:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800d21a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800d220:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800d226:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800d22c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800d232:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800d238:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800d23e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800d240:	68fa      	ldr	r2, [r7, #12]
 800d242:	4313      	orrs	r3, r2
 800d244:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	68fa      	ldr	r2, [r7, #12]
 800d24a:	601a      	str	r2, [r3, #0]
 800d24c:	e032      	b.n	800d2b4 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d25a:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800d264:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800d26a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800d26c:	68fa      	ldr	r2, [r7, #12]
 800d26e:	4313      	orrs	r3, r2
 800d270:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800d278:	68ba      	ldr	r2, [r7, #8]
 800d27a:	4b12      	ldr	r3, [pc, #72]	; (800d2c4 <FMC_SDRAM_Init+0xe0>)
 800d27c:	4013      	ands	r3, r2
 800d27e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800d288:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800d28e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800d294:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800d29a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800d2a0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800d2a2:	68ba      	ldr	r2, [r7, #8]
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	68fa      	ldr	r2, [r7, #12]
 800d2ac:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	68ba      	ldr	r2, [r7, #8]
 800d2b2:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800d2b4:	2300      	movs	r3, #0
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3714      	adds	r7, #20
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr
 800d2c2:	bf00      	nop
 800d2c4:	ffff8000 	.word	0xffff8000

0800d2c8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b087      	sub	sp, #28
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	60f8      	str	r0, [r7, #12]
 800d2d0:	60b9      	str	r1, [r7, #8]
 800d2d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	d02e      	beq.n	800d340 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	689b      	ldr	r3, [r3, #8]
 800d2e6:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d2ee:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	3b01      	subs	r3, #1
 800d2fc:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800d2fe:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	689b      	ldr	r3, [r3, #8]
 800d304:	3b01      	subs	r3, #1
 800d306:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800d308:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	3b01      	subs	r3, #1
 800d310:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800d312:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800d314:	68bb      	ldr	r3, [r7, #8]
 800d316:	691b      	ldr	r3, [r3, #16]
 800d318:	3b01      	subs	r3, #1
 800d31a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800d31c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	695b      	ldr	r3, [r3, #20]
 800d322:	3b01      	subs	r3, #1
 800d324:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800d326:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	699b      	ldr	r3, [r3, #24]
 800d32c:	3b01      	subs	r3, #1
 800d32e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800d330:	4313      	orrs	r3, r2
 800d332:	697a      	ldr	r2, [r7, #20]
 800d334:	4313      	orrs	r3, r2
 800d336:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	697a      	ldr	r2, [r7, #20]
 800d33c:	609a      	str	r2, [r3, #8]
 800d33e:	e039      	b.n	800d3b4 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	689b      	ldr	r3, [r3, #8]
 800d344:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800d346:	697a      	ldr	r2, [r7, #20]
 800d348:	4b1e      	ldr	r3, [pc, #120]	; (800d3c4 <FMC_SDRAM_Timing_Init+0xfc>)
 800d34a:	4013      	ands	r3, r2
 800d34c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	68db      	ldr	r3, [r3, #12]
 800d352:	3b01      	subs	r3, #1
 800d354:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	695b      	ldr	r3, [r3, #20]
 800d35a:	3b01      	subs	r3, #1
 800d35c:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800d35e:	4313      	orrs	r3, r2
 800d360:	697a      	ldr	r2, [r7, #20]
 800d362:	4313      	orrs	r3, r2
 800d364:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	68db      	ldr	r3, [r3, #12]
 800d36a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d372:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	3b01      	subs	r3, #1
 800d380:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800d382:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	689b      	ldr	r3, [r3, #8]
 800d388:	3b01      	subs	r3, #1
 800d38a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800d38c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	691b      	ldr	r3, [r3, #16]
 800d392:	3b01      	subs	r3, #1
 800d394:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800d396:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	699b      	ldr	r3, [r3, #24]
 800d39c:	3b01      	subs	r3, #1
 800d39e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800d3a0:	4313      	orrs	r3, r2
 800d3a2:	693a      	ldr	r2, [r7, #16]
 800d3a4:	4313      	orrs	r3, r2
 800d3a6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	697a      	ldr	r2, [r7, #20]
 800d3ac:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	693a      	ldr	r2, [r7, #16]
 800d3b2:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800d3b4:	2300      	movs	r3, #0
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	371c      	adds	r7, #28
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c0:	4770      	bx	lr
 800d3c2:	bf00      	nop
 800d3c4:	ff0f0fff 	.word	0xff0f0fff

0800d3c8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d3c8:	b084      	sub	sp, #16
 800d3ca:	b480      	push	{r7}
 800d3cc:	b085      	sub	sp, #20
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	6078      	str	r0, [r7, #4]
 800d3d2:	f107 001c 	add.w	r0, r7, #28
 800d3d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d3de:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d3e0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d3e2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d3e6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d3ea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d3ee:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d3f2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d3f4:	68fa      	ldr	r2, [r7, #12]
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	685a      	ldr	r2, [r3, #4]
 800d3fe:	4b07      	ldr	r3, [pc, #28]	; (800d41c <SDMMC_Init+0x54>)
 800d400:	4013      	ands	r3, r2
 800d402:	68fa      	ldr	r2, [r7, #12]
 800d404:	431a      	orrs	r2, r3
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d40a:	2300      	movs	r3, #0
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3714      	adds	r7, #20
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	b004      	add	sp, #16
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop
 800d41c:	ffff8100 	.word	0xffff8100

0800d420 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d420:	b480      	push	{r7}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d42e:	4618      	mov	r0, r3
 800d430:	370c      	adds	r7, #12
 800d432:	46bd      	mov	sp, r7
 800d434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d438:	4770      	bx	lr

0800d43a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800d43a:	b580      	push	{r7, lr}
 800d43c:	b082      	sub	sp, #8
 800d43e:	af00      	add	r7, sp, #0
 800d440:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2203      	movs	r2, #3
 800d446:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800d448:	2002      	movs	r0, #2
 800d44a:	f7f6 fd81 	bl	8003f50 <HAL_Delay>
  
  return HAL_OK;
 800d44e:	2300      	movs	r3, #0
}
 800d450:	4618      	mov	r0, r3
 800d452:	3708      	adds	r7, #8
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800d458:	b480      	push	{r7}
 800d45a:	b083      	sub	sp, #12
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f003 0303 	and.w	r3, r3, #3
}
 800d468:	4618      	mov	r0, r3
 800d46a:	370c      	adds	r7, #12
 800d46c:	46bd      	mov	sp, r7
 800d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d472:	4770      	bx	lr

0800d474 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d474:	b480      	push	{r7}
 800d476:	b085      	sub	sp, #20
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d47e:	2300      	movs	r3, #0
 800d480:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	681a      	ldr	r2, [r3, #0]
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d492:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d498:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d49e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d4a0:	68fa      	ldr	r2, [r7, #12]
 800d4a2:	4313      	orrs	r3, r2
 800d4a4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	68da      	ldr	r2, [r3, #12]
 800d4aa:	4b06      	ldr	r3, [pc, #24]	; (800d4c4 <SDMMC_SendCommand+0x50>)
 800d4ac:	4013      	ands	r3, r2
 800d4ae:	68fa      	ldr	r2, [r7, #12]
 800d4b0:	431a      	orrs	r2, r3
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d4b6:	2300      	movs	r3, #0
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3714      	adds	r7, #20
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr
 800d4c4:	fffff000 	.word	0xfffff000

0800d4c8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	691b      	ldr	r3, [r3, #16]
 800d4d4:	b2db      	uxtb	r3, r3
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	370c      	adds	r7, #12
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr

0800d4e2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d4e2:	b480      	push	{r7}
 800d4e4:	b085      	sub	sp, #20
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
 800d4ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	3314      	adds	r3, #20
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	4413      	add	r3, r2
 800d4f6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
}  
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3714      	adds	r7, #20
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr

0800d508 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d508:	b480      	push	{r7}
 800d50a:	b085      	sub	sp, #20
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d512:	2300      	movs	r3, #0
 800d514:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	685a      	ldr	r2, [r3, #4]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d52e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d534:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d53a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d53c:	68fa      	ldr	r2, [r7, #12]
 800d53e:	4313      	orrs	r3, r2
 800d540:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d546:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	431a      	orrs	r2, r3
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d552:	2300      	movs	r3, #0

}
 800d554:	4618      	mov	r0, r3
 800d556:	3714      	adds	r7, #20
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr

0800d560 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b088      	sub	sp, #32
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d56e:	2310      	movs	r3, #16
 800d570:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d572:	2340      	movs	r3, #64	; 0x40
 800d574:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d576:	2300      	movs	r3, #0
 800d578:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d57a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d57e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d580:	f107 0308 	add.w	r3, r7, #8
 800d584:	4619      	mov	r1, r3
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f7ff ff74 	bl	800d474 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d58c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d590:	2110      	movs	r1, #16
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f000 fa42 	bl	800da1c <SDMMC_GetCmdResp1>
 800d598:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d59a:	69fb      	ldr	r3, [r7, #28]
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3720      	adds	r7, #32
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b088      	sub	sp, #32
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d5b2:	2311      	movs	r3, #17
 800d5b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5b6:	2340      	movs	r3, #64	; 0x40
 800d5b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5c4:	f107 0308 	add.w	r3, r7, #8
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f7ff ff52 	bl	800d474 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d5d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5d4:	2111      	movs	r1, #17
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f000 fa20 	bl	800da1c <SDMMC_GetCmdResp1>
 800d5dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5de:	69fb      	ldr	r3, [r7, #28]
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3720      	adds	r7, #32
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b088      	sub	sp, #32
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d5f6:	2312      	movs	r3, #18
 800d5f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5fa:	2340      	movs	r3, #64	; 0x40
 800d5fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5fe:	2300      	movs	r3, #0
 800d600:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d606:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d608:	f107 0308 	add.w	r3, r7, #8
 800d60c:	4619      	mov	r1, r3
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f7ff ff30 	bl	800d474 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d614:	f241 3288 	movw	r2, #5000	; 0x1388
 800d618:	2112      	movs	r1, #18
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 f9fe 	bl	800da1c <SDMMC_GetCmdResp1>
 800d620:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d622:	69fb      	ldr	r3, [r7, #28]
}
 800d624:	4618      	mov	r0, r3
 800d626:	3720      	adds	r7, #32
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b088      	sub	sp, #32
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d63a:	2318      	movs	r3, #24
 800d63c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d63e:	2340      	movs	r3, #64	; 0x40
 800d640:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d642:	2300      	movs	r3, #0
 800d644:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d64a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d64c:	f107 0308 	add.w	r3, r7, #8
 800d650:	4619      	mov	r1, r3
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f7ff ff0e 	bl	800d474 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d658:	f241 3288 	movw	r2, #5000	; 0x1388
 800d65c:	2118      	movs	r1, #24
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f000 f9dc 	bl	800da1c <SDMMC_GetCmdResp1>
 800d664:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d666:	69fb      	ldr	r3, [r7, #28]
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3720      	adds	r7, #32
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b088      	sub	sp, #32
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d67e:	2319      	movs	r3, #25
 800d680:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d682:	2340      	movs	r3, #64	; 0x40
 800d684:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d686:	2300      	movs	r3, #0
 800d688:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d68a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d68e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d690:	f107 0308 	add.w	r3, r7, #8
 800d694:	4619      	mov	r1, r3
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f7ff feec 	bl	800d474 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d69c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6a0:	2119      	movs	r1, #25
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f000 f9ba 	bl	800da1c <SDMMC_GetCmdResp1>
 800d6a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6aa:	69fb      	ldr	r3, [r7, #28]
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3720      	adds	r7, #32
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b088      	sub	sp, #32
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d6c0:	230c      	movs	r3, #12
 800d6c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6c4:	2340      	movs	r3, #64	; 0x40
 800d6c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6d2:	f107 0308 	add.w	r3, r7, #8
 800d6d6:	4619      	mov	r1, r3
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f7ff fecb 	bl	800d474 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d6de:	4a05      	ldr	r2, [pc, #20]	; (800d6f4 <SDMMC_CmdStopTransfer+0x40>)
 800d6e0:	210c      	movs	r1, #12
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 f99a 	bl	800da1c <SDMMC_GetCmdResp1>
 800d6e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6ea:	69fb      	ldr	r3, [r7, #28]
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3720      	adds	r7, #32
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}
 800d6f4:	05f5e100 	.word	0x05f5e100

0800d6f8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b08a      	sub	sp, #40	; 0x28
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	60f8      	str	r0, [r7, #12]
 800d700:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d708:	2307      	movs	r3, #7
 800d70a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d70c:	2340      	movs	r3, #64	; 0x40
 800d70e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d710:	2300      	movs	r3, #0
 800d712:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d718:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d71a:	f107 0310 	add.w	r3, r7, #16
 800d71e:	4619      	mov	r1, r3
 800d720:	68f8      	ldr	r0, [r7, #12]
 800d722:	f7ff fea7 	bl	800d474 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d726:	f241 3288 	movw	r2, #5000	; 0x1388
 800d72a:	2107      	movs	r1, #7
 800d72c:	68f8      	ldr	r0, [r7, #12]
 800d72e:	f000 f975 	bl	800da1c <SDMMC_GetCmdResp1>
 800d732:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d736:	4618      	mov	r0, r3
 800d738:	3728      	adds	r7, #40	; 0x28
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}

0800d73e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d73e:	b580      	push	{r7, lr}
 800d740:	b088      	sub	sp, #32
 800d742:	af00      	add	r7, sp, #0
 800d744:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d746:	2300      	movs	r3, #0
 800d748:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d74a:	2300      	movs	r3, #0
 800d74c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d74e:	2300      	movs	r3, #0
 800d750:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d752:	2300      	movs	r3, #0
 800d754:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d75a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d75c:	f107 0308 	add.w	r3, r7, #8
 800d760:	4619      	mov	r1, r3
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f7ff fe86 	bl	800d474 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f000 f92f 	bl	800d9cc <SDMMC_GetCmdError>
 800d76e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d770:	69fb      	ldr	r3, [r7, #28]
}
 800d772:	4618      	mov	r0, r3
 800d774:	3720      	adds	r7, #32
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}

0800d77a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d77a:	b580      	push	{r7, lr}
 800d77c:	b088      	sub	sp, #32
 800d77e:	af00      	add	r7, sp, #0
 800d780:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d782:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d786:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d788:	2308      	movs	r3, #8
 800d78a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d78c:	2340      	movs	r3, #64	; 0x40
 800d78e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d790:	2300      	movs	r3, #0
 800d792:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d798:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d79a:	f107 0308 	add.w	r3, r7, #8
 800d79e:	4619      	mov	r1, r3
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f7ff fe67 	bl	800d474 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f000 fb18 	bl	800dddc <SDMMC_GetCmdResp7>
 800d7ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7ae:	69fb      	ldr	r3, [r7, #28]
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3720      	adds	r7, #32
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b088      	sub	sp, #32
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d7c6:	2337      	movs	r3, #55	; 0x37
 800d7c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d7ca:	2340      	movs	r3, #64	; 0x40
 800d7cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d7d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d7d8:	f107 0308 	add.w	r3, r7, #8
 800d7dc:	4619      	mov	r1, r3
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f7ff fe48 	bl	800d474 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d7e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7e8:	2137      	movs	r1, #55	; 0x37
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f000 f916 	bl	800da1c <SDMMC_GetCmdResp1>
 800d7f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7f2:	69fb      	ldr	r3, [r7, #28]
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3720      	adds	r7, #32
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b088      	sub	sp, #32
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d806:	683a      	ldr	r2, [r7, #0]
 800d808:	4b0d      	ldr	r3, [pc, #52]	; (800d840 <SDMMC_CmdAppOperCommand+0x44>)
 800d80a:	4313      	orrs	r3, r2
 800d80c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d80e:	2329      	movs	r3, #41	; 0x29
 800d810:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d812:	2340      	movs	r3, #64	; 0x40
 800d814:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d816:	2300      	movs	r3, #0
 800d818:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d81a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d81e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d820:	f107 0308 	add.w	r3, r7, #8
 800d824:	4619      	mov	r1, r3
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f7ff fe24 	bl	800d474 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f000 fa27 	bl	800dc80 <SDMMC_GetCmdResp3>
 800d832:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d834:	69fb      	ldr	r3, [r7, #28]
}
 800d836:	4618      	mov	r0, r3
 800d838:	3720      	adds	r7, #32
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	bf00      	nop
 800d840:	80100000 	.word	0x80100000

0800d844 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b088      	sub	sp, #32
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d852:	2306      	movs	r3, #6
 800d854:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d856:	2340      	movs	r3, #64	; 0x40
 800d858:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d85a:	2300      	movs	r3, #0
 800d85c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d85e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d862:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d864:	f107 0308 	add.w	r3, r7, #8
 800d868:	4619      	mov	r1, r3
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f7ff fe02 	bl	800d474 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d870:	f241 3288 	movw	r2, #5000	; 0x1388
 800d874:	2106      	movs	r1, #6
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f000 f8d0 	bl	800da1c <SDMMC_GetCmdResp1>
 800d87c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d87e:	69fb      	ldr	r3, [r7, #28]
}
 800d880:	4618      	mov	r0, r3
 800d882:	3720      	adds	r7, #32
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}

0800d888 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b088      	sub	sp, #32
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d890:	2300      	movs	r3, #0
 800d892:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d894:	2333      	movs	r3, #51	; 0x33
 800d896:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d898:	2340      	movs	r3, #64	; 0x40
 800d89a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d89c:	2300      	movs	r3, #0
 800d89e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d8a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d8a6:	f107 0308 	add.w	r3, r7, #8
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f7ff fde1 	bl	800d474 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d8b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8b6:	2133      	movs	r1, #51	; 0x33
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f000 f8af 	bl	800da1c <SDMMC_GetCmdResp1>
 800d8be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8c0:	69fb      	ldr	r3, [r7, #28]
}
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	3720      	adds	r7, #32
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	bd80      	pop	{r7, pc}

0800d8ca <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d8ca:	b580      	push	{r7, lr}
 800d8cc:	b088      	sub	sp, #32
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d8d6:	2302      	movs	r3, #2
 800d8d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d8da:	23c0      	movs	r3, #192	; 0xc0
 800d8dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d8e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d8e8:	f107 0308 	add.w	r3, r7, #8
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f7ff fdc0 	bl	800d474 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f000 f97d 	bl	800dbf4 <SDMMC_GetCmdResp2>
 800d8fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8fc:	69fb      	ldr	r3, [r7, #28]
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3720      	adds	r7, #32
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}

0800d906 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d906:	b580      	push	{r7, lr}
 800d908:	b088      	sub	sp, #32
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
 800d90e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d914:	2309      	movs	r3, #9
 800d916:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d918:	23c0      	movs	r3, #192	; 0xc0
 800d91a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d91c:	2300      	movs	r3, #0
 800d91e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d924:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d926:	f107 0308 	add.w	r3, r7, #8
 800d92a:	4619      	mov	r1, r3
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f7ff fda1 	bl	800d474 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f000 f95e 	bl	800dbf4 <SDMMC_GetCmdResp2>
 800d938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d93a:	69fb      	ldr	r3, [r7, #28]
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3720      	adds	r7, #32
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b088      	sub	sp, #32
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d94e:	2300      	movs	r3, #0
 800d950:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d952:	2303      	movs	r3, #3
 800d954:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d956:	2340      	movs	r3, #64	; 0x40
 800d958:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d95a:	2300      	movs	r3, #0
 800d95c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d95e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d962:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d964:	f107 0308 	add.w	r3, r7, #8
 800d968:	4619      	mov	r1, r3
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f7ff fd82 	bl	800d474 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d970:	683a      	ldr	r2, [r7, #0]
 800d972:	2103      	movs	r1, #3
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f000 f9bd 	bl	800dcf4 <SDMMC_GetCmdResp6>
 800d97a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d97c:	69fb      	ldr	r3, [r7, #28]
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3720      	adds	r7, #32
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}

0800d986 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d986:	b580      	push	{r7, lr}
 800d988:	b088      	sub	sp, #32
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
 800d98e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d994:	230d      	movs	r3, #13
 800d996:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d998:	2340      	movs	r3, #64	; 0x40
 800d99a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d99c:	2300      	movs	r3, #0
 800d99e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d9a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d9a6:	f107 0308 	add.w	r3, r7, #8
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f7ff fd61 	bl	800d474 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d9b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9b6:	210d      	movs	r1, #13
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f000 f82f 	bl	800da1c <SDMMC_GetCmdResp1>
 800d9be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d9c0:	69fb      	ldr	r3, [r7, #28]
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3720      	adds	r7, #32
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
	...

0800d9cc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d9cc:	b490      	push	{r4, r7}
 800d9ce:	b082      	sub	sp, #8
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d9d4:	4b0f      	ldr	r3, [pc, #60]	; (800da14 <SDMMC_GetCmdError+0x48>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4a0f      	ldr	r2, [pc, #60]	; (800da18 <SDMMC_GetCmdError+0x4c>)
 800d9da:	fba2 2303 	umull	r2, r3, r2, r3
 800d9de:	0a5b      	lsrs	r3, r3, #9
 800d9e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d9e8:	4623      	mov	r3, r4
 800d9ea:	1e5c      	subs	r4, r3, #1
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d102      	bne.n	800d9f6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d9f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d9f4:	e009      	b.n	800da0a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d0f2      	beq.n	800d9e8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	22c5      	movs	r2, #197	; 0xc5
 800da06:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800da08:	2300      	movs	r3, #0
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3708      	adds	r7, #8
 800da0e:	46bd      	mov	sp, r7
 800da10:	bc90      	pop	{r4, r7}
 800da12:	4770      	bx	lr
 800da14:	20000004 	.word	0x20000004
 800da18:	10624dd3 	.word	0x10624dd3

0800da1c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800da1c:	b590      	push	{r4, r7, lr}
 800da1e:	b087      	sub	sp, #28
 800da20:	af00      	add	r7, sp, #0
 800da22:	60f8      	str	r0, [r7, #12]
 800da24:	460b      	mov	r3, r1
 800da26:	607a      	str	r2, [r7, #4]
 800da28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800da2a:	4b6f      	ldr	r3, [pc, #444]	; (800dbe8 <SDMMC_GetCmdResp1+0x1cc>)
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	4a6f      	ldr	r2, [pc, #444]	; (800dbec <SDMMC_GetCmdResp1+0x1d0>)
 800da30:	fba2 2303 	umull	r2, r3, r2, r3
 800da34:	0a5b      	lsrs	r3, r3, #9
 800da36:	687a      	ldr	r2, [r7, #4]
 800da38:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800da3c:	4623      	mov	r3, r4
 800da3e:	1e5c      	subs	r4, r3, #1
 800da40:	2b00      	cmp	r3, #0
 800da42:	d102      	bne.n	800da4a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800da48:	e0c9      	b.n	800dbde <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da4e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800da56:	2b00      	cmp	r3, #0
 800da58:	d0f0      	beq.n	800da3c <SDMMC_GetCmdResp1+0x20>
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da60:	2b00      	cmp	r3, #0
 800da62:	d1eb      	bne.n	800da3c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da68:	f003 0304 	and.w	r3, r3, #4
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d004      	beq.n	800da7a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2204      	movs	r2, #4
 800da74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da76:	2304      	movs	r3, #4
 800da78:	e0b1      	b.n	800dbde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da7e:	f003 0301 	and.w	r3, r3, #1
 800da82:	2b00      	cmp	r3, #0
 800da84:	d004      	beq.n	800da90 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	2201      	movs	r2, #1
 800da8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da8c:	2301      	movs	r3, #1
 800da8e:	e0a6      	b.n	800dbde <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	22c5      	movs	r2, #197	; 0xc5
 800da94:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800da96:	68f8      	ldr	r0, [r7, #12]
 800da98:	f7ff fd16 	bl	800d4c8 <SDMMC_GetCommandResponse>
 800da9c:	4603      	mov	r3, r0
 800da9e:	461a      	mov	r2, r3
 800daa0:	7afb      	ldrb	r3, [r7, #11]
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d001      	beq.n	800daaa <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800daa6:	2301      	movs	r3, #1
 800daa8:	e099      	b.n	800dbde <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800daaa:	2100      	movs	r1, #0
 800daac:	68f8      	ldr	r0, [r7, #12]
 800daae:	f7ff fd18 	bl	800d4e2 <SDMMC_GetResponse>
 800dab2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800dab4:	693a      	ldr	r2, [r7, #16]
 800dab6:	4b4e      	ldr	r3, [pc, #312]	; (800dbf0 <SDMMC_GetCmdResp1+0x1d4>)
 800dab8:	4013      	ands	r3, r2
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d101      	bne.n	800dac2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800dabe:	2300      	movs	r3, #0
 800dac0:	e08d      	b.n	800dbde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	da02      	bge.n	800dace <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800dac8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dacc:	e087      	b.n	800dbde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d001      	beq.n	800dadc <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800dad8:	2340      	movs	r3, #64	; 0x40
 800dada:	e080      	b.n	800dbde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d001      	beq.n	800daea <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dae6:	2380      	movs	r3, #128	; 0x80
 800dae8:	e079      	b.n	800dbde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d002      	beq.n	800dafa <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800daf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800daf8:	e071      	b.n	800dbde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800db00:	2b00      	cmp	r3, #0
 800db02:	d002      	beq.n	800db0a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800db04:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db08:	e069      	b.n	800dbde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800db10:	2b00      	cmp	r3, #0
 800db12:	d002      	beq.n	800db1a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800db14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db18:	e061      	b.n	800dbde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800db20:	2b00      	cmp	r3, #0
 800db22:	d002      	beq.n	800db2a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800db24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800db28:	e059      	b.n	800dbde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800db30:	2b00      	cmp	r3, #0
 800db32:	d002      	beq.n	800db3a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800db34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db38:	e051      	b.n	800dbde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db40:	2b00      	cmp	r3, #0
 800db42:	d002      	beq.n	800db4a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800db44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800db48:	e049      	b.n	800dbde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800db50:	2b00      	cmp	r3, #0
 800db52:	d002      	beq.n	800db5a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800db54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800db58:	e041      	b.n	800dbde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800db60:	2b00      	cmp	r3, #0
 800db62:	d002      	beq.n	800db6a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800db64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db68:	e039      	b.n	800dbde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800db70:	2b00      	cmp	r3, #0
 800db72:	d002      	beq.n	800db7a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800db74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800db78:	e031      	b.n	800dbde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db80:	2b00      	cmp	r3, #0
 800db82:	d002      	beq.n	800db8a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800db84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800db88:	e029      	b.n	800dbde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800db90:	2b00      	cmp	r3, #0
 800db92:	d002      	beq.n	800db9a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800db94:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800db98:	e021      	b.n	800dbde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d002      	beq.n	800dbaa <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800dba4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800dba8:	e019      	b.n	800dbde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d002      	beq.n	800dbba <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800dbb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800dbb8:	e011      	b.n	800dbde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d002      	beq.n	800dbca <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800dbc4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dbc8:	e009      	b.n	800dbde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	f003 0308 	and.w	r3, r3, #8
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d002      	beq.n	800dbda <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dbd4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800dbd8:	e001      	b.n	800dbde <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dbda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	371c      	adds	r7, #28
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd90      	pop	{r4, r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	20000004 	.word	0x20000004
 800dbec:	10624dd3 	.word	0x10624dd3
 800dbf0:	fdffe008 	.word	0xfdffe008

0800dbf4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800dbf4:	b490      	push	{r4, r7}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dbfc:	4b1e      	ldr	r3, [pc, #120]	; (800dc78 <SDMMC_GetCmdResp2+0x84>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	4a1e      	ldr	r2, [pc, #120]	; (800dc7c <SDMMC_GetCmdResp2+0x88>)
 800dc02:	fba2 2303 	umull	r2, r3, r2, r3
 800dc06:	0a5b      	lsrs	r3, r3, #9
 800dc08:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc0c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dc10:	4623      	mov	r3, r4
 800dc12:	1e5c      	subs	r4, r3, #1
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d102      	bne.n	800dc1e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc1c:	e026      	b.n	800dc6c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc22:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d0f0      	beq.n	800dc10 <SDMMC_GetCmdResp2+0x1c>
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d1eb      	bne.n	800dc10 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc3c:	f003 0304 	and.w	r3, r3, #4
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d004      	beq.n	800dc4e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2204      	movs	r2, #4
 800dc48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc4a:	2304      	movs	r3, #4
 800dc4c:	e00e      	b.n	800dc6c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc52:	f003 0301 	and.w	r3, r3, #1
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d004      	beq.n	800dc64 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dc60:	2301      	movs	r3, #1
 800dc62:	e003      	b.n	800dc6c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	22c5      	movs	r2, #197	; 0xc5
 800dc68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dc6a:	2300      	movs	r3, #0
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3710      	adds	r7, #16
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bc90      	pop	{r4, r7}
 800dc74:	4770      	bx	lr
 800dc76:	bf00      	nop
 800dc78:	20000004 	.word	0x20000004
 800dc7c:	10624dd3 	.word	0x10624dd3

0800dc80 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800dc80:	b490      	push	{r4, r7}
 800dc82:	b084      	sub	sp, #16
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc88:	4b18      	ldr	r3, [pc, #96]	; (800dcec <SDMMC_GetCmdResp3+0x6c>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	4a18      	ldr	r2, [pc, #96]	; (800dcf0 <SDMMC_GetCmdResp3+0x70>)
 800dc8e:	fba2 2303 	umull	r2, r3, r2, r3
 800dc92:	0a5b      	lsrs	r3, r3, #9
 800dc94:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc98:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dc9c:	4623      	mov	r3, r4
 800dc9e:	1e5c      	subs	r4, r3, #1
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d102      	bne.n	800dcaa <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dca4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dca8:	e01b      	b.n	800dce2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcae:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d0f0      	beq.n	800dc9c <SDMMC_GetCmdResp3+0x1c>
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d1eb      	bne.n	800dc9c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcc8:	f003 0304 	and.w	r3, r3, #4
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d004      	beq.n	800dcda <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2204      	movs	r2, #4
 800dcd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dcd6:	2304      	movs	r3, #4
 800dcd8:	e003      	b.n	800dce2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	22c5      	movs	r2, #197	; 0xc5
 800dcde:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dce0:	2300      	movs	r3, #0
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3710      	adds	r7, #16
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bc90      	pop	{r4, r7}
 800dcea:	4770      	bx	lr
 800dcec:	20000004 	.word	0x20000004
 800dcf0:	10624dd3 	.word	0x10624dd3

0800dcf4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800dcf4:	b590      	push	{r4, r7, lr}
 800dcf6:	b087      	sub	sp, #28
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	460b      	mov	r3, r1
 800dcfe:	607a      	str	r2, [r7, #4]
 800dd00:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd02:	4b34      	ldr	r3, [pc, #208]	; (800ddd4 <SDMMC_GetCmdResp6+0xe0>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	4a34      	ldr	r2, [pc, #208]	; (800ddd8 <SDMMC_GetCmdResp6+0xe4>)
 800dd08:	fba2 2303 	umull	r2, r3, r2, r3
 800dd0c:	0a5b      	lsrs	r3, r3, #9
 800dd0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd12:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dd16:	4623      	mov	r3, r4
 800dd18:	1e5c      	subs	r4, r3, #1
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d102      	bne.n	800dd24 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd1e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd22:	e052      	b.n	800ddca <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd28:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d0f0      	beq.n	800dd16 <SDMMC_GetCmdResp6+0x22>
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d1eb      	bne.n	800dd16 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd42:	f003 0304 	and.w	r3, r3, #4
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d004      	beq.n	800dd54 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	2204      	movs	r2, #4
 800dd4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd50:	2304      	movs	r3, #4
 800dd52:	e03a      	b.n	800ddca <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd58:	f003 0301 	and.w	r3, r3, #1
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d004      	beq.n	800dd6a <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	2201      	movs	r2, #1
 800dd64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd66:	2301      	movs	r3, #1
 800dd68:	e02f      	b.n	800ddca <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dd6a:	68f8      	ldr	r0, [r7, #12]
 800dd6c:	f7ff fbac 	bl	800d4c8 <SDMMC_GetCommandResponse>
 800dd70:	4603      	mov	r3, r0
 800dd72:	461a      	mov	r2, r3
 800dd74:	7afb      	ldrb	r3, [r7, #11]
 800dd76:	4293      	cmp	r3, r2
 800dd78:	d001      	beq.n	800dd7e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	e025      	b.n	800ddca <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	22c5      	movs	r2, #197	; 0xc5
 800dd82:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800dd84:	2100      	movs	r1, #0
 800dd86:	68f8      	ldr	r0, [r7, #12]
 800dd88:	f7ff fbab 	bl	800d4e2 <SDMMC_GetResponse>
 800dd8c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d106      	bne.n	800dda6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	0c1b      	lsrs	r3, r3, #16
 800dd9c:	b29a      	uxth	r2, r3
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800dda2:	2300      	movs	r3, #0
 800dda4:	e011      	b.n	800ddca <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d002      	beq.n	800ddb6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ddb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ddb4:	e009      	b.n	800ddca <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d002      	beq.n	800ddc6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ddc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddc4:	e001      	b.n	800ddca <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ddc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	371c      	adds	r7, #28
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd90      	pop	{r4, r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	20000004 	.word	0x20000004
 800ddd8:	10624dd3 	.word	0x10624dd3

0800dddc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800dddc:	b490      	push	{r4, r7}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dde4:	4b21      	ldr	r3, [pc, #132]	; (800de6c <SDMMC_GetCmdResp7+0x90>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	4a21      	ldr	r2, [pc, #132]	; (800de70 <SDMMC_GetCmdResp7+0x94>)
 800ddea:	fba2 2303 	umull	r2, r3, r2, r3
 800ddee:	0a5b      	lsrs	r3, r3, #9
 800ddf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ddf4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ddf8:	4623      	mov	r3, r4
 800ddfa:	1e5c      	subs	r4, r3, #1
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d102      	bne.n	800de06 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800de00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800de04:	e02c      	b.n	800de60 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de0a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800de12:	2b00      	cmp	r3, #0
 800de14:	d0f0      	beq.n	800ddf8 <SDMMC_GetCmdResp7+0x1c>
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d1eb      	bne.n	800ddf8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de24:	f003 0304 	and.w	r3, r3, #4
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d004      	beq.n	800de36 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2204      	movs	r2, #4
 800de30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800de32:	2304      	movs	r3, #4
 800de34:	e014      	b.n	800de60 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de3a:	f003 0301 	and.w	r3, r3, #1
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d004      	beq.n	800de4c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2201      	movs	r2, #1
 800de46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de48:	2301      	movs	r3, #1
 800de4a:	e009      	b.n	800de60 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de54:	2b00      	cmp	r3, #0
 800de56:	d002      	beq.n	800de5e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2240      	movs	r2, #64	; 0x40
 800de5c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800de5e:	2300      	movs	r3, #0
  
}
 800de60:	4618      	mov	r0, r3
 800de62:	3710      	adds	r7, #16
 800de64:	46bd      	mov	sp, r7
 800de66:	bc90      	pop	{r4, r7}
 800de68:	4770      	bx	lr
 800de6a:	bf00      	nop
 800de6c:	20000004 	.word	0x20000004
 800de70:	10624dd3 	.word	0x10624dd3

0800de74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800de74:	b084      	sub	sp, #16
 800de76:	b580      	push	{r7, lr}
 800de78:	b084      	sub	sp, #16
 800de7a:	af00      	add	r7, sp, #0
 800de7c:	6078      	str	r0, [r7, #4]
 800de7e:	f107 001c 	add.w	r0, r7, #28
 800de82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800de86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de88:	2b01      	cmp	r3, #1
 800de8a:	d120      	bne.n	800dece <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	68da      	ldr	r2, [r3, #12]
 800de9c:	4b20      	ldr	r3, [pc, #128]	; (800df20 <USB_CoreInit+0xac>)
 800de9e:	4013      	ands	r3, r2
 800dea0:	687a      	ldr	r2, [r7, #4]
 800dea2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	68db      	ldr	r3, [r3, #12]
 800dea8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800deb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deb2:	2b01      	cmp	r3, #1
 800deb4:	d105      	bne.n	800dec2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	68db      	ldr	r3, [r3, #12]
 800deba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f000 f942 	bl	800e14c <USB_CoreReset>
 800dec8:	4603      	mov	r3, r0
 800deca:	73fb      	strb	r3, [r7, #15]
 800decc:	e010      	b.n	800def0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f000 f936 	bl	800e14c <USB_CoreReset>
 800dee0:	4603      	mov	r3, r0
 800dee2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dee8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800def0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def2:	2b01      	cmp	r3, #1
 800def4:	d10b      	bne.n	800df0e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	689b      	ldr	r3, [r3, #8]
 800defa:	f043 0206 	orr.w	r2, r3, #6
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	689b      	ldr	r3, [r3, #8]
 800df06:	f043 0220 	orr.w	r2, r3, #32
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800df0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800df10:	4618      	mov	r0, r3
 800df12:	3710      	adds	r7, #16
 800df14:	46bd      	mov	sp, r7
 800df16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800df1a:	b004      	add	sp, #16
 800df1c:	4770      	bx	lr
 800df1e:	bf00      	nop
 800df20:	ffbdffbf 	.word	0xffbdffbf

0800df24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	689b      	ldr	r3, [r3, #8]
 800df30:	f043 0201 	orr.w	r2, r3, #1
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800df38:	2300      	movs	r3, #0
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	370c      	adds	r7, #12
 800df3e:	46bd      	mov	sp, r7
 800df40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df44:	4770      	bx	lr

0800df46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800df46:	b480      	push	{r7}
 800df48:	b083      	sub	sp, #12
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	689b      	ldr	r3, [r3, #8]
 800df52:	f023 0201 	bic.w	r2, r3, #1
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800df5a:	2300      	movs	r3, #0
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	370c      	adds	r7, #12
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr

0800df68 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b082      	sub	sp, #8
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	460b      	mov	r3, r1
 800df72:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	68db      	ldr	r3, [r3, #12]
 800df78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800df80:	78fb      	ldrb	r3, [r7, #3]
 800df82:	2b01      	cmp	r3, #1
 800df84:	d106      	bne.n	800df94 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	68db      	ldr	r3, [r3, #12]
 800df8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	60da      	str	r2, [r3, #12]
 800df92:	e00b      	b.n	800dfac <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800df94:	78fb      	ldrb	r3, [r7, #3]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d106      	bne.n	800dfa8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	68db      	ldr	r3, [r3, #12]
 800df9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	60da      	str	r2, [r3, #12]
 800dfa6:	e001      	b.n	800dfac <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	e003      	b.n	800dfb4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800dfac:	2032      	movs	r0, #50	; 0x32
 800dfae:	f7f5 ffcf 	bl	8003f50 <HAL_Delay>

  return HAL_OK;
 800dfb2:	2300      	movs	r3, #0
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3708      	adds	r7, #8
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}

0800dfbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b085      	sub	sp, #20
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
 800dfc4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	019b      	lsls	r3, r3, #6
 800dfce:	f043 0220 	orr.w	r2, r3, #32
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	3301      	adds	r3, #1
 800dfda:	60fb      	str	r3, [r7, #12]
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	4a09      	ldr	r2, [pc, #36]	; (800e004 <USB_FlushTxFifo+0x48>)
 800dfe0:	4293      	cmp	r3, r2
 800dfe2:	d901      	bls.n	800dfe8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800dfe4:	2303      	movs	r3, #3
 800dfe6:	e006      	b.n	800dff6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	691b      	ldr	r3, [r3, #16]
 800dfec:	f003 0320 	and.w	r3, r3, #32
 800dff0:	2b20      	cmp	r3, #32
 800dff2:	d0f0      	beq.n	800dfd6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800dff4:	2300      	movs	r3, #0
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3714      	adds	r7, #20
 800dffa:	46bd      	mov	sp, r7
 800dffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e000:	4770      	bx	lr
 800e002:	bf00      	nop
 800e004:	00030d40 	.word	0x00030d40

0800e008 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e008:	b480      	push	{r7}
 800e00a:	b085      	sub	sp, #20
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e010:	2300      	movs	r3, #0
 800e012:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2210      	movs	r2, #16
 800e018:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	3301      	adds	r3, #1
 800e01e:	60fb      	str	r3, [r7, #12]
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	4a09      	ldr	r2, [pc, #36]	; (800e048 <USB_FlushRxFifo+0x40>)
 800e024:	4293      	cmp	r3, r2
 800e026:	d901      	bls.n	800e02c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e028:	2303      	movs	r3, #3
 800e02a:	e006      	b.n	800e03a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	691b      	ldr	r3, [r3, #16]
 800e030:	f003 0310 	and.w	r3, r3, #16
 800e034:	2b10      	cmp	r3, #16
 800e036:	d0f0      	beq.n	800e01a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e038:	2300      	movs	r3, #0
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3714      	adds	r7, #20
 800e03e:	46bd      	mov	sp, r7
 800e040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e044:	4770      	bx	lr
 800e046:	bf00      	nop
 800e048:	00030d40 	.word	0x00030d40

0800e04c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b089      	sub	sp, #36	; 0x24
 800e050:	af00      	add	r7, sp, #0
 800e052:	60f8      	str	r0, [r7, #12]
 800e054:	60b9      	str	r1, [r7, #8]
 800e056:	4611      	mov	r1, r2
 800e058:	461a      	mov	r2, r3
 800e05a:	460b      	mov	r3, r1
 800e05c:	71fb      	strb	r3, [r7, #7]
 800e05e:	4613      	mov	r3, r2
 800e060:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800e06a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d11a      	bne.n	800e0a8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e072:	88bb      	ldrh	r3, [r7, #4]
 800e074:	3303      	adds	r3, #3
 800e076:	089b      	lsrs	r3, r3, #2
 800e078:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e07a:	2300      	movs	r3, #0
 800e07c:	61bb      	str	r3, [r7, #24]
 800e07e:	e00f      	b.n	800e0a0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e080:	79fb      	ldrb	r3, [r7, #7]
 800e082:	031a      	lsls	r2, r3, #12
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	4413      	add	r3, r2
 800e088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e08c:	461a      	mov	r2, r3
 800e08e:	69fb      	ldr	r3, [r7, #28]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e094:	69fb      	ldr	r3, [r7, #28]
 800e096:	3304      	adds	r3, #4
 800e098:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e09a:	69bb      	ldr	r3, [r7, #24]
 800e09c:	3301      	adds	r3, #1
 800e09e:	61bb      	str	r3, [r7, #24]
 800e0a0:	69ba      	ldr	r2, [r7, #24]
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d3eb      	bcc.n	800e080 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e0a8:	2300      	movs	r3, #0
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3724      	adds	r7, #36	; 0x24
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b4:	4770      	bx	lr

0800e0b6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e0b6:	b480      	push	{r7}
 800e0b8:	b089      	sub	sp, #36	; 0x24
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	60f8      	str	r0, [r7, #12]
 800e0be:	60b9      	str	r1, [r7, #8]
 800e0c0:	4613      	mov	r3, r2
 800e0c2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800e0cc:	88fb      	ldrh	r3, [r7, #6]
 800e0ce:	3303      	adds	r3, #3
 800e0d0:	089b      	lsrs	r3, r3, #2
 800e0d2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	61bb      	str	r3, [r7, #24]
 800e0d8:	e00b      	b.n	800e0f2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	69fb      	ldr	r3, [r7, #28]
 800e0e4:	601a      	str	r2, [r3, #0]
    pDest++;
 800e0e6:	69fb      	ldr	r3, [r7, #28]
 800e0e8:	3304      	adds	r3, #4
 800e0ea:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800e0ec:	69bb      	ldr	r3, [r7, #24]
 800e0ee:	3301      	adds	r3, #1
 800e0f0:	61bb      	str	r3, [r7, #24]
 800e0f2:	69ba      	ldr	r2, [r7, #24]
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d3ef      	bcc.n	800e0da <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800e0fa:	69fb      	ldr	r3, [r7, #28]
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3724      	adds	r7, #36	; 0x24
 800e100:	46bd      	mov	sp, r7
 800e102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e106:	4770      	bx	lr

0800e108 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e108:	b480      	push	{r7}
 800e10a:	b085      	sub	sp, #20
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	695b      	ldr	r3, [r3, #20]
 800e114:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	699b      	ldr	r3, [r3, #24]
 800e11a:	68fa      	ldr	r2, [r7, #12]
 800e11c:	4013      	ands	r3, r2
 800e11e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e120:	68fb      	ldr	r3, [r7, #12]
}
 800e122:	4618      	mov	r0, r3
 800e124:	3714      	adds	r7, #20
 800e126:	46bd      	mov	sp, r7
 800e128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12c:	4770      	bx	lr

0800e12e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e12e:	b480      	push	{r7}
 800e130:	b083      	sub	sp, #12
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	695b      	ldr	r3, [r3, #20]
 800e13a:	f003 0301 	and.w	r3, r3, #1
}
 800e13e:	4618      	mov	r0, r3
 800e140:	370c      	adds	r7, #12
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr
	...

0800e14c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b085      	sub	sp, #20
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800e154:	2300      	movs	r3, #0
 800e156:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	3301      	adds	r3, #1
 800e15c:	60fb      	str	r3, [r7, #12]
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	4a13      	ldr	r2, [pc, #76]	; (800e1b0 <USB_CoreReset+0x64>)
 800e162:	4293      	cmp	r3, r2
 800e164:	d901      	bls.n	800e16a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e166:	2303      	movs	r3, #3
 800e168:	e01b      	b.n	800e1a2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	691b      	ldr	r3, [r3, #16]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	daf2      	bge.n	800e158 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e172:	2300      	movs	r3, #0
 800e174:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	691b      	ldr	r3, [r3, #16]
 800e17a:	f043 0201 	orr.w	r2, r3, #1
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	3301      	adds	r3, #1
 800e186:	60fb      	str	r3, [r7, #12]
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	4a09      	ldr	r2, [pc, #36]	; (800e1b0 <USB_CoreReset+0x64>)
 800e18c:	4293      	cmp	r3, r2
 800e18e:	d901      	bls.n	800e194 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e190:	2303      	movs	r3, #3
 800e192:	e006      	b.n	800e1a2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	691b      	ldr	r3, [r3, #16]
 800e198:	f003 0301 	and.w	r3, r3, #1
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d0f0      	beq.n	800e182 <USB_CoreReset+0x36>

  return HAL_OK;
 800e1a0:	2300      	movs	r3, #0
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3714      	adds	r7, #20
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ac:	4770      	bx	lr
 800e1ae:	bf00      	nop
 800e1b0:	00030d40 	.word	0x00030d40

0800e1b4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e1b4:	b084      	sub	sp, #16
 800e1b6:	b580      	push	{r7, lr}
 800e1b8:	b084      	sub	sp, #16
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	6078      	str	r0, [r7, #4]
 800e1be:	f107 001c 	add.w	r0, r7, #28
 800e1c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e1d0:	461a      	mov	r2, r3
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d018      	beq.n	800e220 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800e1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f0:	2b01      	cmp	r3, #1
 800e1f2:	d10a      	bne.n	800e20a <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	68ba      	ldr	r2, [r7, #8]
 800e1fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e202:	f043 0304 	orr.w	r3, r3, #4
 800e206:	6013      	str	r3, [r2, #0]
 800e208:	e014      	b.n	800e234 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	68ba      	ldr	r2, [r7, #8]
 800e214:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e218:	f023 0304 	bic.w	r3, r3, #4
 800e21c:	6013      	str	r3, [r2, #0]
 800e21e:	e009      	b.n	800e234 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	68ba      	ldr	r2, [r7, #8]
 800e22a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e22e:	f023 0304 	bic.w	r3, r3, #4
 800e232:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800e234:	2110      	movs	r1, #16
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f7ff fec0 	bl	800dfbc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800e23c:	6878      	ldr	r0, [r7, #4]
 800e23e:	f7ff fee3 	bl	800e008 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800e242:	2300      	movs	r3, #0
 800e244:	60fb      	str	r3, [r7, #12]
 800e246:	e015      	b.n	800e274 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	015a      	lsls	r2, r3, #5
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	4413      	add	r3, r2
 800e250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e254:	461a      	mov	r2, r3
 800e256:	f04f 33ff 	mov.w	r3, #4294967295
 800e25a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	015a      	lsls	r2, r3, #5
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	4413      	add	r3, r2
 800e264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e268:	461a      	mov	r2, r3
 800e26a:	2300      	movs	r3, #0
 800e26c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	3301      	adds	r3, #1
 800e272:	60fb      	str	r3, [r7, #12]
 800e274:	6a3b      	ldr	r3, [r7, #32]
 800e276:	68fa      	ldr	r2, [r7, #12]
 800e278:	429a      	cmp	r2, r3
 800e27a:	d3e5      	bcc.n	800e248 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800e27c:	2101      	movs	r1, #1
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f000 f8ac 	bl	800e3dc <USB_DriveVbus>

  HAL_Delay(200U);
 800e284:	20c8      	movs	r0, #200	; 0xc8
 800e286:	f7f5 fe63 	bl	8003f50 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2200      	movs	r2, #0
 800e28e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f04f 32ff 	mov.w	r2, #4294967295
 800e296:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e29c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d00b      	beq.n	800e2bc <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e2aa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	4a14      	ldr	r2, [pc, #80]	; (800e300 <USB_HostInit+0x14c>)
 800e2b0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	4a13      	ldr	r2, [pc, #76]	; (800e304 <USB_HostInit+0x150>)
 800e2b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800e2ba:	e009      	b.n	800e2d0 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2280      	movs	r2, #128	; 0x80
 800e2c0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	4a10      	ldr	r2, [pc, #64]	; (800e308 <USB_HostInit+0x154>)
 800e2c6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	4a10      	ldr	r2, [pc, #64]	; (800e30c <USB_HostInit+0x158>)
 800e2cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d105      	bne.n	800e2e2 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	699b      	ldr	r3, [r3, #24]
 800e2da:	f043 0210 	orr.w	r2, r3, #16
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	699a      	ldr	r2, [r3, #24]
 800e2e6:	4b0a      	ldr	r3, [pc, #40]	; (800e310 <USB_HostInit+0x15c>)
 800e2e8:	4313      	orrs	r3, r2
 800e2ea:	687a      	ldr	r2, [r7, #4]
 800e2ec:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800e2ee:	2300      	movs	r3, #0
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3710      	adds	r7, #16
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e2fa:	b004      	add	sp, #16
 800e2fc:	4770      	bx	lr
 800e2fe:	bf00      	nop
 800e300:	01000200 	.word	0x01000200
 800e304:	00e00300 	.word	0x00e00300
 800e308:	00600080 	.word	0x00600080
 800e30c:	004000e0 	.word	0x004000e0
 800e310:	a3200008 	.word	0xa3200008

0800e314 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800e314:	b480      	push	{r7}
 800e316:	b085      	sub	sp, #20
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	460b      	mov	r3, r1
 800e31e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	68fa      	ldr	r2, [r7, #12]
 800e32e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e332:	f023 0303 	bic.w	r3, r3, #3
 800e336:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e33e:	681a      	ldr	r2, [r3, #0]
 800e340:	78fb      	ldrb	r3, [r7, #3]
 800e342:	f003 0303 	and.w	r3, r3, #3
 800e346:	68f9      	ldr	r1, [r7, #12]
 800e348:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e34c:	4313      	orrs	r3, r2
 800e34e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800e350:	78fb      	ldrb	r3, [r7, #3]
 800e352:	2b01      	cmp	r3, #1
 800e354:	d107      	bne.n	800e366 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e35c:	461a      	mov	r2, r3
 800e35e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800e362:	6053      	str	r3, [r2, #4]
 800e364:	e009      	b.n	800e37a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800e366:	78fb      	ldrb	r3, [r7, #3]
 800e368:	2b02      	cmp	r3, #2
 800e36a:	d106      	bne.n	800e37a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e372:	461a      	mov	r2, r3
 800e374:	f241 7370 	movw	r3, #6000	; 0x1770
 800e378:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800e37a:	2300      	movs	r3, #0
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3714      	adds	r7, #20
 800e380:	46bd      	mov	sp, r7
 800e382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e386:	4770      	bx	lr

0800e388 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b084      	sub	sp, #16
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800e394:	2300      	movs	r3, #0
 800e396:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800e3a8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	68fa      	ldr	r2, [r7, #12]
 800e3ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800e3b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e3b6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800e3b8:	2064      	movs	r0, #100	; 0x64
 800e3ba:	f7f5 fdc9 	bl	8003f50 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	68fa      	ldr	r2, [r7, #12]
 800e3c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800e3c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e3ca:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800e3cc:	200a      	movs	r0, #10
 800e3ce:	f7f5 fdbf 	bl	8003f50 <HAL_Delay>

  return HAL_OK;
 800e3d2:	2300      	movs	r3, #0
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3710      	adds	r7, #16
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b085      	sub	sp, #20
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	460b      	mov	r3, r1
 800e3e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800e400:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d109      	bne.n	800e420 <USB_DriveVbus+0x44>
 800e40c:	78fb      	ldrb	r3, [r7, #3]
 800e40e:	2b01      	cmp	r3, #1
 800e410:	d106      	bne.n	800e420 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	68fa      	ldr	r2, [r7, #12]
 800e416:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800e41a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e41e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e42a:	d109      	bne.n	800e440 <USB_DriveVbus+0x64>
 800e42c:	78fb      	ldrb	r3, [r7, #3]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d106      	bne.n	800e440 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	68fa      	ldr	r2, [r7, #12]
 800e436:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800e43a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e43e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800e440:	2300      	movs	r3, #0
}
 800e442:	4618      	mov	r0, r3
 800e444:	3714      	adds	r7, #20
 800e446:	46bd      	mov	sp, r7
 800e448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44c:	4770      	bx	lr

0800e44e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e44e:	b480      	push	{r7}
 800e450:	b085      	sub	sp, #20
 800e452:	af00      	add	r7, sp, #0
 800e454:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800e45a:	2300      	movs	r3, #0
 800e45c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	0c5b      	lsrs	r3, r3, #17
 800e46c:	f003 0303 	and.w	r3, r3, #3
}
 800e470:	4618      	mov	r0, r3
 800e472:	3714      	adds	r7, #20
 800e474:	46bd      	mov	sp, r7
 800e476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47a:	4770      	bx	lr

0800e47c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800e47c:	b480      	push	{r7}
 800e47e:	b085      	sub	sp, #20
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e48e:	689b      	ldr	r3, [r3, #8]
 800e490:	b29b      	uxth	r3, r3
}
 800e492:	4618      	mov	r0, r3
 800e494:	3714      	adds	r7, #20
 800e496:	46bd      	mov	sp, r7
 800e498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49c:	4770      	bx	lr
	...

0800e4a0 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800e4a0:	b480      	push	{r7}
 800e4a2:	b087      	sub	sp, #28
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	4608      	mov	r0, r1
 800e4aa:	4611      	mov	r1, r2
 800e4ac:	461a      	mov	r2, r3
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	70fb      	strb	r3, [r7, #3]
 800e4b2:	460b      	mov	r3, r1
 800e4b4:	70bb      	strb	r3, [r7, #2]
 800e4b6:	4613      	mov	r3, r2
 800e4b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800e4c2:	78fb      	ldrb	r3, [r7, #3]
 800e4c4:	015a      	lsls	r2, r3, #5
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	4413      	add	r3, r2
 800e4ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e4d4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800e4d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e4da:	2b03      	cmp	r3, #3
 800e4dc:	d87e      	bhi.n	800e5dc <USB_HC_Init+0x13c>
 800e4de:	a201      	add	r2, pc, #4	; (adr r2, 800e4e4 <USB_HC_Init+0x44>)
 800e4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4e4:	0800e4f5 	.word	0x0800e4f5
 800e4e8:	0800e59f 	.word	0x0800e59f
 800e4ec:	0800e4f5 	.word	0x0800e4f5
 800e4f0:	0800e561 	.word	0x0800e561
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e4f4:	78fb      	ldrb	r3, [r7, #3]
 800e4f6:	015a      	lsls	r2, r3, #5
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	4413      	add	r3, r2
 800e4fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e500:	461a      	mov	r2, r3
 800e502:	f240 439d 	movw	r3, #1181	; 0x49d
 800e506:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800e508:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	da10      	bge.n	800e532 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800e510:	78fb      	ldrb	r3, [r7, #3]
 800e512:	015a      	lsls	r2, r3, #5
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	4413      	add	r3, r2
 800e518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e51c:	68db      	ldr	r3, [r3, #12]
 800e51e:	78fa      	ldrb	r2, [r7, #3]
 800e520:	0151      	lsls	r1, r2, #5
 800e522:	68ba      	ldr	r2, [r7, #8]
 800e524:	440a      	add	r2, r1
 800e526:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e52a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e52e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800e530:	e057      	b.n	800e5e2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d051      	beq.n	800e5e2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800e53e:	78fb      	ldrb	r3, [r7, #3]
 800e540:	015a      	lsls	r2, r3, #5
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	4413      	add	r3, r2
 800e546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e54a:	68db      	ldr	r3, [r3, #12]
 800e54c:	78fa      	ldrb	r2, [r7, #3]
 800e54e:	0151      	lsls	r1, r2, #5
 800e550:	68ba      	ldr	r2, [r7, #8]
 800e552:	440a      	add	r2, r1
 800e554:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e558:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800e55c:	60d3      	str	r3, [r2, #12]
      break;
 800e55e:	e040      	b.n	800e5e2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e560:	78fb      	ldrb	r3, [r7, #3]
 800e562:	015a      	lsls	r2, r3, #5
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	4413      	add	r3, r2
 800e568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e56c:	461a      	mov	r2, r3
 800e56e:	f240 639d 	movw	r3, #1693	; 0x69d
 800e572:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800e574:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	da34      	bge.n	800e5e6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800e57c:	78fb      	ldrb	r3, [r7, #3]
 800e57e:	015a      	lsls	r2, r3, #5
 800e580:	68bb      	ldr	r3, [r7, #8]
 800e582:	4413      	add	r3, r2
 800e584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e588:	68db      	ldr	r3, [r3, #12]
 800e58a:	78fa      	ldrb	r2, [r7, #3]
 800e58c:	0151      	lsls	r1, r2, #5
 800e58e:	68ba      	ldr	r2, [r7, #8]
 800e590:	440a      	add	r2, r1
 800e592:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e59a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800e59c:	e023      	b.n	800e5e6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800e59e:	78fb      	ldrb	r3, [r7, #3]
 800e5a0:	015a      	lsls	r2, r3, #5
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	4413      	add	r3, r2
 800e5a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	f240 2325 	movw	r3, #549	; 0x225
 800e5b0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800e5b2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	da17      	bge.n	800e5ea <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800e5ba:	78fb      	ldrb	r3, [r7, #3]
 800e5bc:	015a      	lsls	r2, r3, #5
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	4413      	add	r3, r2
 800e5c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e5c6:	68db      	ldr	r3, [r3, #12]
 800e5c8:	78fa      	ldrb	r2, [r7, #3]
 800e5ca:	0151      	lsls	r1, r2, #5
 800e5cc:	68ba      	ldr	r2, [r7, #8]
 800e5ce:	440a      	add	r2, r1
 800e5d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e5d4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800e5d8:	60d3      	str	r3, [r2, #12]
      }
      break;
 800e5da:	e006      	b.n	800e5ea <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800e5dc:	2301      	movs	r3, #1
 800e5de:	75fb      	strb	r3, [r7, #23]
      break;
 800e5e0:	e004      	b.n	800e5ec <USB_HC_Init+0x14c>
      break;
 800e5e2:	bf00      	nop
 800e5e4:	e002      	b.n	800e5ec <USB_HC_Init+0x14c>
      break;
 800e5e6:	bf00      	nop
 800e5e8:	e000      	b.n	800e5ec <USB_HC_Init+0x14c>
      break;
 800e5ea:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e5f2:	699a      	ldr	r2, [r3, #24]
 800e5f4:	78fb      	ldrb	r3, [r7, #3]
 800e5f6:	f003 030f 	and.w	r3, r3, #15
 800e5fa:	2101      	movs	r1, #1
 800e5fc:	fa01 f303 	lsl.w	r3, r1, r3
 800e600:	68b9      	ldr	r1, [r7, #8]
 800e602:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800e606:	4313      	orrs	r3, r2
 800e608:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	699b      	ldr	r3, [r3, #24]
 800e60e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800e616:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	da03      	bge.n	800e626 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800e61e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e622:	613b      	str	r3, [r7, #16]
 800e624:	e001      	b.n	800e62a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800e626:	2300      	movs	r3, #0
 800e628:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800e62a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e62e:	2b02      	cmp	r3, #2
 800e630:	d103      	bne.n	800e63a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800e632:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e636:	60fb      	str	r3, [r7, #12]
 800e638:	e001      	b.n	800e63e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800e63a:	2300      	movs	r3, #0
 800e63c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e63e:	787b      	ldrb	r3, [r7, #1]
 800e640:	059b      	lsls	r3, r3, #22
 800e642:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800e646:	78bb      	ldrb	r3, [r7, #2]
 800e648:	02db      	lsls	r3, r3, #11
 800e64a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e64e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800e650:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e654:	049b      	lsls	r3, r3, #18
 800e656:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800e65a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800e65c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e65e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800e662:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e668:	78fb      	ldrb	r3, [r7, #3]
 800e66a:	0159      	lsls	r1, r3, #5
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	440b      	add	r3, r1
 800e670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e674:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800e67a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800e67c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e680:	2b03      	cmp	r3, #3
 800e682:	d10f      	bne.n	800e6a4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800e684:	78fb      	ldrb	r3, [r7, #3]
 800e686:	015a      	lsls	r2, r3, #5
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	4413      	add	r3, r2
 800e68c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	78fa      	ldrb	r2, [r7, #3]
 800e694:	0151      	lsls	r1, r2, #5
 800e696:	68ba      	ldr	r2, [r7, #8]
 800e698:	440a      	add	r2, r1
 800e69a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e69e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e6a2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800e6a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	371c      	adds	r7, #28
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b0:	4770      	bx	lr
 800e6b2:	bf00      	nop

0800e6b4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b08c      	sub	sp, #48	; 0x30
 800e6b8:	af02      	add	r7, sp, #8
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	60b9      	str	r1, [r7, #8]
 800e6be:	4613      	mov	r3, r2
 800e6c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	785b      	ldrb	r3, [r3, #1]
 800e6ca:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800e6cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e6d0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d028      	beq.n	800e730 <USB_HC_StartXfer+0x7c>
 800e6de:	68bb      	ldr	r3, [r7, #8]
 800e6e0:	791b      	ldrb	r3, [r3, #4]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d124      	bne.n	800e730 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800e6e6:	79fb      	ldrb	r3, [r7, #7]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d10b      	bne.n	800e704 <USB_HC_StartXfer+0x50>
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	795b      	ldrb	r3, [r3, #5]
 800e6f0:	2b01      	cmp	r3, #1
 800e6f2:	d107      	bne.n	800e704 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	785b      	ldrb	r3, [r3, #1]
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	68f8      	ldr	r0, [r7, #12]
 800e6fc:	f000 fa2e 	bl	800eb5c <USB_DoPing>
      return HAL_OK;
 800e700:	2300      	movs	r3, #0
 800e702:	e112      	b.n	800e92a <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800e704:	79fb      	ldrb	r3, [r7, #7]
 800e706:	2b01      	cmp	r3, #1
 800e708:	d112      	bne.n	800e730 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800e70a:	69fb      	ldr	r3, [r7, #28]
 800e70c:	015a      	lsls	r2, r3, #5
 800e70e:	6a3b      	ldr	r3, [r7, #32]
 800e710:	4413      	add	r3, r2
 800e712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e716:	68db      	ldr	r3, [r3, #12]
 800e718:	69fa      	ldr	r2, [r7, #28]
 800e71a:	0151      	lsls	r1, r2, #5
 800e71c:	6a3a      	ldr	r2, [r7, #32]
 800e71e:	440a      	add	r2, r1
 800e720:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e724:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800e728:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	2200      	movs	r2, #0
 800e72e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	691b      	ldr	r3, [r3, #16]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d018      	beq.n	800e76a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	691b      	ldr	r3, [r3, #16]
 800e73c:	68ba      	ldr	r2, [r7, #8]
 800e73e:	8912      	ldrh	r2, [r2, #8]
 800e740:	4413      	add	r3, r2
 800e742:	3b01      	subs	r3, #1
 800e744:	68ba      	ldr	r2, [r7, #8]
 800e746:	8912      	ldrh	r2, [r2, #8]
 800e748:	fbb3 f3f2 	udiv	r3, r3, r2
 800e74c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800e74e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e750:	8b7b      	ldrh	r3, [r7, #26]
 800e752:	429a      	cmp	r2, r3
 800e754:	d90b      	bls.n	800e76e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800e756:	8b7b      	ldrh	r3, [r7, #26]
 800e758:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800e75a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e75c:	68ba      	ldr	r2, [r7, #8]
 800e75e:	8912      	ldrh	r2, [r2, #8]
 800e760:	fb02 f203 	mul.w	r2, r2, r3
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	611a      	str	r2, [r3, #16]
 800e768:	e001      	b.n	800e76e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800e76a:	2301      	movs	r3, #1
 800e76c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	78db      	ldrb	r3, [r3, #3]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d006      	beq.n	800e784 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800e776:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e778:	68ba      	ldr	r2, [r7, #8]
 800e77a:	8912      	ldrh	r2, [r2, #8]
 800e77c:	fb02 f203 	mul.w	r2, r2, r3
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	691b      	ldr	r3, [r3, #16]
 800e788:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e78c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e78e:	04d9      	lsls	r1, r3, #19
 800e790:	4b68      	ldr	r3, [pc, #416]	; (800e934 <USB_HC_StartXfer+0x280>)
 800e792:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800e794:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	7a9b      	ldrb	r3, [r3, #10]
 800e79a:	075b      	lsls	r3, r3, #29
 800e79c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800e7a0:	69f9      	ldr	r1, [r7, #28]
 800e7a2:	0148      	lsls	r0, r1, #5
 800e7a4:	6a39      	ldr	r1, [r7, #32]
 800e7a6:	4401      	add	r1, r0
 800e7a8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e7ac:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800e7ae:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800e7b0:	79fb      	ldrb	r3, [r7, #7]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d009      	beq.n	800e7ca <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	68d9      	ldr	r1, [r3, #12]
 800e7ba:	69fb      	ldr	r3, [r7, #28]
 800e7bc:	015a      	lsls	r2, r3, #5
 800e7be:	6a3b      	ldr	r3, [r7, #32]
 800e7c0:	4413      	add	r3, r2
 800e7c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e7c6:	460a      	mov	r2, r1
 800e7c8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800e7ca:	6a3b      	ldr	r3, [r7, #32]
 800e7cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e7d0:	689b      	ldr	r3, [r3, #8]
 800e7d2:	f003 0301 	and.w	r3, r3, #1
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	bf0c      	ite	eq
 800e7da:	2301      	moveq	r3, #1
 800e7dc:	2300      	movne	r3, #0
 800e7de:	b2db      	uxtb	r3, r3
 800e7e0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800e7e2:	69fb      	ldr	r3, [r7, #28]
 800e7e4:	015a      	lsls	r2, r3, #5
 800e7e6:	6a3b      	ldr	r3, [r7, #32]
 800e7e8:	4413      	add	r3, r2
 800e7ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	69fa      	ldr	r2, [r7, #28]
 800e7f2:	0151      	lsls	r1, r2, #5
 800e7f4:	6a3a      	ldr	r2, [r7, #32]
 800e7f6:	440a      	add	r2, r1
 800e7f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e7fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e800:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800e802:	69fb      	ldr	r3, [r7, #28]
 800e804:	015a      	lsls	r2, r3, #5
 800e806:	6a3b      	ldr	r3, [r7, #32]
 800e808:	4413      	add	r3, r2
 800e80a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e80e:	681a      	ldr	r2, [r3, #0]
 800e810:	7e7b      	ldrb	r3, [r7, #25]
 800e812:	075b      	lsls	r3, r3, #29
 800e814:	69f9      	ldr	r1, [r7, #28]
 800e816:	0148      	lsls	r0, r1, #5
 800e818:	6a39      	ldr	r1, [r7, #32]
 800e81a:	4401      	add	r1, r0
 800e81c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800e820:	4313      	orrs	r3, r2
 800e822:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800e824:	69fb      	ldr	r3, [r7, #28]
 800e826:	015a      	lsls	r2, r3, #5
 800e828:	6a3b      	ldr	r3, [r7, #32]
 800e82a:	4413      	add	r3, r2
 800e82c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	4a41      	ldr	r2, [pc, #260]	; (800e938 <USB_HC_StartXfer+0x284>)
 800e834:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e836:	4b40      	ldr	r3, [pc, #256]	; (800e938 <USB_HC_StartXfer+0x284>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e83e:	4a3e      	ldr	r2, [pc, #248]	; (800e938 <USB_HC_StartXfer+0x284>)
 800e840:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	78db      	ldrb	r3, [r3, #3]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d006      	beq.n	800e858 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800e84a:	4b3b      	ldr	r3, [pc, #236]	; (800e938 <USB_HC_StartXfer+0x284>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e852:	4a39      	ldr	r2, [pc, #228]	; (800e938 <USB_HC_StartXfer+0x284>)
 800e854:	6013      	str	r3, [r2, #0]
 800e856:	e005      	b.n	800e864 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800e858:	4b37      	ldr	r3, [pc, #220]	; (800e938 <USB_HC_StartXfer+0x284>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e860:	4a35      	ldr	r2, [pc, #212]	; (800e938 <USB_HC_StartXfer+0x284>)
 800e862:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e864:	4b34      	ldr	r3, [pc, #208]	; (800e938 <USB_HC_StartXfer+0x284>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e86c:	4a32      	ldr	r2, [pc, #200]	; (800e938 <USB_HC_StartXfer+0x284>)
 800e86e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800e870:	69fb      	ldr	r3, [r7, #28]
 800e872:	015a      	lsls	r2, r3, #5
 800e874:	6a3b      	ldr	r3, [r7, #32]
 800e876:	4413      	add	r3, r2
 800e878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e87c:	461a      	mov	r2, r3
 800e87e:	4b2e      	ldr	r3, [pc, #184]	; (800e938 <USB_HC_StartXfer+0x284>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800e884:	79fb      	ldrb	r3, [r7, #7]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d14e      	bne.n	800e928 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	78db      	ldrb	r3, [r3, #3]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d14a      	bne.n	800e928 <USB_HC_StartXfer+0x274>
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	691b      	ldr	r3, [r3, #16]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d046      	beq.n	800e928 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	79db      	ldrb	r3, [r3, #7]
 800e89e:	2b03      	cmp	r3, #3
 800e8a0:	d830      	bhi.n	800e904 <USB_HC_StartXfer+0x250>
 800e8a2:	a201      	add	r2, pc, #4	; (adr r2, 800e8a8 <USB_HC_StartXfer+0x1f4>)
 800e8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8a8:	0800e8b9 	.word	0x0800e8b9
 800e8ac:	0800e8dd 	.word	0x0800e8dd
 800e8b0:	0800e8b9 	.word	0x0800e8b9
 800e8b4:	0800e8dd 	.word	0x0800e8dd
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	691b      	ldr	r3, [r3, #16]
 800e8bc:	3303      	adds	r3, #3
 800e8be:	089b      	lsrs	r3, r3, #2
 800e8c0:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800e8c2:	8afa      	ldrh	r2, [r7, #22]
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8c8:	b29b      	uxth	r3, r3
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d91c      	bls.n	800e908 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	699b      	ldr	r3, [r3, #24]
 800e8d2:	f043 0220 	orr.w	r2, r3, #32
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	619a      	str	r2, [r3, #24]
          }
          break;
 800e8da:	e015      	b.n	800e908 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	691b      	ldr	r3, [r3, #16]
 800e8e0:	3303      	adds	r3, #3
 800e8e2:	089b      	lsrs	r3, r3, #2
 800e8e4:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800e8e6:	8afa      	ldrh	r2, [r7, #22]
 800e8e8:	6a3b      	ldr	r3, [r7, #32]
 800e8ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e8ee:	691b      	ldr	r3, [r3, #16]
 800e8f0:	b29b      	uxth	r3, r3
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d90a      	bls.n	800e90c <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	699b      	ldr	r3, [r3, #24]
 800e8fa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	619a      	str	r2, [r3, #24]
          }
          break;
 800e902:	e003      	b.n	800e90c <USB_HC_StartXfer+0x258>

        default:
          break;
 800e904:	bf00      	nop
 800e906:	e002      	b.n	800e90e <USB_HC_StartXfer+0x25a>
          break;
 800e908:	bf00      	nop
 800e90a:	e000      	b.n	800e90e <USB_HC_StartXfer+0x25a>
          break;
 800e90c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	68d9      	ldr	r1, [r3, #12]
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	785a      	ldrb	r2, [r3, #1]
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	691b      	ldr	r3, [r3, #16]
 800e91a:	b298      	uxth	r0, r3
 800e91c:	2300      	movs	r3, #0
 800e91e:	9300      	str	r3, [sp, #0]
 800e920:	4603      	mov	r3, r0
 800e922:	68f8      	ldr	r0, [r7, #12]
 800e924:	f7ff fb92 	bl	800e04c <USB_WritePacket>
    }
  }

  return HAL_OK;
 800e928:	2300      	movs	r3, #0
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3728      	adds	r7, #40	; 0x28
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	1ff80000 	.word	0x1ff80000
 800e938:	20000334 	.word	0x20000334

0800e93c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e93c:	b480      	push	{r7}
 800e93e:	b085      	sub	sp, #20
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e94e:	695b      	ldr	r3, [r3, #20]
 800e950:	b29b      	uxth	r3, r3
}
 800e952:	4618      	mov	r0, r3
 800e954:	3714      	adds	r7, #20
 800e956:	46bd      	mov	sp, r7
 800e958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95c:	4770      	bx	lr

0800e95e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800e95e:	b480      	push	{r7}
 800e960:	b087      	sub	sp, #28
 800e962:	af00      	add	r7, sp, #0
 800e964:	6078      	str	r0, [r7, #4]
 800e966:	460b      	mov	r3, r1
 800e968:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800e96e:	78fb      	ldrb	r3, [r7, #3]
 800e970:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800e972:	2300      	movs	r3, #0
 800e974:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	015a      	lsls	r2, r3, #5
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	4413      	add	r3, r2
 800e97e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	0c9b      	lsrs	r3, r3, #18
 800e986:	f003 0303 	and.w	r3, r3, #3
 800e98a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d002      	beq.n	800e998 <USB_HC_Halt+0x3a>
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	2b02      	cmp	r3, #2
 800e996:	d16c      	bne.n	800ea72 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	015a      	lsls	r2, r3, #5
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	4413      	add	r3, r2
 800e9a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	68fa      	ldr	r2, [r7, #12]
 800e9a8:	0151      	lsls	r1, r2, #5
 800e9aa:	693a      	ldr	r2, [r7, #16]
 800e9ac:	440a      	add	r2, r1
 800e9ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e9b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e9b6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d143      	bne.n	800ea4c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	015a      	lsls	r2, r3, #5
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	4413      	add	r3, r2
 800e9cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	68fa      	ldr	r2, [r7, #12]
 800e9d4:	0151      	lsls	r1, r2, #5
 800e9d6:	693a      	ldr	r2, [r7, #16]
 800e9d8:	440a      	add	r2, r1
 800e9da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e9de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e9e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	015a      	lsls	r2, r3, #5
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	4413      	add	r3, r2
 800e9ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	68fa      	ldr	r2, [r7, #12]
 800e9f4:	0151      	lsls	r1, r2, #5
 800e9f6:	693a      	ldr	r2, [r7, #16]
 800e9f8:	440a      	add	r2, r1
 800e9fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e9fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ea02:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	015a      	lsls	r2, r3, #5
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	4413      	add	r3, r2
 800ea0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	68fa      	ldr	r2, [r7, #12]
 800ea14:	0151      	lsls	r1, r2, #5
 800ea16:	693a      	ldr	r2, [r7, #16]
 800ea18:	440a      	add	r2, r1
 800ea1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ea1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ea22:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	3301      	adds	r3, #1
 800ea28:	617b      	str	r3, [r7, #20]
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ea30:	d81d      	bhi.n	800ea6e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	015a      	lsls	r2, r3, #5
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	4413      	add	r3, r2
 800ea3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ea44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ea48:	d0ec      	beq.n	800ea24 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ea4a:	e080      	b.n	800eb4e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	015a      	lsls	r2, r3, #5
 800ea50:	693b      	ldr	r3, [r7, #16]
 800ea52:	4413      	add	r3, r2
 800ea54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	68fa      	ldr	r2, [r7, #12]
 800ea5c:	0151      	lsls	r1, r2, #5
 800ea5e:	693a      	ldr	r2, [r7, #16]
 800ea60:	440a      	add	r2, r1
 800ea62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ea66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ea6a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ea6c:	e06f      	b.n	800eb4e <USB_HC_Halt+0x1f0>
          break;
 800ea6e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ea70:	e06d      	b.n	800eb4e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	015a      	lsls	r2, r3, #5
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	4413      	add	r3, r2
 800ea7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	68fa      	ldr	r2, [r7, #12]
 800ea82:	0151      	lsls	r1, r2, #5
 800ea84:	693a      	ldr	r2, [r7, #16]
 800ea86:	440a      	add	r2, r1
 800ea88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ea8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ea90:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ea98:	691b      	ldr	r3, [r3, #16]
 800ea9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d143      	bne.n	800eb2a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	015a      	lsls	r2, r3, #5
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	4413      	add	r3, r2
 800eaaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	68fa      	ldr	r2, [r7, #12]
 800eab2:	0151      	lsls	r1, r2, #5
 800eab4:	693a      	ldr	r2, [r7, #16]
 800eab6:	440a      	add	r2, r1
 800eab8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800eabc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eac0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	015a      	lsls	r2, r3, #5
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	4413      	add	r3, r2
 800eaca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	68fa      	ldr	r2, [r7, #12]
 800ead2:	0151      	lsls	r1, r2, #5
 800ead4:	693a      	ldr	r2, [r7, #16]
 800ead6:	440a      	add	r2, r1
 800ead8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800eadc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800eae0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	015a      	lsls	r2, r3, #5
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	4413      	add	r3, r2
 800eaea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	68fa      	ldr	r2, [r7, #12]
 800eaf2:	0151      	lsls	r1, r2, #5
 800eaf4:	693a      	ldr	r2, [r7, #16]
 800eaf6:	440a      	add	r2, r1
 800eaf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800eafc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800eb00:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	3301      	adds	r3, #1
 800eb06:	617b      	str	r3, [r7, #20]
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eb0e:	d81d      	bhi.n	800eb4c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	015a      	lsls	r2, r3, #5
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	4413      	add	r3, r2
 800eb18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eb22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eb26:	d0ec      	beq.n	800eb02 <USB_HC_Halt+0x1a4>
 800eb28:	e011      	b.n	800eb4e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	015a      	lsls	r2, r3, #5
 800eb2e:	693b      	ldr	r3, [r7, #16]
 800eb30:	4413      	add	r3, r2
 800eb32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	68fa      	ldr	r2, [r7, #12]
 800eb3a:	0151      	lsls	r1, r2, #5
 800eb3c:	693a      	ldr	r2, [r7, #16]
 800eb3e:	440a      	add	r2, r1
 800eb40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800eb44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800eb48:	6013      	str	r3, [r2, #0]
 800eb4a:	e000      	b.n	800eb4e <USB_HC_Halt+0x1f0>
          break;
 800eb4c:	bf00      	nop
    }
  }

  return HAL_OK;
 800eb4e:	2300      	movs	r3, #0
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	371c      	adds	r7, #28
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr

0800eb5c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b087      	sub	sp, #28
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	460b      	mov	r3, r1
 800eb66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800eb6c:	78fb      	ldrb	r3, [r7, #3]
 800eb6e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800eb70:	2301      	movs	r3, #1
 800eb72:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	04da      	lsls	r2, r3, #19
 800eb78:	4b15      	ldr	r3, [pc, #84]	; (800ebd0 <USB_DoPing+0x74>)
 800eb7a:	4013      	ands	r3, r2
 800eb7c:	693a      	ldr	r2, [r7, #16]
 800eb7e:	0151      	lsls	r1, r2, #5
 800eb80:	697a      	ldr	r2, [r7, #20]
 800eb82:	440a      	add	r2, r1
 800eb84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800eb88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800eb8c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	015a      	lsls	r2, r3, #5
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	4413      	add	r3, r2
 800eb96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800eba4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ebac:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	015a      	lsls	r2, r3, #5
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	4413      	add	r3, r2
 800ebb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ebba:	461a      	mov	r2, r3
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ebc0:	2300      	movs	r3, #0
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	371c      	adds	r7, #28
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebcc:	4770      	bx	lr
 800ebce:	bf00      	nop
 800ebd0:	1ff80000 	.word	0x1ff80000

0800ebd4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b086      	sub	sp, #24
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f7ff f9ae 	bl	800df46 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800ebea:	2110      	movs	r1, #16
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f7ff f9e5 	bl	800dfbc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f7ff fa08 	bl	800e008 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	613b      	str	r3, [r7, #16]
 800ebfc:	e01f      	b.n	800ec3e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800ebfe:	693b      	ldr	r3, [r7, #16]
 800ec00:	015a      	lsls	r2, r3, #5
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	4413      	add	r3, r2
 800ec06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ec14:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ec1c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ec1e:	68bb      	ldr	r3, [r7, #8]
 800ec20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ec24:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800ec26:	693b      	ldr	r3, [r7, #16]
 800ec28:	015a      	lsls	r2, r3, #5
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	4413      	add	r3, r2
 800ec2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ec32:	461a      	mov	r2, r3
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	3301      	adds	r3, #1
 800ec3c:	613b      	str	r3, [r7, #16]
 800ec3e:	693b      	ldr	r3, [r7, #16]
 800ec40:	2b0f      	cmp	r3, #15
 800ec42:	d9dc      	bls.n	800ebfe <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800ec44:	2300      	movs	r3, #0
 800ec46:	613b      	str	r3, [r7, #16]
 800ec48:	e034      	b.n	800ecb4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	015a      	lsls	r2, r3, #5
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	4413      	add	r3, r2
 800ec52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ec60:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ec68:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ec70:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	015a      	lsls	r2, r3, #5
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	4413      	add	r3, r2
 800ec7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ec7e:	461a      	mov	r2, r3
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	3301      	adds	r3, #1
 800ec88:	617b      	str	r3, [r7, #20]
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ec90:	d80c      	bhi.n	800ecac <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	015a      	lsls	r2, r3, #5
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	4413      	add	r3, r2
 800ec9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800eca4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800eca8:	d0ec      	beq.n	800ec84 <USB_StopHost+0xb0>
 800ecaa:	e000      	b.n	800ecae <USB_StopHost+0xda>
        break;
 800ecac:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	3301      	adds	r3, #1
 800ecb2:	613b      	str	r3, [r7, #16]
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	2b0f      	cmp	r3, #15
 800ecb8:	d9c7      	bls.n	800ec4a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ecc0:	461a      	mov	r2, r3
 800ecc2:	f04f 33ff 	mov.w	r3, #4294967295
 800ecc6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f04f 32ff 	mov.w	r2, #4294967295
 800ecce:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f7ff f927 	bl	800df24 <USB_EnableGlobalInt>

  return HAL_OK;
 800ecd6:	2300      	movs	r3, #0
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3718      	adds	r7, #24
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}

0800ece0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ece0:	b480      	push	{r7}
 800ece2:	b087      	sub	sp, #28
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	60f8      	str	r0, [r7, #12]
 800ece8:	60b9      	str	r1, [r7, #8]
 800ecea:	4613      	mov	r3, r2
 800ecec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ecee:	2301      	movs	r3, #1
 800ecf0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ecf6:	4b1f      	ldr	r3, [pc, #124]	; (800ed74 <FATFS_LinkDriverEx+0x94>)
 800ecf8:	7a5b      	ldrb	r3, [r3, #9]
 800ecfa:	b2db      	uxtb	r3, r3
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d131      	bne.n	800ed64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ed00:	4b1c      	ldr	r3, [pc, #112]	; (800ed74 <FATFS_LinkDriverEx+0x94>)
 800ed02:	7a5b      	ldrb	r3, [r3, #9]
 800ed04:	b2db      	uxtb	r3, r3
 800ed06:	461a      	mov	r2, r3
 800ed08:	4b1a      	ldr	r3, [pc, #104]	; (800ed74 <FATFS_LinkDriverEx+0x94>)
 800ed0a:	2100      	movs	r1, #0
 800ed0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ed0e:	4b19      	ldr	r3, [pc, #100]	; (800ed74 <FATFS_LinkDriverEx+0x94>)
 800ed10:	7a5b      	ldrb	r3, [r3, #9]
 800ed12:	b2db      	uxtb	r3, r3
 800ed14:	4a17      	ldr	r2, [pc, #92]	; (800ed74 <FATFS_LinkDriverEx+0x94>)
 800ed16:	009b      	lsls	r3, r3, #2
 800ed18:	4413      	add	r3, r2
 800ed1a:	68fa      	ldr	r2, [r7, #12]
 800ed1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ed1e:	4b15      	ldr	r3, [pc, #84]	; (800ed74 <FATFS_LinkDriverEx+0x94>)
 800ed20:	7a5b      	ldrb	r3, [r3, #9]
 800ed22:	b2db      	uxtb	r3, r3
 800ed24:	461a      	mov	r2, r3
 800ed26:	4b13      	ldr	r3, [pc, #76]	; (800ed74 <FATFS_LinkDriverEx+0x94>)
 800ed28:	4413      	add	r3, r2
 800ed2a:	79fa      	ldrb	r2, [r7, #7]
 800ed2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ed2e:	4b11      	ldr	r3, [pc, #68]	; (800ed74 <FATFS_LinkDriverEx+0x94>)
 800ed30:	7a5b      	ldrb	r3, [r3, #9]
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	1c5a      	adds	r2, r3, #1
 800ed36:	b2d1      	uxtb	r1, r2
 800ed38:	4a0e      	ldr	r2, [pc, #56]	; (800ed74 <FATFS_LinkDriverEx+0x94>)
 800ed3a:	7251      	strb	r1, [r2, #9]
 800ed3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ed3e:	7dbb      	ldrb	r3, [r7, #22]
 800ed40:	3330      	adds	r3, #48	; 0x30
 800ed42:	b2da      	uxtb	r2, r3
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	223a      	movs	r2, #58	; 0x3a
 800ed4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	3302      	adds	r3, #2
 800ed54:	222f      	movs	r2, #47	; 0x2f
 800ed56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	3303      	adds	r3, #3
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ed60:	2300      	movs	r3, #0
 800ed62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ed64:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	371c      	adds	r7, #28
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed70:	4770      	bx	lr
 800ed72:	bf00      	nop
 800ed74:	20000338 	.word	0x20000338

0800ed78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b082      	sub	sp, #8
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
 800ed80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ed82:	2200      	movs	r2, #0
 800ed84:	6839      	ldr	r1, [r7, #0]
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f7ff ffaa 	bl	800ece0 <FATFS_LinkDriverEx>
 800ed8c:	4603      	mov	r3, r0
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3708      	adds	r7, #8
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}

0800ed96 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ed96:	b480      	push	{r7}
 800ed98:	b085      	sub	sp, #20
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800eda0:	2300      	movs	r3, #0
 800eda2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800eda4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800eda8:	2b84      	cmp	r3, #132	; 0x84
 800edaa:	d005      	beq.n	800edb8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800edac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	4413      	add	r3, r2
 800edb4:	3303      	adds	r3, #3
 800edb6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800edb8:	68fb      	ldr	r3, [r7, #12]
}
 800edba:	4618      	mov	r0, r3
 800edbc:	3714      	adds	r7, #20
 800edbe:	46bd      	mov	sp, r7
 800edc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc4:	4770      	bx	lr

0800edc6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800edc6:	b480      	push	{r7}
 800edc8:	b083      	sub	sp, #12
 800edca:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800edcc:	f3ef 8305 	mrs	r3, IPSR
 800edd0:	607b      	str	r3, [r7, #4]
  return(result);
 800edd2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	bf14      	ite	ne
 800edd8:	2301      	movne	r3, #1
 800edda:	2300      	moveq	r3, #0
 800eddc:	b2db      	uxtb	r3, r3
}
 800edde:	4618      	mov	r0, r3
 800ede0:	370c      	adds	r7, #12
 800ede2:	46bd      	mov	sp, r7
 800ede4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede8:	4770      	bx	lr

0800edea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800edea:	b580      	push	{r7, lr}
 800edec:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800edee:	f002 f9f1 	bl	80111d4 <vTaskStartScheduler>
  
  return osOK;
 800edf2:	2300      	movs	r3, #0
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800edfc:	f002 fe3c 	bl	8011a78 <xTaskGetSchedulerState>
 800ee00:	4603      	mov	r3, r0
 800ee02:	2b01      	cmp	r3, #1
 800ee04:	d101      	bne.n	800ee0a <osKernelRunning+0x12>
    return 0;
 800ee06:	2300      	movs	r3, #0
 800ee08:	e000      	b.n	800ee0c <osKernelRunning+0x14>
  else
    return 1;
 800ee0a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800ee14:	f7ff ffd7 	bl	800edc6 <inHandlerMode>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d003      	beq.n	800ee26 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800ee1e:	f002 faf7 	bl	8011410 <xTaskGetTickCountFromISR>
 800ee22:	4603      	mov	r3, r0
 800ee24:	e002      	b.n	800ee2c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800ee26:	f002 fae3 	bl	80113f0 <xTaskGetTickCount>
 800ee2a:	4603      	mov	r3, r0
  }
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	bd80      	pop	{r7, pc}

0800ee30 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ee30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee32:	b089      	sub	sp, #36	; 0x24
 800ee34:	af04      	add	r7, sp, #16
 800ee36:	6078      	str	r0, [r7, #4]
 800ee38:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	695b      	ldr	r3, [r3, #20]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d020      	beq.n	800ee84 <osThreadCreate+0x54>
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	699b      	ldr	r3, [r3, #24]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d01c      	beq.n	800ee84 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	685c      	ldr	r4, [r3, #4]
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681d      	ldr	r5, [r3, #0]
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	691e      	ldr	r6, [r3, #16]
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f7ff ff9a 	bl	800ed96 <makeFreeRtosPriority>
 800ee62:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	695b      	ldr	r3, [r3, #20]
 800ee68:	687a      	ldr	r2, [r7, #4]
 800ee6a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ee6c:	9202      	str	r2, [sp, #8]
 800ee6e:	9301      	str	r3, [sp, #4]
 800ee70:	9100      	str	r1, [sp, #0]
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	4632      	mov	r2, r6
 800ee76:	4629      	mov	r1, r5
 800ee78:	4620      	mov	r0, r4
 800ee7a:	f001 ffd3 	bl	8010e24 <xTaskCreateStatic>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	60fb      	str	r3, [r7, #12]
 800ee82:	e01c      	b.n	800eebe <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	685c      	ldr	r4, [r3, #4]
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ee90:	b29e      	uxth	r6, r3
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7ff ff7c 	bl	800ed96 <makeFreeRtosPriority>
 800ee9e:	4602      	mov	r2, r0
 800eea0:	f107 030c 	add.w	r3, r7, #12
 800eea4:	9301      	str	r3, [sp, #4]
 800eea6:	9200      	str	r2, [sp, #0]
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	4632      	mov	r2, r6
 800eeac:	4629      	mov	r1, r5
 800eeae:	4620      	mov	r0, r4
 800eeb0:	f002 f818 	bl	8010ee4 <xTaskCreate>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	2b01      	cmp	r3, #1
 800eeb8:	d001      	beq.n	800eebe <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800eeba:	2300      	movs	r3, #0
 800eebc:	e000      	b.n	800eec0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800eebe:	68fb      	ldr	r3, [r7, #12]
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3714      	adds	r7, #20
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eec8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b084      	sub	sp, #16
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d001      	beq.n	800eede <osDelay+0x16>
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	e000      	b.n	800eee0 <osDelay+0x18>
 800eede:	2301      	movs	r3, #1
 800eee0:	4618      	mov	r0, r3
 800eee2:	f002 f941 	bl	8011168 <vTaskDelay>
  
  return osOK;
 800eee6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800eee8:	4618      	mov	r0, r3
 800eeea:	3710      	adds	r7, #16
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd80      	pop	{r7, pc}

0800eef0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b082      	sub	sp, #8
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	685b      	ldr	r3, [r3, #4]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d007      	beq.n	800ef10 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	685b      	ldr	r3, [r3, #4]
 800ef04:	4619      	mov	r1, r3
 800ef06:	2001      	movs	r0, #1
 800ef08:	f001 f8a9 	bl	801005e <xQueueCreateMutexStatic>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	e003      	b.n	800ef18 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800ef10:	2001      	movs	r0, #1
 800ef12:	f001 f88c 	bl	801002e <xQueueCreateMutex>
 800ef16:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3708      	adds	r7, #8
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}

0800ef20 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b084      	sub	sp, #16
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d101      	bne.n	800ef38 <osMutexWait+0x18>
    return osErrorParameter;
 800ef34:	2380      	movs	r3, #128	; 0x80
 800ef36:	e03a      	b.n	800efae <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef42:	d103      	bne.n	800ef4c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800ef44:	f04f 33ff 	mov.w	r3, #4294967295
 800ef48:	60fb      	str	r3, [r7, #12]
 800ef4a:	e009      	b.n	800ef60 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d006      	beq.n	800ef60 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d101      	bne.n	800ef60 <osMutexWait+0x40>
      ticks = 1;
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ef60:	f7ff ff31 	bl	800edc6 <inHandlerMode>
 800ef64:	4603      	mov	r3, r0
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d017      	beq.n	800ef9a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ef6a:	f107 0308 	add.w	r3, r7, #8
 800ef6e:	461a      	mov	r2, r3
 800ef70:	2100      	movs	r1, #0
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f001 fd1e 	bl	80109b4 <xQueueReceiveFromISR>
 800ef78:	4603      	mov	r3, r0
 800ef7a:	2b01      	cmp	r3, #1
 800ef7c:	d001      	beq.n	800ef82 <osMutexWait+0x62>
      return osErrorOS;
 800ef7e:	23ff      	movs	r3, #255	; 0xff
 800ef80:	e015      	b.n	800efae <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d011      	beq.n	800efac <osMutexWait+0x8c>
 800ef88:	4b0b      	ldr	r3, [pc, #44]	; (800efb8 <osMutexWait+0x98>)
 800ef8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef8e:	601a      	str	r2, [r3, #0]
 800ef90:	f3bf 8f4f 	dsb	sy
 800ef94:	f3bf 8f6f 	isb	sy
 800ef98:	e008      	b.n	800efac <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800ef9a:	68f9      	ldr	r1, [r7, #12]
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f001 fbf9 	bl	8010794 <xQueueSemaphoreTake>
 800efa2:	4603      	mov	r3, r0
 800efa4:	2b01      	cmp	r3, #1
 800efa6:	d001      	beq.n	800efac <osMutexWait+0x8c>
    return osErrorOS;
 800efa8:	23ff      	movs	r3, #255	; 0xff
 800efaa:	e000      	b.n	800efae <osMutexWait+0x8e>
  }
  
  return osOK;
 800efac:	2300      	movs	r3, #0
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3710      	adds	r7, #16
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
 800efb6:	bf00      	nop
 800efb8:	e000ed04 	.word	0xe000ed04

0800efbc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800efc4:	2300      	movs	r3, #0
 800efc6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800efc8:	2300      	movs	r3, #0
 800efca:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800efcc:	f7ff fefb 	bl	800edc6 <inHandlerMode>
 800efd0:	4603      	mov	r3, r0
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d016      	beq.n	800f004 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800efd6:	f107 0308 	add.w	r3, r7, #8
 800efda:	4619      	mov	r1, r3
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f001 fa65 	bl	80104ac <xQueueGiveFromISR>
 800efe2:	4603      	mov	r3, r0
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	d001      	beq.n	800efec <osMutexRelease+0x30>
      return osErrorOS;
 800efe8:	23ff      	movs	r3, #255	; 0xff
 800efea:	e017      	b.n	800f01c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800efec:	68bb      	ldr	r3, [r7, #8]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d013      	beq.n	800f01a <osMutexRelease+0x5e>
 800eff2:	4b0c      	ldr	r3, [pc, #48]	; (800f024 <osMutexRelease+0x68>)
 800eff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eff8:	601a      	str	r2, [r3, #0]
 800effa:	f3bf 8f4f 	dsb	sy
 800effe:	f3bf 8f6f 	isb	sy
 800f002:	e00a      	b.n	800f01a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800f004:	2300      	movs	r3, #0
 800f006:	2200      	movs	r2, #0
 800f008:	2100      	movs	r1, #0
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f001 f8b0 	bl	8010170 <xQueueGenericSend>
 800f010:	4603      	mov	r3, r0
 800f012:	2b01      	cmp	r3, #1
 800f014:	d001      	beq.n	800f01a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800f016:	23ff      	movs	r3, #255	; 0xff
 800f018:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800f01a:	68fb      	ldr	r3, [r7, #12]
}
 800f01c:	4618      	mov	r0, r3
 800f01e:	3710      	adds	r7, #16
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}
 800f024:	e000ed04 	.word	0xe000ed04

0800f028 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800f028:	b580      	push	{r7, lr}
 800f02a:	b086      	sub	sp, #24
 800f02c:	af02      	add	r7, sp, #8
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	685b      	ldr	r3, [r3, #4]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d017      	beq.n	800f06a <osSemaphoreCreate+0x42>
    if (count == 1) {
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	2b01      	cmp	r3, #1
 800f03e:	d10b      	bne.n	800f058 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	685a      	ldr	r2, [r3, #4]
 800f044:	2303      	movs	r3, #3
 800f046:	9300      	str	r3, [sp, #0]
 800f048:	4613      	mov	r3, r2
 800f04a:	2200      	movs	r2, #0
 800f04c:	2100      	movs	r1, #0
 800f04e:	2001      	movs	r0, #1
 800f050:	f000 fef6 	bl	800fe40 <xQueueGenericCreateStatic>
 800f054:	4603      	mov	r3, r0
 800f056:	e023      	b.n	800f0a0 <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 800f058:	6838      	ldr	r0, [r7, #0]
 800f05a:	6839      	ldr	r1, [r7, #0]
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	685b      	ldr	r3, [r3, #4]
 800f060:	461a      	mov	r2, r3
 800f062:	f001 f817 	bl	8010094 <xQueueCreateCountingSemaphoreStatic>
 800f066:	4603      	mov	r3, r0
 800f068:	e01a      	b.n	800f0a0 <osSemaphoreCreate+0x78>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	2b01      	cmp	r3, #1
 800f06e:	d110      	bne.n	800f092 <osSemaphoreCreate+0x6a>
      vSemaphoreCreateBinary(sema);
 800f070:	2203      	movs	r2, #3
 800f072:	2100      	movs	r1, #0
 800f074:	2001      	movs	r0, #1
 800f076:	f000 ff60 	bl	800ff3a <xQueueGenericCreate>
 800f07a:	60f8      	str	r0, [r7, #12]
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d005      	beq.n	800f08e <osSemaphoreCreate+0x66>
 800f082:	2300      	movs	r3, #0
 800f084:	2200      	movs	r2, #0
 800f086:	2100      	movs	r1, #0
 800f088:	68f8      	ldr	r0, [r7, #12]
 800f08a:	f001 f871 	bl	8010170 <xQueueGenericSend>
      return sema;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	e006      	b.n	800f0a0 <osSemaphoreCreate+0x78>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	683a      	ldr	r2, [r7, #0]
 800f096:	4611      	mov	r1, r2
 800f098:	4618      	mov	r0, r3
 800f09a:	f001 f834 	bl	8010106 <xQueueCreateCountingSemaphore>
 800f09e:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	3710      	adds	r7, #16
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}

0800f0a8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b084      	sub	sp, #16
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d101      	bne.n	800f0c0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800f0bc:	2380      	movs	r3, #128	; 0x80
 800f0be:	e03a      	b.n	800f136 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0ca:	d103      	bne.n	800f0d4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800f0cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f0d0:	60fb      	str	r3, [r7, #12]
 800f0d2:	e009      	b.n	800f0e8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d006      	beq.n	800f0e8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d101      	bne.n	800f0e8 <osSemaphoreWait+0x40>
      ticks = 1;
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f0e8:	f7ff fe6d 	bl	800edc6 <inHandlerMode>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d017      	beq.n	800f122 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f0f2:	f107 0308 	add.w	r3, r7, #8
 800f0f6:	461a      	mov	r2, r3
 800f0f8:	2100      	movs	r1, #0
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f001 fc5a 	bl	80109b4 <xQueueReceiveFromISR>
 800f100:	4603      	mov	r3, r0
 800f102:	2b01      	cmp	r3, #1
 800f104:	d001      	beq.n	800f10a <osSemaphoreWait+0x62>
      return osErrorOS;
 800f106:	23ff      	movs	r3, #255	; 0xff
 800f108:	e015      	b.n	800f136 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d011      	beq.n	800f134 <osSemaphoreWait+0x8c>
 800f110:	4b0b      	ldr	r3, [pc, #44]	; (800f140 <osSemaphoreWait+0x98>)
 800f112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f116:	601a      	str	r2, [r3, #0]
 800f118:	f3bf 8f4f 	dsb	sy
 800f11c:	f3bf 8f6f 	isb	sy
 800f120:	e008      	b.n	800f134 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800f122:	68f9      	ldr	r1, [r7, #12]
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	f001 fb35 	bl	8010794 <xQueueSemaphoreTake>
 800f12a:	4603      	mov	r3, r0
 800f12c:	2b01      	cmp	r3, #1
 800f12e:	d001      	beq.n	800f134 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800f130:	23ff      	movs	r3, #255	; 0xff
 800f132:	e000      	b.n	800f136 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800f134:	2300      	movs	r3, #0
}
 800f136:	4618      	mov	r0, r3
 800f138:	3710      	adds	r7, #16
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	bf00      	nop
 800f140:	e000ed04 	.word	0xe000ed04

0800f144 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b084      	sub	sp, #16
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f14c:	2300      	movs	r3, #0
 800f14e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f150:	2300      	movs	r3, #0
 800f152:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800f154:	f7ff fe37 	bl	800edc6 <inHandlerMode>
 800f158:	4603      	mov	r3, r0
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d016      	beq.n	800f18c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f15e:	f107 0308 	add.w	r3, r7, #8
 800f162:	4619      	mov	r1, r3
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f001 f9a1 	bl	80104ac <xQueueGiveFromISR>
 800f16a:	4603      	mov	r3, r0
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	d001      	beq.n	800f174 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800f170:	23ff      	movs	r3, #255	; 0xff
 800f172:	e017      	b.n	800f1a4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d013      	beq.n	800f1a2 <osSemaphoreRelease+0x5e>
 800f17a:	4b0c      	ldr	r3, [pc, #48]	; (800f1ac <osSemaphoreRelease+0x68>)
 800f17c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f180:	601a      	str	r2, [r3, #0]
 800f182:	f3bf 8f4f 	dsb	sy
 800f186:	f3bf 8f6f 	isb	sy
 800f18a:	e00a      	b.n	800f1a2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800f18c:	2300      	movs	r3, #0
 800f18e:	2200      	movs	r2, #0
 800f190:	2100      	movs	r1, #0
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f000 ffec 	bl	8010170 <xQueueGenericSend>
 800f198:	4603      	mov	r3, r0
 800f19a:	2b01      	cmp	r3, #1
 800f19c:	d001      	beq.n	800f1a2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800f19e:	23ff      	movs	r3, #255	; 0xff
 800f1a0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3710      	adds	r7, #16
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}
 800f1ac:	e000ed04 	.word	0xe000ed04

0800f1b0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b082      	sub	sp, #8
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800f1b8:	f7ff fe05 	bl	800edc6 <inHandlerMode>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d001      	beq.n	800f1c6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800f1c2:	2382      	movs	r3, #130	; 0x82
 800f1c4:	e003      	b.n	800f1ce <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f001 fcb5 	bl	8010b36 <vQueueDelete>

  return osOK; 
 800f1cc:	2300      	movs	r3, #0
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3708      	adds	r7, #8
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}

0800f1d6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800f1d6:	b590      	push	{r4, r7, lr}
 800f1d8:	b085      	sub	sp, #20
 800f1da:	af02      	add	r7, sp, #8
 800f1dc:	6078      	str	r0, [r7, #4]
 800f1de:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	689b      	ldr	r3, [r3, #8]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d012      	beq.n	800f20e <osMessageCreate+0x38>
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	68db      	ldr	r3, [r3, #12]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d00e      	beq.n	800f20e <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	6818      	ldr	r0, [r3, #0]
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6859      	ldr	r1, [r3, #4]
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	689a      	ldr	r2, [r3, #8]
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	68dc      	ldr	r4, [r3, #12]
 800f200:	2300      	movs	r3, #0
 800f202:	9300      	str	r3, [sp, #0]
 800f204:	4623      	mov	r3, r4
 800f206:	f000 fe1b 	bl	800fe40 <xQueueGenericCreateStatic>
 800f20a:	4603      	mov	r3, r0
 800f20c:	e008      	b.n	800f220 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6818      	ldr	r0, [r3, #0]
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	685b      	ldr	r3, [r3, #4]
 800f216:	2200      	movs	r2, #0
 800f218:	4619      	mov	r1, r3
 800f21a:	f000 fe8e 	bl	800ff3a <xQueueGenericCreate>
 800f21e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800f220:	4618      	mov	r0, r3
 800f222:	370c      	adds	r7, #12
 800f224:	46bd      	mov	sp, r7
 800f226:	bd90      	pop	{r4, r7, pc}

0800f228 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b086      	sub	sp, #24
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	60f8      	str	r0, [r7, #12]
 800f230:	60b9      	str	r1, [r7, #8]
 800f232:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800f234:	2300      	movs	r3, #0
 800f236:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d101      	bne.n	800f246 <osMessagePut+0x1e>
    ticks = 1;
 800f242:	2301      	movs	r3, #1
 800f244:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800f246:	f7ff fdbe 	bl	800edc6 <inHandlerMode>
 800f24a:	4603      	mov	r3, r0
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d018      	beq.n	800f282 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800f250:	f107 0210 	add.w	r2, r7, #16
 800f254:	f107 0108 	add.w	r1, r7, #8
 800f258:	2300      	movs	r3, #0
 800f25a:	68f8      	ldr	r0, [r7, #12]
 800f25c:	f001 f88a 	bl	8010374 <xQueueGenericSendFromISR>
 800f260:	4603      	mov	r3, r0
 800f262:	2b01      	cmp	r3, #1
 800f264:	d001      	beq.n	800f26a <osMessagePut+0x42>
      return osErrorOS;
 800f266:	23ff      	movs	r3, #255	; 0xff
 800f268:	e018      	b.n	800f29c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d014      	beq.n	800f29a <osMessagePut+0x72>
 800f270:	4b0c      	ldr	r3, [pc, #48]	; (800f2a4 <osMessagePut+0x7c>)
 800f272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f276:	601a      	str	r2, [r3, #0]
 800f278:	f3bf 8f4f 	dsb	sy
 800f27c:	f3bf 8f6f 	isb	sy
 800f280:	e00b      	b.n	800f29a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800f282:	f107 0108 	add.w	r1, r7, #8
 800f286:	2300      	movs	r3, #0
 800f288:	697a      	ldr	r2, [r7, #20]
 800f28a:	68f8      	ldr	r0, [r7, #12]
 800f28c:	f000 ff70 	bl	8010170 <xQueueGenericSend>
 800f290:	4603      	mov	r3, r0
 800f292:	2b01      	cmp	r3, #1
 800f294:	d001      	beq.n	800f29a <osMessagePut+0x72>
      return osErrorOS;
 800f296:	23ff      	movs	r3, #255	; 0xff
 800f298:	e000      	b.n	800f29c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800f29a:	2300      	movs	r3, #0
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	3718      	adds	r7, #24
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}
 800f2a4:	e000ed04 	.word	0xe000ed04

0800f2a8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800f2a8:	b590      	push	{r4, r7, lr}
 800f2aa:	b08b      	sub	sp, #44	; 0x2c
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	60f8      	str	r0, [r7, #12]
 800f2b0:	60b9      	str	r1, [r7, #8]
 800f2b2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d10a      	bne.n	800f2d8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800f2c2:	2380      	movs	r3, #128	; 0x80
 800f2c4:	617b      	str	r3, [r7, #20]
    return event;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	461c      	mov	r4, r3
 800f2ca:	f107 0314 	add.w	r3, r7, #20
 800f2ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f2d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f2d6:	e054      	b.n	800f382 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800f2d8:	2300      	movs	r3, #0
 800f2da:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2e6:	d103      	bne.n	800f2f0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800f2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800f2ec:	627b      	str	r3, [r7, #36]	; 0x24
 800f2ee:	e009      	b.n	800f304 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d006      	beq.n	800f304 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800f2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d101      	bne.n	800f304 <osMessageGet+0x5c>
      ticks = 1;
 800f300:	2301      	movs	r3, #1
 800f302:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800f304:	f7ff fd5f 	bl	800edc6 <inHandlerMode>
 800f308:	4603      	mov	r3, r0
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d01c      	beq.n	800f348 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800f30e:	f107 0220 	add.w	r2, r7, #32
 800f312:	f107 0314 	add.w	r3, r7, #20
 800f316:	3304      	adds	r3, #4
 800f318:	4619      	mov	r1, r3
 800f31a:	68b8      	ldr	r0, [r7, #8]
 800f31c:	f001 fb4a 	bl	80109b4 <xQueueReceiveFromISR>
 800f320:	4603      	mov	r3, r0
 800f322:	2b01      	cmp	r3, #1
 800f324:	d102      	bne.n	800f32c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800f326:	2310      	movs	r3, #16
 800f328:	617b      	str	r3, [r7, #20]
 800f32a:	e001      	b.n	800f330 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800f32c:	2300      	movs	r3, #0
 800f32e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f330:	6a3b      	ldr	r3, [r7, #32]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d01d      	beq.n	800f372 <osMessageGet+0xca>
 800f336:	4b15      	ldr	r3, [pc, #84]	; (800f38c <osMessageGet+0xe4>)
 800f338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f33c:	601a      	str	r2, [r3, #0]
 800f33e:	f3bf 8f4f 	dsb	sy
 800f342:	f3bf 8f6f 	isb	sy
 800f346:	e014      	b.n	800f372 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800f348:	f107 0314 	add.w	r3, r7, #20
 800f34c:	3304      	adds	r3, #4
 800f34e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f350:	4619      	mov	r1, r3
 800f352:	68b8      	ldr	r0, [r7, #8]
 800f354:	f001 f93c 	bl	80105d0 <xQueueReceive>
 800f358:	4603      	mov	r3, r0
 800f35a:	2b01      	cmp	r3, #1
 800f35c:	d102      	bne.n	800f364 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800f35e:	2310      	movs	r3, #16
 800f360:	617b      	str	r3, [r7, #20]
 800f362:	e006      	b.n	800f372 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800f364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f366:	2b00      	cmp	r3, #0
 800f368:	d101      	bne.n	800f36e <osMessageGet+0xc6>
 800f36a:	2300      	movs	r3, #0
 800f36c:	e000      	b.n	800f370 <osMessageGet+0xc8>
 800f36e:	2340      	movs	r3, #64	; 0x40
 800f370:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	461c      	mov	r4, r3
 800f376:	f107 0314 	add.w	r3, r7, #20
 800f37a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f37e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800f382:	68f8      	ldr	r0, [r7, #12]
 800f384:	372c      	adds	r7, #44	; 0x2c
 800f386:	46bd      	mov	sp, r7
 800f388:	bd90      	pop	{r4, r7, pc}
 800f38a:	bf00      	nop
 800f38c:	e000ed04 	.word	0xe000ed04

0800f390 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b082      	sub	sp, #8
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800f398:	f7ff fd15 	bl	800edc6 <inHandlerMode>
 800f39c:	4603      	mov	r3, r0
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d004      	beq.n	800f3ac <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f001 fba8 	bl	8010af8 <uxQueueMessagesWaitingFromISR>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	e003      	b.n	800f3b4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f001 fb84 	bl	8010aba <uxQueueMessagesWaiting>
 800f3b2:	4603      	mov	r3, r0
  }
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3708      	adds	r7, #8
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}

0800f3bc <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b082      	sub	sp, #8
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800f3c4:	f7ff fcff 	bl	800edc6 <inHandlerMode>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d001      	beq.n	800f3d2 <osMessageDelete+0x16>
    return osErrorISR;
 800f3ce:	2382      	movs	r3, #130	; 0x82
 800f3d0:	e003      	b.n	800f3da <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	f001 fbaf 	bl	8010b36 <vQueueDelete>

  return osOK; 
 800f3d8:	2300      	movs	r3, #0
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	3708      	adds	r7, #8
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}
	...

0800f3e4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b08a      	sub	sp, #40	; 0x28
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f3f0:	f001 ff52 	bl	8011298 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f3f4:	4b5c      	ldr	r3, [pc, #368]	; (800f568 <pvPortMalloc+0x184>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d101      	bne.n	800f400 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f3fc:	f000 f91a 	bl	800f634 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f400:	4b5a      	ldr	r3, [pc, #360]	; (800f56c <pvPortMalloc+0x188>)
 800f402:	681a      	ldr	r2, [r3, #0]
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	4013      	ands	r3, r2
 800f408:	2b00      	cmp	r3, #0
 800f40a:	f040 8090 	bne.w	800f52e <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d01e      	beq.n	800f452 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800f414:	2208      	movs	r2, #8
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	4413      	add	r3, r2
 800f41a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f003 0307 	and.w	r3, r3, #7
 800f422:	2b00      	cmp	r3, #0
 800f424:	d015      	beq.n	800f452 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f023 0307 	bic.w	r3, r3, #7
 800f42c:	3308      	adds	r3, #8
 800f42e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	f003 0307 	and.w	r3, r3, #7
 800f436:	2b00      	cmp	r3, #0
 800f438:	d00b      	beq.n	800f452 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f43e:	b672      	cpsid	i
 800f440:	f383 8811 	msr	BASEPRI, r3
 800f444:	f3bf 8f6f 	isb	sy
 800f448:	f3bf 8f4f 	dsb	sy
 800f44c:	b662      	cpsie	i
 800f44e:	617b      	str	r3, [r7, #20]
 800f450:	e7fe      	b.n	800f450 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d06a      	beq.n	800f52e <pvPortMalloc+0x14a>
 800f458:	4b45      	ldr	r3, [pc, #276]	; (800f570 <pvPortMalloc+0x18c>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	687a      	ldr	r2, [r7, #4]
 800f45e:	429a      	cmp	r2, r3
 800f460:	d865      	bhi.n	800f52e <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f462:	4b44      	ldr	r3, [pc, #272]	; (800f574 <pvPortMalloc+0x190>)
 800f464:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f466:	4b43      	ldr	r3, [pc, #268]	; (800f574 <pvPortMalloc+0x190>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f46c:	e004      	b.n	800f478 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800f46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f470:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f47a:	685b      	ldr	r3, [r3, #4]
 800f47c:	687a      	ldr	r2, [r7, #4]
 800f47e:	429a      	cmp	r2, r3
 800f480:	d903      	bls.n	800f48a <pvPortMalloc+0xa6>
 800f482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d1f1      	bne.n	800f46e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f48a:	4b37      	ldr	r3, [pc, #220]	; (800f568 <pvPortMalloc+0x184>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f490:	429a      	cmp	r2, r3
 800f492:	d04c      	beq.n	800f52e <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f494:	6a3b      	ldr	r3, [r7, #32]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	2208      	movs	r2, #8
 800f49a:	4413      	add	r3, r2
 800f49c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a0:	681a      	ldr	r2, [r3, #0]
 800f4a2:	6a3b      	ldr	r3, [r7, #32]
 800f4a4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a8:	685a      	ldr	r2, [r3, #4]
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	1ad2      	subs	r2, r2, r3
 800f4ae:	2308      	movs	r3, #8
 800f4b0:	005b      	lsls	r3, r3, #1
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	d920      	bls.n	800f4f8 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f4b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	4413      	add	r3, r2
 800f4bc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f4be:	69bb      	ldr	r3, [r7, #24]
 800f4c0:	f003 0307 	and.w	r3, r3, #7
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d00b      	beq.n	800f4e0 <pvPortMalloc+0xfc>
 800f4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4cc:	b672      	cpsid	i
 800f4ce:	f383 8811 	msr	BASEPRI, r3
 800f4d2:	f3bf 8f6f 	isb	sy
 800f4d6:	f3bf 8f4f 	dsb	sy
 800f4da:	b662      	cpsie	i
 800f4dc:	613b      	str	r3, [r7, #16]
 800f4de:	e7fe      	b.n	800f4de <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e2:	685a      	ldr	r2, [r3, #4]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	1ad2      	subs	r2, r2, r3
 800f4e8:	69bb      	ldr	r3, [r7, #24]
 800f4ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ee:	687a      	ldr	r2, [r7, #4]
 800f4f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f4f2:	69b8      	ldr	r0, [r7, #24]
 800f4f4:	f000 f900 	bl	800f6f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f4f8:	4b1d      	ldr	r3, [pc, #116]	; (800f570 <pvPortMalloc+0x18c>)
 800f4fa:	681a      	ldr	r2, [r3, #0]
 800f4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4fe:	685b      	ldr	r3, [r3, #4]
 800f500:	1ad3      	subs	r3, r2, r3
 800f502:	4a1b      	ldr	r2, [pc, #108]	; (800f570 <pvPortMalloc+0x18c>)
 800f504:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f506:	4b1a      	ldr	r3, [pc, #104]	; (800f570 <pvPortMalloc+0x18c>)
 800f508:	681a      	ldr	r2, [r3, #0]
 800f50a:	4b1b      	ldr	r3, [pc, #108]	; (800f578 <pvPortMalloc+0x194>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	429a      	cmp	r2, r3
 800f510:	d203      	bcs.n	800f51a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f512:	4b17      	ldr	r3, [pc, #92]	; (800f570 <pvPortMalloc+0x18c>)
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	4a18      	ldr	r2, [pc, #96]	; (800f578 <pvPortMalloc+0x194>)
 800f518:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f51c:	685a      	ldr	r2, [r3, #4]
 800f51e:	4b13      	ldr	r3, [pc, #76]	; (800f56c <pvPortMalloc+0x188>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	431a      	orrs	r2, r3
 800f524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f526:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52a:	2200      	movs	r2, #0
 800f52c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f52e:	f001 fec1 	bl	80112b4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800f532:	69fb      	ldr	r3, [r7, #28]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d101      	bne.n	800f53c <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800f538:	f7f1 fc74 	bl	8000e24 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f53c:	69fb      	ldr	r3, [r7, #28]
 800f53e:	f003 0307 	and.w	r3, r3, #7
 800f542:	2b00      	cmp	r3, #0
 800f544:	d00b      	beq.n	800f55e <pvPortMalloc+0x17a>
 800f546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f54a:	b672      	cpsid	i
 800f54c:	f383 8811 	msr	BASEPRI, r3
 800f550:	f3bf 8f6f 	isb	sy
 800f554:	f3bf 8f4f 	dsb	sy
 800f558:	b662      	cpsie	i
 800f55a:	60fb      	str	r3, [r7, #12]
 800f55c:	e7fe      	b.n	800f55c <pvPortMalloc+0x178>
	return pvReturn;
 800f55e:	69fb      	ldr	r3, [r7, #28]
}
 800f560:	4618      	mov	r0, r3
 800f562:	3728      	adds	r7, #40	; 0x28
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}
 800f568:	2000834c 	.word	0x2000834c
 800f56c:	20008358 	.word	0x20008358
 800f570:	20008350 	.word	0x20008350
 800f574:	20008344 	.word	0x20008344
 800f578:	20008354 	.word	0x20008354

0800f57c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b086      	sub	sp, #24
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d04a      	beq.n	800f624 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f58e:	2308      	movs	r3, #8
 800f590:	425b      	negs	r3, r3
 800f592:	697a      	ldr	r2, [r7, #20]
 800f594:	4413      	add	r3, r2
 800f596:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	685a      	ldr	r2, [r3, #4]
 800f5a0:	4b22      	ldr	r3, [pc, #136]	; (800f62c <vPortFree+0xb0>)
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	4013      	ands	r3, r2
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d10b      	bne.n	800f5c2 <vPortFree+0x46>
 800f5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ae:	b672      	cpsid	i
 800f5b0:	f383 8811 	msr	BASEPRI, r3
 800f5b4:	f3bf 8f6f 	isb	sy
 800f5b8:	f3bf 8f4f 	dsb	sy
 800f5bc:	b662      	cpsie	i
 800f5be:	60fb      	str	r3, [r7, #12]
 800f5c0:	e7fe      	b.n	800f5c0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f5c2:	693b      	ldr	r3, [r7, #16]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d00b      	beq.n	800f5e2 <vPortFree+0x66>
 800f5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ce:	b672      	cpsid	i
 800f5d0:	f383 8811 	msr	BASEPRI, r3
 800f5d4:	f3bf 8f6f 	isb	sy
 800f5d8:	f3bf 8f4f 	dsb	sy
 800f5dc:	b662      	cpsie	i
 800f5de:	60bb      	str	r3, [r7, #8]
 800f5e0:	e7fe      	b.n	800f5e0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f5e2:	693b      	ldr	r3, [r7, #16]
 800f5e4:	685a      	ldr	r2, [r3, #4]
 800f5e6:	4b11      	ldr	r3, [pc, #68]	; (800f62c <vPortFree+0xb0>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	4013      	ands	r3, r2
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d019      	beq.n	800f624 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f5f0:	693b      	ldr	r3, [r7, #16]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d115      	bne.n	800f624 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	685a      	ldr	r2, [r3, #4]
 800f5fc:	4b0b      	ldr	r3, [pc, #44]	; (800f62c <vPortFree+0xb0>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	43db      	mvns	r3, r3
 800f602:	401a      	ands	r2, r3
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f608:	f001 fe46 	bl	8011298 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f60c:	693b      	ldr	r3, [r7, #16]
 800f60e:	685a      	ldr	r2, [r3, #4]
 800f610:	4b07      	ldr	r3, [pc, #28]	; (800f630 <vPortFree+0xb4>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	4413      	add	r3, r2
 800f616:	4a06      	ldr	r2, [pc, #24]	; (800f630 <vPortFree+0xb4>)
 800f618:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f61a:	6938      	ldr	r0, [r7, #16]
 800f61c:	f000 f86c 	bl	800f6f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f620:	f001 fe48 	bl	80112b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f624:	bf00      	nop
 800f626:	3718      	adds	r7, #24
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}
 800f62c:	20008358 	.word	0x20008358
 800f630:	20008350 	.word	0x20008350

0800f634 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f634:	b480      	push	{r7}
 800f636:	b085      	sub	sp, #20
 800f638:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f63a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f63e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f640:	4b27      	ldr	r3, [pc, #156]	; (800f6e0 <prvHeapInit+0xac>)
 800f642:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	f003 0307 	and.w	r3, r3, #7
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d00c      	beq.n	800f668 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	3307      	adds	r3, #7
 800f652:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	f023 0307 	bic.w	r3, r3, #7
 800f65a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f65c:	68ba      	ldr	r2, [r7, #8]
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	1ad3      	subs	r3, r2, r3
 800f662:	4a1f      	ldr	r2, [pc, #124]	; (800f6e0 <prvHeapInit+0xac>)
 800f664:	4413      	add	r3, r2
 800f666:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f66c:	4a1d      	ldr	r2, [pc, #116]	; (800f6e4 <prvHeapInit+0xb0>)
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f672:	4b1c      	ldr	r3, [pc, #112]	; (800f6e4 <prvHeapInit+0xb0>)
 800f674:	2200      	movs	r2, #0
 800f676:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	68ba      	ldr	r2, [r7, #8]
 800f67c:	4413      	add	r3, r2
 800f67e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f680:	2208      	movs	r2, #8
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	1a9b      	subs	r3, r3, r2
 800f686:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	f023 0307 	bic.w	r3, r3, #7
 800f68e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	4a15      	ldr	r2, [pc, #84]	; (800f6e8 <prvHeapInit+0xb4>)
 800f694:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f696:	4b14      	ldr	r3, [pc, #80]	; (800f6e8 <prvHeapInit+0xb4>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	2200      	movs	r2, #0
 800f69c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f69e:	4b12      	ldr	r3, [pc, #72]	; (800f6e8 <prvHeapInit+0xb4>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	68fa      	ldr	r2, [r7, #12]
 800f6ae:	1ad2      	subs	r2, r2, r3
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f6b4:	4b0c      	ldr	r3, [pc, #48]	; (800f6e8 <prvHeapInit+0xb4>)
 800f6b6:	681a      	ldr	r2, [r3, #0]
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	685b      	ldr	r3, [r3, #4]
 800f6c0:	4a0a      	ldr	r2, [pc, #40]	; (800f6ec <prvHeapInit+0xb8>)
 800f6c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	685b      	ldr	r3, [r3, #4]
 800f6c8:	4a09      	ldr	r2, [pc, #36]	; (800f6f0 <prvHeapInit+0xbc>)
 800f6ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f6cc:	4b09      	ldr	r3, [pc, #36]	; (800f6f4 <prvHeapInit+0xc0>)
 800f6ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f6d2:	601a      	str	r2, [r3, #0]
}
 800f6d4:	bf00      	nop
 800f6d6:	3714      	adds	r7, #20
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr
 800f6e0:	20000344 	.word	0x20000344
 800f6e4:	20008344 	.word	0x20008344
 800f6e8:	2000834c 	.word	0x2000834c
 800f6ec:	20008354 	.word	0x20008354
 800f6f0:	20008350 	.word	0x20008350
 800f6f4:	20008358 	.word	0x20008358

0800f6f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b085      	sub	sp, #20
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f700:	4b28      	ldr	r3, [pc, #160]	; (800f7a4 <prvInsertBlockIntoFreeList+0xac>)
 800f702:	60fb      	str	r3, [r7, #12]
 800f704:	e002      	b.n	800f70c <prvInsertBlockIntoFreeList+0x14>
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	60fb      	str	r3, [r7, #12]
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	687a      	ldr	r2, [r7, #4]
 800f712:	429a      	cmp	r2, r3
 800f714:	d8f7      	bhi.n	800f706 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	685b      	ldr	r3, [r3, #4]
 800f71e:	68ba      	ldr	r2, [r7, #8]
 800f720:	4413      	add	r3, r2
 800f722:	687a      	ldr	r2, [r7, #4]
 800f724:	429a      	cmp	r2, r3
 800f726:	d108      	bne.n	800f73a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	685a      	ldr	r2, [r3, #4]
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	441a      	add	r2, r3
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	685b      	ldr	r3, [r3, #4]
 800f742:	68ba      	ldr	r2, [r7, #8]
 800f744:	441a      	add	r2, r3
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	429a      	cmp	r2, r3
 800f74c:	d118      	bne.n	800f780 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	681a      	ldr	r2, [r3, #0]
 800f752:	4b15      	ldr	r3, [pc, #84]	; (800f7a8 <prvInsertBlockIntoFreeList+0xb0>)
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	429a      	cmp	r2, r3
 800f758:	d00d      	beq.n	800f776 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	685a      	ldr	r2, [r3, #4]
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	441a      	add	r2, r3
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	681a      	ldr	r2, [r3, #0]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	601a      	str	r2, [r3, #0]
 800f774:	e008      	b.n	800f788 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f776:	4b0c      	ldr	r3, [pc, #48]	; (800f7a8 <prvInsertBlockIntoFreeList+0xb0>)
 800f778:	681a      	ldr	r2, [r3, #0]
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	601a      	str	r2, [r3, #0]
 800f77e:	e003      	b.n	800f788 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	681a      	ldr	r2, [r3, #0]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f788:	68fa      	ldr	r2, [r7, #12]
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d002      	beq.n	800f796 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	687a      	ldr	r2, [r7, #4]
 800f794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f796:	bf00      	nop
 800f798:	3714      	adds	r7, #20
 800f79a:	46bd      	mov	sp, r7
 800f79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a0:	4770      	bx	lr
 800f7a2:	bf00      	nop
 800f7a4:	20008344 	.word	0x20008344
 800f7a8:	2000834c 	.word	0x2000834c

0800f7ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f7ac:	b480      	push	{r7}
 800f7ae:	b083      	sub	sp, #12
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f103 0208 	add.w	r2, r3, #8
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f04f 32ff 	mov.w	r2, #4294967295
 800f7c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	f103 0208 	add.w	r2, r3, #8
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f103 0208 	add.w	r2, r3, #8
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2200      	movs	r2, #0
 800f7de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f7e0:	bf00      	nop
 800f7e2:	370c      	adds	r7, #12
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ea:	4770      	bx	lr

0800f7ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f7ec:	b480      	push	{r7}
 800f7ee:	b083      	sub	sp, #12
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f7fa:	bf00      	nop
 800f7fc:	370c      	adds	r7, #12
 800f7fe:	46bd      	mov	sp, r7
 800f800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f804:	4770      	bx	lr

0800f806 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f806:	b480      	push	{r7}
 800f808:	b085      	sub	sp, #20
 800f80a:	af00      	add	r7, sp, #0
 800f80c:	6078      	str	r0, [r7, #4]
 800f80e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	685b      	ldr	r3, [r3, #4]
 800f814:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	68fa      	ldr	r2, [r7, #12]
 800f81a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	689a      	ldr	r2, [r3, #8]
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	689b      	ldr	r3, [r3, #8]
 800f828:	683a      	ldr	r2, [r7, #0]
 800f82a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	683a      	ldr	r2, [r7, #0]
 800f830:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	687a      	ldr	r2, [r7, #4]
 800f836:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	1c5a      	adds	r2, r3, #1
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	601a      	str	r2, [r3, #0]
}
 800f842:	bf00      	nop
 800f844:	3714      	adds	r7, #20
 800f846:	46bd      	mov	sp, r7
 800f848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84c:	4770      	bx	lr

0800f84e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f84e:	b480      	push	{r7}
 800f850:	b085      	sub	sp, #20
 800f852:	af00      	add	r7, sp, #0
 800f854:	6078      	str	r0, [r7, #4]
 800f856:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f864:	d103      	bne.n	800f86e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	691b      	ldr	r3, [r3, #16]
 800f86a:	60fb      	str	r3, [r7, #12]
 800f86c:	e00c      	b.n	800f888 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	3308      	adds	r3, #8
 800f872:	60fb      	str	r3, [r7, #12]
 800f874:	e002      	b.n	800f87c <vListInsert+0x2e>
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	685b      	ldr	r3, [r3, #4]
 800f87a:	60fb      	str	r3, [r7, #12]
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	685b      	ldr	r3, [r3, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	68ba      	ldr	r2, [r7, #8]
 800f884:	429a      	cmp	r2, r3
 800f886:	d2f6      	bcs.n	800f876 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	685a      	ldr	r2, [r3, #4]
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	685b      	ldr	r3, [r3, #4]
 800f894:	683a      	ldr	r2, [r7, #0]
 800f896:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	68fa      	ldr	r2, [r7, #12]
 800f89c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	683a      	ldr	r2, [r7, #0]
 800f8a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	687a      	ldr	r2, [r7, #4]
 800f8a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	1c5a      	adds	r2, r3, #1
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	601a      	str	r2, [r3, #0]
}
 800f8b4:	bf00      	nop
 800f8b6:	3714      	adds	r7, #20
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8be:	4770      	bx	lr

0800f8c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b085      	sub	sp, #20
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	691b      	ldr	r3, [r3, #16]
 800f8cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	685b      	ldr	r3, [r3, #4]
 800f8d2:	687a      	ldr	r2, [r7, #4]
 800f8d4:	6892      	ldr	r2, [r2, #8]
 800f8d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	689b      	ldr	r3, [r3, #8]
 800f8dc:	687a      	ldr	r2, [r7, #4]
 800f8de:	6852      	ldr	r2, [r2, #4]
 800f8e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	685b      	ldr	r3, [r3, #4]
 800f8e6:	687a      	ldr	r2, [r7, #4]
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d103      	bne.n	800f8f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	689a      	ldr	r2, [r3, #8]
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	1e5a      	subs	r2, r3, #1
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	681b      	ldr	r3, [r3, #0]
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3714      	adds	r7, #20
 800f90c:	46bd      	mov	sp, r7
 800f90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f912:	4770      	bx	lr

0800f914 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f914:	b480      	push	{r7}
 800f916:	b085      	sub	sp, #20
 800f918:	af00      	add	r7, sp, #0
 800f91a:	60f8      	str	r0, [r7, #12]
 800f91c:	60b9      	str	r1, [r7, #8]
 800f91e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	3b04      	subs	r3, #4
 800f924:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f92c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	3b04      	subs	r3, #4
 800f932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f934:	68bb      	ldr	r3, [r7, #8]
 800f936:	f023 0201 	bic.w	r2, r3, #1
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	3b04      	subs	r3, #4
 800f942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f944:	4a0c      	ldr	r2, [pc, #48]	; (800f978 <pxPortInitialiseStack+0x64>)
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	3b14      	subs	r3, #20
 800f94e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f950:	687a      	ldr	r2, [r7, #4]
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	3b04      	subs	r3, #4
 800f95a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	f06f 0202 	mvn.w	r2, #2
 800f962:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	3b20      	subs	r3, #32
 800f968:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f96a:	68fb      	ldr	r3, [r7, #12]
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	3714      	adds	r7, #20
 800f970:	46bd      	mov	sp, r7
 800f972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f976:	4770      	bx	lr
 800f978:	0800f97d 	.word	0x0800f97d

0800f97c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f97c:	b480      	push	{r7}
 800f97e:	b085      	sub	sp, #20
 800f980:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f982:	2300      	movs	r3, #0
 800f984:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f986:	4b13      	ldr	r3, [pc, #76]	; (800f9d4 <prvTaskExitError+0x58>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f98e:	d00b      	beq.n	800f9a8 <prvTaskExitError+0x2c>
 800f990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f994:	b672      	cpsid	i
 800f996:	f383 8811 	msr	BASEPRI, r3
 800f99a:	f3bf 8f6f 	isb	sy
 800f99e:	f3bf 8f4f 	dsb	sy
 800f9a2:	b662      	cpsie	i
 800f9a4:	60fb      	str	r3, [r7, #12]
 800f9a6:	e7fe      	b.n	800f9a6 <prvTaskExitError+0x2a>
 800f9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ac:	b672      	cpsid	i
 800f9ae:	f383 8811 	msr	BASEPRI, r3
 800f9b2:	f3bf 8f6f 	isb	sy
 800f9b6:	f3bf 8f4f 	dsb	sy
 800f9ba:	b662      	cpsie	i
 800f9bc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f9be:	bf00      	nop
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d0fc      	beq.n	800f9c0 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f9c6:	bf00      	nop
 800f9c8:	3714      	adds	r7, #20
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d0:	4770      	bx	lr
 800f9d2:	bf00      	nop
 800f9d4:	20000010 	.word	0x20000010
	...

0800f9e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f9e0:	4b07      	ldr	r3, [pc, #28]	; (800fa00 <pxCurrentTCBConst2>)
 800f9e2:	6819      	ldr	r1, [r3, #0]
 800f9e4:	6808      	ldr	r0, [r1, #0]
 800f9e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ea:	f380 8809 	msr	PSP, r0
 800f9ee:	f3bf 8f6f 	isb	sy
 800f9f2:	f04f 0000 	mov.w	r0, #0
 800f9f6:	f380 8811 	msr	BASEPRI, r0
 800f9fa:	4770      	bx	lr
 800f9fc:	f3af 8000 	nop.w

0800fa00 <pxCurrentTCBConst2>:
 800fa00:	20008364 	.word	0x20008364
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fa04:	bf00      	nop
 800fa06:	bf00      	nop

0800fa08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fa08:	4808      	ldr	r0, [pc, #32]	; (800fa2c <prvPortStartFirstTask+0x24>)
 800fa0a:	6800      	ldr	r0, [r0, #0]
 800fa0c:	6800      	ldr	r0, [r0, #0]
 800fa0e:	f380 8808 	msr	MSP, r0
 800fa12:	f04f 0000 	mov.w	r0, #0
 800fa16:	f380 8814 	msr	CONTROL, r0
 800fa1a:	b662      	cpsie	i
 800fa1c:	b661      	cpsie	f
 800fa1e:	f3bf 8f4f 	dsb	sy
 800fa22:	f3bf 8f6f 	isb	sy
 800fa26:	df00      	svc	0
 800fa28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fa2a:	bf00      	nop
 800fa2c:	e000ed08 	.word	0xe000ed08

0800fa30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b084      	sub	sp, #16
 800fa34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fa36:	4b36      	ldr	r3, [pc, #216]	; (800fb10 <xPortStartScheduler+0xe0>)
 800fa38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	781b      	ldrb	r3, [r3, #0]
 800fa3e:	b2db      	uxtb	r3, r3
 800fa40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	22ff      	movs	r2, #255	; 0xff
 800fa46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	b2db      	uxtb	r3, r3
 800fa4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fa50:	78fb      	ldrb	r3, [r7, #3]
 800fa52:	b2db      	uxtb	r3, r3
 800fa54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fa58:	b2da      	uxtb	r2, r3
 800fa5a:	4b2e      	ldr	r3, [pc, #184]	; (800fb14 <xPortStartScheduler+0xe4>)
 800fa5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fa5e:	4b2e      	ldr	r3, [pc, #184]	; (800fb18 <xPortStartScheduler+0xe8>)
 800fa60:	2207      	movs	r2, #7
 800fa62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fa64:	e009      	b.n	800fa7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800fa66:	4b2c      	ldr	r3, [pc, #176]	; (800fb18 <xPortStartScheduler+0xe8>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	3b01      	subs	r3, #1
 800fa6c:	4a2a      	ldr	r2, [pc, #168]	; (800fb18 <xPortStartScheduler+0xe8>)
 800fa6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fa70:	78fb      	ldrb	r3, [r7, #3]
 800fa72:	b2db      	uxtb	r3, r3
 800fa74:	005b      	lsls	r3, r3, #1
 800fa76:	b2db      	uxtb	r3, r3
 800fa78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fa7a:	78fb      	ldrb	r3, [r7, #3]
 800fa7c:	b2db      	uxtb	r3, r3
 800fa7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa82:	2b80      	cmp	r3, #128	; 0x80
 800fa84:	d0ef      	beq.n	800fa66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fa86:	4b24      	ldr	r3, [pc, #144]	; (800fb18 <xPortStartScheduler+0xe8>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	f1c3 0307 	rsb	r3, r3, #7
 800fa8e:	2b04      	cmp	r3, #4
 800fa90:	d00b      	beq.n	800faaa <xPortStartScheduler+0x7a>
 800fa92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa96:	b672      	cpsid	i
 800fa98:	f383 8811 	msr	BASEPRI, r3
 800fa9c:	f3bf 8f6f 	isb	sy
 800faa0:	f3bf 8f4f 	dsb	sy
 800faa4:	b662      	cpsie	i
 800faa6:	60bb      	str	r3, [r7, #8]
 800faa8:	e7fe      	b.n	800faa8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800faaa:	4b1b      	ldr	r3, [pc, #108]	; (800fb18 <xPortStartScheduler+0xe8>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	021b      	lsls	r3, r3, #8
 800fab0:	4a19      	ldr	r2, [pc, #100]	; (800fb18 <xPortStartScheduler+0xe8>)
 800fab2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fab4:	4b18      	ldr	r3, [pc, #96]	; (800fb18 <xPortStartScheduler+0xe8>)
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fabc:	4a16      	ldr	r2, [pc, #88]	; (800fb18 <xPortStartScheduler+0xe8>)
 800fabe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	b2da      	uxtb	r2, r3
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fac8:	4b14      	ldr	r3, [pc, #80]	; (800fb1c <xPortStartScheduler+0xec>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	4a13      	ldr	r2, [pc, #76]	; (800fb1c <xPortStartScheduler+0xec>)
 800face:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fad2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fad4:	4b11      	ldr	r3, [pc, #68]	; (800fb1c <xPortStartScheduler+0xec>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	4a10      	ldr	r2, [pc, #64]	; (800fb1c <xPortStartScheduler+0xec>)
 800fada:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fade:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fae0:	f000 f8d4 	bl	800fc8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fae4:	4b0e      	ldr	r3, [pc, #56]	; (800fb20 <xPortStartScheduler+0xf0>)
 800fae6:	2200      	movs	r2, #0
 800fae8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800faea:	f000 f8f3 	bl	800fcd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800faee:	4b0d      	ldr	r3, [pc, #52]	; (800fb24 <xPortStartScheduler+0xf4>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	4a0c      	ldr	r2, [pc, #48]	; (800fb24 <xPortStartScheduler+0xf4>)
 800faf4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800faf8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fafa:	f7ff ff85 	bl	800fa08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fafe:	f001 fd53 	bl	80115a8 <vTaskSwitchContext>
	prvTaskExitError();
 800fb02:	f7ff ff3b 	bl	800f97c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fb06:	2300      	movs	r3, #0
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3710      	adds	r7, #16
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}
 800fb10:	e000e400 	.word	0xe000e400
 800fb14:	2000835c 	.word	0x2000835c
 800fb18:	20008360 	.word	0x20008360
 800fb1c:	e000ed20 	.word	0xe000ed20
 800fb20:	20000010 	.word	0x20000010
 800fb24:	e000ef34 	.word	0xe000ef34

0800fb28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fb28:	b480      	push	{r7}
 800fb2a:	b083      	sub	sp, #12
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb32:	b672      	cpsid	i
 800fb34:	f383 8811 	msr	BASEPRI, r3
 800fb38:	f3bf 8f6f 	isb	sy
 800fb3c:	f3bf 8f4f 	dsb	sy
 800fb40:	b662      	cpsie	i
 800fb42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fb44:	4b0f      	ldr	r3, [pc, #60]	; (800fb84 <vPortEnterCritical+0x5c>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	3301      	adds	r3, #1
 800fb4a:	4a0e      	ldr	r2, [pc, #56]	; (800fb84 <vPortEnterCritical+0x5c>)
 800fb4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fb4e:	4b0d      	ldr	r3, [pc, #52]	; (800fb84 <vPortEnterCritical+0x5c>)
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	2b01      	cmp	r3, #1
 800fb54:	d110      	bne.n	800fb78 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fb56:	4b0c      	ldr	r3, [pc, #48]	; (800fb88 <vPortEnterCritical+0x60>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	b2db      	uxtb	r3, r3
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d00b      	beq.n	800fb78 <vPortEnterCritical+0x50>
 800fb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb64:	b672      	cpsid	i
 800fb66:	f383 8811 	msr	BASEPRI, r3
 800fb6a:	f3bf 8f6f 	isb	sy
 800fb6e:	f3bf 8f4f 	dsb	sy
 800fb72:	b662      	cpsie	i
 800fb74:	603b      	str	r3, [r7, #0]
 800fb76:	e7fe      	b.n	800fb76 <vPortEnterCritical+0x4e>
	}
}
 800fb78:	bf00      	nop
 800fb7a:	370c      	adds	r7, #12
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb82:	4770      	bx	lr
 800fb84:	20000010 	.word	0x20000010
 800fb88:	e000ed04 	.word	0xe000ed04

0800fb8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fb8c:	b480      	push	{r7}
 800fb8e:	b083      	sub	sp, #12
 800fb90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fb92:	4b12      	ldr	r3, [pc, #72]	; (800fbdc <vPortExitCritical+0x50>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d10b      	bne.n	800fbb2 <vPortExitCritical+0x26>
 800fb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb9e:	b672      	cpsid	i
 800fba0:	f383 8811 	msr	BASEPRI, r3
 800fba4:	f3bf 8f6f 	isb	sy
 800fba8:	f3bf 8f4f 	dsb	sy
 800fbac:	b662      	cpsie	i
 800fbae:	607b      	str	r3, [r7, #4]
 800fbb0:	e7fe      	b.n	800fbb0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800fbb2:	4b0a      	ldr	r3, [pc, #40]	; (800fbdc <vPortExitCritical+0x50>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	3b01      	subs	r3, #1
 800fbb8:	4a08      	ldr	r2, [pc, #32]	; (800fbdc <vPortExitCritical+0x50>)
 800fbba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fbbc:	4b07      	ldr	r3, [pc, #28]	; (800fbdc <vPortExitCritical+0x50>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d104      	bne.n	800fbce <vPortExitCritical+0x42>
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800fbce:	bf00      	nop
 800fbd0:	370c      	adds	r7, #12
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd8:	4770      	bx	lr
 800fbda:	bf00      	nop
 800fbdc:	20000010 	.word	0x20000010

0800fbe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fbe0:	f3ef 8009 	mrs	r0, PSP
 800fbe4:	f3bf 8f6f 	isb	sy
 800fbe8:	4b15      	ldr	r3, [pc, #84]	; (800fc40 <pxCurrentTCBConst>)
 800fbea:	681a      	ldr	r2, [r3, #0]
 800fbec:	f01e 0f10 	tst.w	lr, #16
 800fbf0:	bf08      	it	eq
 800fbf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fbf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbfa:	6010      	str	r0, [r2, #0]
 800fbfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fc00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fc04:	b672      	cpsid	i
 800fc06:	f380 8811 	msr	BASEPRI, r0
 800fc0a:	f3bf 8f4f 	dsb	sy
 800fc0e:	f3bf 8f6f 	isb	sy
 800fc12:	b662      	cpsie	i
 800fc14:	f001 fcc8 	bl	80115a8 <vTaskSwitchContext>
 800fc18:	f04f 0000 	mov.w	r0, #0
 800fc1c:	f380 8811 	msr	BASEPRI, r0
 800fc20:	bc09      	pop	{r0, r3}
 800fc22:	6819      	ldr	r1, [r3, #0]
 800fc24:	6808      	ldr	r0, [r1, #0]
 800fc26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc2a:	f01e 0f10 	tst.w	lr, #16
 800fc2e:	bf08      	it	eq
 800fc30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fc34:	f380 8809 	msr	PSP, r0
 800fc38:	f3bf 8f6f 	isb	sy
 800fc3c:	4770      	bx	lr
 800fc3e:	bf00      	nop

0800fc40 <pxCurrentTCBConst>:
 800fc40:	20008364 	.word	0x20008364
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fc44:	bf00      	nop
 800fc46:	bf00      	nop

0800fc48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b082      	sub	sp, #8
 800fc4c:	af00      	add	r7, sp, #0
	__asm volatile
 800fc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc52:	b672      	cpsid	i
 800fc54:	f383 8811 	msr	BASEPRI, r3
 800fc58:	f3bf 8f6f 	isb	sy
 800fc5c:	f3bf 8f4f 	dsb	sy
 800fc60:	b662      	cpsie	i
 800fc62:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fc64:	f001 fbe6 	bl	8011434 <xTaskIncrementTick>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d003      	beq.n	800fc76 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fc6e:	4b06      	ldr	r3, [pc, #24]	; (800fc88 <SysTick_Handler+0x40>)
 800fc70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc74:	601a      	str	r2, [r3, #0]
 800fc76:	2300      	movs	r3, #0
 800fc78:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800fc80:	bf00      	nop
 800fc82:	3708      	adds	r7, #8
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}
 800fc88:	e000ed04 	.word	0xe000ed04

0800fc8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fc90:	4b0b      	ldr	r3, [pc, #44]	; (800fcc0 <vPortSetupTimerInterrupt+0x34>)
 800fc92:	2200      	movs	r2, #0
 800fc94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fc96:	4b0b      	ldr	r3, [pc, #44]	; (800fcc4 <vPortSetupTimerInterrupt+0x38>)
 800fc98:	2200      	movs	r2, #0
 800fc9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fc9c:	4b0a      	ldr	r3, [pc, #40]	; (800fcc8 <vPortSetupTimerInterrupt+0x3c>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	4a0a      	ldr	r2, [pc, #40]	; (800fccc <vPortSetupTimerInterrupt+0x40>)
 800fca2:	fba2 2303 	umull	r2, r3, r2, r3
 800fca6:	099b      	lsrs	r3, r3, #6
 800fca8:	4a09      	ldr	r2, [pc, #36]	; (800fcd0 <vPortSetupTimerInterrupt+0x44>)
 800fcaa:	3b01      	subs	r3, #1
 800fcac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fcae:	4b04      	ldr	r3, [pc, #16]	; (800fcc0 <vPortSetupTimerInterrupt+0x34>)
 800fcb0:	2207      	movs	r2, #7
 800fcb2:	601a      	str	r2, [r3, #0]
}
 800fcb4:	bf00      	nop
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbc:	4770      	bx	lr
 800fcbe:	bf00      	nop
 800fcc0:	e000e010 	.word	0xe000e010
 800fcc4:	e000e018 	.word	0xe000e018
 800fcc8:	20000004 	.word	0x20000004
 800fccc:	10624dd3 	.word	0x10624dd3
 800fcd0:	e000e014 	.word	0xe000e014

0800fcd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fcd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fce4 <vPortEnableVFP+0x10>
 800fcd8:	6801      	ldr	r1, [r0, #0]
 800fcda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fcde:	6001      	str	r1, [r0, #0]
 800fce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fce2:	bf00      	nop
 800fce4:	e000ed88 	.word	0xe000ed88

0800fce8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fce8:	b480      	push	{r7}
 800fcea:	b085      	sub	sp, #20
 800fcec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fcee:	f3ef 8305 	mrs	r3, IPSR
 800fcf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	2b0f      	cmp	r3, #15
 800fcf8:	d915      	bls.n	800fd26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fcfa:	4a18      	ldr	r2, [pc, #96]	; (800fd5c <vPortValidateInterruptPriority+0x74>)
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	4413      	add	r3, r2
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fd04:	4b16      	ldr	r3, [pc, #88]	; (800fd60 <vPortValidateInterruptPriority+0x78>)
 800fd06:	781b      	ldrb	r3, [r3, #0]
 800fd08:	7afa      	ldrb	r2, [r7, #11]
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	d20b      	bcs.n	800fd26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd12:	b672      	cpsid	i
 800fd14:	f383 8811 	msr	BASEPRI, r3
 800fd18:	f3bf 8f6f 	isb	sy
 800fd1c:	f3bf 8f4f 	dsb	sy
 800fd20:	b662      	cpsie	i
 800fd22:	607b      	str	r3, [r7, #4]
 800fd24:	e7fe      	b.n	800fd24 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fd26:	4b0f      	ldr	r3, [pc, #60]	; (800fd64 <vPortValidateInterruptPriority+0x7c>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fd2e:	4b0e      	ldr	r3, [pc, #56]	; (800fd68 <vPortValidateInterruptPriority+0x80>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d90b      	bls.n	800fd4e <vPortValidateInterruptPriority+0x66>
 800fd36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd3a:	b672      	cpsid	i
 800fd3c:	f383 8811 	msr	BASEPRI, r3
 800fd40:	f3bf 8f6f 	isb	sy
 800fd44:	f3bf 8f4f 	dsb	sy
 800fd48:	b662      	cpsie	i
 800fd4a:	603b      	str	r3, [r7, #0]
 800fd4c:	e7fe      	b.n	800fd4c <vPortValidateInterruptPriority+0x64>
	}
 800fd4e:	bf00      	nop
 800fd50:	3714      	adds	r7, #20
 800fd52:	46bd      	mov	sp, r7
 800fd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd58:	4770      	bx	lr
 800fd5a:	bf00      	nop
 800fd5c:	e000e3f0 	.word	0xe000e3f0
 800fd60:	2000835c 	.word	0x2000835c
 800fd64:	e000ed0c 	.word	0xe000ed0c
 800fd68:	20008360 	.word	0x20008360

0800fd6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b084      	sub	sp, #16
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
 800fd74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d10b      	bne.n	800fd98 <xQueueGenericReset+0x2c>
 800fd80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd84:	b672      	cpsid	i
 800fd86:	f383 8811 	msr	BASEPRI, r3
 800fd8a:	f3bf 8f6f 	isb	sy
 800fd8e:	f3bf 8f4f 	dsb	sy
 800fd92:	b662      	cpsie	i
 800fd94:	60bb      	str	r3, [r7, #8]
 800fd96:	e7fe      	b.n	800fd96 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800fd98:	f7ff fec6 	bl	800fb28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	681a      	ldr	r2, [r3, #0]
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fda4:	68f9      	ldr	r1, [r7, #12]
 800fda6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fda8:	fb01 f303 	mul.w	r3, r1, r3
 800fdac:	441a      	add	r2, r3
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	681a      	ldr	r2, [r3, #0]
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	681a      	ldr	r2, [r3, #0]
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdc8:	3b01      	subs	r3, #1
 800fdca:	68f9      	ldr	r1, [r7, #12]
 800fdcc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fdce:	fb01 f303 	mul.w	r3, r1, r3
 800fdd2:	441a      	add	r2, r3
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	22ff      	movs	r2, #255	; 0xff
 800fddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	22ff      	movs	r2, #255	; 0xff
 800fde4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fde8:	683b      	ldr	r3, [r7, #0]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d114      	bne.n	800fe18 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	691b      	ldr	r3, [r3, #16]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d01a      	beq.n	800fe2c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	3310      	adds	r3, #16
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f001 fc7c 	bl	80116f8 <xTaskRemoveFromEventList>
 800fe00:	4603      	mov	r3, r0
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d012      	beq.n	800fe2c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fe06:	4b0d      	ldr	r3, [pc, #52]	; (800fe3c <xQueueGenericReset+0xd0>)
 800fe08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe0c:	601a      	str	r2, [r3, #0]
 800fe0e:	f3bf 8f4f 	dsb	sy
 800fe12:	f3bf 8f6f 	isb	sy
 800fe16:	e009      	b.n	800fe2c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	3310      	adds	r3, #16
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7ff fcc5 	bl	800f7ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	3324      	adds	r3, #36	; 0x24
 800fe26:	4618      	mov	r0, r3
 800fe28:	f7ff fcc0 	bl	800f7ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fe2c:	f7ff feae 	bl	800fb8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fe30:	2301      	movs	r3, #1
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	3710      	adds	r7, #16
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}
 800fe3a:	bf00      	nop
 800fe3c:	e000ed04 	.word	0xe000ed04

0800fe40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b08e      	sub	sp, #56	; 0x38
 800fe44:	af02      	add	r7, sp, #8
 800fe46:	60f8      	str	r0, [r7, #12]
 800fe48:	60b9      	str	r1, [r7, #8]
 800fe4a:	607a      	str	r2, [r7, #4]
 800fe4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d10b      	bne.n	800fe6c <xQueueGenericCreateStatic+0x2c>
 800fe54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe58:	b672      	cpsid	i
 800fe5a:	f383 8811 	msr	BASEPRI, r3
 800fe5e:	f3bf 8f6f 	isb	sy
 800fe62:	f3bf 8f4f 	dsb	sy
 800fe66:	b662      	cpsie	i
 800fe68:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe6a:	e7fe      	b.n	800fe6a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d10b      	bne.n	800fe8a <xQueueGenericCreateStatic+0x4a>
 800fe72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe76:	b672      	cpsid	i
 800fe78:	f383 8811 	msr	BASEPRI, r3
 800fe7c:	f3bf 8f6f 	isb	sy
 800fe80:	f3bf 8f4f 	dsb	sy
 800fe84:	b662      	cpsie	i
 800fe86:	627b      	str	r3, [r7, #36]	; 0x24
 800fe88:	e7fe      	b.n	800fe88 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d002      	beq.n	800fe96 <xQueueGenericCreateStatic+0x56>
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d001      	beq.n	800fe9a <xQueueGenericCreateStatic+0x5a>
 800fe96:	2301      	movs	r3, #1
 800fe98:	e000      	b.n	800fe9c <xQueueGenericCreateStatic+0x5c>
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d10b      	bne.n	800feb8 <xQueueGenericCreateStatic+0x78>
 800fea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fea4:	b672      	cpsid	i
 800fea6:	f383 8811 	msr	BASEPRI, r3
 800feaa:	f3bf 8f6f 	isb	sy
 800feae:	f3bf 8f4f 	dsb	sy
 800feb2:	b662      	cpsie	i
 800feb4:	623b      	str	r3, [r7, #32]
 800feb6:	e7fe      	b.n	800feb6 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d102      	bne.n	800fec4 <xQueueGenericCreateStatic+0x84>
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d101      	bne.n	800fec8 <xQueueGenericCreateStatic+0x88>
 800fec4:	2301      	movs	r3, #1
 800fec6:	e000      	b.n	800feca <xQueueGenericCreateStatic+0x8a>
 800fec8:	2300      	movs	r3, #0
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d10b      	bne.n	800fee6 <xQueueGenericCreateStatic+0xa6>
 800fece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fed2:	b672      	cpsid	i
 800fed4:	f383 8811 	msr	BASEPRI, r3
 800fed8:	f3bf 8f6f 	isb	sy
 800fedc:	f3bf 8f4f 	dsb	sy
 800fee0:	b662      	cpsie	i
 800fee2:	61fb      	str	r3, [r7, #28]
 800fee4:	e7fe      	b.n	800fee4 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fee6:	2348      	movs	r3, #72	; 0x48
 800fee8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800feea:	697b      	ldr	r3, [r7, #20]
 800feec:	2b48      	cmp	r3, #72	; 0x48
 800feee:	d00b      	beq.n	800ff08 <xQueueGenericCreateStatic+0xc8>
 800fef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef4:	b672      	cpsid	i
 800fef6:	f383 8811 	msr	BASEPRI, r3
 800fefa:	f3bf 8f6f 	isb	sy
 800fefe:	f3bf 8f4f 	dsb	sy
 800ff02:	b662      	cpsie	i
 800ff04:	61bb      	str	r3, [r7, #24]
 800ff06:	e7fe      	b.n	800ff06 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ff08:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ff0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d00d      	beq.n	800ff30 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ff14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff16:	2201      	movs	r2, #1
 800ff18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ff1c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ff20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff22:	9300      	str	r3, [sp, #0]
 800ff24:	4613      	mov	r3, r2
 800ff26:	687a      	ldr	r2, [r7, #4]
 800ff28:	68b9      	ldr	r1, [r7, #8]
 800ff2a:	68f8      	ldr	r0, [r7, #12]
 800ff2c:	f000 f846 	bl	800ffbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ff30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ff32:	4618      	mov	r0, r3
 800ff34:	3730      	adds	r7, #48	; 0x30
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd80      	pop	{r7, pc}

0800ff3a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ff3a:	b580      	push	{r7, lr}
 800ff3c:	b08a      	sub	sp, #40	; 0x28
 800ff3e:	af02      	add	r7, sp, #8
 800ff40:	60f8      	str	r0, [r7, #12]
 800ff42:	60b9      	str	r1, [r7, #8]
 800ff44:	4613      	mov	r3, r2
 800ff46:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d10b      	bne.n	800ff66 <xQueueGenericCreate+0x2c>
 800ff4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff52:	b672      	cpsid	i
 800ff54:	f383 8811 	msr	BASEPRI, r3
 800ff58:	f3bf 8f6f 	isb	sy
 800ff5c:	f3bf 8f4f 	dsb	sy
 800ff60:	b662      	cpsie	i
 800ff62:	613b      	str	r3, [r7, #16]
 800ff64:	e7fe      	b.n	800ff64 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d102      	bne.n	800ff72 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	61fb      	str	r3, [r7, #28]
 800ff70:	e004      	b.n	800ff7c <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	68ba      	ldr	r2, [r7, #8]
 800ff76:	fb02 f303 	mul.w	r3, r2, r3
 800ff7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ff7c:	69fb      	ldr	r3, [r7, #28]
 800ff7e:	3348      	adds	r3, #72	; 0x48
 800ff80:	4618      	mov	r0, r3
 800ff82:	f7ff fa2f 	bl	800f3e4 <pvPortMalloc>
 800ff86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ff88:	69bb      	ldr	r3, [r7, #24]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d011      	beq.n	800ffb2 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ff8e:	69bb      	ldr	r3, [r7, #24]
 800ff90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ff92:	697b      	ldr	r3, [r7, #20]
 800ff94:	3348      	adds	r3, #72	; 0x48
 800ff96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ff98:	69bb      	ldr	r3, [r7, #24]
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ffa0:	79fa      	ldrb	r2, [r7, #7]
 800ffa2:	69bb      	ldr	r3, [r7, #24]
 800ffa4:	9300      	str	r3, [sp, #0]
 800ffa6:	4613      	mov	r3, r2
 800ffa8:	697a      	ldr	r2, [r7, #20]
 800ffaa:	68b9      	ldr	r1, [r7, #8]
 800ffac:	68f8      	ldr	r0, [r7, #12]
 800ffae:	f000 f805 	bl	800ffbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ffb2:	69bb      	ldr	r3, [r7, #24]
	}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3720      	adds	r7, #32
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}

0800ffbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b084      	sub	sp, #16
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	60f8      	str	r0, [r7, #12]
 800ffc4:	60b9      	str	r1, [r7, #8]
 800ffc6:	607a      	str	r2, [r7, #4]
 800ffc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d103      	bne.n	800ffd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ffd0:	69bb      	ldr	r3, [r7, #24]
 800ffd2:	69ba      	ldr	r2, [r7, #24]
 800ffd4:	601a      	str	r2, [r3, #0]
 800ffd6:	e002      	b.n	800ffde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ffd8:	69bb      	ldr	r3, [r7, #24]
 800ffda:	687a      	ldr	r2, [r7, #4]
 800ffdc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ffde:	69bb      	ldr	r3, [r7, #24]
 800ffe0:	68fa      	ldr	r2, [r7, #12]
 800ffe2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ffe4:	69bb      	ldr	r3, [r7, #24]
 800ffe6:	68ba      	ldr	r2, [r7, #8]
 800ffe8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ffea:	2101      	movs	r1, #1
 800ffec:	69b8      	ldr	r0, [r7, #24]
 800ffee:	f7ff febd 	bl	800fd6c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fff2:	bf00      	nop
 800fff4:	3710      	adds	r7, #16
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}

0800fffa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800fffa:	b580      	push	{r7, lr}
 800fffc:	b082      	sub	sp, #8
 800fffe:	af00      	add	r7, sp, #0
 8010000:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d00e      	beq.n	8010026 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2200      	movs	r2, #0
 801000c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	2200      	movs	r2, #0
 8010012:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2200      	movs	r2, #0
 8010018:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801001a:	2300      	movs	r3, #0
 801001c:	2200      	movs	r2, #0
 801001e:	2100      	movs	r1, #0
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f000 f8a5 	bl	8010170 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010026:	bf00      	nop
 8010028:	3708      	adds	r7, #8
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}

0801002e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801002e:	b580      	push	{r7, lr}
 8010030:	b086      	sub	sp, #24
 8010032:	af00      	add	r7, sp, #0
 8010034:	4603      	mov	r3, r0
 8010036:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010038:	2301      	movs	r3, #1
 801003a:	617b      	str	r3, [r7, #20]
 801003c:	2300      	movs	r3, #0
 801003e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010040:	79fb      	ldrb	r3, [r7, #7]
 8010042:	461a      	mov	r2, r3
 8010044:	6939      	ldr	r1, [r7, #16]
 8010046:	6978      	ldr	r0, [r7, #20]
 8010048:	f7ff ff77 	bl	800ff3a <xQueueGenericCreate>
 801004c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801004e:	68f8      	ldr	r0, [r7, #12]
 8010050:	f7ff ffd3 	bl	800fffa <prvInitialiseMutex>

		return xNewQueue;
 8010054:	68fb      	ldr	r3, [r7, #12]
	}
 8010056:	4618      	mov	r0, r3
 8010058:	3718      	adds	r7, #24
 801005a:	46bd      	mov	sp, r7
 801005c:	bd80      	pop	{r7, pc}

0801005e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801005e:	b580      	push	{r7, lr}
 8010060:	b088      	sub	sp, #32
 8010062:	af02      	add	r7, sp, #8
 8010064:	4603      	mov	r3, r0
 8010066:	6039      	str	r1, [r7, #0]
 8010068:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801006a:	2301      	movs	r3, #1
 801006c:	617b      	str	r3, [r7, #20]
 801006e:	2300      	movs	r3, #0
 8010070:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010072:	79fb      	ldrb	r3, [r7, #7]
 8010074:	9300      	str	r3, [sp, #0]
 8010076:	683b      	ldr	r3, [r7, #0]
 8010078:	2200      	movs	r2, #0
 801007a:	6939      	ldr	r1, [r7, #16]
 801007c:	6978      	ldr	r0, [r7, #20]
 801007e:	f7ff fedf 	bl	800fe40 <xQueueGenericCreateStatic>
 8010082:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010084:	68f8      	ldr	r0, [r7, #12]
 8010086:	f7ff ffb8 	bl	800fffa <prvInitialiseMutex>

		return xNewQueue;
 801008a:	68fb      	ldr	r3, [r7, #12]
	}
 801008c:	4618      	mov	r0, r3
 801008e:	3718      	adds	r7, #24
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}

08010094 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010094:	b580      	push	{r7, lr}
 8010096:	b08a      	sub	sp, #40	; 0x28
 8010098:	af02      	add	r7, sp, #8
 801009a:	60f8      	str	r0, [r7, #12]
 801009c:	60b9      	str	r1, [r7, #8]
 801009e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d10b      	bne.n	80100be <xQueueCreateCountingSemaphoreStatic+0x2a>
 80100a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100aa:	b672      	cpsid	i
 80100ac:	f383 8811 	msr	BASEPRI, r3
 80100b0:	f3bf 8f6f 	isb	sy
 80100b4:	f3bf 8f4f 	dsb	sy
 80100b8:	b662      	cpsie	i
 80100ba:	61bb      	str	r3, [r7, #24]
 80100bc:	e7fe      	b.n	80100bc <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80100be:	68ba      	ldr	r2, [r7, #8]
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	429a      	cmp	r2, r3
 80100c4:	d90b      	bls.n	80100de <xQueueCreateCountingSemaphoreStatic+0x4a>
 80100c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ca:	b672      	cpsid	i
 80100cc:	f383 8811 	msr	BASEPRI, r3
 80100d0:	f3bf 8f6f 	isb	sy
 80100d4:	f3bf 8f4f 	dsb	sy
 80100d8:	b662      	cpsie	i
 80100da:	617b      	str	r3, [r7, #20]
 80100dc:	e7fe      	b.n	80100dc <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80100de:	2302      	movs	r3, #2
 80100e0:	9300      	str	r3, [sp, #0]
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2200      	movs	r2, #0
 80100e6:	2100      	movs	r1, #0
 80100e8:	68f8      	ldr	r0, [r7, #12]
 80100ea:	f7ff fea9 	bl	800fe40 <xQueueGenericCreateStatic>
 80100ee:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80100f0:	69fb      	ldr	r3, [r7, #28]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d002      	beq.n	80100fc <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80100f6:	69fb      	ldr	r3, [r7, #28]
 80100f8:	68ba      	ldr	r2, [r7, #8]
 80100fa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80100fc:	69fb      	ldr	r3, [r7, #28]
	}
 80100fe:	4618      	mov	r0, r3
 8010100:	3720      	adds	r7, #32
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}

08010106 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010106:	b580      	push	{r7, lr}
 8010108:	b086      	sub	sp, #24
 801010a:	af00      	add	r7, sp, #0
 801010c:	6078      	str	r0, [r7, #4]
 801010e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d10b      	bne.n	801012e <xQueueCreateCountingSemaphore+0x28>
 8010116:	f04f 0350 	mov.w	r3, #80	; 0x50
 801011a:	b672      	cpsid	i
 801011c:	f383 8811 	msr	BASEPRI, r3
 8010120:	f3bf 8f6f 	isb	sy
 8010124:	f3bf 8f4f 	dsb	sy
 8010128:	b662      	cpsie	i
 801012a:	613b      	str	r3, [r7, #16]
 801012c:	e7fe      	b.n	801012c <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801012e:	683a      	ldr	r2, [r7, #0]
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	429a      	cmp	r2, r3
 8010134:	d90b      	bls.n	801014e <xQueueCreateCountingSemaphore+0x48>
 8010136:	f04f 0350 	mov.w	r3, #80	; 0x50
 801013a:	b672      	cpsid	i
 801013c:	f383 8811 	msr	BASEPRI, r3
 8010140:	f3bf 8f6f 	isb	sy
 8010144:	f3bf 8f4f 	dsb	sy
 8010148:	b662      	cpsie	i
 801014a:	60fb      	str	r3, [r7, #12]
 801014c:	e7fe      	b.n	801014c <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801014e:	2202      	movs	r2, #2
 8010150:	2100      	movs	r1, #0
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f7ff fef1 	bl	800ff3a <xQueueGenericCreate>
 8010158:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d002      	beq.n	8010166 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010160:	697b      	ldr	r3, [r7, #20]
 8010162:	683a      	ldr	r2, [r7, #0]
 8010164:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010166:	697b      	ldr	r3, [r7, #20]
	}
 8010168:	4618      	mov	r0, r3
 801016a:	3718      	adds	r7, #24
 801016c:	46bd      	mov	sp, r7
 801016e:	bd80      	pop	{r7, pc}

08010170 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b08e      	sub	sp, #56	; 0x38
 8010174:	af00      	add	r7, sp, #0
 8010176:	60f8      	str	r0, [r7, #12]
 8010178:	60b9      	str	r1, [r7, #8]
 801017a:	607a      	str	r2, [r7, #4]
 801017c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801017e:	2300      	movs	r3, #0
 8010180:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010188:	2b00      	cmp	r3, #0
 801018a:	d10b      	bne.n	80101a4 <xQueueGenericSend+0x34>
 801018c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010190:	b672      	cpsid	i
 8010192:	f383 8811 	msr	BASEPRI, r3
 8010196:	f3bf 8f6f 	isb	sy
 801019a:	f3bf 8f4f 	dsb	sy
 801019e:	b662      	cpsie	i
 80101a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80101a2:	e7fe      	b.n	80101a2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d103      	bne.n	80101b2 <xQueueGenericSend+0x42>
 80101aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d101      	bne.n	80101b6 <xQueueGenericSend+0x46>
 80101b2:	2301      	movs	r3, #1
 80101b4:	e000      	b.n	80101b8 <xQueueGenericSend+0x48>
 80101b6:	2300      	movs	r3, #0
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d10b      	bne.n	80101d4 <xQueueGenericSend+0x64>
 80101bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c0:	b672      	cpsid	i
 80101c2:	f383 8811 	msr	BASEPRI, r3
 80101c6:	f3bf 8f6f 	isb	sy
 80101ca:	f3bf 8f4f 	dsb	sy
 80101ce:	b662      	cpsie	i
 80101d0:	627b      	str	r3, [r7, #36]	; 0x24
 80101d2:	e7fe      	b.n	80101d2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	2b02      	cmp	r3, #2
 80101d8:	d103      	bne.n	80101e2 <xQueueGenericSend+0x72>
 80101da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101de:	2b01      	cmp	r3, #1
 80101e0:	d101      	bne.n	80101e6 <xQueueGenericSend+0x76>
 80101e2:	2301      	movs	r3, #1
 80101e4:	e000      	b.n	80101e8 <xQueueGenericSend+0x78>
 80101e6:	2300      	movs	r3, #0
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d10b      	bne.n	8010204 <xQueueGenericSend+0x94>
 80101ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f0:	b672      	cpsid	i
 80101f2:	f383 8811 	msr	BASEPRI, r3
 80101f6:	f3bf 8f6f 	isb	sy
 80101fa:	f3bf 8f4f 	dsb	sy
 80101fe:	b662      	cpsie	i
 8010200:	623b      	str	r3, [r7, #32]
 8010202:	e7fe      	b.n	8010202 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010204:	f001 fc38 	bl	8011a78 <xTaskGetSchedulerState>
 8010208:	4603      	mov	r3, r0
 801020a:	2b00      	cmp	r3, #0
 801020c:	d102      	bne.n	8010214 <xQueueGenericSend+0xa4>
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d101      	bne.n	8010218 <xQueueGenericSend+0xa8>
 8010214:	2301      	movs	r3, #1
 8010216:	e000      	b.n	801021a <xQueueGenericSend+0xaa>
 8010218:	2300      	movs	r3, #0
 801021a:	2b00      	cmp	r3, #0
 801021c:	d10b      	bne.n	8010236 <xQueueGenericSend+0xc6>
 801021e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010222:	b672      	cpsid	i
 8010224:	f383 8811 	msr	BASEPRI, r3
 8010228:	f3bf 8f6f 	isb	sy
 801022c:	f3bf 8f4f 	dsb	sy
 8010230:	b662      	cpsie	i
 8010232:	61fb      	str	r3, [r7, #28]
 8010234:	e7fe      	b.n	8010234 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010236:	f7ff fc77 	bl	800fb28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801023a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801023c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801023e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010242:	429a      	cmp	r2, r3
 8010244:	d302      	bcc.n	801024c <xQueueGenericSend+0xdc>
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	2b02      	cmp	r3, #2
 801024a:	d129      	bne.n	80102a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801024c:	683a      	ldr	r2, [r7, #0]
 801024e:	68b9      	ldr	r1, [r7, #8]
 8010250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010252:	f000 fcac 	bl	8010bae <prvCopyDataToQueue>
 8010256:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801025a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801025c:	2b00      	cmp	r3, #0
 801025e:	d010      	beq.n	8010282 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010262:	3324      	adds	r3, #36	; 0x24
 8010264:	4618      	mov	r0, r3
 8010266:	f001 fa47 	bl	80116f8 <xTaskRemoveFromEventList>
 801026a:	4603      	mov	r3, r0
 801026c:	2b00      	cmp	r3, #0
 801026e:	d013      	beq.n	8010298 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010270:	4b3f      	ldr	r3, [pc, #252]	; (8010370 <xQueueGenericSend+0x200>)
 8010272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010276:	601a      	str	r2, [r3, #0]
 8010278:	f3bf 8f4f 	dsb	sy
 801027c:	f3bf 8f6f 	isb	sy
 8010280:	e00a      	b.n	8010298 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010284:	2b00      	cmp	r3, #0
 8010286:	d007      	beq.n	8010298 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010288:	4b39      	ldr	r3, [pc, #228]	; (8010370 <xQueueGenericSend+0x200>)
 801028a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801028e:	601a      	str	r2, [r3, #0]
 8010290:	f3bf 8f4f 	dsb	sy
 8010294:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010298:	f7ff fc78 	bl	800fb8c <vPortExitCritical>
				return pdPASS;
 801029c:	2301      	movs	r3, #1
 801029e:	e063      	b.n	8010368 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d103      	bne.n	80102ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80102a6:	f7ff fc71 	bl	800fb8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80102aa:	2300      	movs	r3, #0
 80102ac:	e05c      	b.n	8010368 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80102ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d106      	bne.n	80102c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80102b4:	f107 0314 	add.w	r3, r7, #20
 80102b8:	4618      	mov	r0, r3
 80102ba:	f001 fa81 	bl	80117c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80102be:	2301      	movs	r3, #1
 80102c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80102c2:	f7ff fc63 	bl	800fb8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80102c6:	f000 ffe7 	bl	8011298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80102ca:	f7ff fc2d 	bl	800fb28 <vPortEnterCritical>
 80102ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80102d4:	b25b      	sxtb	r3, r3
 80102d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102da:	d103      	bne.n	80102e4 <xQueueGenericSend+0x174>
 80102dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102de:	2200      	movs	r2, #0
 80102e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80102e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80102ea:	b25b      	sxtb	r3, r3
 80102ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102f0:	d103      	bne.n	80102fa <xQueueGenericSend+0x18a>
 80102f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f4:	2200      	movs	r2, #0
 80102f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80102fa:	f7ff fc47 	bl	800fb8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80102fe:	1d3a      	adds	r2, r7, #4
 8010300:	f107 0314 	add.w	r3, r7, #20
 8010304:	4611      	mov	r1, r2
 8010306:	4618      	mov	r0, r3
 8010308:	f001 fa70 	bl	80117ec <xTaskCheckForTimeOut>
 801030c:	4603      	mov	r3, r0
 801030e:	2b00      	cmp	r3, #0
 8010310:	d124      	bne.n	801035c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010312:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010314:	f000 fd43 	bl	8010d9e <prvIsQueueFull>
 8010318:	4603      	mov	r3, r0
 801031a:	2b00      	cmp	r3, #0
 801031c:	d018      	beq.n	8010350 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801031e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010320:	3310      	adds	r3, #16
 8010322:	687a      	ldr	r2, [r7, #4]
 8010324:	4611      	mov	r1, r2
 8010326:	4618      	mov	r0, r3
 8010328:	f001 f9c0 	bl	80116ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801032c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801032e:	f000 fcce 	bl	8010cce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010332:	f000 ffbf 	bl	80112b4 <xTaskResumeAll>
 8010336:	4603      	mov	r3, r0
 8010338:	2b00      	cmp	r3, #0
 801033a:	f47f af7c 	bne.w	8010236 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801033e:	4b0c      	ldr	r3, [pc, #48]	; (8010370 <xQueueGenericSend+0x200>)
 8010340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010344:	601a      	str	r2, [r3, #0]
 8010346:	f3bf 8f4f 	dsb	sy
 801034a:	f3bf 8f6f 	isb	sy
 801034e:	e772      	b.n	8010236 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010352:	f000 fcbc 	bl	8010cce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010356:	f000 ffad 	bl	80112b4 <xTaskResumeAll>
 801035a:	e76c      	b.n	8010236 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801035c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801035e:	f000 fcb6 	bl	8010cce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010362:	f000 ffa7 	bl	80112b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010366:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010368:	4618      	mov	r0, r3
 801036a:	3738      	adds	r7, #56	; 0x38
 801036c:	46bd      	mov	sp, r7
 801036e:	bd80      	pop	{r7, pc}
 8010370:	e000ed04 	.word	0xe000ed04

08010374 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b08e      	sub	sp, #56	; 0x38
 8010378:	af00      	add	r7, sp, #0
 801037a:	60f8      	str	r0, [r7, #12]
 801037c:	60b9      	str	r1, [r7, #8]
 801037e:	607a      	str	r2, [r7, #4]
 8010380:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010388:	2b00      	cmp	r3, #0
 801038a:	d10b      	bne.n	80103a4 <xQueueGenericSendFromISR+0x30>
 801038c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010390:	b672      	cpsid	i
 8010392:	f383 8811 	msr	BASEPRI, r3
 8010396:	f3bf 8f6f 	isb	sy
 801039a:	f3bf 8f4f 	dsb	sy
 801039e:	b662      	cpsie	i
 80103a0:	627b      	str	r3, [r7, #36]	; 0x24
 80103a2:	e7fe      	b.n	80103a2 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80103a4:	68bb      	ldr	r3, [r7, #8]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d103      	bne.n	80103b2 <xQueueGenericSendFromISR+0x3e>
 80103aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d101      	bne.n	80103b6 <xQueueGenericSendFromISR+0x42>
 80103b2:	2301      	movs	r3, #1
 80103b4:	e000      	b.n	80103b8 <xQueueGenericSendFromISR+0x44>
 80103b6:	2300      	movs	r3, #0
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d10b      	bne.n	80103d4 <xQueueGenericSendFromISR+0x60>
 80103bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103c0:	b672      	cpsid	i
 80103c2:	f383 8811 	msr	BASEPRI, r3
 80103c6:	f3bf 8f6f 	isb	sy
 80103ca:	f3bf 8f4f 	dsb	sy
 80103ce:	b662      	cpsie	i
 80103d0:	623b      	str	r3, [r7, #32]
 80103d2:	e7fe      	b.n	80103d2 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80103d4:	683b      	ldr	r3, [r7, #0]
 80103d6:	2b02      	cmp	r3, #2
 80103d8:	d103      	bne.n	80103e2 <xQueueGenericSendFromISR+0x6e>
 80103da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103de:	2b01      	cmp	r3, #1
 80103e0:	d101      	bne.n	80103e6 <xQueueGenericSendFromISR+0x72>
 80103e2:	2301      	movs	r3, #1
 80103e4:	e000      	b.n	80103e8 <xQueueGenericSendFromISR+0x74>
 80103e6:	2300      	movs	r3, #0
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d10b      	bne.n	8010404 <xQueueGenericSendFromISR+0x90>
 80103ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103f0:	b672      	cpsid	i
 80103f2:	f383 8811 	msr	BASEPRI, r3
 80103f6:	f3bf 8f6f 	isb	sy
 80103fa:	f3bf 8f4f 	dsb	sy
 80103fe:	b662      	cpsie	i
 8010400:	61fb      	str	r3, [r7, #28]
 8010402:	e7fe      	b.n	8010402 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010404:	f7ff fc70 	bl	800fce8 <vPortValidateInterruptPriority>
	__asm volatile
 8010408:	f3ef 8211 	mrs	r2, BASEPRI
 801040c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010410:	b672      	cpsid	i
 8010412:	f383 8811 	msr	BASEPRI, r3
 8010416:	f3bf 8f6f 	isb	sy
 801041a:	f3bf 8f4f 	dsb	sy
 801041e:	b662      	cpsie	i
 8010420:	61ba      	str	r2, [r7, #24]
 8010422:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010424:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010426:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801042a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801042c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801042e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010430:	429a      	cmp	r2, r3
 8010432:	d302      	bcc.n	801043a <xQueueGenericSendFromISR+0xc6>
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	2b02      	cmp	r3, #2
 8010438:	d12c      	bne.n	8010494 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801043a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801043c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010440:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010444:	683a      	ldr	r2, [r7, #0]
 8010446:	68b9      	ldr	r1, [r7, #8]
 8010448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801044a:	f000 fbb0 	bl	8010bae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801044e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010456:	d112      	bne.n	801047e <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801045a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801045c:	2b00      	cmp	r3, #0
 801045e:	d016      	beq.n	801048e <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010462:	3324      	adds	r3, #36	; 0x24
 8010464:	4618      	mov	r0, r3
 8010466:	f001 f947 	bl	80116f8 <xTaskRemoveFromEventList>
 801046a:	4603      	mov	r3, r0
 801046c:	2b00      	cmp	r3, #0
 801046e:	d00e      	beq.n	801048e <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d00b      	beq.n	801048e <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2201      	movs	r2, #1
 801047a:	601a      	str	r2, [r3, #0]
 801047c:	e007      	b.n	801048e <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801047e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010482:	3301      	adds	r3, #1
 8010484:	b2db      	uxtb	r3, r3
 8010486:	b25a      	sxtb	r2, r3
 8010488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801048a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801048e:	2301      	movs	r3, #1
 8010490:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010492:	e001      	b.n	8010498 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010494:	2300      	movs	r3, #0
 8010496:	637b      	str	r3, [r7, #52]	; 0x34
 8010498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801049a:	613b      	str	r3, [r7, #16]
	__asm volatile
 801049c:	693b      	ldr	r3, [r7, #16]
 801049e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80104a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3738      	adds	r7, #56	; 0x38
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b08e      	sub	sp, #56	; 0x38
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
 80104b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80104ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d10b      	bne.n	80104d8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80104c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c4:	b672      	cpsid	i
 80104c6:	f383 8811 	msr	BASEPRI, r3
 80104ca:	f3bf 8f6f 	isb	sy
 80104ce:	f3bf 8f4f 	dsb	sy
 80104d2:	b662      	cpsie	i
 80104d4:	623b      	str	r3, [r7, #32]
 80104d6:	e7fe      	b.n	80104d6 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80104d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d00b      	beq.n	80104f8 <xQueueGiveFromISR+0x4c>
 80104e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e4:	b672      	cpsid	i
 80104e6:	f383 8811 	msr	BASEPRI, r3
 80104ea:	f3bf 8f6f 	isb	sy
 80104ee:	f3bf 8f4f 	dsb	sy
 80104f2:	b662      	cpsie	i
 80104f4:	61fb      	str	r3, [r7, #28]
 80104f6:	e7fe      	b.n	80104f6 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80104f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d103      	bne.n	8010508 <xQueueGiveFromISR+0x5c>
 8010500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010502:	689b      	ldr	r3, [r3, #8]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d101      	bne.n	801050c <xQueueGiveFromISR+0x60>
 8010508:	2301      	movs	r3, #1
 801050a:	e000      	b.n	801050e <xQueueGiveFromISR+0x62>
 801050c:	2300      	movs	r3, #0
 801050e:	2b00      	cmp	r3, #0
 8010510:	d10b      	bne.n	801052a <xQueueGiveFromISR+0x7e>
 8010512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010516:	b672      	cpsid	i
 8010518:	f383 8811 	msr	BASEPRI, r3
 801051c:	f3bf 8f6f 	isb	sy
 8010520:	f3bf 8f4f 	dsb	sy
 8010524:	b662      	cpsie	i
 8010526:	61bb      	str	r3, [r7, #24]
 8010528:	e7fe      	b.n	8010528 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801052a:	f7ff fbdd 	bl	800fce8 <vPortValidateInterruptPriority>
	__asm volatile
 801052e:	f3ef 8211 	mrs	r2, BASEPRI
 8010532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010536:	b672      	cpsid	i
 8010538:	f383 8811 	msr	BASEPRI, r3
 801053c:	f3bf 8f6f 	isb	sy
 8010540:	f3bf 8f4f 	dsb	sy
 8010544:	b662      	cpsie	i
 8010546:	617a      	str	r2, [r7, #20]
 8010548:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801054a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801054c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801054e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010552:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801055a:	429a      	cmp	r2, r3
 801055c:	d22b      	bcs.n	80105b6 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801055e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010560:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801056a:	1c5a      	adds	r2, r3, #1
 801056c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801056e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010570:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010578:	d112      	bne.n	80105a0 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801057a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801057c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801057e:	2b00      	cmp	r3, #0
 8010580:	d016      	beq.n	80105b0 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010584:	3324      	adds	r3, #36	; 0x24
 8010586:	4618      	mov	r0, r3
 8010588:	f001 f8b6 	bl	80116f8 <xTaskRemoveFromEventList>
 801058c:	4603      	mov	r3, r0
 801058e:	2b00      	cmp	r3, #0
 8010590:	d00e      	beq.n	80105b0 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d00b      	beq.n	80105b0 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	2201      	movs	r2, #1
 801059c:	601a      	str	r2, [r3, #0]
 801059e:	e007      	b.n	80105b0 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80105a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105a4:	3301      	adds	r3, #1
 80105a6:	b2db      	uxtb	r3, r3
 80105a8:	b25a      	sxtb	r2, r3
 80105aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80105b0:	2301      	movs	r3, #1
 80105b2:	637b      	str	r3, [r7, #52]	; 0x34
 80105b4:	e001      	b.n	80105ba <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80105b6:	2300      	movs	r3, #0
 80105b8:	637b      	str	r3, [r7, #52]	; 0x34
 80105ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105bc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80105c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80105c6:	4618      	mov	r0, r3
 80105c8:	3738      	adds	r7, #56	; 0x38
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bd80      	pop	{r7, pc}
	...

080105d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b08c      	sub	sp, #48	; 0x30
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	60f8      	str	r0, [r7, #12]
 80105d8:	60b9      	str	r1, [r7, #8]
 80105da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80105dc:	2300      	movs	r3, #0
 80105de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80105e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d10b      	bne.n	8010602 <xQueueReceive+0x32>
	__asm volatile
 80105ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ee:	b672      	cpsid	i
 80105f0:	f383 8811 	msr	BASEPRI, r3
 80105f4:	f3bf 8f6f 	isb	sy
 80105f8:	f3bf 8f4f 	dsb	sy
 80105fc:	b662      	cpsie	i
 80105fe:	623b      	str	r3, [r7, #32]
 8010600:	e7fe      	b.n	8010600 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010602:	68bb      	ldr	r3, [r7, #8]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d103      	bne.n	8010610 <xQueueReceive+0x40>
 8010608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801060c:	2b00      	cmp	r3, #0
 801060e:	d101      	bne.n	8010614 <xQueueReceive+0x44>
 8010610:	2301      	movs	r3, #1
 8010612:	e000      	b.n	8010616 <xQueueReceive+0x46>
 8010614:	2300      	movs	r3, #0
 8010616:	2b00      	cmp	r3, #0
 8010618:	d10b      	bne.n	8010632 <xQueueReceive+0x62>
 801061a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801061e:	b672      	cpsid	i
 8010620:	f383 8811 	msr	BASEPRI, r3
 8010624:	f3bf 8f6f 	isb	sy
 8010628:	f3bf 8f4f 	dsb	sy
 801062c:	b662      	cpsie	i
 801062e:	61fb      	str	r3, [r7, #28]
 8010630:	e7fe      	b.n	8010630 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010632:	f001 fa21 	bl	8011a78 <xTaskGetSchedulerState>
 8010636:	4603      	mov	r3, r0
 8010638:	2b00      	cmp	r3, #0
 801063a:	d102      	bne.n	8010642 <xQueueReceive+0x72>
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d101      	bne.n	8010646 <xQueueReceive+0x76>
 8010642:	2301      	movs	r3, #1
 8010644:	e000      	b.n	8010648 <xQueueReceive+0x78>
 8010646:	2300      	movs	r3, #0
 8010648:	2b00      	cmp	r3, #0
 801064a:	d10b      	bne.n	8010664 <xQueueReceive+0x94>
 801064c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010650:	b672      	cpsid	i
 8010652:	f383 8811 	msr	BASEPRI, r3
 8010656:	f3bf 8f6f 	isb	sy
 801065a:	f3bf 8f4f 	dsb	sy
 801065e:	b662      	cpsie	i
 8010660:	61bb      	str	r3, [r7, #24]
 8010662:	e7fe      	b.n	8010662 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010664:	f7ff fa60 	bl	800fb28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801066a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801066c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801066e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010670:	2b00      	cmp	r3, #0
 8010672:	d01f      	beq.n	80106b4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010674:	68b9      	ldr	r1, [r7, #8]
 8010676:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010678:	f000 fb03 	bl	8010c82 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801067c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801067e:	1e5a      	subs	r2, r3, #1
 8010680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010682:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010686:	691b      	ldr	r3, [r3, #16]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d00f      	beq.n	80106ac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801068c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801068e:	3310      	adds	r3, #16
 8010690:	4618      	mov	r0, r3
 8010692:	f001 f831 	bl	80116f8 <xTaskRemoveFromEventList>
 8010696:	4603      	mov	r3, r0
 8010698:	2b00      	cmp	r3, #0
 801069a:	d007      	beq.n	80106ac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801069c:	4b3c      	ldr	r3, [pc, #240]	; (8010790 <xQueueReceive+0x1c0>)
 801069e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106a2:	601a      	str	r2, [r3, #0]
 80106a4:	f3bf 8f4f 	dsb	sy
 80106a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80106ac:	f7ff fa6e 	bl	800fb8c <vPortExitCritical>
				return pdPASS;
 80106b0:	2301      	movs	r3, #1
 80106b2:	e069      	b.n	8010788 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d103      	bne.n	80106c2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80106ba:	f7ff fa67 	bl	800fb8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80106be:	2300      	movs	r3, #0
 80106c0:	e062      	b.n	8010788 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80106c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d106      	bne.n	80106d6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80106c8:	f107 0310 	add.w	r3, r7, #16
 80106cc:	4618      	mov	r0, r3
 80106ce:	f001 f877 	bl	80117c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80106d2:	2301      	movs	r3, #1
 80106d4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80106d6:	f7ff fa59 	bl	800fb8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80106da:	f000 fddd 	bl	8011298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80106de:	f7ff fa23 	bl	800fb28 <vPortEnterCritical>
 80106e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80106e8:	b25b      	sxtb	r3, r3
 80106ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106ee:	d103      	bne.n	80106f8 <xQueueReceive+0x128>
 80106f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106f2:	2200      	movs	r2, #0
 80106f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80106f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80106fe:	b25b      	sxtb	r3, r3
 8010700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010704:	d103      	bne.n	801070e <xQueueReceive+0x13e>
 8010706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010708:	2200      	movs	r2, #0
 801070a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801070e:	f7ff fa3d 	bl	800fb8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010712:	1d3a      	adds	r2, r7, #4
 8010714:	f107 0310 	add.w	r3, r7, #16
 8010718:	4611      	mov	r1, r2
 801071a:	4618      	mov	r0, r3
 801071c:	f001 f866 	bl	80117ec <xTaskCheckForTimeOut>
 8010720:	4603      	mov	r3, r0
 8010722:	2b00      	cmp	r3, #0
 8010724:	d123      	bne.n	801076e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010728:	f000 fb23 	bl	8010d72 <prvIsQueueEmpty>
 801072c:	4603      	mov	r3, r0
 801072e:	2b00      	cmp	r3, #0
 8010730:	d017      	beq.n	8010762 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010734:	3324      	adds	r3, #36	; 0x24
 8010736:	687a      	ldr	r2, [r7, #4]
 8010738:	4611      	mov	r1, r2
 801073a:	4618      	mov	r0, r3
 801073c:	f000 ffb6 	bl	80116ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010742:	f000 fac4 	bl	8010cce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010746:	f000 fdb5 	bl	80112b4 <xTaskResumeAll>
 801074a:	4603      	mov	r3, r0
 801074c:	2b00      	cmp	r3, #0
 801074e:	d189      	bne.n	8010664 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8010750:	4b0f      	ldr	r3, [pc, #60]	; (8010790 <xQueueReceive+0x1c0>)
 8010752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010756:	601a      	str	r2, [r3, #0]
 8010758:	f3bf 8f4f 	dsb	sy
 801075c:	f3bf 8f6f 	isb	sy
 8010760:	e780      	b.n	8010664 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010764:	f000 fab3 	bl	8010cce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010768:	f000 fda4 	bl	80112b4 <xTaskResumeAll>
 801076c:	e77a      	b.n	8010664 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801076e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010770:	f000 faad 	bl	8010cce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010774:	f000 fd9e 	bl	80112b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801077a:	f000 fafa 	bl	8010d72 <prvIsQueueEmpty>
 801077e:	4603      	mov	r3, r0
 8010780:	2b00      	cmp	r3, #0
 8010782:	f43f af6f 	beq.w	8010664 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010786:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010788:	4618      	mov	r0, r3
 801078a:	3730      	adds	r7, #48	; 0x30
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}
 8010790:	e000ed04 	.word	0xe000ed04

08010794 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b08e      	sub	sp, #56	; 0x38
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
 801079c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801079e:	2300      	movs	r3, #0
 80107a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80107a6:	2300      	movs	r3, #0
 80107a8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80107aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d10b      	bne.n	80107c8 <xQueueSemaphoreTake+0x34>
 80107b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107b4:	b672      	cpsid	i
 80107b6:	f383 8811 	msr	BASEPRI, r3
 80107ba:	f3bf 8f6f 	isb	sy
 80107be:	f3bf 8f4f 	dsb	sy
 80107c2:	b662      	cpsie	i
 80107c4:	623b      	str	r3, [r7, #32]
 80107c6:	e7fe      	b.n	80107c6 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80107c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d00b      	beq.n	80107e8 <xQueueSemaphoreTake+0x54>
 80107d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107d4:	b672      	cpsid	i
 80107d6:	f383 8811 	msr	BASEPRI, r3
 80107da:	f3bf 8f6f 	isb	sy
 80107de:	f3bf 8f4f 	dsb	sy
 80107e2:	b662      	cpsie	i
 80107e4:	61fb      	str	r3, [r7, #28]
 80107e6:	e7fe      	b.n	80107e6 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80107e8:	f001 f946 	bl	8011a78 <xTaskGetSchedulerState>
 80107ec:	4603      	mov	r3, r0
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d102      	bne.n	80107f8 <xQueueSemaphoreTake+0x64>
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d101      	bne.n	80107fc <xQueueSemaphoreTake+0x68>
 80107f8:	2301      	movs	r3, #1
 80107fa:	e000      	b.n	80107fe <xQueueSemaphoreTake+0x6a>
 80107fc:	2300      	movs	r3, #0
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d10b      	bne.n	801081a <xQueueSemaphoreTake+0x86>
 8010802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010806:	b672      	cpsid	i
 8010808:	f383 8811 	msr	BASEPRI, r3
 801080c:	f3bf 8f6f 	isb	sy
 8010810:	f3bf 8f4f 	dsb	sy
 8010814:	b662      	cpsie	i
 8010816:	61bb      	str	r3, [r7, #24]
 8010818:	e7fe      	b.n	8010818 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801081a:	f7ff f985 	bl	800fb28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801081e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010822:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010826:	2b00      	cmp	r3, #0
 8010828:	d024      	beq.n	8010874 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801082a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801082c:	1e5a      	subs	r2, r3, #1
 801082e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010830:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d104      	bne.n	8010844 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801083a:	f001 fadf 	bl	8011dfc <pvTaskIncrementMutexHeldCount>
 801083e:	4602      	mov	r2, r0
 8010840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010842:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010846:	691b      	ldr	r3, [r3, #16]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d00f      	beq.n	801086c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801084c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801084e:	3310      	adds	r3, #16
 8010850:	4618      	mov	r0, r3
 8010852:	f000 ff51 	bl	80116f8 <xTaskRemoveFromEventList>
 8010856:	4603      	mov	r3, r0
 8010858:	2b00      	cmp	r3, #0
 801085a:	d007      	beq.n	801086c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801085c:	4b54      	ldr	r3, [pc, #336]	; (80109b0 <xQueueSemaphoreTake+0x21c>)
 801085e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010862:	601a      	str	r2, [r3, #0]
 8010864:	f3bf 8f4f 	dsb	sy
 8010868:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801086c:	f7ff f98e 	bl	800fb8c <vPortExitCritical>
				return pdPASS;
 8010870:	2301      	movs	r3, #1
 8010872:	e098      	b.n	80109a6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d112      	bne.n	80108a0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801087a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801087c:	2b00      	cmp	r3, #0
 801087e:	d00b      	beq.n	8010898 <xQueueSemaphoreTake+0x104>
 8010880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010884:	b672      	cpsid	i
 8010886:	f383 8811 	msr	BASEPRI, r3
 801088a:	f3bf 8f6f 	isb	sy
 801088e:	f3bf 8f4f 	dsb	sy
 8010892:	b662      	cpsie	i
 8010894:	617b      	str	r3, [r7, #20]
 8010896:	e7fe      	b.n	8010896 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010898:	f7ff f978 	bl	800fb8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801089c:	2300      	movs	r3, #0
 801089e:	e082      	b.n	80109a6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80108a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d106      	bne.n	80108b4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80108a6:	f107 030c 	add.w	r3, r7, #12
 80108aa:	4618      	mov	r0, r3
 80108ac:	f000 ff88 	bl	80117c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80108b0:	2301      	movs	r3, #1
 80108b2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80108b4:	f7ff f96a 	bl	800fb8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80108b8:	f000 fcee 	bl	8011298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80108bc:	f7ff f934 	bl	800fb28 <vPortEnterCritical>
 80108c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80108c6:	b25b      	sxtb	r3, r3
 80108c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108cc:	d103      	bne.n	80108d6 <xQueueSemaphoreTake+0x142>
 80108ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108d0:	2200      	movs	r2, #0
 80108d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80108d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80108dc:	b25b      	sxtb	r3, r3
 80108de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108e2:	d103      	bne.n	80108ec <xQueueSemaphoreTake+0x158>
 80108e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108e6:	2200      	movs	r2, #0
 80108e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80108ec:	f7ff f94e 	bl	800fb8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80108f0:	463a      	mov	r2, r7
 80108f2:	f107 030c 	add.w	r3, r7, #12
 80108f6:	4611      	mov	r1, r2
 80108f8:	4618      	mov	r0, r3
 80108fa:	f000 ff77 	bl	80117ec <xTaskCheckForTimeOut>
 80108fe:	4603      	mov	r3, r0
 8010900:	2b00      	cmp	r3, #0
 8010902:	d132      	bne.n	801096a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010904:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010906:	f000 fa34 	bl	8010d72 <prvIsQueueEmpty>
 801090a:	4603      	mov	r3, r0
 801090c:	2b00      	cmp	r3, #0
 801090e:	d026      	beq.n	801095e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d109      	bne.n	801092c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8010918:	f7ff f906 	bl	800fb28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801091c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801091e:	689b      	ldr	r3, [r3, #8]
 8010920:	4618      	mov	r0, r3
 8010922:	f001 f8c7 	bl	8011ab4 <xTaskPriorityInherit>
 8010926:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010928:	f7ff f930 	bl	800fb8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801092c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801092e:	3324      	adds	r3, #36	; 0x24
 8010930:	683a      	ldr	r2, [r7, #0]
 8010932:	4611      	mov	r1, r2
 8010934:	4618      	mov	r0, r3
 8010936:	f000 feb9 	bl	80116ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801093a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801093c:	f000 f9c7 	bl	8010cce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010940:	f000 fcb8 	bl	80112b4 <xTaskResumeAll>
 8010944:	4603      	mov	r3, r0
 8010946:	2b00      	cmp	r3, #0
 8010948:	f47f af67 	bne.w	801081a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 801094c:	4b18      	ldr	r3, [pc, #96]	; (80109b0 <xQueueSemaphoreTake+0x21c>)
 801094e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010952:	601a      	str	r2, [r3, #0]
 8010954:	f3bf 8f4f 	dsb	sy
 8010958:	f3bf 8f6f 	isb	sy
 801095c:	e75d      	b.n	801081a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801095e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010960:	f000 f9b5 	bl	8010cce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010964:	f000 fca6 	bl	80112b4 <xTaskResumeAll>
 8010968:	e757      	b.n	801081a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801096a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801096c:	f000 f9af 	bl	8010cce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010970:	f000 fca0 	bl	80112b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010974:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010976:	f000 f9fc 	bl	8010d72 <prvIsQueueEmpty>
 801097a:	4603      	mov	r3, r0
 801097c:	2b00      	cmp	r3, #0
 801097e:	f43f af4c 	beq.w	801081a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010984:	2b00      	cmp	r3, #0
 8010986:	d00d      	beq.n	80109a4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8010988:	f7ff f8ce 	bl	800fb28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801098c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801098e:	f000 f8f6 	bl	8010b7e <prvGetDisinheritPriorityAfterTimeout>
 8010992:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010996:	689b      	ldr	r3, [r3, #8]
 8010998:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801099a:	4618      	mov	r0, r3
 801099c:	f001 f992 	bl	8011cc4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80109a0:	f7ff f8f4 	bl	800fb8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80109a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	3738      	adds	r7, #56	; 0x38
 80109aa:	46bd      	mov	sp, r7
 80109ac:	bd80      	pop	{r7, pc}
 80109ae:	bf00      	nop
 80109b0:	e000ed04 	.word	0xe000ed04

080109b4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b08e      	sub	sp, #56	; 0x38
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	60f8      	str	r0, [r7, #12]
 80109bc:	60b9      	str	r1, [r7, #8]
 80109be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80109c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d10b      	bne.n	80109e2 <xQueueReceiveFromISR+0x2e>
 80109ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ce:	b672      	cpsid	i
 80109d0:	f383 8811 	msr	BASEPRI, r3
 80109d4:	f3bf 8f6f 	isb	sy
 80109d8:	f3bf 8f4f 	dsb	sy
 80109dc:	b662      	cpsie	i
 80109de:	623b      	str	r3, [r7, #32]
 80109e0:	e7fe      	b.n	80109e0 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d103      	bne.n	80109f0 <xQueueReceiveFromISR+0x3c>
 80109e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d101      	bne.n	80109f4 <xQueueReceiveFromISR+0x40>
 80109f0:	2301      	movs	r3, #1
 80109f2:	e000      	b.n	80109f6 <xQueueReceiveFromISR+0x42>
 80109f4:	2300      	movs	r3, #0
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d10b      	bne.n	8010a12 <xQueueReceiveFromISR+0x5e>
 80109fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109fe:	b672      	cpsid	i
 8010a00:	f383 8811 	msr	BASEPRI, r3
 8010a04:	f3bf 8f6f 	isb	sy
 8010a08:	f3bf 8f4f 	dsb	sy
 8010a0c:	b662      	cpsie	i
 8010a0e:	61fb      	str	r3, [r7, #28]
 8010a10:	e7fe      	b.n	8010a10 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010a12:	f7ff f969 	bl	800fce8 <vPortValidateInterruptPriority>
	__asm volatile
 8010a16:	f3ef 8211 	mrs	r2, BASEPRI
 8010a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a1e:	b672      	cpsid	i
 8010a20:	f383 8811 	msr	BASEPRI, r3
 8010a24:	f3bf 8f6f 	isb	sy
 8010a28:	f3bf 8f4f 	dsb	sy
 8010a2c:	b662      	cpsie	i
 8010a2e:	61ba      	str	r2, [r7, #24]
 8010a30:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010a32:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010a34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a3a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d02f      	beq.n	8010aa2 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010a4c:	68b9      	ldr	r1, [r7, #8]
 8010a4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a50:	f000 f917 	bl	8010c82 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a56:	1e5a      	subs	r2, r3, #1
 8010a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010a5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a64:	d112      	bne.n	8010a8c <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a68:	691b      	ldr	r3, [r3, #16]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d016      	beq.n	8010a9c <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a70:	3310      	adds	r3, #16
 8010a72:	4618      	mov	r0, r3
 8010a74:	f000 fe40 	bl	80116f8 <xTaskRemoveFromEventList>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d00e      	beq.n	8010a9c <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d00b      	beq.n	8010a9c <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2201      	movs	r2, #1
 8010a88:	601a      	str	r2, [r3, #0]
 8010a8a:	e007      	b.n	8010a9c <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a90:	3301      	adds	r3, #1
 8010a92:	b2db      	uxtb	r3, r3
 8010a94:	b25a      	sxtb	r2, r3
 8010a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010a9c:	2301      	movs	r3, #1
 8010a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8010aa0:	e001      	b.n	8010aa6 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8010aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aa8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010aaa:	693b      	ldr	r3, [r7, #16]
 8010aac:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	3738      	adds	r7, #56	; 0x38
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}

08010aba <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8010aba:	b580      	push	{r7, lr}
 8010abc:	b084      	sub	sp, #16
 8010abe:	af00      	add	r7, sp, #0
 8010ac0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d10b      	bne.n	8010ae0 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8010ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010acc:	b672      	cpsid	i
 8010ace:	f383 8811 	msr	BASEPRI, r3
 8010ad2:	f3bf 8f6f 	isb	sy
 8010ad6:	f3bf 8f4f 	dsb	sy
 8010ada:	b662      	cpsie	i
 8010adc:	60bb      	str	r3, [r7, #8]
 8010ade:	e7fe      	b.n	8010ade <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 8010ae0:	f7ff f822 	bl	800fb28 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ae8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8010aea:	f7ff f84f 	bl	800fb8c <vPortExitCritical>

	return uxReturn;
 8010aee:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010af0:	4618      	mov	r0, r3
 8010af2:	3710      	adds	r7, #16
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd80      	pop	{r7, pc}

08010af8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8010af8:	b480      	push	{r7}
 8010afa:	b087      	sub	sp, #28
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8010b04:	697b      	ldr	r3, [r7, #20]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d10b      	bne.n	8010b22 <uxQueueMessagesWaitingFromISR+0x2a>
 8010b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b0e:	b672      	cpsid	i
 8010b10:	f383 8811 	msr	BASEPRI, r3
 8010b14:	f3bf 8f6f 	isb	sy
 8010b18:	f3bf 8f4f 	dsb	sy
 8010b1c:	b662      	cpsie	i
 8010b1e:	60fb      	str	r3, [r7, #12]
 8010b20:	e7fe      	b.n	8010b20 <uxQueueMessagesWaitingFromISR+0x28>
	uxReturn = pxQueue->uxMessagesWaiting;
 8010b22:	697b      	ldr	r3, [r7, #20]
 8010b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b26:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8010b28:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	371c      	adds	r7, #28
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b34:	4770      	bx	lr

08010b36 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010b36:	b580      	push	{r7, lr}
 8010b38:	b084      	sub	sp, #16
 8010b3a:	af00      	add	r7, sp, #0
 8010b3c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d10b      	bne.n	8010b60 <vQueueDelete+0x2a>
 8010b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b4c:	b672      	cpsid	i
 8010b4e:	f383 8811 	msr	BASEPRI, r3
 8010b52:	f3bf 8f6f 	isb	sy
 8010b56:	f3bf 8f4f 	dsb	sy
 8010b5a:	b662      	cpsie	i
 8010b5c:	60bb      	str	r3, [r7, #8]
 8010b5e:	e7fe      	b.n	8010b5e <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010b60:	68f8      	ldr	r0, [r7, #12]
 8010b62:	f000 f935 	bl	8010dd0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d102      	bne.n	8010b76 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8010b70:	68f8      	ldr	r0, [r7, #12]
 8010b72:	f7fe fd03 	bl	800f57c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010b76:	bf00      	nop
 8010b78:	3710      	adds	r7, #16
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}

08010b7e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010b7e:	b480      	push	{r7}
 8010b80:	b085      	sub	sp, #20
 8010b82:	af00      	add	r7, sp, #0
 8010b84:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d006      	beq.n	8010b9c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	f1c3 0307 	rsb	r3, r3, #7
 8010b98:	60fb      	str	r3, [r7, #12]
 8010b9a:	e001      	b.n	8010ba0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010ba0:	68fb      	ldr	r3, [r7, #12]
	}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3714      	adds	r7, #20
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bac:	4770      	bx	lr

08010bae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010bae:	b580      	push	{r7, lr}
 8010bb0:	b086      	sub	sp, #24
 8010bb2:	af00      	add	r7, sp, #0
 8010bb4:	60f8      	str	r0, [r7, #12]
 8010bb6:	60b9      	str	r1, [r7, #8]
 8010bb8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010bba:	2300      	movs	r3, #0
 8010bbc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bc2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d10d      	bne.n	8010be8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d14d      	bne.n	8010c70 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	689b      	ldr	r3, [r3, #8]
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f000 ffeb 	bl	8011bb4 <xTaskPriorityDisinherit>
 8010bde:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	2200      	movs	r2, #0
 8010be4:	609a      	str	r2, [r3, #8]
 8010be6:	e043      	b.n	8010c70 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d119      	bne.n	8010c22 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	6858      	ldr	r0, [r3, #4]
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bf6:	461a      	mov	r2, r3
 8010bf8:	68b9      	ldr	r1, [r7, #8]
 8010bfa:	f013 f93a 	bl	8023e72 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	685a      	ldr	r2, [r3, #4]
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c06:	441a      	add	r2, r3
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	685a      	ldr	r2, [r3, #4]
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	689b      	ldr	r3, [r3, #8]
 8010c14:	429a      	cmp	r2, r3
 8010c16:	d32b      	bcc.n	8010c70 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	681a      	ldr	r2, [r3, #0]
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	605a      	str	r2, [r3, #4]
 8010c20:	e026      	b.n	8010c70 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	68d8      	ldr	r0, [r3, #12]
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c2a:	461a      	mov	r2, r3
 8010c2c:	68b9      	ldr	r1, [r7, #8]
 8010c2e:	f013 f920 	bl	8023e72 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	68da      	ldr	r2, [r3, #12]
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c3a:	425b      	negs	r3, r3
 8010c3c:	441a      	add	r2, r3
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	68da      	ldr	r2, [r3, #12]
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	429a      	cmp	r2, r3
 8010c4c:	d207      	bcs.n	8010c5e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	689a      	ldr	r2, [r3, #8]
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c56:	425b      	negs	r3, r3
 8010c58:	441a      	add	r2, r3
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2b02      	cmp	r3, #2
 8010c62:	d105      	bne.n	8010c70 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010c64:	693b      	ldr	r3, [r7, #16]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d002      	beq.n	8010c70 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010c6a:	693b      	ldr	r3, [r7, #16]
 8010c6c:	3b01      	subs	r3, #1
 8010c6e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010c70:	693b      	ldr	r3, [r7, #16]
 8010c72:	1c5a      	adds	r2, r3, #1
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010c78:	697b      	ldr	r3, [r7, #20]
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	3718      	adds	r7, #24
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bd80      	pop	{r7, pc}

08010c82 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010c82:	b580      	push	{r7, lr}
 8010c84:	b082      	sub	sp, #8
 8010c86:	af00      	add	r7, sp, #0
 8010c88:	6078      	str	r0, [r7, #4]
 8010c8a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d018      	beq.n	8010cc6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	68da      	ldr	r2, [r3, #12]
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c9c:	441a      	add	r2, r3
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	68da      	ldr	r2, [r3, #12]
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	689b      	ldr	r3, [r3, #8]
 8010caa:	429a      	cmp	r2, r3
 8010cac:	d303      	bcc.n	8010cb6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681a      	ldr	r2, [r3, #0]
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	68d9      	ldr	r1, [r3, #12]
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	6838      	ldr	r0, [r7, #0]
 8010cc2:	f013 f8d6 	bl	8023e72 <memcpy>
	}
}
 8010cc6:	bf00      	nop
 8010cc8:	3708      	adds	r7, #8
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}

08010cce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010cce:	b580      	push	{r7, lr}
 8010cd0:	b084      	sub	sp, #16
 8010cd2:	af00      	add	r7, sp, #0
 8010cd4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010cd6:	f7fe ff27 	bl	800fb28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010ce0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010ce2:	e011      	b.n	8010d08 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d012      	beq.n	8010d12 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	3324      	adds	r3, #36	; 0x24
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f000 fd01 	bl	80116f8 <xTaskRemoveFromEventList>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d001      	beq.n	8010d00 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010cfc:	f000 fdda 	bl	80118b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010d00:	7bfb      	ldrb	r3, [r7, #15]
 8010d02:	3b01      	subs	r3, #1
 8010d04:	b2db      	uxtb	r3, r3
 8010d06:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	dce9      	bgt.n	8010ce4 <prvUnlockQueue+0x16>
 8010d10:	e000      	b.n	8010d14 <prvUnlockQueue+0x46>
					break;
 8010d12:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	22ff      	movs	r2, #255	; 0xff
 8010d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010d1c:	f7fe ff36 	bl	800fb8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010d20:	f7fe ff02 	bl	800fb28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010d2a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010d2c:	e011      	b.n	8010d52 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	691b      	ldr	r3, [r3, #16]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d012      	beq.n	8010d5c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	3310      	adds	r3, #16
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f000 fcdc 	bl	80116f8 <xTaskRemoveFromEventList>
 8010d40:	4603      	mov	r3, r0
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d001      	beq.n	8010d4a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010d46:	f000 fdb5 	bl	80118b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010d4a:	7bbb      	ldrb	r3, [r7, #14]
 8010d4c:	3b01      	subs	r3, #1
 8010d4e:	b2db      	uxtb	r3, r3
 8010d50:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010d52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	dce9      	bgt.n	8010d2e <prvUnlockQueue+0x60>
 8010d5a:	e000      	b.n	8010d5e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010d5c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	22ff      	movs	r2, #255	; 0xff
 8010d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010d66:	f7fe ff11 	bl	800fb8c <vPortExitCritical>
}
 8010d6a:	bf00      	nop
 8010d6c:	3710      	adds	r7, #16
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	bd80      	pop	{r7, pc}

08010d72 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010d72:	b580      	push	{r7, lr}
 8010d74:	b084      	sub	sp, #16
 8010d76:	af00      	add	r7, sp, #0
 8010d78:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010d7a:	f7fe fed5 	bl	800fb28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d102      	bne.n	8010d8c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010d86:	2301      	movs	r3, #1
 8010d88:	60fb      	str	r3, [r7, #12]
 8010d8a:	e001      	b.n	8010d90 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010d90:	f7fe fefc 	bl	800fb8c <vPortExitCritical>

	return xReturn;
 8010d94:	68fb      	ldr	r3, [r7, #12]
}
 8010d96:	4618      	mov	r0, r3
 8010d98:	3710      	adds	r7, #16
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}

08010d9e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010d9e:	b580      	push	{r7, lr}
 8010da0:	b084      	sub	sp, #16
 8010da2:	af00      	add	r7, sp, #0
 8010da4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010da6:	f7fe febf 	bl	800fb28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010db2:	429a      	cmp	r2, r3
 8010db4:	d102      	bne.n	8010dbc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010db6:	2301      	movs	r3, #1
 8010db8:	60fb      	str	r3, [r7, #12]
 8010dba:	e001      	b.n	8010dc0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010dc0:	f7fe fee4 	bl	800fb8c <vPortExitCritical>

	return xReturn;
 8010dc4:	68fb      	ldr	r3, [r7, #12]
}
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	3710      	adds	r7, #16
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	bd80      	pop	{r7, pc}
	...

08010dd0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010dd0:	b480      	push	{r7}
 8010dd2:	b085      	sub	sp, #20
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010dd8:	2300      	movs	r3, #0
 8010dda:	60fb      	str	r3, [r7, #12]
 8010ddc:	e016      	b.n	8010e0c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010dde:	4a10      	ldr	r2, [pc, #64]	; (8010e20 <vQueueUnregisterQueue+0x50>)
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	00db      	lsls	r3, r3, #3
 8010de4:	4413      	add	r3, r2
 8010de6:	685b      	ldr	r3, [r3, #4]
 8010de8:	687a      	ldr	r2, [r7, #4]
 8010dea:	429a      	cmp	r2, r3
 8010dec:	d10b      	bne.n	8010e06 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010dee:	4a0c      	ldr	r2, [pc, #48]	; (8010e20 <vQueueUnregisterQueue+0x50>)
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	2100      	movs	r1, #0
 8010df4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010df8:	4a09      	ldr	r2, [pc, #36]	; (8010e20 <vQueueUnregisterQueue+0x50>)
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	00db      	lsls	r3, r3, #3
 8010dfe:	4413      	add	r3, r2
 8010e00:	2200      	movs	r2, #0
 8010e02:	605a      	str	r2, [r3, #4]
				break;
 8010e04:	e005      	b.n	8010e12 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	3301      	adds	r3, #1
 8010e0a:	60fb      	str	r3, [r7, #12]
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	2b07      	cmp	r3, #7
 8010e10:	d9e5      	bls.n	8010dde <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010e12:	bf00      	nop
 8010e14:	3714      	adds	r7, #20
 8010e16:	46bd      	mov	sp, r7
 8010e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1c:	4770      	bx	lr
 8010e1e:	bf00      	nop
 8010e20:	2000df24 	.word	0x2000df24

08010e24 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b08e      	sub	sp, #56	; 0x38
 8010e28:	af04      	add	r7, sp, #16
 8010e2a:	60f8      	str	r0, [r7, #12]
 8010e2c:	60b9      	str	r1, [r7, #8]
 8010e2e:	607a      	str	r2, [r7, #4]
 8010e30:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d10b      	bne.n	8010e50 <xTaskCreateStatic+0x2c>
 8010e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e3c:	b672      	cpsid	i
 8010e3e:	f383 8811 	msr	BASEPRI, r3
 8010e42:	f3bf 8f6f 	isb	sy
 8010e46:	f3bf 8f4f 	dsb	sy
 8010e4a:	b662      	cpsie	i
 8010e4c:	623b      	str	r3, [r7, #32]
 8010e4e:	e7fe      	b.n	8010e4e <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8010e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d10b      	bne.n	8010e6e <xTaskCreateStatic+0x4a>
 8010e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e5a:	b672      	cpsid	i
 8010e5c:	f383 8811 	msr	BASEPRI, r3
 8010e60:	f3bf 8f6f 	isb	sy
 8010e64:	f3bf 8f4f 	dsb	sy
 8010e68:	b662      	cpsie	i
 8010e6a:	61fb      	str	r3, [r7, #28]
 8010e6c:	e7fe      	b.n	8010e6c <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010e6e:	2358      	movs	r3, #88	; 0x58
 8010e70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010e72:	693b      	ldr	r3, [r7, #16]
 8010e74:	2b58      	cmp	r3, #88	; 0x58
 8010e76:	d00b      	beq.n	8010e90 <xTaskCreateStatic+0x6c>
 8010e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e7c:	b672      	cpsid	i
 8010e7e:	f383 8811 	msr	BASEPRI, r3
 8010e82:	f3bf 8f6f 	isb	sy
 8010e86:	f3bf 8f4f 	dsb	sy
 8010e8a:	b662      	cpsie	i
 8010e8c:	61bb      	str	r3, [r7, #24]
 8010e8e:	e7fe      	b.n	8010e8e <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010e90:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d01e      	beq.n	8010ed6 <xTaskCreateStatic+0xb2>
 8010e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d01b      	beq.n	8010ed6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ea6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eaa:	2202      	movs	r2, #2
 8010eac:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	9303      	str	r3, [sp, #12]
 8010eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb6:	9302      	str	r3, [sp, #8]
 8010eb8:	f107 0314 	add.w	r3, r7, #20
 8010ebc:	9301      	str	r3, [sp, #4]
 8010ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec0:	9300      	str	r3, [sp, #0]
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	687a      	ldr	r2, [r7, #4]
 8010ec6:	68b9      	ldr	r1, [r7, #8]
 8010ec8:	68f8      	ldr	r0, [r7, #12]
 8010eca:	f000 f850 	bl	8010f6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010ece:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ed0:	f000 f8e0 	bl	8011094 <prvAddNewTaskToReadyList>
 8010ed4:	e001      	b.n	8010eda <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010eda:	697b      	ldr	r3, [r7, #20]
	}
 8010edc:	4618      	mov	r0, r3
 8010ede:	3728      	adds	r7, #40	; 0x28
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}

08010ee4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b08c      	sub	sp, #48	; 0x30
 8010ee8:	af04      	add	r7, sp, #16
 8010eea:	60f8      	str	r0, [r7, #12]
 8010eec:	60b9      	str	r1, [r7, #8]
 8010eee:	603b      	str	r3, [r7, #0]
 8010ef0:	4613      	mov	r3, r2
 8010ef2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010ef4:	88fb      	ldrh	r3, [r7, #6]
 8010ef6:	009b      	lsls	r3, r3, #2
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f7fe fa73 	bl	800f3e4 <pvPortMalloc>
 8010efe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010f00:	697b      	ldr	r3, [r7, #20]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d00e      	beq.n	8010f24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010f06:	2058      	movs	r0, #88	; 0x58
 8010f08:	f7fe fa6c 	bl	800f3e4 <pvPortMalloc>
 8010f0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010f0e:	69fb      	ldr	r3, [r7, #28]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d003      	beq.n	8010f1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010f14:	69fb      	ldr	r3, [r7, #28]
 8010f16:	697a      	ldr	r2, [r7, #20]
 8010f18:	631a      	str	r2, [r3, #48]	; 0x30
 8010f1a:	e005      	b.n	8010f28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010f1c:	6978      	ldr	r0, [r7, #20]
 8010f1e:	f7fe fb2d 	bl	800f57c <vPortFree>
 8010f22:	e001      	b.n	8010f28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010f24:	2300      	movs	r3, #0
 8010f26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010f28:	69fb      	ldr	r3, [r7, #28]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d017      	beq.n	8010f5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010f2e:	69fb      	ldr	r3, [r7, #28]
 8010f30:	2200      	movs	r2, #0
 8010f32:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010f36:	88fa      	ldrh	r2, [r7, #6]
 8010f38:	2300      	movs	r3, #0
 8010f3a:	9303      	str	r3, [sp, #12]
 8010f3c:	69fb      	ldr	r3, [r7, #28]
 8010f3e:	9302      	str	r3, [sp, #8]
 8010f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f42:	9301      	str	r3, [sp, #4]
 8010f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f46:	9300      	str	r3, [sp, #0]
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	68b9      	ldr	r1, [r7, #8]
 8010f4c:	68f8      	ldr	r0, [r7, #12]
 8010f4e:	f000 f80e 	bl	8010f6e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010f52:	69f8      	ldr	r0, [r7, #28]
 8010f54:	f000 f89e 	bl	8011094 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010f58:	2301      	movs	r3, #1
 8010f5a:	61bb      	str	r3, [r7, #24]
 8010f5c:	e002      	b.n	8010f64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8010f62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010f64:	69bb      	ldr	r3, [r7, #24]
	}
 8010f66:	4618      	mov	r0, r3
 8010f68:	3720      	adds	r7, #32
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}

08010f6e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010f6e:	b580      	push	{r7, lr}
 8010f70:	b088      	sub	sp, #32
 8010f72:	af00      	add	r7, sp, #0
 8010f74:	60f8      	str	r0, [r7, #12]
 8010f76:	60b9      	str	r1, [r7, #8]
 8010f78:	607a      	str	r2, [r7, #4]
 8010f7a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	009b      	lsls	r3, r3, #2
 8010f84:	461a      	mov	r2, r3
 8010f86:	21a5      	movs	r1, #165	; 0xa5
 8010f88:	f012 ff7e 	bl	8023e88 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f90:	6879      	ldr	r1, [r7, #4]
 8010f92:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010f96:	440b      	add	r3, r1
 8010f98:	009b      	lsls	r3, r3, #2
 8010f9a:	4413      	add	r3, r2
 8010f9c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010f9e:	69bb      	ldr	r3, [r7, #24]
 8010fa0:	f023 0307 	bic.w	r3, r3, #7
 8010fa4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010fa6:	69bb      	ldr	r3, [r7, #24]
 8010fa8:	f003 0307 	and.w	r3, r3, #7
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d00b      	beq.n	8010fc8 <prvInitialiseNewTask+0x5a>
 8010fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fb4:	b672      	cpsid	i
 8010fb6:	f383 8811 	msr	BASEPRI, r3
 8010fba:	f3bf 8f6f 	isb	sy
 8010fbe:	f3bf 8f4f 	dsb	sy
 8010fc2:	b662      	cpsie	i
 8010fc4:	617b      	str	r3, [r7, #20]
 8010fc6:	e7fe      	b.n	8010fc6 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010fc8:	68bb      	ldr	r3, [r7, #8]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d01f      	beq.n	801100e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010fce:	2300      	movs	r3, #0
 8010fd0:	61fb      	str	r3, [r7, #28]
 8010fd2:	e012      	b.n	8010ffa <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010fd4:	68ba      	ldr	r2, [r7, #8]
 8010fd6:	69fb      	ldr	r3, [r7, #28]
 8010fd8:	4413      	add	r3, r2
 8010fda:	7819      	ldrb	r1, [r3, #0]
 8010fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fde:	69fb      	ldr	r3, [r7, #28]
 8010fe0:	4413      	add	r3, r2
 8010fe2:	3334      	adds	r3, #52	; 0x34
 8010fe4:	460a      	mov	r2, r1
 8010fe6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010fe8:	68ba      	ldr	r2, [r7, #8]
 8010fea:	69fb      	ldr	r3, [r7, #28]
 8010fec:	4413      	add	r3, r2
 8010fee:	781b      	ldrb	r3, [r3, #0]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d006      	beq.n	8011002 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010ff4:	69fb      	ldr	r3, [r7, #28]
 8010ff6:	3301      	adds	r3, #1
 8010ff8:	61fb      	str	r3, [r7, #28]
 8010ffa:	69fb      	ldr	r3, [r7, #28]
 8010ffc:	2b0f      	cmp	r3, #15
 8010ffe:	d9e9      	bls.n	8010fd4 <prvInitialiseNewTask+0x66>
 8011000:	e000      	b.n	8011004 <prvInitialiseNewTask+0x96>
			{
				break;
 8011002:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011006:	2200      	movs	r2, #0
 8011008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801100c:	e003      	b.n	8011016 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801100e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011010:	2200      	movs	r2, #0
 8011012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011018:	2b06      	cmp	r3, #6
 801101a:	d901      	bls.n	8011020 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801101c:	2306      	movs	r3, #6
 801101e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011022:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011024:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801102a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801102c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801102e:	2200      	movs	r2, #0
 8011030:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011034:	3304      	adds	r3, #4
 8011036:	4618      	mov	r0, r3
 8011038:	f7fe fbd8 	bl	800f7ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801103c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801103e:	3318      	adds	r3, #24
 8011040:	4618      	mov	r0, r3
 8011042:	f7fe fbd3 	bl	800f7ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801104a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801104c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801104e:	f1c3 0207 	rsb	r2, r3, #7
 8011052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011054:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801105a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 801105c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801105e:	2200      	movs	r2, #0
 8011060:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011064:	2200      	movs	r2, #0
 8011066:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801106a:	2200      	movs	r2, #0
 801106c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011070:	683a      	ldr	r2, [r7, #0]
 8011072:	68f9      	ldr	r1, [r7, #12]
 8011074:	69b8      	ldr	r0, [r7, #24]
 8011076:	f7fe fc4d 	bl	800f914 <pxPortInitialiseStack>
 801107a:	4602      	mov	r2, r0
 801107c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801107e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011082:	2b00      	cmp	r3, #0
 8011084:	d002      	beq.n	801108c <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801108a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801108c:	bf00      	nop
 801108e:	3720      	adds	r7, #32
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}

08011094 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b082      	sub	sp, #8
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801109c:	f7fe fd44 	bl	800fb28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80110a0:	4b2a      	ldr	r3, [pc, #168]	; (801114c <prvAddNewTaskToReadyList+0xb8>)
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	3301      	adds	r3, #1
 80110a6:	4a29      	ldr	r2, [pc, #164]	; (801114c <prvAddNewTaskToReadyList+0xb8>)
 80110a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80110aa:	4b29      	ldr	r3, [pc, #164]	; (8011150 <prvAddNewTaskToReadyList+0xbc>)
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d109      	bne.n	80110c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80110b2:	4a27      	ldr	r2, [pc, #156]	; (8011150 <prvAddNewTaskToReadyList+0xbc>)
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80110b8:	4b24      	ldr	r3, [pc, #144]	; (801114c <prvAddNewTaskToReadyList+0xb8>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	2b01      	cmp	r3, #1
 80110be:	d110      	bne.n	80110e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80110c0:	f000 fc1e 	bl	8011900 <prvInitialiseTaskLists>
 80110c4:	e00d      	b.n	80110e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80110c6:	4b23      	ldr	r3, [pc, #140]	; (8011154 <prvAddNewTaskToReadyList+0xc0>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d109      	bne.n	80110e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80110ce:	4b20      	ldr	r3, [pc, #128]	; (8011150 <prvAddNewTaskToReadyList+0xbc>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110d8:	429a      	cmp	r2, r3
 80110da:	d802      	bhi.n	80110e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80110dc:	4a1c      	ldr	r2, [pc, #112]	; (8011150 <prvAddNewTaskToReadyList+0xbc>)
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80110e2:	4b1d      	ldr	r3, [pc, #116]	; (8011158 <prvAddNewTaskToReadyList+0xc4>)
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	3301      	adds	r3, #1
 80110e8:	4a1b      	ldr	r2, [pc, #108]	; (8011158 <prvAddNewTaskToReadyList+0xc4>)
 80110ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110f0:	2201      	movs	r2, #1
 80110f2:	409a      	lsls	r2, r3
 80110f4:	4b19      	ldr	r3, [pc, #100]	; (801115c <prvAddNewTaskToReadyList+0xc8>)
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	4313      	orrs	r3, r2
 80110fa:	4a18      	ldr	r2, [pc, #96]	; (801115c <prvAddNewTaskToReadyList+0xc8>)
 80110fc:	6013      	str	r3, [r2, #0]
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011102:	4613      	mov	r3, r2
 8011104:	009b      	lsls	r3, r3, #2
 8011106:	4413      	add	r3, r2
 8011108:	009b      	lsls	r3, r3, #2
 801110a:	4a15      	ldr	r2, [pc, #84]	; (8011160 <prvAddNewTaskToReadyList+0xcc>)
 801110c:	441a      	add	r2, r3
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	3304      	adds	r3, #4
 8011112:	4619      	mov	r1, r3
 8011114:	4610      	mov	r0, r2
 8011116:	f7fe fb76 	bl	800f806 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801111a:	f7fe fd37 	bl	800fb8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801111e:	4b0d      	ldr	r3, [pc, #52]	; (8011154 <prvAddNewTaskToReadyList+0xc0>)
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d00e      	beq.n	8011144 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011126:	4b0a      	ldr	r3, [pc, #40]	; (8011150 <prvAddNewTaskToReadyList+0xbc>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011130:	429a      	cmp	r2, r3
 8011132:	d207      	bcs.n	8011144 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011134:	4b0b      	ldr	r3, [pc, #44]	; (8011164 <prvAddNewTaskToReadyList+0xd0>)
 8011136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801113a:	601a      	str	r2, [r3, #0]
 801113c:	f3bf 8f4f 	dsb	sy
 8011140:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011144:	bf00      	nop
 8011146:	3708      	adds	r7, #8
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}
 801114c:	20008464 	.word	0x20008464
 8011150:	20008364 	.word	0x20008364
 8011154:	20008470 	.word	0x20008470
 8011158:	20008480 	.word	0x20008480
 801115c:	2000846c 	.word	0x2000846c
 8011160:	20008368 	.word	0x20008368
 8011164:	e000ed04 	.word	0xe000ed04

08011168 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011168:	b580      	push	{r7, lr}
 801116a:	b084      	sub	sp, #16
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011170:	2300      	movs	r3, #0
 8011172:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d018      	beq.n	80111ac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801117a:	4b14      	ldr	r3, [pc, #80]	; (80111cc <vTaskDelay+0x64>)
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d00b      	beq.n	801119a <vTaskDelay+0x32>
 8011182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011186:	b672      	cpsid	i
 8011188:	f383 8811 	msr	BASEPRI, r3
 801118c:	f3bf 8f6f 	isb	sy
 8011190:	f3bf 8f4f 	dsb	sy
 8011194:	b662      	cpsie	i
 8011196:	60bb      	str	r3, [r7, #8]
 8011198:	e7fe      	b.n	8011198 <vTaskDelay+0x30>
			vTaskSuspendAll();
 801119a:	f000 f87d 	bl	8011298 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801119e:	2100      	movs	r1, #0
 80111a0:	6878      	ldr	r0, [r7, #4]
 80111a2:	f000 fe3f 	bl	8011e24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80111a6:	f000 f885 	bl	80112b4 <xTaskResumeAll>
 80111aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d107      	bne.n	80111c2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80111b2:	4b07      	ldr	r3, [pc, #28]	; (80111d0 <vTaskDelay+0x68>)
 80111b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111b8:	601a      	str	r2, [r3, #0]
 80111ba:	f3bf 8f4f 	dsb	sy
 80111be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80111c2:	bf00      	nop
 80111c4:	3710      	adds	r7, #16
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}
 80111ca:	bf00      	nop
 80111cc:	2000848c 	.word	0x2000848c
 80111d0:	e000ed04 	.word	0xe000ed04

080111d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b08a      	sub	sp, #40	; 0x28
 80111d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80111da:	2300      	movs	r3, #0
 80111dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80111de:	2300      	movs	r3, #0
 80111e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80111e2:	463a      	mov	r2, r7
 80111e4:	1d39      	adds	r1, r7, #4
 80111e6:	f107 0308 	add.w	r3, r7, #8
 80111ea:	4618      	mov	r0, r3
 80111ec:	f7ef fe22 	bl	8000e34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80111f0:	6839      	ldr	r1, [r7, #0]
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	68ba      	ldr	r2, [r7, #8]
 80111f6:	9202      	str	r2, [sp, #8]
 80111f8:	9301      	str	r3, [sp, #4]
 80111fa:	2300      	movs	r3, #0
 80111fc:	9300      	str	r3, [sp, #0]
 80111fe:	2300      	movs	r3, #0
 8011200:	460a      	mov	r2, r1
 8011202:	491f      	ldr	r1, [pc, #124]	; (8011280 <vTaskStartScheduler+0xac>)
 8011204:	481f      	ldr	r0, [pc, #124]	; (8011284 <vTaskStartScheduler+0xb0>)
 8011206:	f7ff fe0d 	bl	8010e24 <xTaskCreateStatic>
 801120a:	4602      	mov	r2, r0
 801120c:	4b1e      	ldr	r3, [pc, #120]	; (8011288 <vTaskStartScheduler+0xb4>)
 801120e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011210:	4b1d      	ldr	r3, [pc, #116]	; (8011288 <vTaskStartScheduler+0xb4>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d002      	beq.n	801121e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011218:	2301      	movs	r3, #1
 801121a:	617b      	str	r3, [r7, #20]
 801121c:	e001      	b.n	8011222 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801121e:	2300      	movs	r3, #0
 8011220:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011222:	697b      	ldr	r3, [r7, #20]
 8011224:	2b01      	cmp	r3, #1
 8011226:	d117      	bne.n	8011258 <vTaskStartScheduler+0x84>
 8011228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801122c:	b672      	cpsid	i
 801122e:	f383 8811 	msr	BASEPRI, r3
 8011232:	f3bf 8f6f 	isb	sy
 8011236:	f3bf 8f4f 	dsb	sy
 801123a:	b662      	cpsie	i
 801123c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801123e:	4b13      	ldr	r3, [pc, #76]	; (801128c <vTaskStartScheduler+0xb8>)
 8011240:	f04f 32ff 	mov.w	r2, #4294967295
 8011244:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011246:	4b12      	ldr	r3, [pc, #72]	; (8011290 <vTaskStartScheduler+0xbc>)
 8011248:	2201      	movs	r2, #1
 801124a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801124c:	4b11      	ldr	r3, [pc, #68]	; (8011294 <vTaskStartScheduler+0xc0>)
 801124e:	2200      	movs	r2, #0
 8011250:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011252:	f7fe fbed 	bl	800fa30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011256:	e00f      	b.n	8011278 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011258:	697b      	ldr	r3, [r7, #20]
 801125a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801125e:	d10b      	bne.n	8011278 <vTaskStartScheduler+0xa4>
 8011260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011264:	b672      	cpsid	i
 8011266:	f383 8811 	msr	BASEPRI, r3
 801126a:	f3bf 8f6f 	isb	sy
 801126e:	f3bf 8f4f 	dsb	sy
 8011272:	b662      	cpsie	i
 8011274:	60fb      	str	r3, [r7, #12]
 8011276:	e7fe      	b.n	8011276 <vTaskStartScheduler+0xa2>
}
 8011278:	bf00      	nop
 801127a:	3718      	adds	r7, #24
 801127c:	46bd      	mov	sp, r7
 801127e:	bd80      	pop	{r7, pc}
 8011280:	08024dd8 	.word	0x08024dd8
 8011284:	080118cd 	.word	0x080118cd
 8011288:	20008488 	.word	0x20008488
 801128c:	20008484 	.word	0x20008484
 8011290:	20008470 	.word	0x20008470
 8011294:	20008468 	.word	0x20008468

08011298 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011298:	b480      	push	{r7}
 801129a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801129c:	4b04      	ldr	r3, [pc, #16]	; (80112b0 <vTaskSuspendAll+0x18>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	3301      	adds	r3, #1
 80112a2:	4a03      	ldr	r2, [pc, #12]	; (80112b0 <vTaskSuspendAll+0x18>)
 80112a4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80112a6:	bf00      	nop
 80112a8:	46bd      	mov	sp, r7
 80112aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ae:	4770      	bx	lr
 80112b0:	2000848c 	.word	0x2000848c

080112b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b084      	sub	sp, #16
 80112b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80112ba:	2300      	movs	r3, #0
 80112bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80112be:	2300      	movs	r3, #0
 80112c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80112c2:	4b42      	ldr	r3, [pc, #264]	; (80113cc <xTaskResumeAll+0x118>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d10b      	bne.n	80112e2 <xTaskResumeAll+0x2e>
 80112ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ce:	b672      	cpsid	i
 80112d0:	f383 8811 	msr	BASEPRI, r3
 80112d4:	f3bf 8f6f 	isb	sy
 80112d8:	f3bf 8f4f 	dsb	sy
 80112dc:	b662      	cpsie	i
 80112de:	603b      	str	r3, [r7, #0]
 80112e0:	e7fe      	b.n	80112e0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80112e2:	f7fe fc21 	bl	800fb28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80112e6:	4b39      	ldr	r3, [pc, #228]	; (80113cc <xTaskResumeAll+0x118>)
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	3b01      	subs	r3, #1
 80112ec:	4a37      	ldr	r2, [pc, #220]	; (80113cc <xTaskResumeAll+0x118>)
 80112ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80112f0:	4b36      	ldr	r3, [pc, #216]	; (80113cc <xTaskResumeAll+0x118>)
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d161      	bne.n	80113bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80112f8:	4b35      	ldr	r3, [pc, #212]	; (80113d0 <xTaskResumeAll+0x11c>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d05d      	beq.n	80113bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011300:	e02e      	b.n	8011360 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011302:	4b34      	ldr	r3, [pc, #208]	; (80113d4 <xTaskResumeAll+0x120>)
 8011304:	68db      	ldr	r3, [r3, #12]
 8011306:	68db      	ldr	r3, [r3, #12]
 8011308:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	3318      	adds	r3, #24
 801130e:	4618      	mov	r0, r3
 8011310:	f7fe fad6 	bl	800f8c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	3304      	adds	r3, #4
 8011318:	4618      	mov	r0, r3
 801131a:	f7fe fad1 	bl	800f8c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011322:	2201      	movs	r2, #1
 8011324:	409a      	lsls	r2, r3
 8011326:	4b2c      	ldr	r3, [pc, #176]	; (80113d8 <xTaskResumeAll+0x124>)
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	4313      	orrs	r3, r2
 801132c:	4a2a      	ldr	r2, [pc, #168]	; (80113d8 <xTaskResumeAll+0x124>)
 801132e:	6013      	str	r3, [r2, #0]
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011334:	4613      	mov	r3, r2
 8011336:	009b      	lsls	r3, r3, #2
 8011338:	4413      	add	r3, r2
 801133a:	009b      	lsls	r3, r3, #2
 801133c:	4a27      	ldr	r2, [pc, #156]	; (80113dc <xTaskResumeAll+0x128>)
 801133e:	441a      	add	r2, r3
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	3304      	adds	r3, #4
 8011344:	4619      	mov	r1, r3
 8011346:	4610      	mov	r0, r2
 8011348:	f7fe fa5d 	bl	800f806 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011350:	4b23      	ldr	r3, [pc, #140]	; (80113e0 <xTaskResumeAll+0x12c>)
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011356:	429a      	cmp	r2, r3
 8011358:	d302      	bcc.n	8011360 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801135a:	4b22      	ldr	r3, [pc, #136]	; (80113e4 <xTaskResumeAll+0x130>)
 801135c:	2201      	movs	r2, #1
 801135e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011360:	4b1c      	ldr	r3, [pc, #112]	; (80113d4 <xTaskResumeAll+0x120>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d1cc      	bne.n	8011302 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d001      	beq.n	8011372 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801136e:	f000 fb63 	bl	8011a38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011372:	4b1d      	ldr	r3, [pc, #116]	; (80113e8 <xTaskResumeAll+0x134>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d010      	beq.n	80113a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801137e:	f000 f859 	bl	8011434 <xTaskIncrementTick>
 8011382:	4603      	mov	r3, r0
 8011384:	2b00      	cmp	r3, #0
 8011386:	d002      	beq.n	801138e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011388:	4b16      	ldr	r3, [pc, #88]	; (80113e4 <xTaskResumeAll+0x130>)
 801138a:	2201      	movs	r2, #1
 801138c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	3b01      	subs	r3, #1
 8011392:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d1f1      	bne.n	801137e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 801139a:	4b13      	ldr	r3, [pc, #76]	; (80113e8 <xTaskResumeAll+0x134>)
 801139c:	2200      	movs	r2, #0
 801139e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80113a0:	4b10      	ldr	r3, [pc, #64]	; (80113e4 <xTaskResumeAll+0x130>)
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d009      	beq.n	80113bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80113a8:	2301      	movs	r3, #1
 80113aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80113ac:	4b0f      	ldr	r3, [pc, #60]	; (80113ec <xTaskResumeAll+0x138>)
 80113ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113b2:	601a      	str	r2, [r3, #0]
 80113b4:	f3bf 8f4f 	dsb	sy
 80113b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80113bc:	f7fe fbe6 	bl	800fb8c <vPortExitCritical>

	return xAlreadyYielded;
 80113c0:	68bb      	ldr	r3, [r7, #8]
}
 80113c2:	4618      	mov	r0, r3
 80113c4:	3710      	adds	r7, #16
 80113c6:	46bd      	mov	sp, r7
 80113c8:	bd80      	pop	{r7, pc}
 80113ca:	bf00      	nop
 80113cc:	2000848c 	.word	0x2000848c
 80113d0:	20008464 	.word	0x20008464
 80113d4:	20008424 	.word	0x20008424
 80113d8:	2000846c 	.word	0x2000846c
 80113dc:	20008368 	.word	0x20008368
 80113e0:	20008364 	.word	0x20008364
 80113e4:	20008478 	.word	0x20008478
 80113e8:	20008474 	.word	0x20008474
 80113ec:	e000ed04 	.word	0xe000ed04

080113f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80113f0:	b480      	push	{r7}
 80113f2:	b083      	sub	sp, #12
 80113f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80113f6:	4b05      	ldr	r3, [pc, #20]	; (801140c <xTaskGetTickCount+0x1c>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80113fc:	687b      	ldr	r3, [r7, #4]
}
 80113fe:	4618      	mov	r0, r3
 8011400:	370c      	adds	r7, #12
 8011402:	46bd      	mov	sp, r7
 8011404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011408:	4770      	bx	lr
 801140a:	bf00      	nop
 801140c:	20008468 	.word	0x20008468

08011410 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b082      	sub	sp, #8
 8011414:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011416:	f7fe fc67 	bl	800fce8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801141a:	2300      	movs	r3, #0
 801141c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801141e:	4b04      	ldr	r3, [pc, #16]	; (8011430 <xTaskGetTickCountFromISR+0x20>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011424:	683b      	ldr	r3, [r7, #0]
}
 8011426:	4618      	mov	r0, r3
 8011428:	3708      	adds	r7, #8
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
 801142e:	bf00      	nop
 8011430:	20008468 	.word	0x20008468

08011434 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b086      	sub	sp, #24
 8011438:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801143a:	2300      	movs	r3, #0
 801143c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801143e:	4b4f      	ldr	r3, [pc, #316]	; (801157c <xTaskIncrementTick+0x148>)
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	2b00      	cmp	r3, #0
 8011444:	f040 8089 	bne.w	801155a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011448:	4b4d      	ldr	r3, [pc, #308]	; (8011580 <xTaskIncrementTick+0x14c>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	3301      	adds	r3, #1
 801144e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011450:	4a4b      	ldr	r2, [pc, #300]	; (8011580 <xTaskIncrementTick+0x14c>)
 8011452:	693b      	ldr	r3, [r7, #16]
 8011454:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011456:	693b      	ldr	r3, [r7, #16]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d121      	bne.n	80114a0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801145c:	4b49      	ldr	r3, [pc, #292]	; (8011584 <xTaskIncrementTick+0x150>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d00b      	beq.n	801147e <xTaskIncrementTick+0x4a>
 8011466:	f04f 0350 	mov.w	r3, #80	; 0x50
 801146a:	b672      	cpsid	i
 801146c:	f383 8811 	msr	BASEPRI, r3
 8011470:	f3bf 8f6f 	isb	sy
 8011474:	f3bf 8f4f 	dsb	sy
 8011478:	b662      	cpsie	i
 801147a:	603b      	str	r3, [r7, #0]
 801147c:	e7fe      	b.n	801147c <xTaskIncrementTick+0x48>
 801147e:	4b41      	ldr	r3, [pc, #260]	; (8011584 <xTaskIncrementTick+0x150>)
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	60fb      	str	r3, [r7, #12]
 8011484:	4b40      	ldr	r3, [pc, #256]	; (8011588 <xTaskIncrementTick+0x154>)
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	4a3e      	ldr	r2, [pc, #248]	; (8011584 <xTaskIncrementTick+0x150>)
 801148a:	6013      	str	r3, [r2, #0]
 801148c:	4a3e      	ldr	r2, [pc, #248]	; (8011588 <xTaskIncrementTick+0x154>)
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	6013      	str	r3, [r2, #0]
 8011492:	4b3e      	ldr	r3, [pc, #248]	; (801158c <xTaskIncrementTick+0x158>)
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	3301      	adds	r3, #1
 8011498:	4a3c      	ldr	r2, [pc, #240]	; (801158c <xTaskIncrementTick+0x158>)
 801149a:	6013      	str	r3, [r2, #0]
 801149c:	f000 facc 	bl	8011a38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80114a0:	4b3b      	ldr	r3, [pc, #236]	; (8011590 <xTaskIncrementTick+0x15c>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	693a      	ldr	r2, [r7, #16]
 80114a6:	429a      	cmp	r2, r3
 80114a8:	d348      	bcc.n	801153c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80114aa:	4b36      	ldr	r3, [pc, #216]	; (8011584 <xTaskIncrementTick+0x150>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d104      	bne.n	80114be <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114b4:	4b36      	ldr	r3, [pc, #216]	; (8011590 <xTaskIncrementTick+0x15c>)
 80114b6:	f04f 32ff 	mov.w	r2, #4294967295
 80114ba:	601a      	str	r2, [r3, #0]
					break;
 80114bc:	e03e      	b.n	801153c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114be:	4b31      	ldr	r3, [pc, #196]	; (8011584 <xTaskIncrementTick+0x150>)
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	68db      	ldr	r3, [r3, #12]
 80114c4:	68db      	ldr	r3, [r3, #12]
 80114c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80114c8:	68bb      	ldr	r3, [r7, #8]
 80114ca:	685b      	ldr	r3, [r3, #4]
 80114cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80114ce:	693a      	ldr	r2, [r7, #16]
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	429a      	cmp	r2, r3
 80114d4:	d203      	bcs.n	80114de <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80114d6:	4a2e      	ldr	r2, [pc, #184]	; (8011590 <xTaskIncrementTick+0x15c>)
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80114dc:	e02e      	b.n	801153c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	3304      	adds	r3, #4
 80114e2:	4618      	mov	r0, r3
 80114e4:	f7fe f9ec 	bl	800f8c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d004      	beq.n	80114fa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	3318      	adds	r3, #24
 80114f4:	4618      	mov	r0, r3
 80114f6:	f7fe f9e3 	bl	800f8c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114fe:	2201      	movs	r2, #1
 8011500:	409a      	lsls	r2, r3
 8011502:	4b24      	ldr	r3, [pc, #144]	; (8011594 <xTaskIncrementTick+0x160>)
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	4313      	orrs	r3, r2
 8011508:	4a22      	ldr	r2, [pc, #136]	; (8011594 <xTaskIncrementTick+0x160>)
 801150a:	6013      	str	r3, [r2, #0]
 801150c:	68bb      	ldr	r3, [r7, #8]
 801150e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011510:	4613      	mov	r3, r2
 8011512:	009b      	lsls	r3, r3, #2
 8011514:	4413      	add	r3, r2
 8011516:	009b      	lsls	r3, r3, #2
 8011518:	4a1f      	ldr	r2, [pc, #124]	; (8011598 <xTaskIncrementTick+0x164>)
 801151a:	441a      	add	r2, r3
 801151c:	68bb      	ldr	r3, [r7, #8]
 801151e:	3304      	adds	r3, #4
 8011520:	4619      	mov	r1, r3
 8011522:	4610      	mov	r0, r2
 8011524:	f7fe f96f 	bl	800f806 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011528:	68bb      	ldr	r3, [r7, #8]
 801152a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801152c:	4b1b      	ldr	r3, [pc, #108]	; (801159c <xTaskIncrementTick+0x168>)
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011532:	429a      	cmp	r2, r3
 8011534:	d3b9      	bcc.n	80114aa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8011536:	2301      	movs	r3, #1
 8011538:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801153a:	e7b6      	b.n	80114aa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801153c:	4b17      	ldr	r3, [pc, #92]	; (801159c <xTaskIncrementTick+0x168>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011542:	4915      	ldr	r1, [pc, #84]	; (8011598 <xTaskIncrementTick+0x164>)
 8011544:	4613      	mov	r3, r2
 8011546:	009b      	lsls	r3, r3, #2
 8011548:	4413      	add	r3, r2
 801154a:	009b      	lsls	r3, r3, #2
 801154c:	440b      	add	r3, r1
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	2b01      	cmp	r3, #1
 8011552:	d907      	bls.n	8011564 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8011554:	2301      	movs	r3, #1
 8011556:	617b      	str	r3, [r7, #20]
 8011558:	e004      	b.n	8011564 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801155a:	4b11      	ldr	r3, [pc, #68]	; (80115a0 <xTaskIncrementTick+0x16c>)
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	3301      	adds	r3, #1
 8011560:	4a0f      	ldr	r2, [pc, #60]	; (80115a0 <xTaskIncrementTick+0x16c>)
 8011562:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011564:	4b0f      	ldr	r3, [pc, #60]	; (80115a4 <xTaskIncrementTick+0x170>)
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d001      	beq.n	8011570 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 801156c:	2301      	movs	r3, #1
 801156e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011570:	697b      	ldr	r3, [r7, #20]
}
 8011572:	4618      	mov	r0, r3
 8011574:	3718      	adds	r7, #24
 8011576:	46bd      	mov	sp, r7
 8011578:	bd80      	pop	{r7, pc}
 801157a:	bf00      	nop
 801157c:	2000848c 	.word	0x2000848c
 8011580:	20008468 	.word	0x20008468
 8011584:	2000841c 	.word	0x2000841c
 8011588:	20008420 	.word	0x20008420
 801158c:	2000847c 	.word	0x2000847c
 8011590:	20008484 	.word	0x20008484
 8011594:	2000846c 	.word	0x2000846c
 8011598:	20008368 	.word	0x20008368
 801159c:	20008364 	.word	0x20008364
 80115a0:	20008474 	.word	0x20008474
 80115a4:	20008478 	.word	0x20008478

080115a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b088      	sub	sp, #32
 80115ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80115ae:	4b3a      	ldr	r3, [pc, #232]	; (8011698 <vTaskSwitchContext+0xf0>)
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d003      	beq.n	80115be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80115b6:	4b39      	ldr	r3, [pc, #228]	; (801169c <vTaskSwitchContext+0xf4>)
 80115b8:	2201      	movs	r2, #1
 80115ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80115bc:	e067      	b.n	801168e <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 80115be:	4b37      	ldr	r3, [pc, #220]	; (801169c <vTaskSwitchContext+0xf4>)
 80115c0:	2200      	movs	r2, #0
 80115c2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80115c4:	4b36      	ldr	r3, [pc, #216]	; (80116a0 <vTaskSwitchContext+0xf8>)
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115ca:	61fb      	str	r3, [r7, #28]
 80115cc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80115d0:	61bb      	str	r3, [r7, #24]
 80115d2:	69fb      	ldr	r3, [r7, #28]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	69ba      	ldr	r2, [r7, #24]
 80115d8:	429a      	cmp	r2, r3
 80115da:	d111      	bne.n	8011600 <vTaskSwitchContext+0x58>
 80115dc:	69fb      	ldr	r3, [r7, #28]
 80115de:	3304      	adds	r3, #4
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	69ba      	ldr	r2, [r7, #24]
 80115e4:	429a      	cmp	r2, r3
 80115e6:	d10b      	bne.n	8011600 <vTaskSwitchContext+0x58>
 80115e8:	69fb      	ldr	r3, [r7, #28]
 80115ea:	3308      	adds	r3, #8
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	69ba      	ldr	r2, [r7, #24]
 80115f0:	429a      	cmp	r2, r3
 80115f2:	d105      	bne.n	8011600 <vTaskSwitchContext+0x58>
 80115f4:	69fb      	ldr	r3, [r7, #28]
 80115f6:	330c      	adds	r3, #12
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	69ba      	ldr	r2, [r7, #24]
 80115fc:	429a      	cmp	r2, r3
 80115fe:	d008      	beq.n	8011612 <vTaskSwitchContext+0x6a>
 8011600:	4b27      	ldr	r3, [pc, #156]	; (80116a0 <vTaskSwitchContext+0xf8>)
 8011602:	681a      	ldr	r2, [r3, #0]
 8011604:	4b26      	ldr	r3, [pc, #152]	; (80116a0 <vTaskSwitchContext+0xf8>)
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	3334      	adds	r3, #52	; 0x34
 801160a:	4619      	mov	r1, r3
 801160c:	4610      	mov	r0, r2
 801160e:	f7ef fbfe 	bl	8000e0e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011612:	4b24      	ldr	r3, [pc, #144]	; (80116a4 <vTaskSwitchContext+0xfc>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	fab3 f383 	clz	r3, r3
 801161e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011620:	7afb      	ldrb	r3, [r7, #11]
 8011622:	f1c3 031f 	rsb	r3, r3, #31
 8011626:	617b      	str	r3, [r7, #20]
 8011628:	491f      	ldr	r1, [pc, #124]	; (80116a8 <vTaskSwitchContext+0x100>)
 801162a:	697a      	ldr	r2, [r7, #20]
 801162c:	4613      	mov	r3, r2
 801162e:	009b      	lsls	r3, r3, #2
 8011630:	4413      	add	r3, r2
 8011632:	009b      	lsls	r3, r3, #2
 8011634:	440b      	add	r3, r1
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d10b      	bne.n	8011654 <vTaskSwitchContext+0xac>
	__asm volatile
 801163c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011640:	b672      	cpsid	i
 8011642:	f383 8811 	msr	BASEPRI, r3
 8011646:	f3bf 8f6f 	isb	sy
 801164a:	f3bf 8f4f 	dsb	sy
 801164e:	b662      	cpsie	i
 8011650:	607b      	str	r3, [r7, #4]
 8011652:	e7fe      	b.n	8011652 <vTaskSwitchContext+0xaa>
 8011654:	697a      	ldr	r2, [r7, #20]
 8011656:	4613      	mov	r3, r2
 8011658:	009b      	lsls	r3, r3, #2
 801165a:	4413      	add	r3, r2
 801165c:	009b      	lsls	r3, r3, #2
 801165e:	4a12      	ldr	r2, [pc, #72]	; (80116a8 <vTaskSwitchContext+0x100>)
 8011660:	4413      	add	r3, r2
 8011662:	613b      	str	r3, [r7, #16]
 8011664:	693b      	ldr	r3, [r7, #16]
 8011666:	685b      	ldr	r3, [r3, #4]
 8011668:	685a      	ldr	r2, [r3, #4]
 801166a:	693b      	ldr	r3, [r7, #16]
 801166c:	605a      	str	r2, [r3, #4]
 801166e:	693b      	ldr	r3, [r7, #16]
 8011670:	685a      	ldr	r2, [r3, #4]
 8011672:	693b      	ldr	r3, [r7, #16]
 8011674:	3308      	adds	r3, #8
 8011676:	429a      	cmp	r2, r3
 8011678:	d104      	bne.n	8011684 <vTaskSwitchContext+0xdc>
 801167a:	693b      	ldr	r3, [r7, #16]
 801167c:	685b      	ldr	r3, [r3, #4]
 801167e:	685a      	ldr	r2, [r3, #4]
 8011680:	693b      	ldr	r3, [r7, #16]
 8011682:	605a      	str	r2, [r3, #4]
 8011684:	693b      	ldr	r3, [r7, #16]
 8011686:	685b      	ldr	r3, [r3, #4]
 8011688:	68db      	ldr	r3, [r3, #12]
 801168a:	4a05      	ldr	r2, [pc, #20]	; (80116a0 <vTaskSwitchContext+0xf8>)
 801168c:	6013      	str	r3, [r2, #0]
}
 801168e:	bf00      	nop
 8011690:	3720      	adds	r7, #32
 8011692:	46bd      	mov	sp, r7
 8011694:	bd80      	pop	{r7, pc}
 8011696:	bf00      	nop
 8011698:	2000848c 	.word	0x2000848c
 801169c:	20008478 	.word	0x20008478
 80116a0:	20008364 	.word	0x20008364
 80116a4:	2000846c 	.word	0x2000846c
 80116a8:	20008368 	.word	0x20008368

080116ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b084      	sub	sp, #16
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
 80116b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d10b      	bne.n	80116d4 <vTaskPlaceOnEventList+0x28>
 80116bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116c0:	b672      	cpsid	i
 80116c2:	f383 8811 	msr	BASEPRI, r3
 80116c6:	f3bf 8f6f 	isb	sy
 80116ca:	f3bf 8f4f 	dsb	sy
 80116ce:	b662      	cpsie	i
 80116d0:	60fb      	str	r3, [r7, #12]
 80116d2:	e7fe      	b.n	80116d2 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80116d4:	4b07      	ldr	r3, [pc, #28]	; (80116f4 <vTaskPlaceOnEventList+0x48>)
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	3318      	adds	r3, #24
 80116da:	4619      	mov	r1, r3
 80116dc:	6878      	ldr	r0, [r7, #4]
 80116de:	f7fe f8b6 	bl	800f84e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80116e2:	2101      	movs	r1, #1
 80116e4:	6838      	ldr	r0, [r7, #0]
 80116e6:	f000 fb9d 	bl	8011e24 <prvAddCurrentTaskToDelayedList>
}
 80116ea:	bf00      	nop
 80116ec:	3710      	adds	r7, #16
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}
 80116f2:	bf00      	nop
 80116f4:	20008364 	.word	0x20008364

080116f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b086      	sub	sp, #24
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	68db      	ldr	r3, [r3, #12]
 8011704:	68db      	ldr	r3, [r3, #12]
 8011706:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011708:	693b      	ldr	r3, [r7, #16]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d10b      	bne.n	8011726 <xTaskRemoveFromEventList+0x2e>
 801170e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011712:	b672      	cpsid	i
 8011714:	f383 8811 	msr	BASEPRI, r3
 8011718:	f3bf 8f6f 	isb	sy
 801171c:	f3bf 8f4f 	dsb	sy
 8011720:	b662      	cpsie	i
 8011722:	60fb      	str	r3, [r7, #12]
 8011724:	e7fe      	b.n	8011724 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011726:	693b      	ldr	r3, [r7, #16]
 8011728:	3318      	adds	r3, #24
 801172a:	4618      	mov	r0, r3
 801172c:	f7fe f8c8 	bl	800f8c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011730:	4b1d      	ldr	r3, [pc, #116]	; (80117a8 <xTaskRemoveFromEventList+0xb0>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d11c      	bne.n	8011772 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011738:	693b      	ldr	r3, [r7, #16]
 801173a:	3304      	adds	r3, #4
 801173c:	4618      	mov	r0, r3
 801173e:	f7fe f8bf 	bl	800f8c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011742:	693b      	ldr	r3, [r7, #16]
 8011744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011746:	2201      	movs	r2, #1
 8011748:	409a      	lsls	r2, r3
 801174a:	4b18      	ldr	r3, [pc, #96]	; (80117ac <xTaskRemoveFromEventList+0xb4>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	4313      	orrs	r3, r2
 8011750:	4a16      	ldr	r2, [pc, #88]	; (80117ac <xTaskRemoveFromEventList+0xb4>)
 8011752:	6013      	str	r3, [r2, #0]
 8011754:	693b      	ldr	r3, [r7, #16]
 8011756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011758:	4613      	mov	r3, r2
 801175a:	009b      	lsls	r3, r3, #2
 801175c:	4413      	add	r3, r2
 801175e:	009b      	lsls	r3, r3, #2
 8011760:	4a13      	ldr	r2, [pc, #76]	; (80117b0 <xTaskRemoveFromEventList+0xb8>)
 8011762:	441a      	add	r2, r3
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	3304      	adds	r3, #4
 8011768:	4619      	mov	r1, r3
 801176a:	4610      	mov	r0, r2
 801176c:	f7fe f84b 	bl	800f806 <vListInsertEnd>
 8011770:	e005      	b.n	801177e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011772:	693b      	ldr	r3, [r7, #16]
 8011774:	3318      	adds	r3, #24
 8011776:	4619      	mov	r1, r3
 8011778:	480e      	ldr	r0, [pc, #56]	; (80117b4 <xTaskRemoveFromEventList+0xbc>)
 801177a:	f7fe f844 	bl	800f806 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801177e:	693b      	ldr	r3, [r7, #16]
 8011780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011782:	4b0d      	ldr	r3, [pc, #52]	; (80117b8 <xTaskRemoveFromEventList+0xc0>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011788:	429a      	cmp	r2, r3
 801178a:	d905      	bls.n	8011798 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801178c:	2301      	movs	r3, #1
 801178e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011790:	4b0a      	ldr	r3, [pc, #40]	; (80117bc <xTaskRemoveFromEventList+0xc4>)
 8011792:	2201      	movs	r2, #1
 8011794:	601a      	str	r2, [r3, #0]
 8011796:	e001      	b.n	801179c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011798:	2300      	movs	r3, #0
 801179a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801179c:	697b      	ldr	r3, [r7, #20]
}
 801179e:	4618      	mov	r0, r3
 80117a0:	3718      	adds	r7, #24
 80117a2:	46bd      	mov	sp, r7
 80117a4:	bd80      	pop	{r7, pc}
 80117a6:	bf00      	nop
 80117a8:	2000848c 	.word	0x2000848c
 80117ac:	2000846c 	.word	0x2000846c
 80117b0:	20008368 	.word	0x20008368
 80117b4:	20008424 	.word	0x20008424
 80117b8:	20008364 	.word	0x20008364
 80117bc:	20008478 	.word	0x20008478

080117c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80117c0:	b480      	push	{r7}
 80117c2:	b083      	sub	sp, #12
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80117c8:	4b06      	ldr	r3, [pc, #24]	; (80117e4 <vTaskInternalSetTimeOutState+0x24>)
 80117ca:	681a      	ldr	r2, [r3, #0]
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80117d0:	4b05      	ldr	r3, [pc, #20]	; (80117e8 <vTaskInternalSetTimeOutState+0x28>)
 80117d2:	681a      	ldr	r2, [r3, #0]
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	605a      	str	r2, [r3, #4]
}
 80117d8:	bf00      	nop
 80117da:	370c      	adds	r7, #12
 80117dc:	46bd      	mov	sp, r7
 80117de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e2:	4770      	bx	lr
 80117e4:	2000847c 	.word	0x2000847c
 80117e8:	20008468 	.word	0x20008468

080117ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80117ec:	b580      	push	{r7, lr}
 80117ee:	b088      	sub	sp, #32
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	6078      	str	r0, [r7, #4]
 80117f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d10b      	bne.n	8011814 <xTaskCheckForTimeOut+0x28>
 80117fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011800:	b672      	cpsid	i
 8011802:	f383 8811 	msr	BASEPRI, r3
 8011806:	f3bf 8f6f 	isb	sy
 801180a:	f3bf 8f4f 	dsb	sy
 801180e:	b662      	cpsie	i
 8011810:	613b      	str	r3, [r7, #16]
 8011812:	e7fe      	b.n	8011812 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d10b      	bne.n	8011832 <xTaskCheckForTimeOut+0x46>
 801181a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801181e:	b672      	cpsid	i
 8011820:	f383 8811 	msr	BASEPRI, r3
 8011824:	f3bf 8f6f 	isb	sy
 8011828:	f3bf 8f4f 	dsb	sy
 801182c:	b662      	cpsie	i
 801182e:	60fb      	str	r3, [r7, #12]
 8011830:	e7fe      	b.n	8011830 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8011832:	f7fe f979 	bl	800fb28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011836:	4b1d      	ldr	r3, [pc, #116]	; (80118ac <xTaskCheckForTimeOut+0xc0>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	685b      	ldr	r3, [r3, #4]
 8011840:	69ba      	ldr	r2, [r7, #24]
 8011842:	1ad3      	subs	r3, r2, r3
 8011844:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801184e:	d102      	bne.n	8011856 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011850:	2300      	movs	r3, #0
 8011852:	61fb      	str	r3, [r7, #28]
 8011854:	e023      	b.n	801189e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	681a      	ldr	r2, [r3, #0]
 801185a:	4b15      	ldr	r3, [pc, #84]	; (80118b0 <xTaskCheckForTimeOut+0xc4>)
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	429a      	cmp	r2, r3
 8011860:	d007      	beq.n	8011872 <xTaskCheckForTimeOut+0x86>
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	685b      	ldr	r3, [r3, #4]
 8011866:	69ba      	ldr	r2, [r7, #24]
 8011868:	429a      	cmp	r2, r3
 801186a:	d302      	bcc.n	8011872 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801186c:	2301      	movs	r3, #1
 801186e:	61fb      	str	r3, [r7, #28]
 8011870:	e015      	b.n	801189e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011872:	683b      	ldr	r3, [r7, #0]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	697a      	ldr	r2, [r7, #20]
 8011878:	429a      	cmp	r2, r3
 801187a:	d20b      	bcs.n	8011894 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801187c:	683b      	ldr	r3, [r7, #0]
 801187e:	681a      	ldr	r2, [r3, #0]
 8011880:	697b      	ldr	r3, [r7, #20]
 8011882:	1ad2      	subs	r2, r2, r3
 8011884:	683b      	ldr	r3, [r7, #0]
 8011886:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011888:	6878      	ldr	r0, [r7, #4]
 801188a:	f7ff ff99 	bl	80117c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801188e:	2300      	movs	r3, #0
 8011890:	61fb      	str	r3, [r7, #28]
 8011892:	e004      	b.n	801189e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	2200      	movs	r2, #0
 8011898:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801189a:	2301      	movs	r3, #1
 801189c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801189e:	f7fe f975 	bl	800fb8c <vPortExitCritical>

	return xReturn;
 80118a2:	69fb      	ldr	r3, [r7, #28]
}
 80118a4:	4618      	mov	r0, r3
 80118a6:	3720      	adds	r7, #32
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}
 80118ac:	20008468 	.word	0x20008468
 80118b0:	2000847c 	.word	0x2000847c

080118b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80118b4:	b480      	push	{r7}
 80118b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80118b8:	4b03      	ldr	r3, [pc, #12]	; (80118c8 <vTaskMissedYield+0x14>)
 80118ba:	2201      	movs	r2, #1
 80118bc:	601a      	str	r2, [r3, #0]
}
 80118be:	bf00      	nop
 80118c0:	46bd      	mov	sp, r7
 80118c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c6:	4770      	bx	lr
 80118c8:	20008478 	.word	0x20008478

080118cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b082      	sub	sp, #8
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80118d4:	f000 f854 	bl	8011980 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80118d8:	4b07      	ldr	r3, [pc, #28]	; (80118f8 <prvIdleTask+0x2c>)
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	2b01      	cmp	r3, #1
 80118de:	d907      	bls.n	80118f0 <prvIdleTask+0x24>
			{
				taskYIELD();
 80118e0:	4b06      	ldr	r3, [pc, #24]	; (80118fc <prvIdleTask+0x30>)
 80118e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118e6:	601a      	str	r2, [r3, #0]
 80118e8:	f3bf 8f4f 	dsb	sy
 80118ec:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80118f0:	f7ef fa86 	bl	8000e00 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80118f4:	e7ee      	b.n	80118d4 <prvIdleTask+0x8>
 80118f6:	bf00      	nop
 80118f8:	20008368 	.word	0x20008368
 80118fc:	e000ed04 	.word	0xe000ed04

08011900 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011900:	b580      	push	{r7, lr}
 8011902:	b082      	sub	sp, #8
 8011904:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011906:	2300      	movs	r3, #0
 8011908:	607b      	str	r3, [r7, #4]
 801190a:	e00c      	b.n	8011926 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801190c:	687a      	ldr	r2, [r7, #4]
 801190e:	4613      	mov	r3, r2
 8011910:	009b      	lsls	r3, r3, #2
 8011912:	4413      	add	r3, r2
 8011914:	009b      	lsls	r3, r3, #2
 8011916:	4a12      	ldr	r2, [pc, #72]	; (8011960 <prvInitialiseTaskLists+0x60>)
 8011918:	4413      	add	r3, r2
 801191a:	4618      	mov	r0, r3
 801191c:	f7fd ff46 	bl	800f7ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	3301      	adds	r3, #1
 8011924:	607b      	str	r3, [r7, #4]
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	2b06      	cmp	r3, #6
 801192a:	d9ef      	bls.n	801190c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801192c:	480d      	ldr	r0, [pc, #52]	; (8011964 <prvInitialiseTaskLists+0x64>)
 801192e:	f7fd ff3d 	bl	800f7ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011932:	480d      	ldr	r0, [pc, #52]	; (8011968 <prvInitialiseTaskLists+0x68>)
 8011934:	f7fd ff3a 	bl	800f7ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011938:	480c      	ldr	r0, [pc, #48]	; (801196c <prvInitialiseTaskLists+0x6c>)
 801193a:	f7fd ff37 	bl	800f7ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801193e:	480c      	ldr	r0, [pc, #48]	; (8011970 <prvInitialiseTaskLists+0x70>)
 8011940:	f7fd ff34 	bl	800f7ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011944:	480b      	ldr	r0, [pc, #44]	; (8011974 <prvInitialiseTaskLists+0x74>)
 8011946:	f7fd ff31 	bl	800f7ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801194a:	4b0b      	ldr	r3, [pc, #44]	; (8011978 <prvInitialiseTaskLists+0x78>)
 801194c:	4a05      	ldr	r2, [pc, #20]	; (8011964 <prvInitialiseTaskLists+0x64>)
 801194e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011950:	4b0a      	ldr	r3, [pc, #40]	; (801197c <prvInitialiseTaskLists+0x7c>)
 8011952:	4a05      	ldr	r2, [pc, #20]	; (8011968 <prvInitialiseTaskLists+0x68>)
 8011954:	601a      	str	r2, [r3, #0]
}
 8011956:	bf00      	nop
 8011958:	3708      	adds	r7, #8
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}
 801195e:	bf00      	nop
 8011960:	20008368 	.word	0x20008368
 8011964:	200083f4 	.word	0x200083f4
 8011968:	20008408 	.word	0x20008408
 801196c:	20008424 	.word	0x20008424
 8011970:	20008438 	.word	0x20008438
 8011974:	20008450 	.word	0x20008450
 8011978:	2000841c 	.word	0x2000841c
 801197c:	20008420 	.word	0x20008420

08011980 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b082      	sub	sp, #8
 8011984:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011986:	e019      	b.n	80119bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011988:	f7fe f8ce 	bl	800fb28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801198c:	4b0f      	ldr	r3, [pc, #60]	; (80119cc <prvCheckTasksWaitingTermination+0x4c>)
 801198e:	68db      	ldr	r3, [r3, #12]
 8011990:	68db      	ldr	r3, [r3, #12]
 8011992:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	3304      	adds	r3, #4
 8011998:	4618      	mov	r0, r3
 801199a:	f7fd ff91 	bl	800f8c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801199e:	4b0c      	ldr	r3, [pc, #48]	; (80119d0 <prvCheckTasksWaitingTermination+0x50>)
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	3b01      	subs	r3, #1
 80119a4:	4a0a      	ldr	r2, [pc, #40]	; (80119d0 <prvCheckTasksWaitingTermination+0x50>)
 80119a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80119a8:	4b0a      	ldr	r3, [pc, #40]	; (80119d4 <prvCheckTasksWaitingTermination+0x54>)
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	3b01      	subs	r3, #1
 80119ae:	4a09      	ldr	r2, [pc, #36]	; (80119d4 <prvCheckTasksWaitingTermination+0x54>)
 80119b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80119b2:	f7fe f8eb 	bl	800fb8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80119b6:	6878      	ldr	r0, [r7, #4]
 80119b8:	f000 f80e 	bl	80119d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80119bc:	4b05      	ldr	r3, [pc, #20]	; (80119d4 <prvCheckTasksWaitingTermination+0x54>)
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d1e1      	bne.n	8011988 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80119c4:	bf00      	nop
 80119c6:	3708      	adds	r7, #8
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}
 80119cc:	20008438 	.word	0x20008438
 80119d0:	20008464 	.word	0x20008464
 80119d4:	2000844c 	.word	0x2000844c

080119d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b084      	sub	sp, #16
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d108      	bne.n	80119fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119ee:	4618      	mov	r0, r3
 80119f0:	f7fd fdc4 	bl	800f57c <vPortFree>
				vPortFree( pxTCB );
 80119f4:	6878      	ldr	r0, [r7, #4]
 80119f6:	f7fd fdc1 	bl	800f57c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80119fa:	e019      	b.n	8011a30 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8011a02:	2b01      	cmp	r3, #1
 8011a04:	d103      	bne.n	8011a0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011a06:	6878      	ldr	r0, [r7, #4]
 8011a08:	f7fd fdb8 	bl	800f57c <vPortFree>
	}
 8011a0c:	e010      	b.n	8011a30 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8011a14:	2b02      	cmp	r3, #2
 8011a16:	d00b      	beq.n	8011a30 <prvDeleteTCB+0x58>
 8011a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a1c:	b672      	cpsid	i
 8011a1e:	f383 8811 	msr	BASEPRI, r3
 8011a22:	f3bf 8f6f 	isb	sy
 8011a26:	f3bf 8f4f 	dsb	sy
 8011a2a:	b662      	cpsie	i
 8011a2c:	60fb      	str	r3, [r7, #12]
 8011a2e:	e7fe      	b.n	8011a2e <prvDeleteTCB+0x56>
	}
 8011a30:	bf00      	nop
 8011a32:	3710      	adds	r7, #16
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bd80      	pop	{r7, pc}

08011a38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011a38:	b480      	push	{r7}
 8011a3a:	b083      	sub	sp, #12
 8011a3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011a3e:	4b0c      	ldr	r3, [pc, #48]	; (8011a70 <prvResetNextTaskUnblockTime+0x38>)
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d104      	bne.n	8011a52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011a48:	4b0a      	ldr	r3, [pc, #40]	; (8011a74 <prvResetNextTaskUnblockTime+0x3c>)
 8011a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8011a4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011a50:	e008      	b.n	8011a64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a52:	4b07      	ldr	r3, [pc, #28]	; (8011a70 <prvResetNextTaskUnblockTime+0x38>)
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	68db      	ldr	r3, [r3, #12]
 8011a58:	68db      	ldr	r3, [r3, #12]
 8011a5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	685b      	ldr	r3, [r3, #4]
 8011a60:	4a04      	ldr	r2, [pc, #16]	; (8011a74 <prvResetNextTaskUnblockTime+0x3c>)
 8011a62:	6013      	str	r3, [r2, #0]
}
 8011a64:	bf00      	nop
 8011a66:	370c      	adds	r7, #12
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6e:	4770      	bx	lr
 8011a70:	2000841c 	.word	0x2000841c
 8011a74:	20008484 	.word	0x20008484

08011a78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011a78:	b480      	push	{r7}
 8011a7a:	b083      	sub	sp, #12
 8011a7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011a7e:	4b0b      	ldr	r3, [pc, #44]	; (8011aac <xTaskGetSchedulerState+0x34>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d102      	bne.n	8011a8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011a86:	2301      	movs	r3, #1
 8011a88:	607b      	str	r3, [r7, #4]
 8011a8a:	e008      	b.n	8011a9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a8c:	4b08      	ldr	r3, [pc, #32]	; (8011ab0 <xTaskGetSchedulerState+0x38>)
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d102      	bne.n	8011a9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011a94:	2302      	movs	r3, #2
 8011a96:	607b      	str	r3, [r7, #4]
 8011a98:	e001      	b.n	8011a9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011a9e:	687b      	ldr	r3, [r7, #4]
	}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	370c      	adds	r7, #12
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aaa:	4770      	bx	lr
 8011aac:	20008470 	.word	0x20008470
 8011ab0:	2000848c 	.word	0x2000848c

08011ab4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b084      	sub	sp, #16
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d069      	beq.n	8011b9e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011aca:	68bb      	ldr	r3, [r7, #8]
 8011acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ace:	4b36      	ldr	r3, [pc, #216]	; (8011ba8 <xTaskPriorityInherit+0xf4>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ad4:	429a      	cmp	r2, r3
 8011ad6:	d259      	bcs.n	8011b8c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011ad8:	68bb      	ldr	r3, [r7, #8]
 8011ada:	699b      	ldr	r3, [r3, #24]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	db06      	blt.n	8011aee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ae0:	4b31      	ldr	r3, [pc, #196]	; (8011ba8 <xTaskPriorityInherit+0xf4>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ae6:	f1c3 0207 	rsb	r2, r3, #7
 8011aea:	68bb      	ldr	r3, [r7, #8]
 8011aec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011aee:	68bb      	ldr	r3, [r7, #8]
 8011af0:	6959      	ldr	r1, [r3, #20]
 8011af2:	68bb      	ldr	r3, [r7, #8]
 8011af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011af6:	4613      	mov	r3, r2
 8011af8:	009b      	lsls	r3, r3, #2
 8011afa:	4413      	add	r3, r2
 8011afc:	009b      	lsls	r3, r3, #2
 8011afe:	4a2b      	ldr	r2, [pc, #172]	; (8011bac <xTaskPriorityInherit+0xf8>)
 8011b00:	4413      	add	r3, r2
 8011b02:	4299      	cmp	r1, r3
 8011b04:	d13a      	bne.n	8011b7c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b06:	68bb      	ldr	r3, [r7, #8]
 8011b08:	3304      	adds	r3, #4
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f7fd fed8 	bl	800f8c0 <uxListRemove>
 8011b10:	4603      	mov	r3, r0
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d115      	bne.n	8011b42 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b1a:	4924      	ldr	r1, [pc, #144]	; (8011bac <xTaskPriorityInherit+0xf8>)
 8011b1c:	4613      	mov	r3, r2
 8011b1e:	009b      	lsls	r3, r3, #2
 8011b20:	4413      	add	r3, r2
 8011b22:	009b      	lsls	r3, r3, #2
 8011b24:	440b      	add	r3, r1
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d10a      	bne.n	8011b42 <xTaskPriorityInherit+0x8e>
 8011b2c:	68bb      	ldr	r3, [r7, #8]
 8011b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b30:	2201      	movs	r2, #1
 8011b32:	fa02 f303 	lsl.w	r3, r2, r3
 8011b36:	43da      	mvns	r2, r3
 8011b38:	4b1d      	ldr	r3, [pc, #116]	; (8011bb0 <xTaskPriorityInherit+0xfc>)
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	4013      	ands	r3, r2
 8011b3e:	4a1c      	ldr	r2, [pc, #112]	; (8011bb0 <xTaskPriorityInherit+0xfc>)
 8011b40:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011b42:	4b19      	ldr	r3, [pc, #100]	; (8011ba8 <xTaskPriorityInherit+0xf4>)
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b48:	68bb      	ldr	r3, [r7, #8]
 8011b4a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011b4c:	68bb      	ldr	r3, [r7, #8]
 8011b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b50:	2201      	movs	r2, #1
 8011b52:	409a      	lsls	r2, r3
 8011b54:	4b16      	ldr	r3, [pc, #88]	; (8011bb0 <xTaskPriorityInherit+0xfc>)
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	4313      	orrs	r3, r2
 8011b5a:	4a15      	ldr	r2, [pc, #84]	; (8011bb0 <xTaskPriorityInherit+0xfc>)
 8011b5c:	6013      	str	r3, [r2, #0]
 8011b5e:	68bb      	ldr	r3, [r7, #8]
 8011b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b62:	4613      	mov	r3, r2
 8011b64:	009b      	lsls	r3, r3, #2
 8011b66:	4413      	add	r3, r2
 8011b68:	009b      	lsls	r3, r3, #2
 8011b6a:	4a10      	ldr	r2, [pc, #64]	; (8011bac <xTaskPriorityInherit+0xf8>)
 8011b6c:	441a      	add	r2, r3
 8011b6e:	68bb      	ldr	r3, [r7, #8]
 8011b70:	3304      	adds	r3, #4
 8011b72:	4619      	mov	r1, r3
 8011b74:	4610      	mov	r0, r2
 8011b76:	f7fd fe46 	bl	800f806 <vListInsertEnd>
 8011b7a:	e004      	b.n	8011b86 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011b7c:	4b0a      	ldr	r3, [pc, #40]	; (8011ba8 <xTaskPriorityInherit+0xf4>)
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b82:	68bb      	ldr	r3, [r7, #8]
 8011b84:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011b86:	2301      	movs	r3, #1
 8011b88:	60fb      	str	r3, [r7, #12]
 8011b8a:	e008      	b.n	8011b9e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011b8c:	68bb      	ldr	r3, [r7, #8]
 8011b8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011b90:	4b05      	ldr	r3, [pc, #20]	; (8011ba8 <xTaskPriorityInherit+0xf4>)
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b96:	429a      	cmp	r2, r3
 8011b98:	d201      	bcs.n	8011b9e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011b9e:	68fb      	ldr	r3, [r7, #12]
	}
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	3710      	adds	r7, #16
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bd80      	pop	{r7, pc}
 8011ba8:	20008364 	.word	0x20008364
 8011bac:	20008368 	.word	0x20008368
 8011bb0:	2000846c 	.word	0x2000846c

08011bb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b086      	sub	sp, #24
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d070      	beq.n	8011cac <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011bca:	4b3b      	ldr	r3, [pc, #236]	; (8011cb8 <xTaskPriorityDisinherit+0x104>)
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	693a      	ldr	r2, [r7, #16]
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	d00b      	beq.n	8011bec <xTaskPriorityDisinherit+0x38>
 8011bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bd8:	b672      	cpsid	i
 8011bda:	f383 8811 	msr	BASEPRI, r3
 8011bde:	f3bf 8f6f 	isb	sy
 8011be2:	f3bf 8f4f 	dsb	sy
 8011be6:	b662      	cpsie	i
 8011be8:	60fb      	str	r3, [r7, #12]
 8011bea:	e7fe      	b.n	8011bea <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8011bec:	693b      	ldr	r3, [r7, #16]
 8011bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d10b      	bne.n	8011c0c <xTaskPriorityDisinherit+0x58>
 8011bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bf8:	b672      	cpsid	i
 8011bfa:	f383 8811 	msr	BASEPRI, r3
 8011bfe:	f3bf 8f6f 	isb	sy
 8011c02:	f3bf 8f4f 	dsb	sy
 8011c06:	b662      	cpsie	i
 8011c08:	60bb      	str	r3, [r7, #8]
 8011c0a:	e7fe      	b.n	8011c0a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8011c0c:	693b      	ldr	r3, [r7, #16]
 8011c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c10:	1e5a      	subs	r2, r3, #1
 8011c12:	693b      	ldr	r3, [r7, #16]
 8011c14:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c1a:	693b      	ldr	r3, [r7, #16]
 8011c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c1e:	429a      	cmp	r2, r3
 8011c20:	d044      	beq.n	8011cac <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011c22:	693b      	ldr	r3, [r7, #16]
 8011c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d140      	bne.n	8011cac <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c2a:	693b      	ldr	r3, [r7, #16]
 8011c2c:	3304      	adds	r3, #4
 8011c2e:	4618      	mov	r0, r3
 8011c30:	f7fd fe46 	bl	800f8c0 <uxListRemove>
 8011c34:	4603      	mov	r3, r0
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d115      	bne.n	8011c66 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011c3a:	693b      	ldr	r3, [r7, #16]
 8011c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c3e:	491f      	ldr	r1, [pc, #124]	; (8011cbc <xTaskPriorityDisinherit+0x108>)
 8011c40:	4613      	mov	r3, r2
 8011c42:	009b      	lsls	r3, r3, #2
 8011c44:	4413      	add	r3, r2
 8011c46:	009b      	lsls	r3, r3, #2
 8011c48:	440b      	add	r3, r1
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d10a      	bne.n	8011c66 <xTaskPriorityDisinherit+0xb2>
 8011c50:	693b      	ldr	r3, [r7, #16]
 8011c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c54:	2201      	movs	r2, #1
 8011c56:	fa02 f303 	lsl.w	r3, r2, r3
 8011c5a:	43da      	mvns	r2, r3
 8011c5c:	4b18      	ldr	r3, [pc, #96]	; (8011cc0 <xTaskPriorityDisinherit+0x10c>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	4013      	ands	r3, r2
 8011c62:	4a17      	ldr	r2, [pc, #92]	; (8011cc0 <xTaskPriorityDisinherit+0x10c>)
 8011c64:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011c66:	693b      	ldr	r3, [r7, #16]
 8011c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011c6a:	693b      	ldr	r3, [r7, #16]
 8011c6c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c6e:	693b      	ldr	r3, [r7, #16]
 8011c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c72:	f1c3 0207 	rsb	r2, r3, #7
 8011c76:	693b      	ldr	r3, [r7, #16]
 8011c78:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011c7a:	693b      	ldr	r3, [r7, #16]
 8011c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c7e:	2201      	movs	r2, #1
 8011c80:	409a      	lsls	r2, r3
 8011c82:	4b0f      	ldr	r3, [pc, #60]	; (8011cc0 <xTaskPriorityDisinherit+0x10c>)
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	4313      	orrs	r3, r2
 8011c88:	4a0d      	ldr	r2, [pc, #52]	; (8011cc0 <xTaskPriorityDisinherit+0x10c>)
 8011c8a:	6013      	str	r3, [r2, #0]
 8011c8c:	693b      	ldr	r3, [r7, #16]
 8011c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c90:	4613      	mov	r3, r2
 8011c92:	009b      	lsls	r3, r3, #2
 8011c94:	4413      	add	r3, r2
 8011c96:	009b      	lsls	r3, r3, #2
 8011c98:	4a08      	ldr	r2, [pc, #32]	; (8011cbc <xTaskPriorityDisinherit+0x108>)
 8011c9a:	441a      	add	r2, r3
 8011c9c:	693b      	ldr	r3, [r7, #16]
 8011c9e:	3304      	adds	r3, #4
 8011ca0:	4619      	mov	r1, r3
 8011ca2:	4610      	mov	r0, r2
 8011ca4:	f7fd fdaf 	bl	800f806 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011ca8:	2301      	movs	r3, #1
 8011caa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011cac:	697b      	ldr	r3, [r7, #20]
	}
 8011cae:	4618      	mov	r0, r3
 8011cb0:	3718      	adds	r7, #24
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	bd80      	pop	{r7, pc}
 8011cb6:	bf00      	nop
 8011cb8:	20008364 	.word	0x20008364
 8011cbc:	20008368 	.word	0x20008368
 8011cc0:	2000846c 	.word	0x2000846c

08011cc4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b088      	sub	sp, #32
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
 8011ccc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011cd2:	2301      	movs	r3, #1
 8011cd4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	f000 8085 	beq.w	8011de8 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011cde:	69bb      	ldr	r3, [r7, #24]
 8011ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d10b      	bne.n	8011cfe <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8011ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cea:	b672      	cpsid	i
 8011cec:	f383 8811 	msr	BASEPRI, r3
 8011cf0:	f3bf 8f6f 	isb	sy
 8011cf4:	f3bf 8f4f 	dsb	sy
 8011cf8:	b662      	cpsie	i
 8011cfa:	60fb      	str	r3, [r7, #12]
 8011cfc:	e7fe      	b.n	8011cfc <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011cfe:	69bb      	ldr	r3, [r7, #24]
 8011d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d02:	683a      	ldr	r2, [r7, #0]
 8011d04:	429a      	cmp	r2, r3
 8011d06:	d902      	bls.n	8011d0e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	61fb      	str	r3, [r7, #28]
 8011d0c:	e002      	b.n	8011d14 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011d0e:	69bb      	ldr	r3, [r7, #24]
 8011d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d12:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011d14:	69bb      	ldr	r3, [r7, #24]
 8011d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d18:	69fa      	ldr	r2, [r7, #28]
 8011d1a:	429a      	cmp	r2, r3
 8011d1c:	d064      	beq.n	8011de8 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011d1e:	69bb      	ldr	r3, [r7, #24]
 8011d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011d22:	697a      	ldr	r2, [r7, #20]
 8011d24:	429a      	cmp	r2, r3
 8011d26:	d15f      	bne.n	8011de8 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011d28:	4b31      	ldr	r3, [pc, #196]	; (8011df0 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	69ba      	ldr	r2, [r7, #24]
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	d10b      	bne.n	8011d4a <vTaskPriorityDisinheritAfterTimeout+0x86>
 8011d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d36:	b672      	cpsid	i
 8011d38:	f383 8811 	msr	BASEPRI, r3
 8011d3c:	f3bf 8f6f 	isb	sy
 8011d40:	f3bf 8f4f 	dsb	sy
 8011d44:	b662      	cpsie	i
 8011d46:	60bb      	str	r3, [r7, #8]
 8011d48:	e7fe      	b.n	8011d48 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011d4a:	69bb      	ldr	r3, [r7, #24]
 8011d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d4e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011d50:	69bb      	ldr	r3, [r7, #24]
 8011d52:	69fa      	ldr	r2, [r7, #28]
 8011d54:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011d56:	69bb      	ldr	r3, [r7, #24]
 8011d58:	699b      	ldr	r3, [r3, #24]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	db04      	blt.n	8011d68 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d5e:	69fb      	ldr	r3, [r7, #28]
 8011d60:	f1c3 0207 	rsb	r2, r3, #7
 8011d64:	69bb      	ldr	r3, [r7, #24]
 8011d66:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011d68:	69bb      	ldr	r3, [r7, #24]
 8011d6a:	6959      	ldr	r1, [r3, #20]
 8011d6c:	693a      	ldr	r2, [r7, #16]
 8011d6e:	4613      	mov	r3, r2
 8011d70:	009b      	lsls	r3, r3, #2
 8011d72:	4413      	add	r3, r2
 8011d74:	009b      	lsls	r3, r3, #2
 8011d76:	4a1f      	ldr	r2, [pc, #124]	; (8011df4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8011d78:	4413      	add	r3, r2
 8011d7a:	4299      	cmp	r1, r3
 8011d7c:	d134      	bne.n	8011de8 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d7e:	69bb      	ldr	r3, [r7, #24]
 8011d80:	3304      	adds	r3, #4
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7fd fd9c 	bl	800f8c0 <uxListRemove>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d115      	bne.n	8011dba <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011d8e:	69bb      	ldr	r3, [r7, #24]
 8011d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d92:	4918      	ldr	r1, [pc, #96]	; (8011df4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8011d94:	4613      	mov	r3, r2
 8011d96:	009b      	lsls	r3, r3, #2
 8011d98:	4413      	add	r3, r2
 8011d9a:	009b      	lsls	r3, r3, #2
 8011d9c:	440b      	add	r3, r1
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d10a      	bne.n	8011dba <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8011da4:	69bb      	ldr	r3, [r7, #24]
 8011da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011da8:	2201      	movs	r2, #1
 8011daa:	fa02 f303 	lsl.w	r3, r2, r3
 8011dae:	43da      	mvns	r2, r3
 8011db0:	4b11      	ldr	r3, [pc, #68]	; (8011df8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	4013      	ands	r3, r2
 8011db6:	4a10      	ldr	r2, [pc, #64]	; (8011df8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8011db8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011dba:	69bb      	ldr	r3, [r7, #24]
 8011dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dbe:	2201      	movs	r2, #1
 8011dc0:	409a      	lsls	r2, r3
 8011dc2:	4b0d      	ldr	r3, [pc, #52]	; (8011df8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	4313      	orrs	r3, r2
 8011dc8:	4a0b      	ldr	r2, [pc, #44]	; (8011df8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8011dca:	6013      	str	r3, [r2, #0]
 8011dcc:	69bb      	ldr	r3, [r7, #24]
 8011dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dd0:	4613      	mov	r3, r2
 8011dd2:	009b      	lsls	r3, r3, #2
 8011dd4:	4413      	add	r3, r2
 8011dd6:	009b      	lsls	r3, r3, #2
 8011dd8:	4a06      	ldr	r2, [pc, #24]	; (8011df4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8011dda:	441a      	add	r2, r3
 8011ddc:	69bb      	ldr	r3, [r7, #24]
 8011dde:	3304      	adds	r3, #4
 8011de0:	4619      	mov	r1, r3
 8011de2:	4610      	mov	r0, r2
 8011de4:	f7fd fd0f 	bl	800f806 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011de8:	bf00      	nop
 8011dea:	3720      	adds	r7, #32
 8011dec:	46bd      	mov	sp, r7
 8011dee:	bd80      	pop	{r7, pc}
 8011df0:	20008364 	.word	0x20008364
 8011df4:	20008368 	.word	0x20008368
 8011df8:	2000846c 	.word	0x2000846c

08011dfc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011dfc:	b480      	push	{r7}
 8011dfe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011e00:	4b07      	ldr	r3, [pc, #28]	; (8011e20 <pvTaskIncrementMutexHeldCount+0x24>)
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d004      	beq.n	8011e12 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011e08:	4b05      	ldr	r3, [pc, #20]	; (8011e20 <pvTaskIncrementMutexHeldCount+0x24>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011e0e:	3201      	adds	r2, #1
 8011e10:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8011e12:	4b03      	ldr	r3, [pc, #12]	; (8011e20 <pvTaskIncrementMutexHeldCount+0x24>)
 8011e14:	681b      	ldr	r3, [r3, #0]
	}
 8011e16:	4618      	mov	r0, r3
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1e:	4770      	bx	lr
 8011e20:	20008364 	.word	0x20008364

08011e24 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b084      	sub	sp, #16
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
 8011e2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011e2e:	4b29      	ldr	r3, [pc, #164]	; (8011ed4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e34:	4b28      	ldr	r3, [pc, #160]	; (8011ed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	3304      	adds	r3, #4
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7fd fd40 	bl	800f8c0 <uxListRemove>
 8011e40:	4603      	mov	r3, r0
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d10b      	bne.n	8011e5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011e46:	4b24      	ldr	r3, [pc, #144]	; (8011ed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e4c:	2201      	movs	r2, #1
 8011e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8011e52:	43da      	mvns	r2, r3
 8011e54:	4b21      	ldr	r3, [pc, #132]	; (8011edc <prvAddCurrentTaskToDelayedList+0xb8>)
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	4013      	ands	r3, r2
 8011e5a:	4a20      	ldr	r2, [pc, #128]	; (8011edc <prvAddCurrentTaskToDelayedList+0xb8>)
 8011e5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e64:	d10a      	bne.n	8011e7c <prvAddCurrentTaskToDelayedList+0x58>
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d007      	beq.n	8011e7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011e6c:	4b1a      	ldr	r3, [pc, #104]	; (8011ed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	3304      	adds	r3, #4
 8011e72:	4619      	mov	r1, r3
 8011e74:	481a      	ldr	r0, [pc, #104]	; (8011ee0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011e76:	f7fd fcc6 	bl	800f806 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011e7a:	e026      	b.n	8011eca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011e7c:	68fa      	ldr	r2, [r7, #12]
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	4413      	add	r3, r2
 8011e82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011e84:	4b14      	ldr	r3, [pc, #80]	; (8011ed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	68ba      	ldr	r2, [r7, #8]
 8011e8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011e8c:	68ba      	ldr	r2, [r7, #8]
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	429a      	cmp	r2, r3
 8011e92:	d209      	bcs.n	8011ea8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011e94:	4b13      	ldr	r3, [pc, #76]	; (8011ee4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011e96:	681a      	ldr	r2, [r3, #0]
 8011e98:	4b0f      	ldr	r3, [pc, #60]	; (8011ed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	3304      	adds	r3, #4
 8011e9e:	4619      	mov	r1, r3
 8011ea0:	4610      	mov	r0, r2
 8011ea2:	f7fd fcd4 	bl	800f84e <vListInsert>
}
 8011ea6:	e010      	b.n	8011eca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011ea8:	4b0f      	ldr	r3, [pc, #60]	; (8011ee8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011eaa:	681a      	ldr	r2, [r3, #0]
 8011eac:	4b0a      	ldr	r3, [pc, #40]	; (8011ed8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	3304      	adds	r3, #4
 8011eb2:	4619      	mov	r1, r3
 8011eb4:	4610      	mov	r0, r2
 8011eb6:	f7fd fcca 	bl	800f84e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011eba:	4b0c      	ldr	r3, [pc, #48]	; (8011eec <prvAddCurrentTaskToDelayedList+0xc8>)
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	68ba      	ldr	r2, [r7, #8]
 8011ec0:	429a      	cmp	r2, r3
 8011ec2:	d202      	bcs.n	8011eca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011ec4:	4a09      	ldr	r2, [pc, #36]	; (8011eec <prvAddCurrentTaskToDelayedList+0xc8>)
 8011ec6:	68bb      	ldr	r3, [r7, #8]
 8011ec8:	6013      	str	r3, [r2, #0]
}
 8011eca:	bf00      	nop
 8011ecc:	3710      	adds	r7, #16
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	bd80      	pop	{r7, pc}
 8011ed2:	bf00      	nop
 8011ed4:	20008468 	.word	0x20008468
 8011ed8:	20008364 	.word	0x20008364
 8011edc:	2000846c 	.word	0x2000846c
 8011ee0:	20008450 	.word	0x20008450
 8011ee4:	20008420 	.word	0x20008420
 8011ee8:	2000841c 	.word	0x2000841c
 8011eec:	20008484 	.word	0x20008484

08011ef0 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b084      	sub	sp, #16
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
 8011ef8:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	330c      	adds	r3, #12
 8011f00:	461a      	mov	r2, r3
 8011f02:	6839      	ldr	r1, [r7, #0]
 8011f04:	6878      	ldr	r0, [r7, #4]
 8011f06:	f00e fefb 	bl	8020d00 <tcpip_send_msg_wait_sem>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8011f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d103      	bne.n	8011f1e <netconn_apimsg+0x2e>
    return apimsg->err;
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011f1c:	e001      	b.n	8011f22 <netconn_apimsg+0x32>
  }
  return err;
 8011f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011f22:	4618      	mov	r0, r3
 8011f24:	3710      	adds	r7, #16
 8011f26:	46bd      	mov	sp, r7
 8011f28:	bd80      	pop	{r7, pc}
	...

08011f2c <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b08c      	sub	sp, #48	; 0x30
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	4603      	mov	r3, r0
 8011f34:	603a      	str	r2, [r7, #0]
 8011f36:	71fb      	strb	r3, [r7, #7]
 8011f38:	460b      	mov	r3, r1
 8011f3a:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8011f3c:	79fb      	ldrb	r3, [r7, #7]
 8011f3e:	6839      	ldr	r1, [r7, #0]
 8011f40:	4618      	mov	r0, r3
 8011f42:	f001 f84d 	bl	8012fe0 <netconn_alloc>
 8011f46:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8011f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d054      	beq.n	8011ff8 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8011f4e:	79bb      	ldrb	r3, [r7, #6]
 8011f50:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8011f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f54:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8011f56:	f107 0308 	add.w	r3, r7, #8
 8011f5a:	4619      	mov	r1, r3
 8011f5c:	4829      	ldr	r0, [pc, #164]	; (8012004 <netconn_new_with_proto_and_callback+0xd8>)
 8011f5e:	f7ff ffc7 	bl	8011ef0 <netconn_apimsg>
 8011f62:	4603      	mov	r3, r0
 8011f64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8011f68:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d043      	beq.n	8011ff8 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8011f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f72:	685b      	ldr	r3, [r3, #4]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d005      	beq.n	8011f84 <netconn_new_with_proto_and_callback+0x58>
 8011f78:	4b23      	ldr	r3, [pc, #140]	; (8012008 <netconn_new_with_proto_and_callback+0xdc>)
 8011f7a:	22a3      	movs	r2, #163	; 0xa3
 8011f7c:	4923      	ldr	r1, [pc, #140]	; (801200c <netconn_new_with_proto_and_callback+0xe0>)
 8011f7e:	4824      	ldr	r0, [pc, #144]	; (8012010 <netconn_new_with_proto_and_callback+0xe4>)
 8011f80:	f012 f832 	bl	8023fe8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8011f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f86:	3310      	adds	r3, #16
 8011f88:	4618      	mov	r0, r3
 8011f8a:	f008 fbca 	bl	801a722 <sys_mbox_valid>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d105      	bne.n	8011fa0 <netconn_new_with_proto_and_callback+0x74>
 8011f94:	4b1c      	ldr	r3, [pc, #112]	; (8012008 <netconn_new_with_proto_and_callback+0xdc>)
 8011f96:	22a4      	movs	r2, #164	; 0xa4
 8011f98:	491e      	ldr	r1, [pc, #120]	; (8012014 <netconn_new_with_proto_and_callback+0xe8>)
 8011f9a:	481d      	ldr	r0, [pc, #116]	; (8012010 <netconn_new_with_proto_and_callback+0xe4>)
 8011f9c:	f012 f824 	bl	8023fe8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8011fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fa2:	3314      	adds	r3, #20
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f008 fbbc 	bl	801a722 <sys_mbox_valid>
 8011faa:	4603      	mov	r3, r0
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d005      	beq.n	8011fbc <netconn_new_with_proto_and_callback+0x90>
 8011fb0:	4b15      	ldr	r3, [pc, #84]	; (8012008 <netconn_new_with_proto_and_callback+0xdc>)
 8011fb2:	22a6      	movs	r2, #166	; 0xa6
 8011fb4:	4918      	ldr	r1, [pc, #96]	; (8012018 <netconn_new_with_proto_and_callback+0xec>)
 8011fb6:	4816      	ldr	r0, [pc, #88]	; (8012010 <netconn_new_with_proto_and_callback+0xe4>)
 8011fb8:	f012 f816 	bl	8023fe8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8011fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fbe:	330c      	adds	r3, #12
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f008 fc3f 	bl	801a844 <sys_sem_valid>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d105      	bne.n	8011fd8 <netconn_new_with_proto_and_callback+0xac>
 8011fcc:	4b0e      	ldr	r3, [pc, #56]	; (8012008 <netconn_new_with_proto_and_callback+0xdc>)
 8011fce:	22a9      	movs	r2, #169	; 0xa9
 8011fd0:	4912      	ldr	r1, [pc, #72]	; (801201c <netconn_new_with_proto_and_callback+0xf0>)
 8011fd2:	480f      	ldr	r0, [pc, #60]	; (8012010 <netconn_new_with_proto_and_callback+0xe4>)
 8011fd4:	f012 f808 	bl	8023fe8 <iprintf>
      sys_sem_free(&conn->op_completed);
 8011fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fda:	330c      	adds	r3, #12
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f008 fc24 	bl	801a82a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8011fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fe4:	3310      	adds	r3, #16
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f008 fb14 	bl	801a614 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8011fec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011fee:	2007      	movs	r0, #7
 8011ff0:	f007 f852 	bl	8019098 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	e000      	b.n	8011ffa <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8011ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	3730      	adds	r7, #48	; 0x30
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}
 8012002:	bf00      	nop
 8012004:	08012fb5 	.word	0x08012fb5
 8012008:	08024de0 	.word	0x08024de0
 801200c:	08024e30 	.word	0x08024e30
 8012010:	08024e54 	.word	0x08024e54
 8012014:	08024e7c 	.word	0x08024e7c
 8012018:	08024e94 	.word	0x08024e94
 801201c:	08024eb8 	.word	0x08024eb8

08012020 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b08c      	sub	sp, #48	; 0x30
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d101      	bne.n	8012032 <netconn_prepare_delete+0x12>
    return ERR_OK;
 801202e:	2300      	movs	r3, #0
 8012030:	e014      	b.n	801205c <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8012036:	2329      	movs	r3, #41	; 0x29
 8012038:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 801203a:	f107 030c 	add.w	r3, r7, #12
 801203e:	4619      	mov	r1, r3
 8012040:	4808      	ldr	r0, [pc, #32]	; (8012064 <netconn_prepare_delete+0x44>)
 8012042:	f7ff ff55 	bl	8011ef0 <netconn_apimsg>
 8012046:	4603      	mov	r3, r0
 8012048:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 801204c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8012050:	2b00      	cmp	r3, #0
 8012052:	d002      	beq.n	801205a <netconn_prepare_delete+0x3a>
    return err;
 8012054:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8012058:	e000      	b.n	801205c <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 801205a:	2300      	movs	r3, #0
}
 801205c:	4618      	mov	r0, r3
 801205e:	3730      	adds	r7, #48	; 0x30
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}
 8012064:	08013519 	.word	0x08013519

08012068 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b084      	sub	sp, #16
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d101      	bne.n	801207a <netconn_delete+0x12>
    return ERR_OK;
 8012076:	2300      	movs	r3, #0
 8012078:	e00d      	b.n	8012096 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f7ff ffd0 	bl	8012020 <netconn_prepare_delete>
 8012080:	4603      	mov	r3, r0
 8012082:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8012084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d102      	bne.n	8012092 <netconn_delete+0x2a>
    netconn_free(conn);
 801208c:	6878      	ldr	r0, [r7, #4]
 801208e:	f001 f815 	bl	80130bc <netconn_free>
  }
  return err;
 8012092:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012096:	4618      	mov	r0, r3
 8012098:	3710      	adds	r7, #16
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}
	...

080120a0 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b08e      	sub	sp, #56	; 0x38
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	60f8      	str	r0, [r7, #12]
 80120a8:	60b9      	str	r1, [r7, #8]
 80120aa:	4613      	mov	r3, r2
 80120ac:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d109      	bne.n	80120c8 <netconn_bind+0x28>
 80120b4:	4b11      	ldr	r3, [pc, #68]	; (80120fc <netconn_bind+0x5c>)
 80120b6:	f44f 729c 	mov.w	r2, #312	; 0x138
 80120ba:	4911      	ldr	r1, [pc, #68]	; (8012100 <netconn_bind+0x60>)
 80120bc:	4811      	ldr	r0, [pc, #68]	; (8012104 <netconn_bind+0x64>)
 80120be:	f011 ff93 	bl	8023fe8 <iprintf>
 80120c2:	f06f 030f 	mvn.w	r3, #15
 80120c6:	e015      	b.n	80120f4 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80120c8:	68bb      	ldr	r3, [r7, #8]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d101      	bne.n	80120d2 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80120ce:	4b0e      	ldr	r3, [pc, #56]	; (8012108 <netconn_bind+0x68>)
 80120d0:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80120d6:	68bb      	ldr	r3, [r7, #8]
 80120d8:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80120da:	88fb      	ldrh	r3, [r7, #6]
 80120dc:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80120de:	f107 0314 	add.w	r3, r7, #20
 80120e2:	4619      	mov	r1, r3
 80120e4:	4809      	ldr	r0, [pc, #36]	; (801210c <netconn_bind+0x6c>)
 80120e6:	f7ff ff03 	bl	8011ef0 <netconn_apimsg>
 80120ea:	4603      	mov	r3, r0
 80120ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80120f0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80120f4:	4618      	mov	r0, r3
 80120f6:	3738      	adds	r7, #56	; 0x38
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bd80      	pop	{r7, pc}
 80120fc:	08024de0 	.word	0x08024de0
 8012100:	08024f34 	.word	0x08024f34
 8012104:	08024e54 	.word	0x08024e54
 8012108:	08028a28 	.word	0x08028a28
 801210c:	080136e1 	.word	0x080136e1

08012110 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b08c      	sub	sp, #48	; 0x30
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
 8012118:	460b      	mov	r3, r1
 801211a:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d109      	bne.n	8012136 <netconn_listen_with_backlog+0x26>
 8012122:	4b0d      	ldr	r3, [pc, #52]	; (8012158 <netconn_listen_with_backlog+0x48>)
 8012124:	f240 12bb 	movw	r2, #443	; 0x1bb
 8012128:	490c      	ldr	r1, [pc, #48]	; (801215c <netconn_listen_with_backlog+0x4c>)
 801212a:	480d      	ldr	r0, [pc, #52]	; (8012160 <netconn_listen_with_backlog+0x50>)
 801212c:	f011 ff5c 	bl	8023fe8 <iprintf>
 8012130:	f06f 030f 	mvn.w	r3, #15
 8012134:	e00c      	b.n	8012150 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 801213a:	f107 030c 	add.w	r3, r7, #12
 801213e:	4619      	mov	r1, r3
 8012140:	4808      	ldr	r0, [pc, #32]	; (8012164 <netconn_listen_with_backlog+0x54>)
 8012142:	f7ff fed5 	bl	8011ef0 <netconn_apimsg>
 8012146:	4603      	mov	r3, r0
 8012148:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 801214c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8012150:	4618      	mov	r0, r3
 8012152:	3730      	adds	r7, #48	; 0x30
 8012154:	46bd      	mov	sp, r7
 8012156:	bd80      	pop	{r7, pc}
 8012158:	08024de0 	.word	0x08024de0
 801215c:	08024fb4 	.word	0x08024fb4
 8012160:	08024e54 	.word	0x08024e54
 8012164:	08013759 	.word	0x08013759

08012168 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b086      	sub	sp, #24
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
 8012170:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8012172:	683b      	ldr	r3, [r7, #0]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d109      	bne.n	801218c <netconn_accept+0x24>
 8012178:	4b3d      	ldr	r3, [pc, #244]	; (8012270 <netconn_accept+0x108>)
 801217a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801217e:	493d      	ldr	r1, [pc, #244]	; (8012274 <netconn_accept+0x10c>)
 8012180:	483d      	ldr	r0, [pc, #244]	; (8012278 <netconn_accept+0x110>)
 8012182:	f011 ff31 	bl	8023fe8 <iprintf>
 8012186:	f06f 030f 	mvn.w	r3, #15
 801218a:	e06c      	b.n	8012266 <netconn_accept+0xfe>
  *new_conn = NULL;
 801218c:	683b      	ldr	r3, [r7, #0]
 801218e:	2200      	movs	r2, #0
 8012190:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d109      	bne.n	80121ac <netconn_accept+0x44>
 8012198:	4b35      	ldr	r3, [pc, #212]	; (8012270 <netconn_accept+0x108>)
 801219a:	f240 12e3 	movw	r2, #483	; 0x1e3
 801219e:	4937      	ldr	r1, [pc, #220]	; (801227c <netconn_accept+0x114>)
 80121a0:	4835      	ldr	r0, [pc, #212]	; (8012278 <netconn_accept+0x110>)
 80121a2:	f011 ff21 	bl	8023fe8 <iprintf>
 80121a6:	f06f 030f 	mvn.w	r3, #15
 80121aa:	e05c      	b.n	8012266 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80121ac:	6878      	ldr	r0, [r7, #4]
 80121ae:	f000 fa9a 	bl	80126e6 <netconn_err>
 80121b2:	4603      	mov	r3, r0
 80121b4:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80121b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d002      	beq.n	80121c4 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80121be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80121c2:	e050      	b.n	8012266 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	3314      	adds	r3, #20
 80121c8:	4618      	mov	r0, r3
 80121ca:	f008 faaa 	bl	801a722 <sys_mbox_valid>
 80121ce:	4603      	mov	r3, r0
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d005      	beq.n	80121e0 <netconn_accept+0x78>
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	7f1b      	ldrb	r3, [r3, #28]
 80121d8:	f003 0301 	and.w	r3, r3, #1
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d002      	beq.n	80121e6 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 80121e0:	f06f 030e 	mvn.w	r3, #14
 80121e4:	e03f      	b.n	8012266 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	7f1b      	ldrb	r3, [r3, #28]
 80121ea:	f003 0302 	and.w	r3, r3, #2
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d00e      	beq.n	8012210 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	3314      	adds	r3, #20
 80121f6:	f107 020c 	add.w	r2, r7, #12
 80121fa:	4611      	mov	r1, r2
 80121fc:	4618      	mov	r0, r3
 80121fe:	f008 fa74 	bl	801a6ea <sys_arch_mbox_tryfetch>
 8012202:	4603      	mov	r3, r0
 8012204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012208:	d10a      	bne.n	8012220 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 801220a:	f06f 0306 	mvn.w	r3, #6
 801220e:	e02a      	b.n	8012266 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	3314      	adds	r3, #20
 8012214:	f107 010c 	add.w	r1, r7, #12
 8012218:	2200      	movs	r2, #0
 801221a:	4618      	mov	r0, r3
 801221c:	f008 fa26 	bl	801a66c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012224:	2b00      	cmp	r3, #0
 8012226:	d005      	beq.n	8012234 <netconn_accept+0xcc>
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801222c:	2200      	movs	r2, #0
 801222e:	2101      	movs	r1, #1
 8012230:	6878      	ldr	r0, [r7, #4]
 8012232:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	f107 0213 	add.w	r2, r7, #19
 801223a:	4611      	mov	r1, r2
 801223c:	4618      	mov	r0, r3
 801223e:	f000 fa9f 	bl	8012780 <lwip_netconn_is_err_msg>
 8012242:	4603      	mov	r3, r0
 8012244:	2b00      	cmp	r3, #0
 8012246:	d002      	beq.n	801224e <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8012248:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801224c:	e00b      	b.n	8012266 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d102      	bne.n	801225a <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8012254:	f06f 030e 	mvn.w	r3, #14
 8012258:	e005      	b.n	8012266 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 801225e:	683b      	ldr	r3, [r7, #0]
 8012260:	697a      	ldr	r2, [r7, #20]
 8012262:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8012264:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8012266:	4618      	mov	r0, r3
 8012268:	3718      	adds	r7, #24
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}
 801226e:	bf00      	nop
 8012270:	08024de0 	.word	0x08024de0
 8012274:	08024fd4 	.word	0x08024fd4
 8012278:	08024e54 	.word	0x08024e54
 801227c:	08024ff4 	.word	0x08024ff4

08012280 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b088      	sub	sp, #32
 8012284:	af00      	add	r7, sp, #0
 8012286:	60f8      	str	r0, [r7, #12]
 8012288:	60b9      	str	r1, [r7, #8]
 801228a:	4613      	mov	r3, r2
 801228c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 801228e:	2300      	movs	r3, #0
 8012290:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8012292:	68bb      	ldr	r3, [r7, #8]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d109      	bne.n	80122ac <netconn_recv_data+0x2c>
 8012298:	4b58      	ldr	r3, [pc, #352]	; (80123fc <netconn_recv_data+0x17c>)
 801229a:	f44f 7212 	mov.w	r2, #584	; 0x248
 801229e:	4958      	ldr	r1, [pc, #352]	; (8012400 <netconn_recv_data+0x180>)
 80122a0:	4858      	ldr	r0, [pc, #352]	; (8012404 <netconn_recv_data+0x184>)
 80122a2:	f011 fea1 	bl	8023fe8 <iprintf>
 80122a6:	f06f 030f 	mvn.w	r3, #15
 80122aa:	e0a2      	b.n	80123f2 <netconn_recv_data+0x172>
  *new_buf = NULL;
 80122ac:	68bb      	ldr	r3, [r7, #8]
 80122ae:	2200      	movs	r2, #0
 80122b0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d109      	bne.n	80122cc <netconn_recv_data+0x4c>
 80122b8:	4b50      	ldr	r3, [pc, #320]	; (80123fc <netconn_recv_data+0x17c>)
 80122ba:	f240 224a 	movw	r2, #586	; 0x24a
 80122be:	4952      	ldr	r1, [pc, #328]	; (8012408 <netconn_recv_data+0x188>)
 80122c0:	4850      	ldr	r0, [pc, #320]	; (8012404 <netconn_recv_data+0x184>)
 80122c2:	f011 fe91 	bl	8023fe8 <iprintf>
 80122c6:	f06f 030f 	mvn.w	r3, #15
 80122ca:	e092      	b.n	80123f2 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	3310      	adds	r3, #16
 80122d0:	4618      	mov	r0, r3
 80122d2:	f008 fa26 	bl	801a722 <sys_mbox_valid>
 80122d6:	4603      	mov	r3, r0
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d10e      	bne.n	80122fa <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80122dc:	68f8      	ldr	r0, [r7, #12]
 80122de:	f000 fa02 	bl	80126e6 <netconn_err>
 80122e2:	4603      	mov	r3, r0
 80122e4:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80122e6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d002      	beq.n	80122f4 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80122ee:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80122f2:	e07e      	b.n	80123f2 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80122f4:	f06f 030a 	mvn.w	r3, #10
 80122f8:	e07b      	b.n	80123f2 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	7f1b      	ldrb	r3, [r3, #28]
 80122fe:	f003 0302 	and.w	r3, r3, #2
 8012302:	2b00      	cmp	r3, #0
 8012304:	d10f      	bne.n	8012326 <netconn_recv_data+0xa6>
 8012306:	79fb      	ldrb	r3, [r7, #7]
 8012308:	f003 0304 	and.w	r3, r3, #4
 801230c:	2b00      	cmp	r3, #0
 801230e:	d10a      	bne.n	8012326 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	7f1b      	ldrb	r3, [r3, #28]
 8012314:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8012318:	2b00      	cmp	r3, #0
 801231a:	d104      	bne.n	8012326 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d023      	beq.n	801236e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	3310      	adds	r3, #16
 801232a:	f107 0218 	add.w	r2, r7, #24
 801232e:	4611      	mov	r1, r2
 8012330:	4618      	mov	r0, r3
 8012332:	f008 f9da 	bl	801a6ea <sys_arch_mbox_tryfetch>
 8012336:	4603      	mov	r3, r0
 8012338:	f1b3 3fff 	cmp.w	r3, #4294967295
 801233c:	d11f      	bne.n	801237e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 801233e:	68f8      	ldr	r0, [r7, #12]
 8012340:	f000 f9d1 	bl	80126e6 <netconn_err>
 8012344:	4603      	mov	r3, r0
 8012346:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8012348:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d002      	beq.n	8012356 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8012350:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8012354:	e04d      	b.n	80123f2 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	7f1b      	ldrb	r3, [r3, #28]
 801235a:	f003 0301 	and.w	r3, r3, #1
 801235e:	2b00      	cmp	r3, #0
 8012360:	d002      	beq.n	8012368 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8012362:	f06f 030a 	mvn.w	r3, #10
 8012366:	e044      	b.n	80123f2 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8012368:	f06f 0306 	mvn.w	r3, #6
 801236c:	e041      	b.n	80123f2 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	3310      	adds	r3, #16
 8012372:	f107 0118 	add.w	r1, r7, #24
 8012376:	2200      	movs	r2, #0
 8012378:	4618      	mov	r0, r3
 801237a:	f008 f977 	bl	801a66c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	781b      	ldrb	r3, [r3, #0]
 8012382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012386:	2b10      	cmp	r3, #16
 8012388:	d117      	bne.n	80123ba <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 801238a:	69bb      	ldr	r3, [r7, #24]
 801238c:	f107 0217 	add.w	r2, r7, #23
 8012390:	4611      	mov	r1, r2
 8012392:	4618      	mov	r0, r3
 8012394:	f000 f9f4 	bl	8012780 <lwip_netconn_is_err_msg>
 8012398:	4603      	mov	r3, r0
 801239a:	2b00      	cmp	r3, #0
 801239c:	d009      	beq.n	80123b2 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 801239e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80123a2:	f113 0f0f 	cmn.w	r3, #15
 80123a6:	d101      	bne.n	80123ac <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80123a8:	2300      	movs	r3, #0
 80123aa:	e022      	b.n	80123f2 <netconn_recv_data+0x172>
      }
      return err;
 80123ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80123b0:	e01f      	b.n	80123f2 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80123b2:	69bb      	ldr	r3, [r7, #24]
 80123b4:	891b      	ldrh	r3, [r3, #8]
 80123b6:	83fb      	strh	r3, [r7, #30]
 80123b8:	e00d      	b.n	80123d6 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80123ba:	69bb      	ldr	r3, [r7, #24]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d106      	bne.n	80123ce <netconn_recv_data+0x14e>
 80123c0:	4b0e      	ldr	r3, [pc, #56]	; (80123fc <netconn_recv_data+0x17c>)
 80123c2:	f240 2291 	movw	r2, #657	; 0x291
 80123c6:	4911      	ldr	r1, [pc, #68]	; (801240c <netconn_recv_data+0x18c>)
 80123c8:	480e      	ldr	r0, [pc, #56]	; (8012404 <netconn_recv_data+0x184>)
 80123ca:	f011 fe0d 	bl	8023fe8 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80123ce:	69bb      	ldr	r3, [r7, #24]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	891b      	ldrh	r3, [r3, #8]
 80123d4:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d005      	beq.n	80123ea <netconn_recv_data+0x16a>
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123e2:	8bfa      	ldrh	r2, [r7, #30]
 80123e4:	2101      	movs	r1, #1
 80123e6:	68f8      	ldr	r0, [r7, #12]
 80123e8:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80123ea:	69ba      	ldr	r2, [r7, #24]
 80123ec:	68bb      	ldr	r3, [r7, #8]
 80123ee:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80123f0:	2300      	movs	r3, #0
}
 80123f2:	4618      	mov	r0, r3
 80123f4:	3720      	adds	r7, #32
 80123f6:	46bd      	mov	sp, r7
 80123f8:	bd80      	pop	{r7, pc}
 80123fa:	bf00      	nop
 80123fc:	08024de0 	.word	0x08024de0
 8012400:	08025014 	.word	0x08025014
 8012404:	08024e54 	.word	0x08024e54
 8012408:	08025034 	.word	0x08025034
 801240c:	08025050 	.word	0x08025050

08012410 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b084      	sub	sp, #16
 8012414:	af00      	add	r7, sp, #0
 8012416:	60f8      	str	r0, [r7, #12]
 8012418:	60b9      	str	r1, [r7, #8]
 801241a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d005      	beq.n	801242e <netconn_tcp_recvd_msg+0x1e>
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	781b      	ldrb	r3, [r3, #0]
 8012426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801242a:	2b10      	cmp	r3, #16
 801242c:	d009      	beq.n	8012442 <netconn_tcp_recvd_msg+0x32>
 801242e:	4b0c      	ldr	r3, [pc, #48]	; (8012460 <netconn_tcp_recvd_msg+0x50>)
 8012430:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012434:	490b      	ldr	r1, [pc, #44]	; (8012464 <netconn_tcp_recvd_msg+0x54>)
 8012436:	480c      	ldr	r0, [pc, #48]	; (8012468 <netconn_tcp_recvd_msg+0x58>)
 8012438:	f011 fdd6 	bl	8023fe8 <iprintf>
 801243c:	f06f 030f 	mvn.w	r3, #15
 8012440:	e00a      	b.n	8012458 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	68fa      	ldr	r2, [r7, #12]
 8012446:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	68ba      	ldr	r2, [r7, #8]
 801244c:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 801244e:	6879      	ldr	r1, [r7, #4]
 8012450:	4806      	ldr	r0, [pc, #24]	; (801246c <netconn_tcp_recvd_msg+0x5c>)
 8012452:	f7ff fd4d 	bl	8011ef0 <netconn_apimsg>
 8012456:	4603      	mov	r3, r0
}
 8012458:	4618      	mov	r0, r3
 801245a:	3710      	adds	r7, #16
 801245c:	46bd      	mov	sp, r7
 801245e:	bd80      	pop	{r7, pc}
 8012460:	08024de0 	.word	0x08024de0
 8012464:	0802505c 	.word	0x0802505c
 8012468:	08024e54 	.word	0x08024e54
 801246c:	08013889 	.word	0x08013889

08012470 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b090      	sub	sp, #64	; 0x40
 8012474:	af00      	add	r7, sp, #0
 8012476:	60f8      	str	r0, [r7, #12]
 8012478:	60b9      	str	r1, [r7, #8]
 801247a:	4613      	mov	r3, r2
 801247c:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	3310      	adds	r3, #16
 8012482:	4618      	mov	r0, r3
 8012484:	f008 f94d 	bl	801a722 <sys_mbox_valid>
 8012488:	4603      	mov	r3, r0
 801248a:	2b00      	cmp	r3, #0
 801248c:	d102      	bne.n	8012494 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 801248e:	f06f 030a 	mvn.w	r3, #10
 8012492:	e06d      	b.n	8012570 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	7f1b      	ldrb	r3, [r3, #28]
 8012498:	b25b      	sxtb	r3, r3
 801249a:	2b00      	cmp	r3, #0
 801249c:	da07      	bge.n	80124ae <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	7f1b      	ldrb	r3, [r3, #28]
 80124a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80124a6:	b2da      	uxtb	r2, r3
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80124ac:	e039      	b.n	8012522 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80124ae:	79fb      	ldrb	r3, [r7, #7]
 80124b0:	461a      	mov	r2, r3
 80124b2:	68b9      	ldr	r1, [r7, #8]
 80124b4:	68f8      	ldr	r0, [r7, #12]
 80124b6:	f7ff fee3 	bl	8012280 <netconn_recv_data>
 80124ba:	4603      	mov	r3, r0
 80124bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80124c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d002      	beq.n	80124ce <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80124c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80124cc:	e050      	b.n	8012570 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80124ce:	68bb      	ldr	r3, [r7, #8]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80124d4:	79fb      	ldrb	r3, [r7, #7]
 80124d6:	f003 0308 	and.w	r3, r3, #8
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d10e      	bne.n	80124fc <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80124de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d002      	beq.n	80124ea <netconn_recv_data_tcp+0x7a>
 80124e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124e6:	891b      	ldrh	r3, [r3, #8]
 80124e8:	e000      	b.n	80124ec <netconn_recv_data_tcp+0x7c>
 80124ea:	2301      	movs	r3, #1
 80124ec:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80124ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80124f0:	f107 0214 	add.w	r2, r7, #20
 80124f4:	4619      	mov	r1, r3
 80124f6:	68f8      	ldr	r0, [r7, #12]
 80124f8:	f7ff ff8a 	bl	8012410 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80124fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d134      	bne.n	801256c <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8012502:	79fb      	ldrb	r3, [r7, #7]
 8012504:	f003 0310 	and.w	r3, r3, #16
 8012508:	2b00      	cmp	r3, #0
 801250a:	d009      	beq.n	8012520 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	7f1b      	ldrb	r3, [r3, #28]
 8012510:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012514:	b2da      	uxtb	r2, r3
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 801251a:	f06f 0306 	mvn.w	r3, #6
 801251e:	e027      	b.n	8012570 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8012520:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012526:	2b00      	cmp	r3, #0
 8012528:	d005      	beq.n	8012536 <netconn_recv_data_tcp+0xc6>
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801252e:	2200      	movs	r2, #0
 8012530:	2101      	movs	r1, #1
 8012532:	68f8      	ldr	r0, [r7, #12]
 8012534:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	685b      	ldr	r3, [r3, #4]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d10f      	bne.n	801255e <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 801253e:	68f8      	ldr	r0, [r7, #12]
 8012540:	f000 f8d1 	bl	80126e6 <netconn_err>
 8012544:	4603      	mov	r3, r0
 8012546:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 801254a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801254e:	2b00      	cmp	r3, #0
 8012550:	d002      	beq.n	8012558 <netconn_recv_data_tcp+0xe8>
          return err;
 8012552:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012556:	e00b      	b.n	8012570 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8012558:	f06f 030d 	mvn.w	r3, #13
 801255c:	e008      	b.n	8012570 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 801255e:	2101      	movs	r1, #1
 8012560:	68f8      	ldr	r0, [r7, #12]
 8012562:	f000 f883 	bl	801266c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8012566:	f06f 030e 	mvn.w	r3, #14
 801256a:	e001      	b.n	8012570 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 801256c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8012570:	4618      	mov	r0, r3
 8012572:	3740      	adds	r7, #64	; 0x40
 8012574:	46bd      	mov	sp, r7
 8012576:	bd80      	pop	{r7, pc}

08012578 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b086      	sub	sp, #24
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
 8012580:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8012582:	2300      	movs	r3, #0
 8012584:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8012586:	683b      	ldr	r3, [r7, #0]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d109      	bne.n	80125a0 <netconn_recv+0x28>
 801258c:	4b32      	ldr	r3, [pc, #200]	; (8012658 <netconn_recv+0xe0>)
 801258e:	f240 3263 	movw	r2, #867	; 0x363
 8012592:	4932      	ldr	r1, [pc, #200]	; (801265c <netconn_recv+0xe4>)
 8012594:	4832      	ldr	r0, [pc, #200]	; (8012660 <netconn_recv+0xe8>)
 8012596:	f011 fd27 	bl	8023fe8 <iprintf>
 801259a:	f06f 030f 	mvn.w	r3, #15
 801259e:	e056      	b.n	801264e <netconn_recv+0xd6>
  *new_buf = NULL;
 80125a0:	683b      	ldr	r3, [r7, #0]
 80125a2:	2200      	movs	r2, #0
 80125a4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d109      	bne.n	80125c0 <netconn_recv+0x48>
 80125ac:	4b2a      	ldr	r3, [pc, #168]	; (8012658 <netconn_recv+0xe0>)
 80125ae:	f240 3265 	movw	r2, #869	; 0x365
 80125b2:	492c      	ldr	r1, [pc, #176]	; (8012664 <netconn_recv+0xec>)
 80125b4:	482a      	ldr	r0, [pc, #168]	; (8012660 <netconn_recv+0xe8>)
 80125b6:	f011 fd17 	bl	8023fe8 <iprintf>
 80125ba:	f06f 030f 	mvn.w	r3, #15
 80125be:	e046      	b.n	801264e <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	781b      	ldrb	r3, [r3, #0]
 80125c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80125c8:	2b10      	cmp	r3, #16
 80125ca:	d13a      	bne.n	8012642 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80125cc:	2300      	movs	r3, #0
 80125ce:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80125d0:	2006      	movs	r0, #6
 80125d2:	f006 fd0f 	bl	8018ff4 <memp_malloc>
 80125d6:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d102      	bne.n	80125e4 <netconn_recv+0x6c>
      return ERR_MEM;
 80125de:	f04f 33ff 	mov.w	r3, #4294967295
 80125e2:	e034      	b.n	801264e <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80125e4:	f107 030c 	add.w	r3, r7, #12
 80125e8:	2200      	movs	r2, #0
 80125ea:	4619      	mov	r1, r3
 80125ec:	6878      	ldr	r0, [r7, #4]
 80125ee:	f7ff ff3f 	bl	8012470 <netconn_recv_data_tcp>
 80125f2:	4603      	mov	r3, r0
 80125f4:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80125f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d006      	beq.n	801260c <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80125fe:	6979      	ldr	r1, [r7, #20]
 8012600:	2006      	movs	r0, #6
 8012602:	f006 fd49 	bl	8019098 <memp_free>
      return err;
 8012606:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801260a:	e020      	b.n	801264e <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d106      	bne.n	8012620 <netconn_recv+0xa8>
 8012612:	4b11      	ldr	r3, [pc, #68]	; (8012658 <netconn_recv+0xe0>)
 8012614:	f240 3279 	movw	r2, #889	; 0x379
 8012618:	4913      	ldr	r1, [pc, #76]	; (8012668 <netconn_recv+0xf0>)
 801261a:	4811      	ldr	r0, [pc, #68]	; (8012660 <netconn_recv+0xe8>)
 801261c:	f011 fce4 	bl	8023fe8 <iprintf>

    buf->p = p;
 8012620:	68fa      	ldr	r2, [r7, #12]
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8012626:	68fa      	ldr	r2, [r7, #12]
 8012628:	697b      	ldr	r3, [r7, #20]
 801262a:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 801262c:	697b      	ldr	r3, [r7, #20]
 801262e:	2200      	movs	r2, #0
 8012630:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8012632:	697b      	ldr	r3, [r7, #20]
 8012634:	2200      	movs	r2, #0
 8012636:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	697a      	ldr	r2, [r7, #20]
 801263c:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 801263e:	2300      	movs	r3, #0
 8012640:	e005      	b.n	801264e <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8012642:	2200      	movs	r2, #0
 8012644:	6839      	ldr	r1, [r7, #0]
 8012646:	6878      	ldr	r0, [r7, #4]
 8012648:	f7ff fe1a 	bl	8012280 <netconn_recv_data>
 801264c:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 801264e:	4618      	mov	r0, r3
 8012650:	3718      	adds	r7, #24
 8012652:	46bd      	mov	sp, r7
 8012654:	bd80      	pop	{r7, pc}
 8012656:	bf00      	nop
 8012658:	08024de0 	.word	0x08024de0
 801265c:	08025014 	.word	0x08025014
 8012660:	08024e54 	.word	0x08024e54
 8012664:	08025034 	.word	0x08025034
 8012668:	080250ac 	.word	0x080250ac

0801266c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b08c      	sub	sp, #48	; 0x30
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
 8012674:	460b      	mov	r3, r1
 8012676:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d109      	bne.n	8012692 <netconn_close_shutdown+0x26>
 801267e:	4b0f      	ldr	r3, [pc, #60]	; (80126bc <netconn_close_shutdown+0x50>)
 8012680:	f240 4247 	movw	r2, #1095	; 0x447
 8012684:	490e      	ldr	r1, [pc, #56]	; (80126c0 <netconn_close_shutdown+0x54>)
 8012686:	480f      	ldr	r0, [pc, #60]	; (80126c4 <netconn_close_shutdown+0x58>)
 8012688:	f011 fcae 	bl	8023fe8 <iprintf>
 801268c:	f06f 030f 	mvn.w	r3, #15
 8012690:	e010      	b.n	80126b4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8012696:	78fb      	ldrb	r3, [r7, #3]
 8012698:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801269a:	2329      	movs	r3, #41	; 0x29
 801269c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 801269e:	f107 030c 	add.w	r3, r7, #12
 80126a2:	4619      	mov	r1, r3
 80126a4:	4808      	ldr	r0, [pc, #32]	; (80126c8 <netconn_close_shutdown+0x5c>)
 80126a6:	f7ff fc23 	bl	8011ef0 <netconn_apimsg>
 80126aa:	4603      	mov	r3, r0
 80126ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80126b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80126b4:	4618      	mov	r0, r3
 80126b6:	3730      	adds	r7, #48	; 0x30
 80126b8:	46bd      	mov	sp, r7
 80126ba:	bd80      	pop	{r7, pc}
 80126bc:	08024de0 	.word	0x08024de0
 80126c0:	08025138 	.word	0x08025138
 80126c4:	08024e54 	.word	0x08024e54
 80126c8:	08013c8d 	.word	0x08013c8d

080126cc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b082      	sub	sp, #8
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80126d4:	2103      	movs	r1, #3
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	f7ff ffc8 	bl	801266c <netconn_close_shutdown>
 80126dc:	4603      	mov	r3, r0
}
 80126de:	4618      	mov	r0, r3
 80126e0:	3708      	adds	r7, #8
 80126e2:	46bd      	mov	sp, r7
 80126e4:	bd80      	pop	{r7, pc}

080126e6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80126e6:	b580      	push	{r7, lr}
 80126e8:	b084      	sub	sp, #16
 80126ea:	af00      	add	r7, sp, #0
 80126ec:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d101      	bne.n	80126f8 <netconn_err+0x12>
    return ERR_OK;
 80126f4:	2300      	movs	r3, #0
 80126f6:	e00d      	b.n	8012714 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80126f8:	f008 f92e 	bl	801a958 <sys_arch_protect>
 80126fc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	7a1b      	ldrb	r3, [r3, #8]
 8012702:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	2200      	movs	r2, #0
 8012708:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 801270a:	68f8      	ldr	r0, [r7, #12]
 801270c:	f008 f932 	bl	801a974 <sys_arch_unprotect>
  return err;
 8012710:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012714:	4618      	mov	r0, r3
 8012716:	3710      	adds	r7, #16
 8012718:	46bd      	mov	sp, r7
 801271a:	bd80      	pop	{r7, pc}

0801271c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 801271c:	b580      	push	{r7, lr}
 801271e:	b082      	sub	sp, #8
 8012720:	af00      	add	r7, sp, #0
 8012722:	4603      	mov	r3, r0
 8012724:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8012726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801272a:	f113 0f0e 	cmn.w	r3, #14
 801272e:	d008      	beq.n	8012742 <lwip_netconn_err_to_msg+0x26>
 8012730:	f113 0f0d 	cmn.w	r3, #13
 8012734:	d003      	beq.n	801273e <lwip_netconn_err_to_msg+0x22>
 8012736:	f113 0f0f 	cmn.w	r3, #15
 801273a:	d004      	beq.n	8012746 <lwip_netconn_err_to_msg+0x2a>
 801273c:	e005      	b.n	801274a <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 801273e:	4b0a      	ldr	r3, [pc, #40]	; (8012768 <lwip_netconn_err_to_msg+0x4c>)
 8012740:	e00e      	b.n	8012760 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8012742:	4b0a      	ldr	r3, [pc, #40]	; (801276c <lwip_netconn_err_to_msg+0x50>)
 8012744:	e00c      	b.n	8012760 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8012746:	4b0a      	ldr	r3, [pc, #40]	; (8012770 <lwip_netconn_err_to_msg+0x54>)
 8012748:	e00a      	b.n	8012760 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 801274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d005      	beq.n	801275e <lwip_netconn_err_to_msg+0x42>
 8012752:	4b08      	ldr	r3, [pc, #32]	; (8012774 <lwip_netconn_err_to_msg+0x58>)
 8012754:	227d      	movs	r2, #125	; 0x7d
 8012756:	4908      	ldr	r1, [pc, #32]	; (8012778 <lwip_netconn_err_to_msg+0x5c>)
 8012758:	4808      	ldr	r0, [pc, #32]	; (801277c <lwip_netconn_err_to_msg+0x60>)
 801275a:	f011 fc45 	bl	8023fe8 <iprintf>
      return NULL;
 801275e:	2300      	movs	r3, #0
  }
}
 8012760:	4618      	mov	r0, r3
 8012762:	3708      	adds	r7, #8
 8012764:	46bd      	mov	sp, r7
 8012766:	bd80      	pop	{r7, pc}
 8012768:	08028a14 	.word	0x08028a14
 801276c:	08028a15 	.word	0x08028a15
 8012770:	08028a16 	.word	0x08028a16
 8012774:	0802519c 	.word	0x0802519c
 8012778:	080251ec 	.word	0x080251ec
 801277c:	080251fc 	.word	0x080251fc

08012780 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b082      	sub	sp, #8
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
 8012788:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 801278a:	683b      	ldr	r3, [r7, #0]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d105      	bne.n	801279c <lwip_netconn_is_err_msg+0x1c>
 8012790:	4b12      	ldr	r3, [pc, #72]	; (80127dc <lwip_netconn_is_err_msg+0x5c>)
 8012792:	2285      	movs	r2, #133	; 0x85
 8012794:	4912      	ldr	r1, [pc, #72]	; (80127e0 <lwip_netconn_is_err_msg+0x60>)
 8012796:	4813      	ldr	r0, [pc, #76]	; (80127e4 <lwip_netconn_is_err_msg+0x64>)
 8012798:	f011 fc26 	bl	8023fe8 <iprintf>

  if (msg == &netconn_aborted) {
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	4a12      	ldr	r2, [pc, #72]	; (80127e8 <lwip_netconn_is_err_msg+0x68>)
 80127a0:	4293      	cmp	r3, r2
 80127a2:	d104      	bne.n	80127ae <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80127a4:	683b      	ldr	r3, [r7, #0]
 80127a6:	22f3      	movs	r2, #243	; 0xf3
 80127a8:	701a      	strb	r2, [r3, #0]
    return 1;
 80127aa:	2301      	movs	r3, #1
 80127ac:	e012      	b.n	80127d4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	4a0e      	ldr	r2, [pc, #56]	; (80127ec <lwip_netconn_is_err_msg+0x6c>)
 80127b2:	4293      	cmp	r3, r2
 80127b4:	d104      	bne.n	80127c0 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80127b6:	683b      	ldr	r3, [r7, #0]
 80127b8:	22f2      	movs	r2, #242	; 0xf2
 80127ba:	701a      	strb	r2, [r3, #0]
    return 1;
 80127bc:	2301      	movs	r3, #1
 80127be:	e009      	b.n	80127d4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	4a0b      	ldr	r2, [pc, #44]	; (80127f0 <lwip_netconn_is_err_msg+0x70>)
 80127c4:	4293      	cmp	r3, r2
 80127c6:	d104      	bne.n	80127d2 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80127c8:	683b      	ldr	r3, [r7, #0]
 80127ca:	22f1      	movs	r2, #241	; 0xf1
 80127cc:	701a      	strb	r2, [r3, #0]
    return 1;
 80127ce:	2301      	movs	r3, #1
 80127d0:	e000      	b.n	80127d4 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80127d2:	2300      	movs	r3, #0
}
 80127d4:	4618      	mov	r0, r3
 80127d6:	3708      	adds	r7, #8
 80127d8:	46bd      	mov	sp, r7
 80127da:	bd80      	pop	{r7, pc}
 80127dc:	0802519c 	.word	0x0802519c
 80127e0:	08025224 	.word	0x08025224
 80127e4:	080251fc 	.word	0x080251fc
 80127e8:	08028a14 	.word	0x08028a14
 80127ec:	08028a15 	.word	0x08028a15
 80127f0:	08028a16 	.word	0x08028a16

080127f4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b088      	sub	sp, #32
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	60f8      	str	r0, [r7, #12]
 80127fc:	60b9      	str	r1, [r7, #8]
 80127fe:	607a      	str	r2, [r7, #4]
 8012800:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8012802:	68bb      	ldr	r3, [r7, #8]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d105      	bne.n	8012814 <recv_udp+0x20>
 8012808:	4b34      	ldr	r3, [pc, #208]	; (80128dc <recv_udp+0xe8>)
 801280a:	22e5      	movs	r2, #229	; 0xe5
 801280c:	4934      	ldr	r1, [pc, #208]	; (80128e0 <recv_udp+0xec>)
 801280e:	4835      	ldr	r0, [pc, #212]	; (80128e4 <recv_udp+0xf0>)
 8012810:	f011 fbea 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d105      	bne.n	8012826 <recv_udp+0x32>
 801281a:	4b30      	ldr	r3, [pc, #192]	; (80128dc <recv_udp+0xe8>)
 801281c:	22e6      	movs	r2, #230	; 0xe6
 801281e:	4932      	ldr	r1, [pc, #200]	; (80128e8 <recv_udp+0xf4>)
 8012820:	4830      	ldr	r0, [pc, #192]	; (80128e4 <recv_udp+0xf0>)
 8012822:	f011 fbe1 	bl	8023fe8 <iprintf>
  conn = (struct netconn *)arg;
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 801282a:	69fb      	ldr	r3, [r7, #28]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d103      	bne.n	8012838 <recv_udp+0x44>
    pbuf_free(p);
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f007 fac9 	bl	8019dc8 <pbuf_free>
    return;
 8012836:	e04d      	b.n	80128d4 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8012838:	69fb      	ldr	r3, [r7, #28]
 801283a:	685b      	ldr	r3, [r3, #4]
 801283c:	68ba      	ldr	r2, [r7, #8]
 801283e:	429a      	cmp	r2, r3
 8012840:	d005      	beq.n	801284e <recv_udp+0x5a>
 8012842:	4b26      	ldr	r3, [pc, #152]	; (80128dc <recv_udp+0xe8>)
 8012844:	22ee      	movs	r2, #238	; 0xee
 8012846:	4929      	ldr	r1, [pc, #164]	; (80128ec <recv_udp+0xf8>)
 8012848:	4826      	ldr	r0, [pc, #152]	; (80128e4 <recv_udp+0xf0>)
 801284a:	f011 fbcd 	bl	8023fe8 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801284e:	69fb      	ldr	r3, [r7, #28]
 8012850:	3310      	adds	r3, #16
 8012852:	4618      	mov	r0, r3
 8012854:	f007 ff65 	bl	801a722 <sys_mbox_valid>
 8012858:	4603      	mov	r3, r0
 801285a:	2b00      	cmp	r3, #0
 801285c:	d103      	bne.n	8012866 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 801285e:	6878      	ldr	r0, [r7, #4]
 8012860:	f007 fab2 	bl	8019dc8 <pbuf_free>
    return;
 8012864:	e036      	b.n	80128d4 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8012866:	2006      	movs	r0, #6
 8012868:	f006 fbc4 	bl	8018ff4 <memp_malloc>
 801286c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 801286e:	69bb      	ldr	r3, [r7, #24]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d103      	bne.n	801287c <recv_udp+0x88>
    pbuf_free(p);
 8012874:	6878      	ldr	r0, [r7, #4]
 8012876:	f007 faa7 	bl	8019dc8 <pbuf_free>
    return;
 801287a:	e02b      	b.n	80128d4 <recv_udp+0xe0>
  } else {
    buf->p = p;
 801287c:	69bb      	ldr	r3, [r7, #24]
 801287e:	687a      	ldr	r2, [r7, #4]
 8012880:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8012882:	69bb      	ldr	r3, [r7, #24]
 8012884:	687a      	ldr	r2, [r7, #4]
 8012886:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8012888:	683b      	ldr	r3, [r7, #0]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d002      	beq.n	8012894 <recv_udp+0xa0>
 801288e:	683b      	ldr	r3, [r7, #0]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	e000      	b.n	8012896 <recv_udp+0xa2>
 8012894:	2300      	movs	r3, #0
 8012896:	69ba      	ldr	r2, [r7, #24]
 8012898:	6093      	str	r3, [r2, #8]
    buf->port = port;
 801289a:	69bb      	ldr	r3, [r7, #24]
 801289c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801289e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	891b      	ldrh	r3, [r3, #8]
 80128a4:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80128a6:	69fb      	ldr	r3, [r7, #28]
 80128a8:	3310      	adds	r3, #16
 80128aa:	69b9      	ldr	r1, [r7, #24]
 80128ac:	4618      	mov	r0, r3
 80128ae:	f007 fec3 	bl	801a638 <sys_mbox_trypost>
 80128b2:	4603      	mov	r3, r0
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d003      	beq.n	80128c0 <recv_udp+0xcc>
    netbuf_delete(buf);
 80128b8:	69b8      	ldr	r0, [r7, #24]
 80128ba:	f006 fc17 	bl	80190ec <netbuf_delete>
    return;
 80128be:	e009      	b.n	80128d4 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80128c0:	69fb      	ldr	r3, [r7, #28]
 80128c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d005      	beq.n	80128d4 <recv_udp+0xe0>
 80128c8:	69fb      	ldr	r3, [r7, #28]
 80128ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128cc:	8afa      	ldrh	r2, [r7, #22]
 80128ce:	2100      	movs	r1, #0
 80128d0:	69f8      	ldr	r0, [r7, #28]
 80128d2:	4798      	blx	r3
  }
}
 80128d4:	3720      	adds	r7, #32
 80128d6:	46bd      	mov	sp, r7
 80128d8:	bd80      	pop	{r7, pc}
 80128da:	bf00      	nop
 80128dc:	0802519c 	.word	0x0802519c
 80128e0:	08025230 	.word	0x08025230
 80128e4:	080251fc 	.word	0x080251fc
 80128e8:	08025254 	.word	0x08025254
 80128ec:	08025274 	.word	0x08025274

080128f0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b088      	sub	sp, #32
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	60f8      	str	r0, [r7, #12]
 80128f8:	60b9      	str	r1, [r7, #8]
 80128fa:	607a      	str	r2, [r7, #4]
 80128fc:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d106      	bne.n	8012912 <recv_tcp+0x22>
 8012904:	4b36      	ldr	r3, [pc, #216]	; (80129e0 <recv_tcp+0xf0>)
 8012906:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801290a:	4936      	ldr	r1, [pc, #216]	; (80129e4 <recv_tcp+0xf4>)
 801290c:	4836      	ldr	r0, [pc, #216]	; (80129e8 <recv_tcp+0xf8>)
 801290e:	f011 fb6b 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d106      	bne.n	8012926 <recv_tcp+0x36>
 8012918:	4b31      	ldr	r3, [pc, #196]	; (80129e0 <recv_tcp+0xf0>)
 801291a:	f240 122d 	movw	r2, #301	; 0x12d
 801291e:	4933      	ldr	r1, [pc, #204]	; (80129ec <recv_tcp+0xfc>)
 8012920:	4831      	ldr	r0, [pc, #196]	; (80129e8 <recv_tcp+0xf8>)
 8012922:	f011 fb61 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8012926:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d006      	beq.n	801293c <recv_tcp+0x4c>
 801292e:	4b2c      	ldr	r3, [pc, #176]	; (80129e0 <recv_tcp+0xf0>)
 8012930:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8012934:	492e      	ldr	r1, [pc, #184]	; (80129f0 <recv_tcp+0x100>)
 8012936:	482c      	ldr	r0, [pc, #176]	; (80129e8 <recv_tcp+0xf8>)
 8012938:	f011 fb56 	bl	8023fe8 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8012940:	697b      	ldr	r3, [r7, #20]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d102      	bne.n	801294c <recv_tcp+0x5c>
    return ERR_VAL;
 8012946:	f06f 0305 	mvn.w	r3, #5
 801294a:	e045      	b.n	80129d8 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 801294c:	697b      	ldr	r3, [r7, #20]
 801294e:	685b      	ldr	r3, [r3, #4]
 8012950:	68ba      	ldr	r2, [r7, #8]
 8012952:	429a      	cmp	r2, r3
 8012954:	d006      	beq.n	8012964 <recv_tcp+0x74>
 8012956:	4b22      	ldr	r3, [pc, #136]	; (80129e0 <recv_tcp+0xf0>)
 8012958:	f240 1235 	movw	r2, #309	; 0x135
 801295c:	4925      	ldr	r1, [pc, #148]	; (80129f4 <recv_tcp+0x104>)
 801295e:	4822      	ldr	r0, [pc, #136]	; (80129e8 <recv_tcp+0xf8>)
 8012960:	f011 fb42 	bl	8023fe8 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8012964:	697b      	ldr	r3, [r7, #20]
 8012966:	3310      	adds	r3, #16
 8012968:	4618      	mov	r0, r3
 801296a:	f007 feda 	bl	801a722 <sys_mbox_valid>
 801296e:	4603      	mov	r3, r0
 8012970:	2b00      	cmp	r3, #0
 8012972:	d10d      	bne.n	8012990 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d008      	beq.n	801298c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	891b      	ldrh	r3, [r3, #8]
 801297e:	4619      	mov	r1, r3
 8012980:	68b8      	ldr	r0, [r7, #8]
 8012982:	f008 fd1b 	bl	801b3bc <tcp_recved>
      pbuf_free(p);
 8012986:	6878      	ldr	r0, [r7, #4]
 8012988:	f007 fa1e 	bl	8019dc8 <pbuf_free>
    }
    return ERR_OK;
 801298c:	2300      	movs	r3, #0
 801298e:	e023      	b.n	80129d8 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d005      	beq.n	80129a2 <recv_tcp+0xb2>
    msg = p;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	891b      	ldrh	r3, [r3, #8]
 801299e:	83fb      	strh	r3, [r7, #30]
 80129a0:	e003      	b.n	80129aa <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80129a2:	4b15      	ldr	r3, [pc, #84]	; (80129f8 <recv_tcp+0x108>)
 80129a4:	61bb      	str	r3, [r7, #24]
    len = 0;
 80129a6:	2300      	movs	r3, #0
 80129a8:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80129aa:	697b      	ldr	r3, [r7, #20]
 80129ac:	3310      	adds	r3, #16
 80129ae:	69b9      	ldr	r1, [r7, #24]
 80129b0:	4618      	mov	r0, r3
 80129b2:	f007 fe41 	bl	801a638 <sys_mbox_trypost>
 80129b6:	4603      	mov	r3, r0
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d002      	beq.n	80129c2 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80129bc:	f04f 33ff 	mov.w	r3, #4294967295
 80129c0:	e00a      	b.n	80129d8 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80129c2:	697b      	ldr	r3, [r7, #20]
 80129c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d005      	beq.n	80129d6 <recv_tcp+0xe6>
 80129ca:	697b      	ldr	r3, [r7, #20]
 80129cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129ce:	8bfa      	ldrh	r2, [r7, #30]
 80129d0:	2100      	movs	r1, #0
 80129d2:	6978      	ldr	r0, [r7, #20]
 80129d4:	4798      	blx	r3
  }

  return ERR_OK;
 80129d6:	2300      	movs	r3, #0
}
 80129d8:	4618      	mov	r0, r3
 80129da:	3720      	adds	r7, #32
 80129dc:	46bd      	mov	sp, r7
 80129de:	bd80      	pop	{r7, pc}
 80129e0:	0802519c 	.word	0x0802519c
 80129e4:	08025294 	.word	0x08025294
 80129e8:	080251fc 	.word	0x080251fc
 80129ec:	080252b8 	.word	0x080252b8
 80129f0:	080252d8 	.word	0x080252d8
 80129f4:	080252f0 	.word	0x080252f0
 80129f8:	08028a16 	.word	0x08028a16

080129fc <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b084      	sub	sp, #16
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
 8012a04:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d106      	bne.n	8012a1e <poll_tcp+0x22>
 8012a10:	4b29      	ldr	r3, [pc, #164]	; (8012ab8 <poll_tcp+0xbc>)
 8012a12:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8012a16:	4929      	ldr	r1, [pc, #164]	; (8012abc <poll_tcp+0xc0>)
 8012a18:	4829      	ldr	r0, [pc, #164]	; (8012ac0 <poll_tcp+0xc4>)
 8012a1a:	f011 fae5 	bl	8023fe8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	785b      	ldrb	r3, [r3, #1]
 8012a22:	2b01      	cmp	r3, #1
 8012a24:	d104      	bne.n	8012a30 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8012a26:	2101      	movs	r1, #1
 8012a28:	68f8      	ldr	r0, [r7, #12]
 8012a2a:	f000 ff63 	bl	80138f4 <lwip_netconn_do_writemore>
 8012a2e:	e016      	b.n	8012a5e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	785b      	ldrb	r3, [r3, #1]
 8012a34:	2b04      	cmp	r3, #4
 8012a36:	d112      	bne.n	8012a5e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	6a1b      	ldr	r3, [r3, #32]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d00a      	beq.n	8012a56 <poll_tcp+0x5a>
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	6a1b      	ldr	r3, [r3, #32]
 8012a44:	7a5b      	ldrb	r3, [r3, #9]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d005      	beq.n	8012a56 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	6a1b      	ldr	r3, [r3, #32]
 8012a4e:	7a5a      	ldrb	r2, [r3, #9]
 8012a50:	3a01      	subs	r2, #1
 8012a52:	b2d2      	uxtb	r2, r2
 8012a54:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8012a56:	2101      	movs	r1, #1
 8012a58:	68f8      	ldr	r0, [r7, #12]
 8012a5a:	f000 fbf7 	bl	801324c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	7f1b      	ldrb	r3, [r3, #28]
 8012a62:	f003 0310 	and.w	r3, r3, #16
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d021      	beq.n	8012aae <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	685b      	ldr	r3, [r3, #4]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d01d      	beq.n	8012aae <poll_tcp+0xb2>
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	685b      	ldr	r3, [r3, #4]
 8012a76:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012a7a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8012a7e:	d316      	bcc.n	8012aae <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	685b      	ldr	r3, [r3, #4]
 8012a84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8012a88:	2b04      	cmp	r3, #4
 8012a8a:	d810      	bhi.n	8012aae <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	7f1b      	ldrb	r3, [r3, #28]
 8012a90:	f023 0310 	bic.w	r3, r3, #16
 8012a94:	b2da      	uxtb	r2, r3
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d005      	beq.n	8012aae <poll_tcp+0xb2>
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	2102      	movs	r1, #2
 8012aaa:	68f8      	ldr	r0, [r7, #12]
 8012aac:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8012aae:	2300      	movs	r3, #0
}
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	3710      	adds	r7, #16
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	bd80      	pop	{r7, pc}
 8012ab8:	0802519c 	.word	0x0802519c
 8012abc:	08025310 	.word	0x08025310
 8012ac0:	080251fc 	.word	0x080251fc

08012ac4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b086      	sub	sp, #24
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	60f8      	str	r0, [r7, #12]
 8012acc:	60b9      	str	r1, [r7, #8]
 8012ace:	4613      	mov	r3, r2
 8012ad0:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8012ad6:	697b      	ldr	r3, [r7, #20]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d106      	bne.n	8012aea <sent_tcp+0x26>
 8012adc:	4b20      	ldr	r3, [pc, #128]	; (8012b60 <sent_tcp+0x9c>)
 8012ade:	f240 1293 	movw	r2, #403	; 0x193
 8012ae2:	4920      	ldr	r1, [pc, #128]	; (8012b64 <sent_tcp+0xa0>)
 8012ae4:	4820      	ldr	r0, [pc, #128]	; (8012b68 <sent_tcp+0xa4>)
 8012ae6:	f011 fa7f 	bl	8023fe8 <iprintf>

  if (conn) {
 8012aea:	697b      	ldr	r3, [r7, #20]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d032      	beq.n	8012b56 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8012af0:	697b      	ldr	r3, [r7, #20]
 8012af2:	785b      	ldrb	r3, [r3, #1]
 8012af4:	2b01      	cmp	r3, #1
 8012af6:	d104      	bne.n	8012b02 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8012af8:	2101      	movs	r1, #1
 8012afa:	6978      	ldr	r0, [r7, #20]
 8012afc:	f000 fefa 	bl	80138f4 <lwip_netconn_do_writemore>
 8012b00:	e007      	b.n	8012b12 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8012b02:	697b      	ldr	r3, [r7, #20]
 8012b04:	785b      	ldrb	r3, [r3, #1]
 8012b06:	2b04      	cmp	r3, #4
 8012b08:	d103      	bne.n	8012b12 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8012b0a:	2101      	movs	r1, #1
 8012b0c:	6978      	ldr	r0, [r7, #20]
 8012b0e:	f000 fb9d 	bl	801324c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8012b12:	697b      	ldr	r3, [r7, #20]
 8012b14:	685b      	ldr	r3, [r3, #4]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d01d      	beq.n	8012b56 <sent_tcp+0x92>
 8012b1a:	697b      	ldr	r3, [r7, #20]
 8012b1c:	685b      	ldr	r3, [r3, #4]
 8012b1e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012b22:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8012b26:	d316      	bcc.n	8012b56 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8012b28:	697b      	ldr	r3, [r7, #20]
 8012b2a:	685b      	ldr	r3, [r3, #4]
 8012b2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8012b30:	2b04      	cmp	r3, #4
 8012b32:	d810      	bhi.n	8012b56 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8012b34:	697b      	ldr	r3, [r7, #20]
 8012b36:	7f1b      	ldrb	r3, [r3, #28]
 8012b38:	f023 0310 	bic.w	r3, r3, #16
 8012b3c:	b2da      	uxtb	r2, r3
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8012b42:	697b      	ldr	r3, [r7, #20]
 8012b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d005      	beq.n	8012b56 <sent_tcp+0x92>
 8012b4a:	697b      	ldr	r3, [r7, #20]
 8012b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b4e:	88fa      	ldrh	r2, [r7, #6]
 8012b50:	2102      	movs	r1, #2
 8012b52:	6978      	ldr	r0, [r7, #20]
 8012b54:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8012b56:	2300      	movs	r3, #0
}
 8012b58:	4618      	mov	r0, r3
 8012b5a:	3718      	adds	r7, #24
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	bd80      	pop	{r7, pc}
 8012b60:	0802519c 	.word	0x0802519c
 8012b64:	08025310 	.word	0x08025310
 8012b68:	080251fc 	.word	0x080251fc

08012b6c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b088      	sub	sp, #32
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
 8012b74:	460b      	mov	r3, r1
 8012b76:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8012b7c:	69fb      	ldr	r3, [r7, #28]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d106      	bne.n	8012b90 <err_tcp+0x24>
 8012b82:	4b5f      	ldr	r3, [pc, #380]	; (8012d00 <err_tcp+0x194>)
 8012b84:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012b88:	495e      	ldr	r1, [pc, #376]	; (8012d04 <err_tcp+0x198>)
 8012b8a:	485f      	ldr	r0, [pc, #380]	; (8012d08 <err_tcp+0x19c>)
 8012b8c:	f011 fa2c 	bl	8023fe8 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8012b90:	f007 fee2 	bl	801a958 <sys_arch_protect>
 8012b94:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8012b96:	69fb      	ldr	r3, [r7, #28]
 8012b98:	2200      	movs	r2, #0
 8012b9a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8012b9c:	69fb      	ldr	r3, [r7, #28]
 8012b9e:	78fa      	ldrb	r2, [r7, #3]
 8012ba0:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8012ba2:	69fb      	ldr	r3, [r7, #28]
 8012ba4:	7f1b      	ldrb	r3, [r3, #28]
 8012ba6:	f043 0301 	orr.w	r3, r3, #1
 8012baa:	b2da      	uxtb	r2, r3
 8012bac:	69fb      	ldr	r3, [r7, #28]
 8012bae:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8012bb0:	69fb      	ldr	r3, [r7, #28]
 8012bb2:	785b      	ldrb	r3, [r3, #1]
 8012bb4:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8012bb6:	69fb      	ldr	r3, [r7, #28]
 8012bb8:	2200      	movs	r2, #0
 8012bba:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8012bbc:	69b8      	ldr	r0, [r7, #24]
 8012bbe:	f007 fed9 	bl	801a974 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8012bc2:	69fb      	ldr	r3, [r7, #28]
 8012bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d005      	beq.n	8012bd6 <err_tcp+0x6a>
 8012bca:	69fb      	ldr	r3, [r7, #28]
 8012bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bce:	2200      	movs	r2, #0
 8012bd0:	2104      	movs	r1, #4
 8012bd2:	69f8      	ldr	r0, [r7, #28]
 8012bd4:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8012bd6:	69fb      	ldr	r3, [r7, #28]
 8012bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d005      	beq.n	8012bea <err_tcp+0x7e>
 8012bde:	69fb      	ldr	r3, [r7, #28]
 8012be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012be2:	2200      	movs	r2, #0
 8012be4:	2100      	movs	r1, #0
 8012be6:	69f8      	ldr	r0, [r7, #28]
 8012be8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8012bea:	69fb      	ldr	r3, [r7, #28]
 8012bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d005      	beq.n	8012bfe <err_tcp+0x92>
 8012bf2:	69fb      	ldr	r3, [r7, #28]
 8012bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bf6:	2200      	movs	r2, #0
 8012bf8:	2102      	movs	r1, #2
 8012bfa:	69f8      	ldr	r0, [r7, #28]
 8012bfc:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8012bfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012c02:	4618      	mov	r0, r3
 8012c04:	f7ff fd8a 	bl	801271c <lwip_netconn_err_to_msg>
 8012c08:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8012c0a:	69fb      	ldr	r3, [r7, #28]
 8012c0c:	3310      	adds	r3, #16
 8012c0e:	4618      	mov	r0, r3
 8012c10:	f007 fd87 	bl	801a722 <sys_mbox_valid>
 8012c14:	4603      	mov	r3, r0
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d005      	beq.n	8012c26 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8012c1a:	69fb      	ldr	r3, [r7, #28]
 8012c1c:	3310      	adds	r3, #16
 8012c1e:	6939      	ldr	r1, [r7, #16]
 8012c20:	4618      	mov	r0, r3
 8012c22:	f007 fd09 	bl	801a638 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8012c26:	69fb      	ldr	r3, [r7, #28]
 8012c28:	3314      	adds	r3, #20
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f007 fd79 	bl	801a722 <sys_mbox_valid>
 8012c30:	4603      	mov	r3, r0
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d005      	beq.n	8012c42 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8012c36:	69fb      	ldr	r3, [r7, #28]
 8012c38:	3314      	adds	r3, #20
 8012c3a:	6939      	ldr	r1, [r7, #16]
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f007 fcfb 	bl	801a638 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8012c42:	7dfb      	ldrb	r3, [r7, #23]
 8012c44:	2b01      	cmp	r3, #1
 8012c46:	d005      	beq.n	8012c54 <err_tcp+0xe8>
 8012c48:	7dfb      	ldrb	r3, [r7, #23]
 8012c4a:	2b04      	cmp	r3, #4
 8012c4c:	d002      	beq.n	8012c54 <err_tcp+0xe8>
 8012c4e:	7dfb      	ldrb	r3, [r7, #23]
 8012c50:	2b03      	cmp	r3, #3
 8012c52:	d143      	bne.n	8012cdc <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8012c54:	69fb      	ldr	r3, [r7, #28]
 8012c56:	7f1b      	ldrb	r3, [r3, #28]
 8012c58:	f003 0304 	and.w	r3, r3, #4
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	bf14      	ite	ne
 8012c60:	2301      	movne	r3, #1
 8012c62:	2300      	moveq	r3, #0
 8012c64:	b2db      	uxtb	r3, r3
 8012c66:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8012c68:	69fb      	ldr	r3, [r7, #28]
 8012c6a:	7f1b      	ldrb	r3, [r3, #28]
 8012c6c:	f023 0304 	bic.w	r3, r3, #4
 8012c70:	b2da      	uxtb	r2, r3
 8012c72:	69fb      	ldr	r3, [r7, #28]
 8012c74:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d13b      	bne.n	8012cf4 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012c7c:	69fb      	ldr	r3, [r7, #28]
 8012c7e:	6a1b      	ldr	r3, [r3, #32]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d106      	bne.n	8012c92 <err_tcp+0x126>
 8012c84:	4b1e      	ldr	r3, [pc, #120]	; (8012d00 <err_tcp+0x194>)
 8012c86:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012c8a:	4920      	ldr	r1, [pc, #128]	; (8012d0c <err_tcp+0x1a0>)
 8012c8c:	481e      	ldr	r0, [pc, #120]	; (8012d08 <err_tcp+0x19c>)
 8012c8e:	f011 f9ab 	bl	8023fe8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8012c92:	7dfb      	ldrb	r3, [r7, #23]
 8012c94:	2b04      	cmp	r3, #4
 8012c96:	d104      	bne.n	8012ca2 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8012c98:	69fb      	ldr	r3, [r7, #28]
 8012c9a:	6a1b      	ldr	r3, [r3, #32]
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	711a      	strb	r2, [r3, #4]
 8012ca0:	e003      	b.n	8012caa <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8012ca2:	69fb      	ldr	r3, [r7, #28]
 8012ca4:	6a1b      	ldr	r3, [r3, #32]
 8012ca6:	78fa      	ldrb	r2, [r7, #3]
 8012ca8:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012caa:	69fb      	ldr	r3, [r7, #28]
 8012cac:	6a1b      	ldr	r3, [r3, #32]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	330c      	adds	r3, #12
 8012cb2:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8012cb4:	68b8      	ldr	r0, [r7, #8]
 8012cb6:	f007 fdc5 	bl	801a844 <sys_sem_valid>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d106      	bne.n	8012cce <err_tcp+0x162>
 8012cc0:	4b0f      	ldr	r3, [pc, #60]	; (8012d00 <err_tcp+0x194>)
 8012cc2:	f240 12ef 	movw	r2, #495	; 0x1ef
 8012cc6:	4912      	ldr	r1, [pc, #72]	; (8012d10 <err_tcp+0x1a4>)
 8012cc8:	480f      	ldr	r0, [pc, #60]	; (8012d08 <err_tcp+0x19c>)
 8012cca:	f011 f98d 	bl	8023fe8 <iprintf>
      conn->current_msg = NULL;
 8012cce:	69fb      	ldr	r3, [r7, #28]
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8012cd4:	68b8      	ldr	r0, [r7, #8]
 8012cd6:	f007 fd9b 	bl	801a810 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8012cda:	e00b      	b.n	8012cf4 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8012cdc:	69fb      	ldr	r3, [r7, #28]
 8012cde:	6a1b      	ldr	r3, [r3, #32]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d008      	beq.n	8012cf6 <err_tcp+0x18a>
 8012ce4:	4b06      	ldr	r3, [pc, #24]	; (8012d00 <err_tcp+0x194>)
 8012ce6:	f240 12f7 	movw	r2, #503	; 0x1f7
 8012cea:	490a      	ldr	r1, [pc, #40]	; (8012d14 <err_tcp+0x1a8>)
 8012cec:	4806      	ldr	r0, [pc, #24]	; (8012d08 <err_tcp+0x19c>)
 8012cee:	f011 f97b 	bl	8023fe8 <iprintf>
  }
}
 8012cf2:	e000      	b.n	8012cf6 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8012cf4:	bf00      	nop
}
 8012cf6:	bf00      	nop
 8012cf8:	3720      	adds	r7, #32
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bd80      	pop	{r7, pc}
 8012cfe:	bf00      	nop
 8012d00:	0802519c 	.word	0x0802519c
 8012d04:	08025310 	.word	0x08025310
 8012d08:	080251fc 	.word	0x080251fc
 8012d0c:	08025320 	.word	0x08025320
 8012d10:	0802533c 	.word	0x0802533c
 8012d14:	08025358 	.word	0x08025358

08012d18 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b084      	sub	sp, #16
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	685b      	ldr	r3, [r3, #4]
 8012d24:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8012d26:	6879      	ldr	r1, [r7, #4]
 8012d28:	68f8      	ldr	r0, [r7, #12]
 8012d2a:	f009 fa09 	bl	801c140 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8012d2e:	490a      	ldr	r1, [pc, #40]	; (8012d58 <setup_tcp+0x40>)
 8012d30:	68f8      	ldr	r0, [r7, #12]
 8012d32:	f009 fa17 	bl	801c164 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8012d36:	4909      	ldr	r1, [pc, #36]	; (8012d5c <setup_tcp+0x44>)
 8012d38:	68f8      	ldr	r0, [r7, #12]
 8012d3a:	f009 fa35 	bl	801c1a8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8012d3e:	2202      	movs	r2, #2
 8012d40:	4907      	ldr	r1, [pc, #28]	; (8012d60 <setup_tcp+0x48>)
 8012d42:	68f8      	ldr	r0, [r7, #12]
 8012d44:	f009 fa8c 	bl	801c260 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8012d48:	4906      	ldr	r1, [pc, #24]	; (8012d64 <setup_tcp+0x4c>)
 8012d4a:	68f8      	ldr	r0, [r7, #12]
 8012d4c:	f009 fa4e 	bl	801c1ec <tcp_err>
}
 8012d50:	bf00      	nop
 8012d52:	3710      	adds	r7, #16
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bd80      	pop	{r7, pc}
 8012d58:	080128f1 	.word	0x080128f1
 8012d5c:	08012ac5 	.word	0x08012ac5
 8012d60:	080129fd 	.word	0x080129fd
 8012d64:	08012b6d 	.word	0x08012b6d

08012d68 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8012d68:	b590      	push	{r4, r7, lr}
 8012d6a:	b089      	sub	sp, #36	; 0x24
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	60f8      	str	r0, [r7, #12]
 8012d70:	60b9      	str	r1, [r7, #8]
 8012d72:	4613      	mov	r3, r2
 8012d74:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8012d7a:	69fb      	ldr	r3, [r7, #28]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d102      	bne.n	8012d86 <accept_function+0x1e>
    return ERR_VAL;
 8012d80:	f06f 0305 	mvn.w	r3, #5
 8012d84:	e0a1      	b.n	8012eca <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8012d86:	69fb      	ldr	r3, [r7, #28]
 8012d88:	3314      	adds	r3, #20
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	f007 fcc9 	bl	801a722 <sys_mbox_valid>
 8012d90:	4603      	mov	r3, r0
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d102      	bne.n	8012d9c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8012d96:	f06f 0305 	mvn.w	r3, #5
 8012d9a:	e096      	b.n	8012eca <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8012d9c:	68bb      	ldr	r3, [r7, #8]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d11b      	bne.n	8012dda <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8012da2:	69fb      	ldr	r3, [r7, #28]
 8012da4:	f103 0414 	add.w	r4, r3, #20
 8012da8:	f06f 000c 	mvn.w	r0, #12
 8012dac:	f7ff fcb6 	bl	801271c <lwip_netconn_err_to_msg>
 8012db0:	4603      	mov	r3, r0
 8012db2:	4619      	mov	r1, r3
 8012db4:	4620      	mov	r0, r4
 8012db6:	f007 fc3f 	bl	801a638 <sys_mbox_trypost>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d109      	bne.n	8012dd4 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8012dc0:	69fb      	ldr	r3, [r7, #28]
 8012dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d005      	beq.n	8012dd4 <accept_function+0x6c>
 8012dc8:	69fb      	ldr	r3, [r7, #28]
 8012dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dcc:	2200      	movs	r2, #0
 8012dce:	2100      	movs	r1, #0
 8012dd0:	69f8      	ldr	r0, [r7, #28]
 8012dd2:	4798      	blx	r3
    }
    return ERR_VAL;
 8012dd4:	f06f 0305 	mvn.w	r3, #5
 8012dd8:	e077      	b.n	8012eca <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8012dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d006      	beq.n	8012df0 <accept_function+0x88>
 8012de2:	4b3c      	ldr	r3, [pc, #240]	; (8012ed4 <accept_function+0x16c>)
 8012de4:	f240 222a 	movw	r2, #554	; 0x22a
 8012de8:	493b      	ldr	r1, [pc, #236]	; (8012ed8 <accept_function+0x170>)
 8012dea:	483c      	ldr	r0, [pc, #240]	; (8012edc <accept_function+0x174>)
 8012dec:	f011 f8fc 	bl	8023fe8 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8012df0:	69fb      	ldr	r3, [r7, #28]
 8012df2:	781a      	ldrb	r2, [r3, #0]
 8012df4:	69fb      	ldr	r3, [r7, #28]
 8012df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012df8:	4619      	mov	r1, r3
 8012dfa:	4610      	mov	r0, r2
 8012dfc:	f000 f8f0 	bl	8012fe0 <netconn_alloc>
 8012e00:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8012e02:	69bb      	ldr	r3, [r7, #24]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d11b      	bne.n	8012e40 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8012e08:	69fb      	ldr	r3, [r7, #28]
 8012e0a:	f103 0414 	add.w	r4, r3, #20
 8012e0e:	f06f 000c 	mvn.w	r0, #12
 8012e12:	f7ff fc83 	bl	801271c <lwip_netconn_err_to_msg>
 8012e16:	4603      	mov	r3, r0
 8012e18:	4619      	mov	r1, r3
 8012e1a:	4620      	mov	r0, r4
 8012e1c:	f007 fc0c 	bl	801a638 <sys_mbox_trypost>
 8012e20:	4603      	mov	r3, r0
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d109      	bne.n	8012e3a <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8012e26:	69fb      	ldr	r3, [r7, #28]
 8012e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d005      	beq.n	8012e3a <accept_function+0xd2>
 8012e2e:	69fb      	ldr	r3, [r7, #28]
 8012e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e32:	2200      	movs	r2, #0
 8012e34:	2100      	movs	r1, #0
 8012e36:	69f8      	ldr	r0, [r7, #28]
 8012e38:	4798      	blx	r3
    }
    return ERR_MEM;
 8012e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8012e3e:	e044      	b.n	8012eca <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8012e40:	69bb      	ldr	r3, [r7, #24]
 8012e42:	68ba      	ldr	r2, [r7, #8]
 8012e44:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8012e46:	69b8      	ldr	r0, [r7, #24]
 8012e48:	f7ff ff66 	bl	8012d18 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8012e4c:	69fb      	ldr	r3, [r7, #28]
 8012e4e:	3314      	adds	r3, #20
 8012e50:	69b9      	ldr	r1, [r7, #24]
 8012e52:	4618      	mov	r0, r3
 8012e54:	f007 fbf0 	bl	801a638 <sys_mbox_trypost>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d02a      	beq.n	8012eb4 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8012e5e:	69bb      	ldr	r3, [r7, #24]
 8012e60:	685b      	ldr	r3, [r3, #4]
 8012e62:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8012e64:	2100      	movs	r1, #0
 8012e66:	6978      	ldr	r0, [r7, #20]
 8012e68:	f009 f96a 	bl	801c140 <tcp_arg>
    tcp_recv(pcb, NULL);
 8012e6c:	2100      	movs	r1, #0
 8012e6e:	6978      	ldr	r0, [r7, #20]
 8012e70:	f009 f978 	bl	801c164 <tcp_recv>
    tcp_sent(pcb, NULL);
 8012e74:	2100      	movs	r1, #0
 8012e76:	6978      	ldr	r0, [r7, #20]
 8012e78:	f009 f996 	bl	801c1a8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	2100      	movs	r1, #0
 8012e80:	6978      	ldr	r0, [r7, #20]
 8012e82:	f009 f9ed 	bl	801c260 <tcp_poll>
    tcp_err(pcb, NULL);
 8012e86:	2100      	movs	r1, #0
 8012e88:	6978      	ldr	r0, [r7, #20]
 8012e8a:	f009 f9af 	bl	801c1ec <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8012e8e:	69bb      	ldr	r3, [r7, #24]
 8012e90:	2200      	movs	r2, #0
 8012e92:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8012e94:	69bb      	ldr	r3, [r7, #24]
 8012e96:	3310      	adds	r3, #16
 8012e98:	4618      	mov	r0, r3
 8012e9a:	f007 fbbb 	bl	801a614 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8012e9e:	69bb      	ldr	r3, [r7, #24]
 8012ea0:	3310      	adds	r3, #16
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	f007 fc4e 	bl	801a744 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8012ea8:	69b8      	ldr	r0, [r7, #24]
 8012eaa:	f000 f907 	bl	80130bc <netconn_free>
    return ERR_MEM;
 8012eae:	f04f 33ff 	mov.w	r3, #4294967295
 8012eb2:	e00a      	b.n	8012eca <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8012eb4:	69fb      	ldr	r3, [r7, #28]
 8012eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d005      	beq.n	8012ec8 <accept_function+0x160>
 8012ebc:	69fb      	ldr	r3, [r7, #28]
 8012ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	2100      	movs	r1, #0
 8012ec4:	69f8      	ldr	r0, [r7, #28]
 8012ec6:	4798      	blx	r3
  }

  return ERR_OK;
 8012ec8:	2300      	movs	r3, #0
}
 8012eca:	4618      	mov	r0, r3
 8012ecc:	3724      	adds	r7, #36	; 0x24
 8012ece:	46bd      	mov	sp, r7
 8012ed0:	bd90      	pop	{r4, r7, pc}
 8012ed2:	bf00      	nop
 8012ed4:	0802519c 	.word	0x0802519c
 8012ed8:	08025374 	.word	0x08025374
 8012edc:	080251fc 	.word	0x080251fc

08012ee0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8012ee0:	b590      	push	{r4, r7, lr}
 8012ee2:	b085      	sub	sp, #20
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8012ee8:	2300      	movs	r3, #0
 8012eea:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	685b      	ldr	r3, [r3, #4]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d006      	beq.n	8012f04 <pcb_new+0x24>
 8012ef6:	4b2b      	ldr	r3, [pc, #172]	; (8012fa4 <pcb_new+0xc4>)
 8012ef8:	f240 2265 	movw	r2, #613	; 0x265
 8012efc:	492a      	ldr	r1, [pc, #168]	; (8012fa8 <pcb_new+0xc8>)
 8012efe:	482b      	ldr	r0, [pc, #172]	; (8012fac <pcb_new+0xcc>)
 8012f00:	f011 f872 	bl	8023fe8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	781b      	ldrb	r3, [r3, #0]
 8012f0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012f0e:	2b10      	cmp	r3, #16
 8012f10:	d022      	beq.n	8012f58 <pcb_new+0x78>
 8012f12:	2b20      	cmp	r3, #32
 8012f14:	d133      	bne.n	8012f7e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	681c      	ldr	r4, [r3, #0]
 8012f1a:	7bfb      	ldrb	r3, [r7, #15]
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f00e fdd2 	bl	8021ac6 <udp_new_ip_type>
 8012f22:	4603      	mov	r3, r0
 8012f24:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	685b      	ldr	r3, [r3, #4]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d02a      	beq.n	8012f86 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	781b      	ldrb	r3, [r3, #0]
 8012f36:	2b22      	cmp	r3, #34	; 0x22
 8012f38:	d104      	bne.n	8012f44 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	685b      	ldr	r3, [r3, #4]
 8012f40:	2201      	movs	r2, #1
 8012f42:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	6858      	ldr	r0, [r3, #4]
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	461a      	mov	r2, r3
 8012f50:	4917      	ldr	r1, [pc, #92]	; (8012fb0 <pcb_new+0xd0>)
 8012f52:	f00e fd3f 	bl	80219d4 <udp_recv>
      }
      break;
 8012f56:	e016      	b.n	8012f86 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	681c      	ldr	r4, [r3, #0]
 8012f5c:	7bfb      	ldrb	r3, [r7, #15]
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f009 f8e0 	bl	801c124 <tcp_new_ip_type>
 8012f64:	4603      	mov	r3, r0
 8012f66:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	685b      	ldr	r3, [r3, #4]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d00b      	beq.n	8012f8a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	4618      	mov	r0, r3
 8012f78:	f7ff fece 	bl	8012d18 <setup_tcp>
      }
      break;
 8012f7c:	e005      	b.n	8012f8a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	22fa      	movs	r2, #250	; 0xfa
 8012f82:	711a      	strb	r2, [r3, #4]
      return;
 8012f84:	e00a      	b.n	8012f9c <pcb_new+0xbc>
      break;
 8012f86:	bf00      	nop
 8012f88:	e000      	b.n	8012f8c <pcb_new+0xac>
      break;
 8012f8a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	685b      	ldr	r3, [r3, #4]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d102      	bne.n	8012f9c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	22ff      	movs	r2, #255	; 0xff
 8012f9a:	711a      	strb	r2, [r3, #4]
  }
}
 8012f9c:	3714      	adds	r7, #20
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	bd90      	pop	{r4, r7, pc}
 8012fa2:	bf00      	nop
 8012fa4:	0802519c 	.word	0x0802519c
 8012fa8:	0802539c 	.word	0x0802539c
 8012fac:	080251fc 	.word	0x080251fc
 8012fb0:	080127f5 	.word	0x080127f5

08012fb4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b084      	sub	sp, #16
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	685b      	ldr	r3, [r3, #4]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d102      	bne.n	8012fd6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8012fd0:	68f8      	ldr	r0, [r7, #12]
 8012fd2:	f7ff ff85 	bl	8012ee0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8012fd6:	bf00      	nop
 8012fd8:	3710      	adds	r7, #16
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	bd80      	pop	{r7, pc}
	...

08012fe0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b086      	sub	sp, #24
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	6039      	str	r1, [r7, #0]
 8012fea:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8012fec:	2300      	movs	r3, #0
 8012fee:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8012ff0:	2007      	movs	r0, #7
 8012ff2:	f005 ffff 	bl	8018ff4 <memp_malloc>
 8012ff6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d101      	bne.n	8013002 <netconn_alloc+0x22>
    return NULL;
 8012ffe:	2300      	movs	r3, #0
 8013000:	e052      	b.n	80130a8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	2200      	movs	r2, #0
 8013006:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	79fa      	ldrb	r2, [r7, #7]
 801300c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	2200      	movs	r2, #0
 8013012:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8013014:	79fb      	ldrb	r3, [r7, #7]
 8013016:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801301a:	2b10      	cmp	r3, #16
 801301c:	d004      	beq.n	8013028 <netconn_alloc+0x48>
 801301e:	2b20      	cmp	r3, #32
 8013020:	d105      	bne.n	801302e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8013022:	2306      	movs	r3, #6
 8013024:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8013026:	e00a      	b.n	801303e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8013028:	2306      	movs	r3, #6
 801302a:	617b      	str	r3, [r7, #20]
      break;
 801302c:	e007      	b.n	801303e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 801302e:	4b20      	ldr	r3, [pc, #128]	; (80130b0 <netconn_alloc+0xd0>)
 8013030:	f240 22e5 	movw	r2, #741	; 0x2e5
 8013034:	491f      	ldr	r1, [pc, #124]	; (80130b4 <netconn_alloc+0xd4>)
 8013036:	4820      	ldr	r0, [pc, #128]	; (80130b8 <netconn_alloc+0xd8>)
 8013038:	f010 ffd6 	bl	8023fe8 <iprintf>
      goto free_and_return;
 801303c:	e02f      	b.n	801309e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	3310      	adds	r3, #16
 8013042:	6979      	ldr	r1, [r7, #20]
 8013044:	4618      	mov	r0, r3
 8013046:	f007 fac3 	bl	801a5d0 <sys_mbox_new>
 801304a:	4603      	mov	r3, r0
 801304c:	2b00      	cmp	r3, #0
 801304e:	d125      	bne.n	801309c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	330c      	adds	r3, #12
 8013054:	2100      	movs	r1, #0
 8013056:	4618      	mov	r0, r3
 8013058:	f007 fb81 	bl	801a75e <sys_sem_new>
 801305c:	4603      	mov	r3, r0
 801305e:	2b00      	cmp	r3, #0
 8013060:	d005      	beq.n	801306e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	3310      	adds	r3, #16
 8013066:	4618      	mov	r0, r3
 8013068:	f007 fad4 	bl	801a614 <sys_mbox_free>
    goto free_and_return;
 801306c:	e017      	b.n	801309e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	3314      	adds	r3, #20
 8013072:	4618      	mov	r0, r3
 8013074:	f007 fb66 	bl	801a744 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	2200      	movs	r2, #0
 801307c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	f04f 32ff 	mov.w	r2, #4294967295
 8013084:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	683a      	ldr	r2, [r7, #0]
 801308a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	2200      	movs	r2, #0
 8013090:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	7cfa      	ldrb	r2, [r7, #19]
 8013096:	771a      	strb	r2, [r3, #28]
  return conn;
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	e005      	b.n	80130a8 <netconn_alloc+0xc8>
    goto free_and_return;
 801309c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 801309e:	68f9      	ldr	r1, [r7, #12]
 80130a0:	2007      	movs	r0, #7
 80130a2:	f005 fff9 	bl	8019098 <memp_free>
  return NULL;
 80130a6:	2300      	movs	r3, #0
}
 80130a8:	4618      	mov	r0, r3
 80130aa:	3718      	adds	r7, #24
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bd80      	pop	{r7, pc}
 80130b0:	0802519c 	.word	0x0802519c
 80130b4:	080253bc 	.word	0x080253bc
 80130b8:	080251fc 	.word	0x080251fc

080130bc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b082      	sub	sp, #8
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	685b      	ldr	r3, [r3, #4]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d006      	beq.n	80130da <netconn_free+0x1e>
 80130cc:	4b1b      	ldr	r3, [pc, #108]	; (801313c <netconn_free+0x80>)
 80130ce:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80130d2:	491b      	ldr	r1, [pc, #108]	; (8013140 <netconn_free+0x84>)
 80130d4:	481b      	ldr	r0, [pc, #108]	; (8013144 <netconn_free+0x88>)
 80130d6:	f010 ff87 	bl	8023fe8 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	3310      	adds	r3, #16
 80130de:	4618      	mov	r0, r3
 80130e0:	f007 fb1f 	bl	801a722 <sys_mbox_valid>
 80130e4:	4603      	mov	r3, r0
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d006      	beq.n	80130f8 <netconn_free+0x3c>
 80130ea:	4b14      	ldr	r3, [pc, #80]	; (801313c <netconn_free+0x80>)
 80130ec:	f44f 7249 	mov.w	r2, #804	; 0x324
 80130f0:	4915      	ldr	r1, [pc, #84]	; (8013148 <netconn_free+0x8c>)
 80130f2:	4814      	ldr	r0, [pc, #80]	; (8013144 <netconn_free+0x88>)
 80130f4:	f010 ff78 	bl	8023fe8 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	3314      	adds	r3, #20
 80130fc:	4618      	mov	r0, r3
 80130fe:	f007 fb10 	bl	801a722 <sys_mbox_valid>
 8013102:	4603      	mov	r3, r0
 8013104:	2b00      	cmp	r3, #0
 8013106:	d006      	beq.n	8013116 <netconn_free+0x5a>
 8013108:	4b0c      	ldr	r3, [pc, #48]	; (801313c <netconn_free+0x80>)
 801310a:	f240 3227 	movw	r2, #807	; 0x327
 801310e:	490f      	ldr	r1, [pc, #60]	; (801314c <netconn_free+0x90>)
 8013110:	480c      	ldr	r0, [pc, #48]	; (8013144 <netconn_free+0x88>)
 8013112:	f010 ff69 	bl	8023fe8 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	330c      	adds	r3, #12
 801311a:	4618      	mov	r0, r3
 801311c:	f007 fb85 	bl	801a82a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	330c      	adds	r3, #12
 8013124:	4618      	mov	r0, r3
 8013126:	f007 fb9e 	bl	801a866 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 801312a:	6879      	ldr	r1, [r7, #4]
 801312c:	2007      	movs	r0, #7
 801312e:	f005 ffb3 	bl	8019098 <memp_free>
}
 8013132:	bf00      	nop
 8013134:	3708      	adds	r7, #8
 8013136:	46bd      	mov	sp, r7
 8013138:	bd80      	pop	{r7, pc}
 801313a:	bf00      	nop
 801313c:	0802519c 	.word	0x0802519c
 8013140:	080253e4 	.word	0x080253e4
 8013144:	080251fc 	.word	0x080251fc
 8013148:	08025414 	.word	0x08025414
 801314c:	08025450 	.word	0x08025450

08013150 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b086      	sub	sp, #24
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	3310      	adds	r3, #16
 801315c:	4618      	mov	r0, r3
 801315e:	f007 fae0 	bl	801a722 <sys_mbox_valid>
 8013162:	4603      	mov	r3, r0
 8013164:	2b00      	cmp	r3, #0
 8013166:	d02f      	beq.n	80131c8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8013168:	e018      	b.n	801319c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	781b      	ldrb	r3, [r3, #0]
 801316e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013172:	2b10      	cmp	r3, #16
 8013174:	d10e      	bne.n	8013194 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8013176:	693b      	ldr	r3, [r7, #16]
 8013178:	f107 020f 	add.w	r2, r7, #15
 801317c:	4611      	mov	r1, r2
 801317e:	4618      	mov	r0, r3
 8013180:	f7ff fafe 	bl	8012780 <lwip_netconn_is_err_msg>
 8013184:	4603      	mov	r3, r0
 8013186:	2b00      	cmp	r3, #0
 8013188:	d108      	bne.n	801319c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 801318a:	693b      	ldr	r3, [r7, #16]
 801318c:	4618      	mov	r0, r3
 801318e:	f006 fe1b 	bl	8019dc8 <pbuf_free>
 8013192:	e003      	b.n	801319c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8013194:	693b      	ldr	r3, [r7, #16]
 8013196:	4618      	mov	r0, r3
 8013198:	f005 ffa8 	bl	80190ec <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	3310      	adds	r3, #16
 80131a0:	f107 0210 	add.w	r2, r7, #16
 80131a4:	4611      	mov	r1, r2
 80131a6:	4618      	mov	r0, r3
 80131a8:	f007 fa9f 	bl	801a6ea <sys_arch_mbox_tryfetch>
 80131ac:	4603      	mov	r3, r0
 80131ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131b2:	d1da      	bne.n	801316a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	3310      	adds	r3, #16
 80131b8:	4618      	mov	r0, r3
 80131ba:	f007 fa2b 	bl	801a614 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	3310      	adds	r3, #16
 80131c2:	4618      	mov	r0, r3
 80131c4:	f007 fabe 	bl	801a744 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	3314      	adds	r3, #20
 80131cc:	4618      	mov	r0, r3
 80131ce:	f007 faa8 	bl	801a722 <sys_mbox_valid>
 80131d2:	4603      	mov	r3, r0
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d034      	beq.n	8013242 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80131d8:	e01d      	b.n	8013216 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80131da:	693b      	ldr	r3, [r7, #16]
 80131dc:	f107 020e 	add.w	r2, r7, #14
 80131e0:	4611      	mov	r1, r2
 80131e2:	4618      	mov	r0, r3
 80131e4:	f7ff facc 	bl	8012780 <lwip_netconn_is_err_msg>
 80131e8:	4603      	mov	r3, r0
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d113      	bne.n	8013216 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80131ee:	693b      	ldr	r3, [r7, #16]
 80131f0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80131f2:	6978      	ldr	r0, [r7, #20]
 80131f4:	f7ff ffac 	bl	8013150 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80131f8:	697b      	ldr	r3, [r7, #20]
 80131fa:	685b      	ldr	r3, [r3, #4]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d007      	beq.n	8013210 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8013200:	697b      	ldr	r3, [r7, #20]
 8013202:	685b      	ldr	r3, [r3, #4]
 8013204:	4618      	mov	r0, r3
 8013206:	f007 ff11 	bl	801b02c <tcp_abort>
            newconn->pcb.tcp = NULL;
 801320a:	697b      	ldr	r3, [r7, #20]
 801320c:	2200      	movs	r2, #0
 801320e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8013210:	6978      	ldr	r0, [r7, #20]
 8013212:	f7ff ff53 	bl	80130bc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	3314      	adds	r3, #20
 801321a:	f107 0210 	add.w	r2, r7, #16
 801321e:	4611      	mov	r1, r2
 8013220:	4618      	mov	r0, r3
 8013222:	f007 fa62 	bl	801a6ea <sys_arch_mbox_tryfetch>
 8013226:	4603      	mov	r3, r0
 8013228:	f1b3 3fff 	cmp.w	r3, #4294967295
 801322c:	d1d5      	bne.n	80131da <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	3314      	adds	r3, #20
 8013232:	4618      	mov	r0, r3
 8013234:	f007 f9ee 	bl	801a614 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	3314      	adds	r3, #20
 801323c:	4618      	mov	r0, r3
 801323e:	f007 fa81 	bl	801a744 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8013242:	bf00      	nop
 8013244:	3718      	adds	r7, #24
 8013246:	46bd      	mov	sp, r7
 8013248:	bd80      	pop	{r7, pc}
	...

0801324c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b086      	sub	sp, #24
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
 8013254:	460b      	mov	r3, r1
 8013256:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8013258:	2300      	movs	r3, #0
 801325a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d106      	bne.n	8013270 <lwip_netconn_do_close_internal+0x24>
 8013262:	4ba1      	ldr	r3, [pc, #644]	; (80134e8 <lwip_netconn_do_close_internal+0x29c>)
 8013264:	f240 32a2 	movw	r2, #930	; 0x3a2
 8013268:	49a0      	ldr	r1, [pc, #640]	; (80134ec <lwip_netconn_do_close_internal+0x2a0>)
 801326a:	48a1      	ldr	r0, [pc, #644]	; (80134f0 <lwip_netconn_do_close_internal+0x2a4>)
 801326c:	f010 febc 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	781b      	ldrb	r3, [r3, #0]
 8013274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013278:	2b10      	cmp	r3, #16
 801327a:	d006      	beq.n	801328a <lwip_netconn_do_close_internal+0x3e>
 801327c:	4b9a      	ldr	r3, [pc, #616]	; (80134e8 <lwip_netconn_do_close_internal+0x29c>)
 801327e:	f240 32a3 	movw	r2, #931	; 0x3a3
 8013282:	499c      	ldr	r1, [pc, #624]	; (80134f4 <lwip_netconn_do_close_internal+0x2a8>)
 8013284:	489a      	ldr	r0, [pc, #616]	; (80134f0 <lwip_netconn_do_close_internal+0x2a4>)
 8013286:	f010 feaf 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	785b      	ldrb	r3, [r3, #1]
 801328e:	2b04      	cmp	r3, #4
 8013290:	d006      	beq.n	80132a0 <lwip_netconn_do_close_internal+0x54>
 8013292:	4b95      	ldr	r3, [pc, #596]	; (80134e8 <lwip_netconn_do_close_internal+0x29c>)
 8013294:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8013298:	4997      	ldr	r1, [pc, #604]	; (80134f8 <lwip_netconn_do_close_internal+0x2ac>)
 801329a:	4895      	ldr	r0, [pc, #596]	; (80134f0 <lwip_netconn_do_close_internal+0x2a4>)
 801329c:	f010 fea4 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	685b      	ldr	r3, [r3, #4]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d106      	bne.n	80132b6 <lwip_netconn_do_close_internal+0x6a>
 80132a8:	4b8f      	ldr	r3, [pc, #572]	; (80134e8 <lwip_netconn_do_close_internal+0x29c>)
 80132aa:	f240 32a5 	movw	r2, #933	; 0x3a5
 80132ae:	4993      	ldr	r1, [pc, #588]	; (80134fc <lwip_netconn_do_close_internal+0x2b0>)
 80132b0:	488f      	ldr	r0, [pc, #572]	; (80134f0 <lwip_netconn_do_close_internal+0x2a4>)
 80132b2:	f010 fe99 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	6a1b      	ldr	r3, [r3, #32]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d106      	bne.n	80132cc <lwip_netconn_do_close_internal+0x80>
 80132be:	4b8a      	ldr	r3, [pc, #552]	; (80134e8 <lwip_netconn_do_close_internal+0x29c>)
 80132c0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80132c4:	498e      	ldr	r1, [pc, #568]	; (8013500 <lwip_netconn_do_close_internal+0x2b4>)
 80132c6:	488a      	ldr	r0, [pc, #552]	; (80134f0 <lwip_netconn_do_close_internal+0x2a4>)
 80132c8:	f010 fe8e 	bl	8023fe8 <iprintf>

  tpcb = conn->pcb.tcp;
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	685b      	ldr	r3, [r3, #4]
 80132d0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	6a1b      	ldr	r3, [r3, #32]
 80132d6:	7a1b      	ldrb	r3, [r3, #8]
 80132d8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80132da:	7bfb      	ldrb	r3, [r7, #15]
 80132dc:	f003 0301 	and.w	r3, r3, #1
 80132e0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80132e2:	7bfb      	ldrb	r3, [r7, #15]
 80132e4:	f003 0302 	and.w	r3, r3, #2
 80132e8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80132ea:	7bfb      	ldrb	r3, [r7, #15]
 80132ec:	2b03      	cmp	r3, #3
 80132ee:	d102      	bne.n	80132f6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80132f0:	2301      	movs	r3, #1
 80132f2:	75bb      	strb	r3, [r7, #22]
 80132f4:	e01f      	b.n	8013336 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80132f6:	7bbb      	ldrb	r3, [r7, #14]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d00e      	beq.n	801331a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80132fc:	693b      	ldr	r3, [r7, #16]
 80132fe:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8013300:	2b05      	cmp	r3, #5
 8013302:	d007      	beq.n	8013314 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8013304:	693b      	ldr	r3, [r7, #16]
 8013306:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8013308:	2b06      	cmp	r3, #6
 801330a:	d003      	beq.n	8013314 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 801330c:	693b      	ldr	r3, [r7, #16]
 801330e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8013310:	2b08      	cmp	r3, #8
 8013312:	d102      	bne.n	801331a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8013314:	2301      	movs	r3, #1
 8013316:	75bb      	strb	r3, [r7, #22]
 8013318:	e00d      	b.n	8013336 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 801331a:	7b7b      	ldrb	r3, [r7, #13]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d008      	beq.n	8013332 <lwip_netconn_do_close_internal+0xe6>
 8013320:	693b      	ldr	r3, [r7, #16]
 8013322:	8b5b      	ldrh	r3, [r3, #26]
 8013324:	f003 0310 	and.w	r3, r3, #16
 8013328:	2b00      	cmp	r3, #0
 801332a:	d002      	beq.n	8013332 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 801332c:	2301      	movs	r3, #1
 801332e:	75bb      	strb	r3, [r7, #22]
 8013330:	e001      	b.n	8013336 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8013332:	2300      	movs	r3, #0
 8013334:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8013336:	7dbb      	ldrb	r3, [r7, #22]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d003      	beq.n	8013344 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 801333c:	2100      	movs	r1, #0
 801333e:	6938      	ldr	r0, [r7, #16]
 8013340:	f008 fefe 	bl	801c140 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8013344:	693b      	ldr	r3, [r7, #16]
 8013346:	7d1b      	ldrb	r3, [r3, #20]
 8013348:	2b01      	cmp	r3, #1
 801334a:	d104      	bne.n	8013356 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 801334c:	2100      	movs	r1, #0
 801334e:	6938      	ldr	r0, [r7, #16]
 8013350:	f008 ff6e 	bl	801c230 <tcp_accept>
 8013354:	e01d      	b.n	8013392 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8013356:	7bbb      	ldrb	r3, [r7, #14]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d007      	beq.n	801336c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 801335c:	2100      	movs	r1, #0
 801335e:	6938      	ldr	r0, [r7, #16]
 8013360:	f008 ff00 	bl	801c164 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8013364:	2100      	movs	r1, #0
 8013366:	6938      	ldr	r0, [r7, #16]
 8013368:	f008 ff62 	bl	801c230 <tcp_accept>
    }
    if (shut_tx) {
 801336c:	7b7b      	ldrb	r3, [r7, #13]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d003      	beq.n	801337a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8013372:	2100      	movs	r1, #0
 8013374:	6938      	ldr	r0, [r7, #16]
 8013376:	f008 ff17 	bl	801c1a8 <tcp_sent>
    }
    if (shut_close) {
 801337a:	7dbb      	ldrb	r3, [r7, #22]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d008      	beq.n	8013392 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8013380:	2200      	movs	r2, #0
 8013382:	2100      	movs	r1, #0
 8013384:	6938      	ldr	r0, [r7, #16]
 8013386:	f008 ff6b 	bl	801c260 <tcp_poll>
      tcp_err(tpcb, NULL);
 801338a:	2100      	movs	r1, #0
 801338c:	6938      	ldr	r0, [r7, #16]
 801338e:	f008 ff2d 	bl	801c1ec <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8013392:	7dbb      	ldrb	r3, [r7, #22]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d005      	beq.n	80133a4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8013398:	6938      	ldr	r0, [r7, #16]
 801339a:	f007 fd03 	bl	801ada4 <tcp_close>
 801339e:	4603      	mov	r3, r0
 80133a0:	75fb      	strb	r3, [r7, #23]
 80133a2:	e007      	b.n	80133b4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80133a4:	7bbb      	ldrb	r3, [r7, #14]
 80133a6:	7b7a      	ldrb	r2, [r7, #13]
 80133a8:	4619      	mov	r1, r3
 80133aa:	6938      	ldr	r0, [r7, #16]
 80133ac:	f007 fd26 	bl	801adfc <tcp_shutdown>
 80133b0:	4603      	mov	r3, r0
 80133b2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80133b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d102      	bne.n	80133c2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80133bc:	2301      	movs	r3, #1
 80133be:	757b      	strb	r3, [r7, #21]
 80133c0:	e016      	b.n	80133f0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80133c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80133c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133ca:	d10f      	bne.n	80133ec <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	6a1b      	ldr	r3, [r3, #32]
 80133d0:	7a5b      	ldrb	r3, [r3, #9]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d10c      	bne.n	80133f0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80133d6:	2301      	movs	r3, #1
 80133d8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80133da:	7dbb      	ldrb	r3, [r7, #22]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d007      	beq.n	80133f0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80133e0:	6938      	ldr	r0, [r7, #16]
 80133e2:	f007 fe23 	bl	801b02c <tcp_abort>
          err = ERR_OK;
 80133e6:	2300      	movs	r3, #0
 80133e8:	75fb      	strb	r3, [r7, #23]
 80133ea:	e001      	b.n	80133f0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80133ec:	2301      	movs	r3, #1
 80133ee:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80133f0:	7d7b      	ldrb	r3, [r7, #21]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d044      	beq.n	8013480 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	6a1b      	ldr	r3, [r3, #32]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	330c      	adds	r3, #12
 80133fe:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	6a1b      	ldr	r3, [r3, #32]
 8013404:	7dfa      	ldrb	r2, [r7, #23]
 8013406:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	2200      	movs	r2, #0
 801340c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	2200      	movs	r2, #0
 8013412:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8013414:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d129      	bne.n	8013470 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 801341c:	7dbb      	ldrb	r3, [r7, #22]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d00c      	beq.n	801343c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	2200      	movs	r2, #0
 8013426:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801342c:	2b00      	cmp	r3, #0
 801342e:	d005      	beq.n	801343c <lwip_netconn_do_close_internal+0x1f0>
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013434:	2200      	movs	r2, #0
 8013436:	2104      	movs	r1, #4
 8013438:	6878      	ldr	r0, [r7, #4]
 801343a:	4798      	blx	r3
      }
      if (shut_rx) {
 801343c:	7bbb      	ldrb	r3, [r7, #14]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d009      	beq.n	8013456 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013446:	2b00      	cmp	r3, #0
 8013448:	d005      	beq.n	8013456 <lwip_netconn_do_close_internal+0x20a>
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801344e:	2200      	movs	r2, #0
 8013450:	2100      	movs	r1, #0
 8013452:	6878      	ldr	r0, [r7, #4]
 8013454:	4798      	blx	r3
      }
      if (shut_tx) {
 8013456:	7b7b      	ldrb	r3, [r7, #13]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d009      	beq.n	8013470 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013460:	2b00      	cmp	r3, #0
 8013462:	d005      	beq.n	8013470 <lwip_netconn_do_close_internal+0x224>
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013468:	2200      	movs	r2, #0
 801346a:	2102      	movs	r1, #2
 801346c:	6878      	ldr	r0, [r7, #4]
 801346e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8013470:	78fb      	ldrb	r3, [r7, #3]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d002      	beq.n	801347c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8013476:	68b8      	ldr	r0, [r7, #8]
 8013478:	f007 f9ca 	bl	801a810 <sys_sem_signal>
    }
    return ERR_OK;
 801347c:	2300      	movs	r3, #0
 801347e:	e02e      	b.n	80134de <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8013480:	7d7b      	ldrb	r3, [r7, #21]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d11e      	bne.n	80134c4 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8013486:	693b      	ldr	r3, [r7, #16]
 8013488:	7d1b      	ldrb	r3, [r3, #20]
 801348a:	2b01      	cmp	r3, #1
 801348c:	d106      	bne.n	801349c <lwip_netconn_do_close_internal+0x250>
 801348e:	4b16      	ldr	r3, [pc, #88]	; (80134e8 <lwip_netconn_do_close_internal+0x29c>)
 8013490:	f240 4241 	movw	r2, #1089	; 0x441
 8013494:	491b      	ldr	r1, [pc, #108]	; (8013504 <lwip_netconn_do_close_internal+0x2b8>)
 8013496:	4816      	ldr	r0, [pc, #88]	; (80134f0 <lwip_netconn_do_close_internal+0x2a4>)
 8013498:	f010 fda6 	bl	8023fe8 <iprintf>
    if (shut_tx) {
 801349c:	7b7b      	ldrb	r3, [r7, #13]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d003      	beq.n	80134aa <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 80134a2:	4919      	ldr	r1, [pc, #100]	; (8013508 <lwip_netconn_do_close_internal+0x2bc>)
 80134a4:	6938      	ldr	r0, [r7, #16]
 80134a6:	f008 fe7f 	bl	801c1a8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80134aa:	2201      	movs	r2, #1
 80134ac:	4917      	ldr	r1, [pc, #92]	; (801350c <lwip_netconn_do_close_internal+0x2c0>)
 80134ae:	6938      	ldr	r0, [r7, #16]
 80134b0:	f008 fed6 	bl	801c260 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80134b4:	4916      	ldr	r1, [pc, #88]	; (8013510 <lwip_netconn_do_close_internal+0x2c4>)
 80134b6:	6938      	ldr	r0, [r7, #16]
 80134b8:	f008 fe98 	bl	801c1ec <tcp_err>
    tcp_arg(tpcb, conn);
 80134bc:	6879      	ldr	r1, [r7, #4]
 80134be:	6938      	ldr	r0, [r7, #16]
 80134c0:	f008 fe3e 	bl	801c140 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80134c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d106      	bne.n	80134da <lwip_netconn_do_close_internal+0x28e>
 80134cc:	4b06      	ldr	r3, [pc, #24]	; (80134e8 <lwip_netconn_do_close_internal+0x29c>)
 80134ce:	f240 424d 	movw	r2, #1101	; 0x44d
 80134d2:	4910      	ldr	r1, [pc, #64]	; (8013514 <lwip_netconn_do_close_internal+0x2c8>)
 80134d4:	4806      	ldr	r0, [pc, #24]	; (80134f0 <lwip_netconn_do_close_internal+0x2a4>)
 80134d6:	f010 fd87 	bl	8023fe8 <iprintf>
  return err;
 80134da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80134de:	4618      	mov	r0, r3
 80134e0:	3718      	adds	r7, #24
 80134e2:	46bd      	mov	sp, r7
 80134e4:	bd80      	pop	{r7, pc}
 80134e6:	bf00      	nop
 80134e8:	0802519c 	.word	0x0802519c
 80134ec:	0802548c 	.word	0x0802548c
 80134f0:	080251fc 	.word	0x080251fc
 80134f4:	0802549c 	.word	0x0802549c
 80134f8:	080254bc 	.word	0x080254bc
 80134fc:	080254e0 	.word	0x080254e0
 8013500:	08025320 	.word	0x08025320
 8013504:	080254f4 	.word	0x080254f4
 8013508:	08012ac5 	.word	0x08012ac5
 801350c:	080129fd 	.word	0x080129fd
 8013510:	08012b6d 	.word	0x08012b6d
 8013514:	08025518 	.word	0x08025518

08013518 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8013518:	b580      	push	{r7, lr}
 801351a:	b084      	sub	sp, #16
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	785b      	ldrb	r3, [r3, #1]
 801352a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 801352c:	7afb      	ldrb	r3, [r7, #11]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d00d      	beq.n	801354e <lwip_netconn_do_delconn+0x36>
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	781b      	ldrb	r3, [r3, #0]
 8013538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801353c:	2b10      	cmp	r3, #16
 801353e:	d006      	beq.n	801354e <lwip_netconn_do_delconn+0x36>
 8013540:	4b60      	ldr	r3, [pc, #384]	; (80136c4 <lwip_netconn_do_delconn+0x1ac>)
 8013542:	f240 425f 	movw	r2, #1119	; 0x45f
 8013546:	4960      	ldr	r1, [pc, #384]	; (80136c8 <lwip_netconn_do_delconn+0x1b0>)
 8013548:	4860      	ldr	r0, [pc, #384]	; (80136cc <lwip_netconn_do_delconn+0x1b4>)
 801354a:	f010 fd4d 	bl	8023fe8 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 801354e:	7afb      	ldrb	r3, [r7, #11]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d005      	beq.n	8013560 <lwip_netconn_do_delconn+0x48>
 8013554:	7afb      	ldrb	r3, [r7, #11]
 8013556:	2b02      	cmp	r3, #2
 8013558:	d002      	beq.n	8013560 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 801355a:	7afb      	ldrb	r3, [r7, #11]
 801355c:	2b03      	cmp	r3, #3
 801355e:	d109      	bne.n	8013574 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8013560:	7afb      	ldrb	r3, [r7, #11]
 8013562:	2b03      	cmp	r3, #3
 8013564:	d10a      	bne.n	801357c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	7f1b      	ldrb	r3, [r3, #28]
 801356c:	f003 0304 	and.w	r3, r3, #4
 8013570:	2b00      	cmp	r3, #0
 8013572:	d103      	bne.n	801357c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	22fb      	movs	r2, #251	; 0xfb
 8013578:	711a      	strb	r2, [r3, #4]
 801357a:	e097      	b.n	80136ac <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 801357c:	7afb      	ldrb	r3, [r7, #11]
 801357e:	2b03      	cmp	r3, #3
 8013580:	d10d      	bne.n	801359e <lwip_netconn_do_delconn+0x86>
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	7f1b      	ldrb	r3, [r3, #28]
 8013588:	f003 0304 	and.w	r3, r3, #4
 801358c:	2b00      	cmp	r3, #0
 801358e:	d106      	bne.n	801359e <lwip_netconn_do_delconn+0x86>
 8013590:	4b4c      	ldr	r3, [pc, #304]	; (80136c4 <lwip_netconn_do_delconn+0x1ac>)
 8013592:	f240 427b 	movw	r2, #1147	; 0x47b
 8013596:	494e      	ldr	r1, [pc, #312]	; (80136d0 <lwip_netconn_do_delconn+0x1b8>)
 8013598:	484c      	ldr	r0, [pc, #304]	; (80136cc <lwip_netconn_do_delconn+0x1b4>)
 801359a:	f010 fd25 	bl	8023fe8 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	2200      	movs	r2, #0
 80135a2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	4618      	mov	r0, r3
 80135aa:	f7ff fdd1 	bl	8013150 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	685b      	ldr	r3, [r3, #4]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d05f      	beq.n	8013678 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	781b      	ldrb	r3, [r3, #0]
 80135be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80135c2:	2b10      	cmp	r3, #16
 80135c4:	d00e      	beq.n	80135e4 <lwip_netconn_do_delconn+0xcc>
 80135c6:	2b20      	cmp	r3, #32
 80135c8:	d000      	beq.n	80135cc <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 80135ca:	e051      	b.n	8013670 <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	685b      	ldr	r3, [r3, #4]
 80135d2:	2200      	movs	r2, #0
 80135d4:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	685b      	ldr	r3, [r3, #4]
 80135dc:	4618      	mov	r0, r3
 80135de:	f00e fa19 	bl	8021a14 <udp_remove>
          break;
 80135e2:	e045      	b.n	8013670 <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	6a1b      	ldr	r3, [r3, #32]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d006      	beq.n	80135fc <lwip_netconn_do_delconn+0xe4>
 80135ee:	4b35      	ldr	r3, [pc, #212]	; (80136c4 <lwip_netconn_do_delconn+0x1ac>)
 80135f0:	f240 4294 	movw	r2, #1172	; 0x494
 80135f4:	4937      	ldr	r1, [pc, #220]	; (80136d4 <lwip_netconn_do_delconn+0x1bc>)
 80135f6:	4835      	ldr	r0, [pc, #212]	; (80136cc <lwip_netconn_do_delconn+0x1b4>)
 80135f8:	f010 fcf6 	bl	8023fe8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	2204      	movs	r2, #4
 8013602:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	2203      	movs	r2, #3
 8013608:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	68fa      	ldr	r2, [r7, #12]
 8013610:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	2100      	movs	r1, #0
 8013618:	4618      	mov	r0, r3
 801361a:	f7ff fe17 	bl	801324c <lwip_netconn_do_close_internal>
 801361e:	4603      	mov	r3, r0
 8013620:	2b00      	cmp	r3, #0
 8013622:	d04a      	beq.n	80136ba <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	785b      	ldrb	r3, [r3, #1]
 801362a:	2b04      	cmp	r3, #4
 801362c:	d006      	beq.n	801363c <lwip_netconn_do_delconn+0x124>
 801362e:	4b25      	ldr	r3, [pc, #148]	; (80136c4 <lwip_netconn_do_delconn+0x1ac>)
 8013630:	f240 429a 	movw	r2, #1178	; 0x49a
 8013634:	4928      	ldr	r1, [pc, #160]	; (80136d8 <lwip_netconn_do_delconn+0x1c0>)
 8013636:	4825      	ldr	r0, [pc, #148]	; (80136cc <lwip_netconn_do_delconn+0x1b4>)
 8013638:	f010 fcd6 	bl	8023fe8 <iprintf>
            UNLOCK_TCPIP_CORE();
 801363c:	4827      	ldr	r0, [pc, #156]	; (80136dc <lwip_netconn_do_delconn+0x1c4>)
 801363e:	f007 f958 	bl	801a8f2 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	330c      	adds	r3, #12
 8013648:	2100      	movs	r1, #0
 801364a:	4618      	mov	r0, r3
 801364c:	f007 f8af 	bl	801a7ae <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8013650:	4822      	ldr	r0, [pc, #136]	; (80136dc <lwip_netconn_do_delconn+0x1c4>)
 8013652:	f007 f93f 	bl	801a8d4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	785b      	ldrb	r3, [r3, #1]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d02c      	beq.n	80136ba <lwip_netconn_do_delconn+0x1a2>
 8013660:	4b18      	ldr	r3, [pc, #96]	; (80136c4 <lwip_netconn_do_delconn+0x1ac>)
 8013662:	f240 429e 	movw	r2, #1182	; 0x49e
 8013666:	491c      	ldr	r1, [pc, #112]	; (80136d8 <lwip_netconn_do_delconn+0x1c0>)
 8013668:	4818      	ldr	r0, [pc, #96]	; (80136cc <lwip_netconn_do_delconn+0x1b4>)
 801366a:	f010 fcbd 	bl	8023fe8 <iprintf>
          return;
 801366e:	e024      	b.n	80136ba <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	2200      	movs	r2, #0
 8013676:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801367e:	2b00      	cmp	r3, #0
 8013680:	d007      	beq.n	8013692 <lwip_netconn_do_delconn+0x17a>
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013688:	68fa      	ldr	r2, [r7, #12]
 801368a:	6810      	ldr	r0, [r2, #0]
 801368c:	2200      	movs	r2, #0
 801368e:	2100      	movs	r1, #0
 8013690:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013698:	2b00      	cmp	r3, #0
 801369a:	d007      	beq.n	80136ac <lwip_netconn_do_delconn+0x194>
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136a2:	68fa      	ldr	r2, [r7, #12]
 80136a4:	6810      	ldr	r0, [r2, #0]
 80136a6:	2200      	movs	r2, #0
 80136a8:	2102      	movs	r1, #2
 80136aa:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	330c      	adds	r3, #12
 80136b2:	4618      	mov	r0, r3
 80136b4:	f007 f8c6 	bl	801a844 <sys_sem_valid>
 80136b8:	e000      	b.n	80136bc <lwip_netconn_do_delconn+0x1a4>
          return;
 80136ba:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80136bc:	3710      	adds	r7, #16
 80136be:	46bd      	mov	sp, r7
 80136c0:	bd80      	pop	{r7, pc}
 80136c2:	bf00      	nop
 80136c4:	0802519c 	.word	0x0802519c
 80136c8:	08025528 	.word	0x08025528
 80136cc:	080251fc 	.word	0x080251fc
 80136d0:	0802553c 	.word	0x0802553c
 80136d4:	0802555c 	.word	0x0802555c
 80136d8:	08025578 	.word	0x08025578
 80136dc:	20011834 	.word	0x20011834

080136e0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b084      	sub	sp, #16
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80136ec:	68bb      	ldr	r3, [r7, #8]
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	685b      	ldr	r3, [r3, #4]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d026      	beq.n	8013744 <lwip_netconn_do_bind+0x64>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80136f6:	68bb      	ldr	r3, [r7, #8]
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	781b      	ldrb	r3, [r3, #0]
 80136fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013700:	2b10      	cmp	r3, #16
 8013702:	d00e      	beq.n	8013722 <lwip_netconn_do_bind+0x42>
 8013704:	2b20      	cmp	r3, #32
 8013706:	d119      	bne.n	801373c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8013708:	68bb      	ldr	r3, [r7, #8]
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	6858      	ldr	r0, [r3, #4]
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	6899      	ldr	r1, [r3, #8]
 8013712:	68bb      	ldr	r3, [r7, #8]
 8013714:	899b      	ldrh	r3, [r3, #12]
 8013716:	461a      	mov	r2, r3
 8013718:	f00e f866 	bl	80217e8 <udp_bind>
 801371c:	4603      	mov	r3, r0
 801371e:	73fb      	strb	r3, [r7, #15]
        break;
 8013720:	e012      	b.n	8013748 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8013722:	68bb      	ldr	r3, [r7, #8]
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	6858      	ldr	r0, [r3, #4]
 8013728:	68bb      	ldr	r3, [r7, #8]
 801372a:	6899      	ldr	r1, [r3, #8]
 801372c:	68bb      	ldr	r3, [r7, #8]
 801372e:	899b      	ldrh	r3, [r3, #12]
 8013730:	461a      	mov	r2, r3
 8013732:	f007 fc87 	bl	801b044 <tcp_bind>
 8013736:	4603      	mov	r3, r0
 8013738:	73fb      	strb	r3, [r7, #15]
        break;
 801373a:	e005      	b.n	8013748 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 801373c:	23fa      	movs	r3, #250	; 0xfa
 801373e:	73fb      	strb	r3, [r7, #15]
        break;
 8013740:	bf00      	nop
 8013742:	e001      	b.n	8013748 <lwip_netconn_do_bind+0x68>
    }
  } else {
    err = ERR_VAL;
 8013744:	23fa      	movs	r3, #250	; 0xfa
 8013746:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8013748:	68bb      	ldr	r3, [r7, #8]
 801374a:	7bfa      	ldrb	r2, [r7, #15]
 801374c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801374e:	bf00      	nop
 8013750:	3710      	adds	r7, #16
 8013752:	46bd      	mov	sp, r7
 8013754:	bd80      	pop	{r7, pc}
	...

08013758 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b086      	sub	sp, #24
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8013764:	697b      	ldr	r3, [r7, #20]
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	685b      	ldr	r3, [r3, #4]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d07f      	beq.n	801386e <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801376e:	697b      	ldr	r3, [r7, #20]
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	781b      	ldrb	r3, [r3, #0]
 8013774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013778:	2b10      	cmp	r3, #16
 801377a:	d175      	bne.n	8013868 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 801377c:	697b      	ldr	r3, [r7, #20]
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	785b      	ldrb	r3, [r3, #1]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d165      	bne.n	8013852 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8013786:	697b      	ldr	r3, [r7, #20]
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	685b      	ldr	r3, [r3, #4]
 801378c:	7d1b      	ldrb	r3, [r3, #20]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d002      	beq.n	8013798 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8013792:	23fa      	movs	r3, #250	; 0xfa
 8013794:	72fb      	strb	r3, [r7, #11]
 8013796:	e06c      	b.n	8013872 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8013798:	23ff      	movs	r3, #255	; 0xff
 801379a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 801379c:	697b      	ldr	r3, [r7, #20]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	685b      	ldr	r3, [r3, #4]
 80137a2:	f107 020b 	add.w	r2, r7, #11
 80137a6:	7cf9      	ldrb	r1, [r7, #19]
 80137a8:	4618      	mov	r0, r3
 80137aa:	f007 fd03 	bl	801b1b4 <tcp_listen_with_backlog_and_err>
 80137ae:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d05d      	beq.n	8013872 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80137b6:	697b      	ldr	r3, [r7, #20]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	3310      	adds	r3, #16
 80137bc:	4618      	mov	r0, r3
 80137be:	f006 ffb0 	bl	801a722 <sys_mbox_valid>
 80137c2:	4603      	mov	r3, r0
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d00b      	beq.n	80137e0 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 80137c8:	697b      	ldr	r3, [r7, #20]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	3310      	adds	r3, #16
 80137ce:	4618      	mov	r0, r3
 80137d0:	f006 ff20 	bl	801a614 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80137d4:	697b      	ldr	r3, [r7, #20]
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	3310      	adds	r3, #16
 80137da:	4618      	mov	r0, r3
 80137dc:	f006 ffb2 	bl	801a744 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 80137e0:	2300      	movs	r3, #0
 80137e2:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 80137e4:	697b      	ldr	r3, [r7, #20]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	3314      	adds	r3, #20
 80137ea:	4618      	mov	r0, r3
 80137ec:	f006 ff99 	bl	801a722 <sys_mbox_valid>
 80137f0:	4603      	mov	r3, r0
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d108      	bne.n	8013808 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80137f6:	697b      	ldr	r3, [r7, #20]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	3314      	adds	r3, #20
 80137fc:	2106      	movs	r1, #6
 80137fe:	4618      	mov	r0, r3
 8013800:	f006 fee6 	bl	801a5d0 <sys_mbox_new>
 8013804:	4603      	mov	r3, r0
 8013806:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8013808:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d118      	bne.n	8013842 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8013810:	697b      	ldr	r3, [r7, #20]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	2202      	movs	r2, #2
 8013816:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8013818:	697b      	ldr	r3, [r7, #20]
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	68fa      	ldr	r2, [r7, #12]
 801381e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8013820:	697b      	ldr	r3, [r7, #20]
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	685a      	ldr	r2, [r3, #4]
 8013826:	697b      	ldr	r3, [r7, #20]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	4619      	mov	r1, r3
 801382c:	4610      	mov	r0, r2
 801382e:	f008 fc87 	bl	801c140 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8013832:	697b      	ldr	r3, [r7, #20]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	685b      	ldr	r3, [r3, #4]
 8013838:	4912      	ldr	r1, [pc, #72]	; (8013884 <lwip_netconn_do_listen+0x12c>)
 801383a:	4618      	mov	r0, r3
 801383c:	f008 fcf8 	bl	801c230 <tcp_accept>
 8013840:	e017      	b.n	8013872 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8013842:	68f8      	ldr	r0, [r7, #12]
 8013844:	f007 faae 	bl	801ada4 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8013848:	697b      	ldr	r3, [r7, #20]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	2200      	movs	r2, #0
 801384e:	605a      	str	r2, [r3, #4]
 8013850:	e00f      	b.n	8013872 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8013852:	697b      	ldr	r3, [r7, #20]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	785b      	ldrb	r3, [r3, #1]
 8013858:	2b02      	cmp	r3, #2
 801385a:	d102      	bne.n	8013862 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 801385c:	2300      	movs	r3, #0
 801385e:	72fb      	strb	r3, [r7, #11]
 8013860:	e007      	b.n	8013872 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8013862:	23f5      	movs	r3, #245	; 0xf5
 8013864:	72fb      	strb	r3, [r7, #11]
 8013866:	e004      	b.n	8013872 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8013868:	23f0      	movs	r3, #240	; 0xf0
 801386a:	72fb      	strb	r3, [r7, #11]
 801386c:	e001      	b.n	8013872 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 801386e:	23f5      	movs	r3, #245	; 0xf5
 8013870:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8013872:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8013876:	697b      	ldr	r3, [r7, #20]
 8013878:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801387a:	bf00      	nop
 801387c:	3718      	adds	r7, #24
 801387e:	46bd      	mov	sp, r7
 8013880:	bd80      	pop	{r7, pc}
 8013882:	bf00      	nop
 8013884:	08012d69 	.word	0x08012d69

08013888 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b086      	sub	sp, #24
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8013894:	693b      	ldr	r3, [r7, #16]
 8013896:	2200      	movs	r2, #0
 8013898:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 801389a:	693b      	ldr	r3, [r7, #16]
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	685b      	ldr	r3, [r3, #4]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d022      	beq.n	80138ea <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80138a4:	693b      	ldr	r3, [r7, #16]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	781b      	ldrb	r3, [r3, #0]
 80138aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80138ae:	2b10      	cmp	r3, #16
 80138b0:	d11b      	bne.n	80138ea <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80138b2:	693b      	ldr	r3, [r7, #16]
 80138b4:	689b      	ldr	r3, [r3, #8]
 80138b6:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80138b8:	697b      	ldr	r3, [r7, #20]
 80138ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80138be:	d202      	bcs.n	80138c6 <lwip_netconn_do_recv+0x3e>
 80138c0:	697b      	ldr	r3, [r7, #20]
 80138c2:	b29b      	uxth	r3, r3
 80138c4:	e001      	b.n	80138ca <lwip_netconn_do_recv+0x42>
 80138c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80138ca:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80138cc:	693b      	ldr	r3, [r7, #16]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	685b      	ldr	r3, [r3, #4]
 80138d2:	89fa      	ldrh	r2, [r7, #14]
 80138d4:	4611      	mov	r1, r2
 80138d6:	4618      	mov	r0, r3
 80138d8:	f007 fd70 	bl	801b3bc <tcp_recved>
        remaining -= recved;
 80138dc:	89fb      	ldrh	r3, [r7, #14]
 80138de:	697a      	ldr	r2, [r7, #20]
 80138e0:	1ad3      	subs	r3, r2, r3
 80138e2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80138e4:	697b      	ldr	r3, [r7, #20]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d1e6      	bne.n	80138b8 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 80138ea:	bf00      	nop
 80138ec:	3718      	adds	r7, #24
 80138ee:	46bd      	mov	sp, r7
 80138f0:	bd80      	pop	{r7, pc}
	...

080138f4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b088      	sub	sp, #32
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
 80138fc:	460b      	mov	r3, r1
 80138fe:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8013900:	2300      	movs	r3, #0
 8013902:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d106      	bne.n	8013918 <lwip_netconn_do_writemore+0x24>
 801390a:	4b96      	ldr	r3, [pc, #600]	; (8013b64 <lwip_netconn_do_writemore+0x270>)
 801390c:	f240 6273 	movw	r2, #1651	; 0x673
 8013910:	4995      	ldr	r1, [pc, #596]	; (8013b68 <lwip_netconn_do_writemore+0x274>)
 8013912:	4896      	ldr	r0, [pc, #600]	; (8013b6c <lwip_netconn_do_writemore+0x278>)
 8013914:	f010 fb68 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	785b      	ldrb	r3, [r3, #1]
 801391c:	2b01      	cmp	r3, #1
 801391e:	d006      	beq.n	801392e <lwip_netconn_do_writemore+0x3a>
 8013920:	4b90      	ldr	r3, [pc, #576]	; (8013b64 <lwip_netconn_do_writemore+0x270>)
 8013922:	f240 6274 	movw	r2, #1652	; 0x674
 8013926:	4992      	ldr	r1, [pc, #584]	; (8013b70 <lwip_netconn_do_writemore+0x27c>)
 8013928:	4890      	ldr	r0, [pc, #576]	; (8013b6c <lwip_netconn_do_writemore+0x278>)
 801392a:	f010 fb5d 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	6a1b      	ldr	r3, [r3, #32]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d106      	bne.n	8013944 <lwip_netconn_do_writemore+0x50>
 8013936:	4b8b      	ldr	r3, [pc, #556]	; (8013b64 <lwip_netconn_do_writemore+0x270>)
 8013938:	f240 6275 	movw	r2, #1653	; 0x675
 801393c:	498d      	ldr	r1, [pc, #564]	; (8013b74 <lwip_netconn_do_writemore+0x280>)
 801393e:	488b      	ldr	r0, [pc, #556]	; (8013b6c <lwip_netconn_do_writemore+0x278>)
 8013940:	f010 fb52 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	685b      	ldr	r3, [r3, #4]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d106      	bne.n	801395a <lwip_netconn_do_writemore+0x66>
 801394c:	4b85      	ldr	r3, [pc, #532]	; (8013b64 <lwip_netconn_do_writemore+0x270>)
 801394e:	f240 6276 	movw	r2, #1654	; 0x676
 8013952:	4989      	ldr	r1, [pc, #548]	; (8013b78 <lwip_netconn_do_writemore+0x284>)
 8013954:	4885      	ldr	r0, [pc, #532]	; (8013b6c <lwip_netconn_do_writemore+0x278>)
 8013956:	f010 fb47 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	6a1b      	ldr	r3, [r3, #32]
 801395e:	699a      	ldr	r2, [r3, #24]
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	6a1b      	ldr	r3, [r3, #32]
 8013964:	695b      	ldr	r3, [r3, #20]
 8013966:	429a      	cmp	r2, r3
 8013968:	d306      	bcc.n	8013978 <lwip_netconn_do_writemore+0x84>
 801396a:	4b7e      	ldr	r3, [pc, #504]	; (8013b64 <lwip_netconn_do_writemore+0x270>)
 801396c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8013970:	4982      	ldr	r1, [pc, #520]	; (8013b7c <lwip_netconn_do_writemore+0x288>)
 8013972:	487e      	ldr	r0, [pc, #504]	; (8013b6c <lwip_netconn_do_writemore+0x278>)
 8013974:	f010 fb38 	bl	8023fe8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	6a1b      	ldr	r3, [r3, #32]
 801397c:	899b      	ldrh	r3, [r3, #12]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d106      	bne.n	8013990 <lwip_netconn_do_writemore+0x9c>
 8013982:	4b78      	ldr	r3, [pc, #480]	; (8013b64 <lwip_netconn_do_writemore+0x270>)
 8013984:	f240 6279 	movw	r2, #1657	; 0x679
 8013988:	497d      	ldr	r1, [pc, #500]	; (8013b80 <lwip_netconn_do_writemore+0x28c>)
 801398a:	4878      	ldr	r0, [pc, #480]	; (8013b6c <lwip_netconn_do_writemore+0x278>)
 801398c:	f010 fb2c 	bl	8023fe8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	6a1b      	ldr	r3, [r3, #32]
 8013994:	7f1b      	ldrb	r3, [r3, #28]
 8013996:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	7f1b      	ldrb	r3, [r3, #28]
 801399c:	f003 0302 	and.w	r3, r3, #2
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d104      	bne.n	80139ae <lwip_netconn_do_writemore+0xba>
 80139a4:	7ebb      	ldrb	r3, [r7, #26]
 80139a6:	f003 0304 	and.w	r3, r3, #4
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d001      	beq.n	80139b2 <lwip_netconn_do_writemore+0xbe>
 80139ae:	2301      	movs	r3, #1
 80139b0:	e000      	b.n	80139b4 <lwip_netconn_do_writemore+0xc0>
 80139b2:	2300      	movs	r3, #0
 80139b4:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	6a1b      	ldr	r3, [r3, #32]
 80139ba:	689b      	ldr	r3, [r3, #8]
 80139bc:	681a      	ldr	r2, [r3, #0]
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	6a1b      	ldr	r3, [r3, #32]
 80139c2:	691b      	ldr	r3, [r3, #16]
 80139c4:	4413      	add	r3, r2
 80139c6:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	6a1b      	ldr	r3, [r3, #32]
 80139cc:	689b      	ldr	r3, [r3, #8]
 80139ce:	685a      	ldr	r2, [r3, #4]
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	6a1b      	ldr	r3, [r3, #32]
 80139d4:	691b      	ldr	r3, [r3, #16]
 80139d6:	1ad3      	subs	r3, r2, r3
 80139d8:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80139da:	693b      	ldr	r3, [r7, #16]
 80139dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80139e0:	d307      	bcc.n	80139f2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 80139e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80139e6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80139e8:	7ebb      	ldrb	r3, [r7, #26]
 80139ea:	f043 0302 	orr.w	r3, r3, #2
 80139ee:	76bb      	strb	r3, [r7, #26]
 80139f0:	e001      	b.n	80139f6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 80139f2:	693b      	ldr	r3, [r7, #16]
 80139f4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	685b      	ldr	r3, [r3, #4]
 80139fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80139fe:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8013a00:	89fa      	ldrh	r2, [r7, #14]
 8013a02:	8bbb      	ldrh	r3, [r7, #28]
 8013a04:	429a      	cmp	r2, r3
 8013a06:	d216      	bcs.n	8013a36 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8013a08:	89fb      	ldrh	r3, [r7, #14]
 8013a0a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8013a0c:	7e3b      	ldrb	r3, [r7, #24]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d00d      	beq.n	8013a2e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8013a12:	8bbb      	ldrh	r3, [r7, #28]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d10e      	bne.n	8013a36 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	6a1b      	ldr	r3, [r3, #32]
 8013a1c:	699b      	ldr	r3, [r3, #24]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d102      	bne.n	8013a28 <lwip_netconn_do_writemore+0x134>
 8013a22:	f06f 0306 	mvn.w	r3, #6
 8013a26:	e000      	b.n	8013a2a <lwip_netconn_do_writemore+0x136>
 8013a28:	2300      	movs	r3, #0
 8013a2a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8013a2c:	e07d      	b.n	8013b2a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8013a2e:	7ebb      	ldrb	r3, [r7, #26]
 8013a30:	f043 0302 	orr.w	r3, r3, #2
 8013a34:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	6a1b      	ldr	r3, [r3, #32]
 8013a3a:	691a      	ldr	r2, [r3, #16]
 8013a3c:	8bbb      	ldrh	r3, [r7, #28]
 8013a3e:	441a      	add	r2, r3
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	6a1b      	ldr	r3, [r3, #32]
 8013a44:	689b      	ldr	r3, [r3, #8]
 8013a46:	685b      	ldr	r3, [r3, #4]
 8013a48:	429a      	cmp	r2, r3
 8013a4a:	d906      	bls.n	8013a5a <lwip_netconn_do_writemore+0x166>
 8013a4c:	4b45      	ldr	r3, [pc, #276]	; (8013b64 <lwip_netconn_do_writemore+0x270>)
 8013a4e:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8013a52:	494c      	ldr	r1, [pc, #304]	; (8013b84 <lwip_netconn_do_writemore+0x290>)
 8013a54:	4845      	ldr	r0, [pc, #276]	; (8013b6c <lwip_netconn_do_writemore+0x278>)
 8013a56:	f010 fac7 	bl	8023fe8 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8013a5a:	8bbb      	ldrh	r3, [r7, #28]
 8013a5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013a60:	4293      	cmp	r3, r2
 8013a62:	d103      	bne.n	8013a6c <lwip_netconn_do_writemore+0x178>
 8013a64:	693b      	ldr	r3, [r7, #16]
 8013a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013a6a:	d209      	bcs.n	8013a80 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8013a6c:	693b      	ldr	r3, [r7, #16]
 8013a6e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8013a70:	8bba      	ldrh	r2, [r7, #28]
 8013a72:	429a      	cmp	r2, r3
 8013a74:	d10b      	bne.n	8013a8e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	6a1b      	ldr	r3, [r3, #32]
 8013a7a:	899b      	ldrh	r3, [r3, #12]
 8013a7c:	2b01      	cmp	r3, #1
 8013a7e:	d906      	bls.n	8013a8e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8013a80:	2301      	movs	r3, #1
 8013a82:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8013a84:	7ebb      	ldrb	r3, [r7, #26]
 8013a86:	f043 0302 	orr.w	r3, r3, #2
 8013a8a:	76bb      	strb	r3, [r7, #26]
 8013a8c:	e001      	b.n	8013a92 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8013a8e:	2300      	movs	r3, #0
 8013a90:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	6858      	ldr	r0, [r3, #4]
 8013a96:	7ebb      	ldrb	r3, [r7, #26]
 8013a98:	8bba      	ldrh	r2, [r7, #28]
 8013a9a:	6979      	ldr	r1, [r7, #20]
 8013a9c:	f00b fa8c 	bl	801efb8 <tcp_write>
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8013aa4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d12c      	bne.n	8013b06 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	6a1b      	ldr	r3, [r3, #32]
 8013ab0:	6999      	ldr	r1, [r3, #24]
 8013ab2:	8bba      	ldrh	r2, [r7, #28]
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	6a1b      	ldr	r3, [r3, #32]
 8013ab8:	440a      	add	r2, r1
 8013aba:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	6a1b      	ldr	r3, [r3, #32]
 8013ac0:	6919      	ldr	r1, [r3, #16]
 8013ac2:	8bba      	ldrh	r2, [r7, #28]
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	6a1b      	ldr	r3, [r3, #32]
 8013ac8:	440a      	add	r2, r1
 8013aca:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	6a1b      	ldr	r3, [r3, #32]
 8013ad0:	691a      	ldr	r2, [r3, #16]
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	6a1b      	ldr	r3, [r3, #32]
 8013ad6:	689b      	ldr	r3, [r3, #8]
 8013ad8:	685b      	ldr	r3, [r3, #4]
 8013ada:	429a      	cmp	r2, r3
 8013adc:	d113      	bne.n	8013b06 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	6a1b      	ldr	r3, [r3, #32]
 8013ae2:	899a      	ldrh	r2, [r3, #12]
 8013ae4:	3a01      	subs	r2, #1
 8013ae6:	b292      	uxth	r2, r2
 8013ae8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	6a1b      	ldr	r3, [r3, #32]
 8013aee:	899b      	ldrh	r3, [r3, #12]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d008      	beq.n	8013b06 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	6a1b      	ldr	r3, [r3, #32]
 8013af8:	689a      	ldr	r2, [r3, #8]
 8013afa:	3208      	adds	r2, #8
 8013afc:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	6a1b      	ldr	r3, [r3, #32]
 8013b02:	2200      	movs	r2, #0
 8013b04:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8013b06:	7e7b      	ldrb	r3, [r7, #25]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d004      	beq.n	8013b16 <lwip_netconn_do_writemore+0x222>
 8013b0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	f43f af50 	beq.w	80139b6 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8013b16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d004      	beq.n	8013b28 <lwip_netconn_do_writemore+0x234>
 8013b1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b26:	d146      	bne.n	8013bb6 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8013b28:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8013b2a:	7e3b      	ldrb	r3, [r7, #24]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d02b      	beq.n	8013b88 <lwip_netconn_do_writemore+0x294>
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	6a1b      	ldr	r3, [r3, #32]
 8013b34:	699a      	ldr	r2, [r3, #24]
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	6a1b      	ldr	r3, [r3, #32]
 8013b3a:	695b      	ldr	r3, [r3, #20]
 8013b3c:	429a      	cmp	r2, r3
 8013b3e:	d223      	bcs.n	8013b88 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d005      	beq.n	8013b54 <lwip_netconn_do_writemore+0x260>
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	2103      	movs	r1, #3
 8013b50:	6878      	ldr	r0, [r7, #4]
 8013b52:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	7f1b      	ldrb	r3, [r3, #28]
 8013b58:	f043 0310 	orr.w	r3, r3, #16
 8013b5c:	b2da      	uxtb	r2, r3
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	771a      	strb	r2, [r3, #28]
 8013b62:	e028      	b.n	8013bb6 <lwip_netconn_do_writemore+0x2c2>
 8013b64:	0802519c 	.word	0x0802519c
 8013b68:	08025310 	.word	0x08025310
 8013b6c:	080251fc 	.word	0x080251fc
 8013b70:	08025618 	.word	0x08025618
 8013b74:	08025320 	.word	0x08025320
 8013b78:	08025638 	.word	0x08025638
 8013b7c:	08025650 	.word	0x08025650
 8013b80:	08025690 	.word	0x08025690
 8013b84:	080256b8 	.word	0x080256b8
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	685b      	ldr	r3, [r3, #4]
 8013b8c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013b90:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8013b94:	d305      	bcc.n	8013ba2 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	685b      	ldr	r3, [r3, #4]
 8013b9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8013b9e:	2b04      	cmp	r3, #4
 8013ba0:	d909      	bls.n	8013bb6 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d005      	beq.n	8013bb6 <lwip_netconn_do_writemore+0x2c2>
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bae:	2200      	movs	r2, #0
 8013bb0:	2103      	movs	r1, #3
 8013bb2:	6878      	ldr	r0, [r7, #4]
 8013bb4:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8013bb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d11d      	bne.n	8013bfa <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	6a1b      	ldr	r3, [r3, #32]
 8013bc2:	699a      	ldr	r2, [r3, #24]
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	6a1b      	ldr	r3, [r3, #32]
 8013bc8:	695b      	ldr	r3, [r3, #20]
 8013bca:	429a      	cmp	r2, r3
 8013bcc:	d002      	beq.n	8013bd4 <lwip_netconn_do_writemore+0x2e0>
 8013bce:	7e3b      	ldrb	r3, [r7, #24]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d001      	beq.n	8013bd8 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8013bd4:	2301      	movs	r3, #1
 8013bd6:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	685b      	ldr	r3, [r3, #4]
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f00b ffd7 	bl	801fb90 <tcp_output>
 8013be2:	4603      	mov	r3, r0
 8013be4:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8013be6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8013bea:	f113 0f04 	cmn.w	r3, #4
 8013bee:	d12c      	bne.n	8013c4a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8013bf0:	7b3b      	ldrb	r3, [r7, #12]
 8013bf2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8013bf4:	2301      	movs	r3, #1
 8013bf6:	76fb      	strb	r3, [r7, #27]
 8013bf8:	e027      	b.n	8013c4a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8013bfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c02:	d120      	bne.n	8013c46 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	685b      	ldr	r3, [r3, #4]
 8013c08:	4618      	mov	r0, r3
 8013c0a:	f00b ffc1 	bl	801fb90 <tcp_output>
 8013c0e:	4603      	mov	r3, r0
 8013c10:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8013c12:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8013c16:	f113 0f04 	cmn.w	r3, #4
 8013c1a:	d104      	bne.n	8013c26 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8013c1c:	7b7b      	ldrb	r3, [r7, #13]
 8013c1e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8013c20:	2301      	movs	r3, #1
 8013c22:	76fb      	strb	r3, [r7, #27]
 8013c24:	e011      	b.n	8013c4a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8013c26:	7e3b      	ldrb	r3, [r7, #24]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d00e      	beq.n	8013c4a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	6a1b      	ldr	r3, [r3, #32]
 8013c30:	699b      	ldr	r3, [r3, #24]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d102      	bne.n	8013c3c <lwip_netconn_do_writemore+0x348>
 8013c36:	f06f 0306 	mvn.w	r3, #6
 8013c3a:	e000      	b.n	8013c3e <lwip_netconn_do_writemore+0x34a>
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8013c40:	2301      	movs	r3, #1
 8013c42:	76fb      	strb	r3, [r7, #27]
 8013c44:	e001      	b.n	8013c4a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8013c46:	2301      	movs	r3, #1
 8013c48:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8013c4a:	7efb      	ldrb	r3, [r7, #27]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d015      	beq.n	8013c7c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	6a1b      	ldr	r3, [r3, #32]
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	330c      	adds	r3, #12
 8013c58:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	6a1b      	ldr	r3, [r3, #32]
 8013c5e:	7ffa      	ldrb	r2, [r7, #31]
 8013c60:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	2200      	movs	r2, #0
 8013c66:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8013c6e:	78fb      	ldrb	r3, [r7, #3]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d006      	beq.n	8013c82 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8013c74:	68b8      	ldr	r0, [r7, #8]
 8013c76:	f006 fdcb 	bl	801a810 <sys_sem_signal>
 8013c7a:	e002      	b.n	8013c82 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8013c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8013c80:	e000      	b.n	8013c84 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8013c82:	2300      	movs	r3, #0
}
 8013c84:	4618      	mov	r0, r3
 8013c86:	3720      	adds	r7, #32
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	bd80      	pop	{r7, pc}

08013c8c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b084      	sub	sp, #16
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	785b      	ldrb	r3, [r3, #1]
 8013c9e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	685b      	ldr	r3, [r3, #4]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d069      	beq.n	8013d7e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	781b      	ldrb	r3, [r3, #0]
 8013cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8013cb4:	2b10      	cmp	r3, #16
 8013cb6:	d162      	bne.n	8013d7e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8013cbc:	2b03      	cmp	r3, #3
 8013cbe:	d002      	beq.n	8013cc6 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8013cc0:	7afb      	ldrb	r3, [r7, #11]
 8013cc2:	2b02      	cmp	r3, #2
 8013cc4:	d05b      	beq.n	8013d7e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8013cc6:	7afb      	ldrb	r3, [r7, #11]
 8013cc8:	2b03      	cmp	r3, #3
 8013cca:	d103      	bne.n	8013cd4 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	22f5      	movs	r2, #245	; 0xf5
 8013cd0:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8013cd2:	e059      	b.n	8013d88 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8013cd4:	7afb      	ldrb	r3, [r7, #11]
 8013cd6:	2b01      	cmp	r3, #1
 8013cd8:	d103      	bne.n	8013ce2 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	22fb      	movs	r2, #251	; 0xfb
 8013cde:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8013ce0:	e052      	b.n	8013d88 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	7a1b      	ldrb	r3, [r3, #8]
 8013ce6:	f003 0301 	and.w	r3, r3, #1
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d004      	beq.n	8013cf8 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	f7ff fa2c 	bl	8013150 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	6a1b      	ldr	r3, [r3, #32]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d006      	beq.n	8013d10 <lwip_netconn_do_close+0x84>
 8013d02:	4b23      	ldr	r3, [pc, #140]	; (8013d90 <lwip_netconn_do_close+0x104>)
 8013d04:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8013d08:	4922      	ldr	r1, [pc, #136]	; (8013d94 <lwip_netconn_do_close+0x108>)
 8013d0a:	4823      	ldr	r0, [pc, #140]	; (8013d98 <lwip_netconn_do_close+0x10c>)
 8013d0c:	f010 f96c 	bl	8023fe8 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	2204      	movs	r2, #4
 8013d16:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	68fa      	ldr	r2, [r7, #12]
 8013d1e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	2100      	movs	r1, #0
 8013d26:	4618      	mov	r0, r3
 8013d28:	f7ff fa90 	bl	801324c <lwip_netconn_do_close_internal>
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d029      	beq.n	8013d86 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	785b      	ldrb	r3, [r3, #1]
 8013d38:	2b04      	cmp	r3, #4
 8013d3a:	d006      	beq.n	8013d4a <lwip_netconn_do_close+0xbe>
 8013d3c:	4b14      	ldr	r3, [pc, #80]	; (8013d90 <lwip_netconn_do_close+0x104>)
 8013d3e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8013d42:	4916      	ldr	r1, [pc, #88]	; (8013d9c <lwip_netconn_do_close+0x110>)
 8013d44:	4814      	ldr	r0, [pc, #80]	; (8013d98 <lwip_netconn_do_close+0x10c>)
 8013d46:	f010 f94f 	bl	8023fe8 <iprintf>
        UNLOCK_TCPIP_CORE();
 8013d4a:	4815      	ldr	r0, [pc, #84]	; (8013da0 <lwip_netconn_do_close+0x114>)
 8013d4c:	f006 fdd1 	bl	801a8f2 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	330c      	adds	r3, #12
 8013d56:	2100      	movs	r1, #0
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f006 fd28 	bl	801a7ae <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8013d5e:	4810      	ldr	r0, [pc, #64]	; (8013da0 <lwip_netconn_do_close+0x114>)
 8013d60:	f006 fdb8 	bl	801a8d4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	785b      	ldrb	r3, [r3, #1]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d00b      	beq.n	8013d86 <lwip_netconn_do_close+0xfa>
 8013d6e:	4b08      	ldr	r3, [pc, #32]	; (8013d90 <lwip_netconn_do_close+0x104>)
 8013d70:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8013d74:	4909      	ldr	r1, [pc, #36]	; (8013d9c <lwip_netconn_do_close+0x110>)
 8013d76:	4808      	ldr	r0, [pc, #32]	; (8013d98 <lwip_netconn_do_close+0x10c>)
 8013d78:	f010 f936 	bl	8023fe8 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8013d7c:	e003      	b.n	8013d86 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	22f5      	movs	r2, #245	; 0xf5
 8013d82:	711a      	strb	r2, [r3, #4]
 8013d84:	e000      	b.n	8013d88 <lwip_netconn_do_close+0xfc>
      return;
 8013d86:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8013d88:	3710      	adds	r7, #16
 8013d8a:	46bd      	mov	sp, r7
 8013d8c:	bd80      	pop	{r7, pc}
 8013d8e:	bf00      	nop
 8013d90:	0802519c 	.word	0x0802519c
 8013d94:	0802555c 	.word	0x0802555c
 8013d98:	080251fc 	.word	0x080251fc
 8013d9c:	08025578 	.word	0x08025578
 8013da0:	20011834 	.word	0x20011834

08013da4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8013da4:	b480      	push	{r7}
 8013da6:	b083      	sub	sp, #12
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	4603      	mov	r3, r0
 8013dac:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8013dae:	88fb      	ldrh	r3, [r7, #6]
 8013db0:	021b      	lsls	r3, r3, #8
 8013db2:	b21a      	sxth	r2, r3
 8013db4:	88fb      	ldrh	r3, [r7, #6]
 8013db6:	0a1b      	lsrs	r3, r3, #8
 8013db8:	b29b      	uxth	r3, r3
 8013dba:	b21b      	sxth	r3, r3
 8013dbc:	4313      	orrs	r3, r2
 8013dbe:	b21b      	sxth	r3, r3
 8013dc0:	b29b      	uxth	r3, r3
}
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	370c      	adds	r7, #12
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dcc:	4770      	bx	lr

08013dce <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8013dce:	b480      	push	{r7}
 8013dd0:	b083      	sub	sp, #12
 8013dd2:	af00      	add	r7, sp, #0
 8013dd4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	061a      	lsls	r2, r3, #24
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	021b      	lsls	r3, r3, #8
 8013dde:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013de2:	431a      	orrs	r2, r3
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	0a1b      	lsrs	r3, r3, #8
 8013de8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013dec:	431a      	orrs	r2, r3
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	0e1b      	lsrs	r3, r3, #24
 8013df2:	4313      	orrs	r3, r2
}
 8013df4:	4618      	mov	r0, r3
 8013df6:	370c      	adds	r7, #12
 8013df8:	46bd      	mov	sp, r7
 8013dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dfe:	4770      	bx	lr

08013e00 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8013e04:	4b20      	ldr	r3, [pc, #128]	; (8013e88 <dhcp_inc_pcb_refcount+0x88>)
 8013e06:	781b      	ldrb	r3, [r3, #0]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d133      	bne.n	8013e74 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8013e0c:	4b1f      	ldr	r3, [pc, #124]	; (8013e8c <dhcp_inc_pcb_refcount+0x8c>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d005      	beq.n	8013e20 <dhcp_inc_pcb_refcount+0x20>
 8013e14:	4b1e      	ldr	r3, [pc, #120]	; (8013e90 <dhcp_inc_pcb_refcount+0x90>)
 8013e16:	22e5      	movs	r2, #229	; 0xe5
 8013e18:	491e      	ldr	r1, [pc, #120]	; (8013e94 <dhcp_inc_pcb_refcount+0x94>)
 8013e1a:	481f      	ldr	r0, [pc, #124]	; (8013e98 <dhcp_inc_pcb_refcount+0x98>)
 8013e1c:	f010 f8e4 	bl	8023fe8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8013e20:	f00d fe3a 	bl	8021a98 <udp_new>
 8013e24:	4602      	mov	r2, r0
 8013e26:	4b19      	ldr	r3, [pc, #100]	; (8013e8c <dhcp_inc_pcb_refcount+0x8c>)
 8013e28:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8013e2a:	4b18      	ldr	r3, [pc, #96]	; (8013e8c <dhcp_inc_pcb_refcount+0x8c>)
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d102      	bne.n	8013e38 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8013e32:	f04f 33ff 	mov.w	r3, #4294967295
 8013e36:	e024      	b.n	8013e82 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8013e38:	4b14      	ldr	r3, [pc, #80]	; (8013e8c <dhcp_inc_pcb_refcount+0x8c>)
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	7a5a      	ldrb	r2, [r3, #9]
 8013e3e:	4b13      	ldr	r3, [pc, #76]	; (8013e8c <dhcp_inc_pcb_refcount+0x8c>)
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	f042 0220 	orr.w	r2, r2, #32
 8013e46:	b2d2      	uxtb	r2, r2
 8013e48:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8013e4a:	4b10      	ldr	r3, [pc, #64]	; (8013e8c <dhcp_inc_pcb_refcount+0x8c>)
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	2244      	movs	r2, #68	; 0x44
 8013e50:	4912      	ldr	r1, [pc, #72]	; (8013e9c <dhcp_inc_pcb_refcount+0x9c>)
 8013e52:	4618      	mov	r0, r3
 8013e54:	f00d fcc8 	bl	80217e8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8013e58:	4b0c      	ldr	r3, [pc, #48]	; (8013e8c <dhcp_inc_pcb_refcount+0x8c>)
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	2243      	movs	r2, #67	; 0x43
 8013e5e:	490f      	ldr	r1, [pc, #60]	; (8013e9c <dhcp_inc_pcb_refcount+0x9c>)
 8013e60:	4618      	mov	r0, r3
 8013e62:	f00d fd49 	bl	80218f8 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8013e66:	4b09      	ldr	r3, [pc, #36]	; (8013e8c <dhcp_inc_pcb_refcount+0x8c>)
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	490c      	ldr	r1, [pc, #48]	; (8013ea0 <dhcp_inc_pcb_refcount+0xa0>)
 8013e6e:	4618      	mov	r0, r3
 8013e70:	f00d fdb0 	bl	80219d4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8013e74:	4b04      	ldr	r3, [pc, #16]	; (8013e88 <dhcp_inc_pcb_refcount+0x88>)
 8013e76:	781b      	ldrb	r3, [r3, #0]
 8013e78:	3301      	adds	r3, #1
 8013e7a:	b2da      	uxtb	r2, r3
 8013e7c:	4b02      	ldr	r3, [pc, #8]	; (8013e88 <dhcp_inc_pcb_refcount+0x88>)
 8013e7e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8013e80:	2300      	movs	r3, #0
}
 8013e82:	4618      	mov	r0, r3
 8013e84:	bd80      	pop	{r7, pc}
 8013e86:	bf00      	nop
 8013e88:	20008494 	.word	0x20008494
 8013e8c:	20008490 	.word	0x20008490
 8013e90:	08025738 	.word	0x08025738
 8013e94:	0802578c 	.word	0x0802578c
 8013e98:	080257b4 	.word	0x080257b4
 8013e9c:	08028a28 	.word	0x08028a28
 8013ea0:	08015761 	.word	0x08015761

08013ea4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8013ea8:	4b0e      	ldr	r3, [pc, #56]	; (8013ee4 <dhcp_dec_pcb_refcount+0x40>)
 8013eaa:	781b      	ldrb	r3, [r3, #0]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d105      	bne.n	8013ebc <dhcp_dec_pcb_refcount+0x18>
 8013eb0:	4b0d      	ldr	r3, [pc, #52]	; (8013ee8 <dhcp_dec_pcb_refcount+0x44>)
 8013eb2:	22ff      	movs	r2, #255	; 0xff
 8013eb4:	490d      	ldr	r1, [pc, #52]	; (8013eec <dhcp_dec_pcb_refcount+0x48>)
 8013eb6:	480e      	ldr	r0, [pc, #56]	; (8013ef0 <dhcp_dec_pcb_refcount+0x4c>)
 8013eb8:	f010 f896 	bl	8023fe8 <iprintf>
  dhcp_pcb_refcount--;
 8013ebc:	4b09      	ldr	r3, [pc, #36]	; (8013ee4 <dhcp_dec_pcb_refcount+0x40>)
 8013ebe:	781b      	ldrb	r3, [r3, #0]
 8013ec0:	3b01      	subs	r3, #1
 8013ec2:	b2da      	uxtb	r2, r3
 8013ec4:	4b07      	ldr	r3, [pc, #28]	; (8013ee4 <dhcp_dec_pcb_refcount+0x40>)
 8013ec6:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8013ec8:	4b06      	ldr	r3, [pc, #24]	; (8013ee4 <dhcp_dec_pcb_refcount+0x40>)
 8013eca:	781b      	ldrb	r3, [r3, #0]
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d107      	bne.n	8013ee0 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8013ed0:	4b08      	ldr	r3, [pc, #32]	; (8013ef4 <dhcp_dec_pcb_refcount+0x50>)
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	f00d fd9d 	bl	8021a14 <udp_remove>
    dhcp_pcb = NULL;
 8013eda:	4b06      	ldr	r3, [pc, #24]	; (8013ef4 <dhcp_dec_pcb_refcount+0x50>)
 8013edc:	2200      	movs	r2, #0
 8013ede:	601a      	str	r2, [r3, #0]
  }
}
 8013ee0:	bf00      	nop
 8013ee2:	bd80      	pop	{r7, pc}
 8013ee4:	20008494 	.word	0x20008494
 8013ee8:	08025738 	.word	0x08025738
 8013eec:	080257dc 	.word	0x080257dc
 8013ef0:	080257b4 	.word	0x080257b4
 8013ef4:	20008490 	.word	0x20008490

08013ef8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b084      	sub	sp, #16
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	6a1b      	ldr	r3, [r3, #32]
 8013f04:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013f06:	210c      	movs	r1, #12
 8013f08:	68f8      	ldr	r0, [r7, #12]
 8013f0a:	f001 f83b 	bl	8014f84 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013f0e:	4b06      	ldr	r3, [pc, #24]	; (8013f28 <dhcp_handle_nak+0x30>)
 8013f10:	4a05      	ldr	r2, [pc, #20]	; (8013f28 <dhcp_handle_nak+0x30>)
 8013f12:	4905      	ldr	r1, [pc, #20]	; (8013f28 <dhcp_handle_nak+0x30>)
 8013f14:	6878      	ldr	r0, [r7, #4]
 8013f16:	f005 fac7 	bl	80194a8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8013f1a:	6878      	ldr	r0, [r7, #4]
 8013f1c:	f000 fc2e 	bl	801477c <dhcp_discover>
}
 8013f20:	bf00      	nop
 8013f22:	3710      	adds	r7, #16
 8013f24:	46bd      	mov	sp, r7
 8013f26:	bd80      	pop	{r7, pc}
 8013f28:	08028a28 	.word	0x08028a28

08013f2c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b084      	sub	sp, #16
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	6a1b      	ldr	r3, [r3, #32]
 8013f38:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8013f3a:	2108      	movs	r1, #8
 8013f3c:	68f8      	ldr	r0, [r7, #12]
 8013f3e:	f001 f821 	bl	8014f84 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	331c      	adds	r3, #28
 8013f46:	2200      	movs	r2, #0
 8013f48:	4619      	mov	r1, r3
 8013f4a:	6878      	ldr	r0, [r7, #4]
 8013f4c:	f002 fe3e 	bl	8016bcc <etharp_query>
 8013f50:	4603      	mov	r3, r0
 8013f52:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	799b      	ldrb	r3, [r3, #6]
 8013f58:	2bff      	cmp	r3, #255	; 0xff
 8013f5a:	d005      	beq.n	8013f68 <dhcp_check+0x3c>
    dhcp->tries++;
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	799b      	ldrb	r3, [r3, #6]
 8013f60:	3301      	adds	r3, #1
 8013f62:	b2da      	uxtb	r2, r3
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8013f68:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8013f6c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013f6e:	893b      	ldrh	r3, [r7, #8]
 8013f70:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013f74:	4a06      	ldr	r2, [pc, #24]	; (8013f90 <dhcp_check+0x64>)
 8013f76:	fb82 1203 	smull	r1, r2, r2, r3
 8013f7a:	1152      	asrs	r2, r2, #5
 8013f7c:	17db      	asrs	r3, r3, #31
 8013f7e:	1ad3      	subs	r3, r2, r3
 8013f80:	b29a      	uxth	r2, r3
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8013f86:	bf00      	nop
 8013f88:	3710      	adds	r7, #16
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bd80      	pop	{r7, pc}
 8013f8e:	bf00      	nop
 8013f90:	10624dd3 	.word	0x10624dd3

08013f94 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b084      	sub	sp, #16
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
 8013f9c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	6a1b      	ldr	r3, [r3, #32]
 8013fa2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8013fa4:	4b0c      	ldr	r3, [pc, #48]	; (8013fd8 <dhcp_handle_offer+0x44>)
 8013fa6:	789b      	ldrb	r3, [r3, #2]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d011      	beq.n	8013fd0 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	2200      	movs	r2, #0
 8013fb0:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8013fb2:	4b0a      	ldr	r3, [pc, #40]	; (8013fdc <dhcp_handle_offer+0x48>)
 8013fb4:	689b      	ldr	r3, [r3, #8]
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f7ff ff09 	bl	8013dce <lwip_htonl>
 8013fbc:	4602      	mov	r2, r0
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013fc2:	683b      	ldr	r3, [r7, #0]
 8013fc4:	691a      	ldr	r2, [r3, #16]
 8013fc6:	68fb      	ldr	r3, [r7, #12]
 8013fc8:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8013fca:	6878      	ldr	r0, [r7, #4]
 8013fcc:	f000 f808 	bl	8013fe0 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8013fd0:	bf00      	nop
 8013fd2:	3710      	adds	r7, #16
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	bd80      	pop	{r7, pc}
 8013fd8:	2000df64 	.word	0x2000df64
 8013fdc:	2000df70 	.word	0x2000df70

08013fe0 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8013fe0:	b5b0      	push	{r4, r5, r7, lr}
 8013fe2:	b08a      	sub	sp, #40	; 0x28
 8013fe4:	af02      	add	r7, sp, #8
 8013fe6:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d109      	bne.n	8014002 <dhcp_select+0x22>
 8013fee:	4b71      	ldr	r3, [pc, #452]	; (80141b4 <dhcp_select+0x1d4>)
 8013ff0:	f240 1277 	movw	r2, #375	; 0x177
 8013ff4:	4970      	ldr	r1, [pc, #448]	; (80141b8 <dhcp_select+0x1d8>)
 8013ff6:	4871      	ldr	r0, [pc, #452]	; (80141bc <dhcp_select+0x1dc>)
 8013ff8:	f00f fff6 	bl	8023fe8 <iprintf>
 8013ffc:	f06f 030f 	mvn.w	r3, #15
 8014000:	e0d3      	b.n	80141aa <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	6a1b      	ldr	r3, [r3, #32]
 8014006:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8014008:	69bb      	ldr	r3, [r7, #24]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d109      	bne.n	8014022 <dhcp_select+0x42>
 801400e:	4b69      	ldr	r3, [pc, #420]	; (80141b4 <dhcp_select+0x1d4>)
 8014010:	f240 1279 	movw	r2, #377	; 0x179
 8014014:	496a      	ldr	r1, [pc, #424]	; (80141c0 <dhcp_select+0x1e0>)
 8014016:	4869      	ldr	r0, [pc, #420]	; (80141bc <dhcp_select+0x1dc>)
 8014018:	f00f ffe6 	bl	8023fe8 <iprintf>
 801401c:	f06f 0305 	mvn.w	r3, #5
 8014020:	e0c3      	b.n	80141aa <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8014022:	2101      	movs	r1, #1
 8014024:	69b8      	ldr	r0, [r7, #24]
 8014026:	f000 ffad 	bl	8014f84 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801402a:	f107 030c 	add.w	r3, r7, #12
 801402e:	2203      	movs	r2, #3
 8014030:	69b9      	ldr	r1, [r7, #24]
 8014032:	6878      	ldr	r0, [r7, #4]
 8014034:	f001 fc60 	bl	80158f8 <dhcp_create_msg>
 8014038:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801403a:	697b      	ldr	r3, [r7, #20]
 801403c:	2b00      	cmp	r3, #0
 801403e:	f000 8085 	beq.w	801414c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014042:	697b      	ldr	r3, [r7, #20]
 8014044:	685b      	ldr	r3, [r3, #4]
 8014046:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014048:	89b8      	ldrh	r0, [r7, #12]
 801404a:	693b      	ldr	r3, [r7, #16]
 801404c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014050:	2302      	movs	r3, #2
 8014052:	2239      	movs	r2, #57	; 0x39
 8014054:	f000 ffb0 	bl	8014fb8 <dhcp_option>
 8014058:	4603      	mov	r3, r0
 801405a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801405c:	89b8      	ldrh	r0, [r7, #12]
 801405e:	693b      	ldr	r3, [r7, #16]
 8014060:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014068:	461a      	mov	r2, r3
 801406a:	f000 ffff 	bl	801506c <dhcp_option_short>
 801406e:	4603      	mov	r3, r0
 8014070:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014072:	89b8      	ldrh	r0, [r7, #12]
 8014074:	693b      	ldr	r3, [r7, #16]
 8014076:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801407a:	2304      	movs	r3, #4
 801407c:	2232      	movs	r2, #50	; 0x32
 801407e:	f000 ff9b 	bl	8014fb8 <dhcp_option>
 8014082:	4603      	mov	r3, r0
 8014084:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014086:	89bc      	ldrh	r4, [r7, #12]
 8014088:	693b      	ldr	r3, [r7, #16]
 801408a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801408e:	69bb      	ldr	r3, [r7, #24]
 8014090:	69db      	ldr	r3, [r3, #28]
 8014092:	4618      	mov	r0, r3
 8014094:	f7ff fe9b 	bl	8013dce <lwip_htonl>
 8014098:	4603      	mov	r3, r0
 801409a:	461a      	mov	r2, r3
 801409c:	4629      	mov	r1, r5
 801409e:	4620      	mov	r0, r4
 80140a0:	f001 f816 	bl	80150d0 <dhcp_option_long>
 80140a4:	4603      	mov	r3, r0
 80140a6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80140a8:	89b8      	ldrh	r0, [r7, #12]
 80140aa:	693b      	ldr	r3, [r7, #16]
 80140ac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80140b0:	2304      	movs	r3, #4
 80140b2:	2236      	movs	r2, #54	; 0x36
 80140b4:	f000 ff80 	bl	8014fb8 <dhcp_option>
 80140b8:	4603      	mov	r3, r0
 80140ba:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80140bc:	89bc      	ldrh	r4, [r7, #12]
 80140be:	693b      	ldr	r3, [r7, #16]
 80140c0:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80140c4:	69bb      	ldr	r3, [r7, #24]
 80140c6:	699b      	ldr	r3, [r3, #24]
 80140c8:	4618      	mov	r0, r3
 80140ca:	f7ff fe80 	bl	8013dce <lwip_htonl>
 80140ce:	4603      	mov	r3, r0
 80140d0:	461a      	mov	r2, r3
 80140d2:	4629      	mov	r1, r5
 80140d4:	4620      	mov	r0, r4
 80140d6:	f000 fffb 	bl	80150d0 <dhcp_option_long>
 80140da:	4603      	mov	r3, r0
 80140dc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80140de:	89b8      	ldrh	r0, [r7, #12]
 80140e0:	693b      	ldr	r3, [r7, #16]
 80140e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80140e6:	2304      	movs	r3, #4
 80140e8:	2237      	movs	r2, #55	; 0x37
 80140ea:	f000 ff65 	bl	8014fb8 <dhcp_option>
 80140ee:	4603      	mov	r3, r0
 80140f0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80140f2:	2300      	movs	r3, #0
 80140f4:	77bb      	strb	r3, [r7, #30]
 80140f6:	e00e      	b.n	8014116 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80140f8:	89b8      	ldrh	r0, [r7, #12]
 80140fa:	693b      	ldr	r3, [r7, #16]
 80140fc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014100:	7fbb      	ldrb	r3, [r7, #30]
 8014102:	4a30      	ldr	r2, [pc, #192]	; (80141c4 <dhcp_select+0x1e4>)
 8014104:	5cd3      	ldrb	r3, [r2, r3]
 8014106:	461a      	mov	r2, r3
 8014108:	f000 ff8a 	bl	8015020 <dhcp_option_byte>
 801410c:	4603      	mov	r3, r0
 801410e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014110:	7fbb      	ldrb	r3, [r7, #30]
 8014112:	3301      	adds	r3, #1
 8014114:	77bb      	strb	r3, [r7, #30]
 8014116:	7fbb      	ldrb	r3, [r7, #30]
 8014118:	2b03      	cmp	r3, #3
 801411a:	d9ed      	bls.n	80140f8 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801411c:	89b8      	ldrh	r0, [r7, #12]
 801411e:	693b      	ldr	r3, [r7, #16]
 8014120:	33f0      	adds	r3, #240	; 0xf0
 8014122:	697a      	ldr	r2, [r7, #20]
 8014124:	4619      	mov	r1, r3
 8014126:	f001 fcbd 	bl	8015aa4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801412a:	4b27      	ldr	r3, [pc, #156]	; (80141c8 <dhcp_select+0x1e8>)
 801412c:	6818      	ldr	r0, [r3, #0]
 801412e:	4b27      	ldr	r3, [pc, #156]	; (80141cc <dhcp_select+0x1ec>)
 8014130:	9301      	str	r3, [sp, #4]
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	9300      	str	r3, [sp, #0]
 8014136:	2343      	movs	r3, #67	; 0x43
 8014138:	4a25      	ldr	r2, [pc, #148]	; (80141d0 <dhcp_select+0x1f0>)
 801413a:	6979      	ldr	r1, [r7, #20]
 801413c:	f00d fa6e 	bl	802161c <udp_sendto_if_src>
 8014140:	4603      	mov	r3, r0
 8014142:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014144:	6978      	ldr	r0, [r7, #20]
 8014146:	f005 fe3f 	bl	8019dc8 <pbuf_free>
 801414a:	e001      	b.n	8014150 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801414c:	23ff      	movs	r3, #255	; 0xff
 801414e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014150:	69bb      	ldr	r3, [r7, #24]
 8014152:	799b      	ldrb	r3, [r3, #6]
 8014154:	2bff      	cmp	r3, #255	; 0xff
 8014156:	d005      	beq.n	8014164 <dhcp_select+0x184>
    dhcp->tries++;
 8014158:	69bb      	ldr	r3, [r7, #24]
 801415a:	799b      	ldrb	r3, [r3, #6]
 801415c:	3301      	adds	r3, #1
 801415e:	b2da      	uxtb	r2, r3
 8014160:	69bb      	ldr	r3, [r7, #24]
 8014162:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014164:	69bb      	ldr	r3, [r7, #24]
 8014166:	799b      	ldrb	r3, [r3, #6]
 8014168:	2b05      	cmp	r3, #5
 801416a:	d80d      	bhi.n	8014188 <dhcp_select+0x1a8>
 801416c:	69bb      	ldr	r3, [r7, #24]
 801416e:	799b      	ldrb	r3, [r3, #6]
 8014170:	461a      	mov	r2, r3
 8014172:	2301      	movs	r3, #1
 8014174:	4093      	lsls	r3, r2
 8014176:	b29b      	uxth	r3, r3
 8014178:	461a      	mov	r2, r3
 801417a:	0152      	lsls	r2, r2, #5
 801417c:	1ad2      	subs	r2, r2, r3
 801417e:	0092      	lsls	r2, r2, #2
 8014180:	4413      	add	r3, r2
 8014182:	00db      	lsls	r3, r3, #3
 8014184:	b29b      	uxth	r3, r3
 8014186:	e001      	b.n	801418c <dhcp_select+0x1ac>
 8014188:	f64e 2360 	movw	r3, #60000	; 0xea60
 801418c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801418e:	89fb      	ldrh	r3, [r7, #14]
 8014190:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014194:	4a0f      	ldr	r2, [pc, #60]	; (80141d4 <dhcp_select+0x1f4>)
 8014196:	fb82 1203 	smull	r1, r2, r2, r3
 801419a:	1152      	asrs	r2, r2, #5
 801419c:	17db      	asrs	r3, r3, #31
 801419e:	1ad3      	subs	r3, r2, r3
 80141a0:	b29a      	uxth	r2, r3
 80141a2:	69bb      	ldr	r3, [r7, #24]
 80141a4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80141a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80141aa:	4618      	mov	r0, r3
 80141ac:	3720      	adds	r7, #32
 80141ae:	46bd      	mov	sp, r7
 80141b0:	bdb0      	pop	{r4, r5, r7, pc}
 80141b2:	bf00      	nop
 80141b4:	08025738 	.word	0x08025738
 80141b8:	08025800 	.word	0x08025800
 80141bc:	080257b4 	.word	0x080257b4
 80141c0:	0802581c 	.word	0x0802581c
 80141c4:	20000014 	.word	0x20000014
 80141c8:	20008490 	.word	0x20008490
 80141cc:	08028a28 	.word	0x08028a28
 80141d0:	08028a2c 	.word	0x08028a2c
 80141d4:	10624dd3 	.word	0x10624dd3

080141d8 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b082      	sub	sp, #8
 80141dc:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 80141de:	4b27      	ldr	r3, [pc, #156]	; (801427c <dhcp_coarse_tmr+0xa4>)
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	607b      	str	r3, [r7, #4]
 80141e4:	e042      	b.n	801426c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	6a1b      	ldr	r3, [r3, #32]
 80141ea:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80141ec:	683b      	ldr	r3, [r7, #0]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d039      	beq.n	8014266 <dhcp_coarse_tmr+0x8e>
 80141f2:	683b      	ldr	r3, [r7, #0]
 80141f4:	795b      	ldrb	r3, [r3, #5]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d035      	beq.n	8014266 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80141fa:	683b      	ldr	r3, [r7, #0]
 80141fc:	8a9b      	ldrh	r3, [r3, #20]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d012      	beq.n	8014228 <dhcp_coarse_tmr+0x50>
 8014202:	683b      	ldr	r3, [r7, #0]
 8014204:	8a5b      	ldrh	r3, [r3, #18]
 8014206:	3301      	adds	r3, #1
 8014208:	b29a      	uxth	r2, r3
 801420a:	683b      	ldr	r3, [r7, #0]
 801420c:	825a      	strh	r2, [r3, #18]
 801420e:	683b      	ldr	r3, [r7, #0]
 8014210:	8a5a      	ldrh	r2, [r3, #18]
 8014212:	683b      	ldr	r3, [r7, #0]
 8014214:	8a9b      	ldrh	r3, [r3, #20]
 8014216:	429a      	cmp	r2, r3
 8014218:	d106      	bne.n	8014228 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801421a:	6878      	ldr	r0, [r7, #4]
 801421c:	f000 fe18 	bl	8014e50 <dhcp_release_and_stop>
        dhcp_start(netif);
 8014220:	6878      	ldr	r0, [r7, #4]
 8014222:	f000 f98b 	bl	801453c <dhcp_start>
 8014226:	e01e      	b.n	8014266 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8014228:	683b      	ldr	r3, [r7, #0]
 801422a:	8a1b      	ldrh	r3, [r3, #16]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d00b      	beq.n	8014248 <dhcp_coarse_tmr+0x70>
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	8a1b      	ldrh	r3, [r3, #16]
 8014234:	1e5a      	subs	r2, r3, #1
 8014236:	b291      	uxth	r1, r2
 8014238:	683a      	ldr	r2, [r7, #0]
 801423a:	8211      	strh	r1, [r2, #16]
 801423c:	2b01      	cmp	r3, #1
 801423e:	d103      	bne.n	8014248 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8014240:	6878      	ldr	r0, [r7, #4]
 8014242:	f000 f8c7 	bl	80143d4 <dhcp_t2_timeout>
 8014246:	e00e      	b.n	8014266 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014248:	683b      	ldr	r3, [r7, #0]
 801424a:	89db      	ldrh	r3, [r3, #14]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d00a      	beq.n	8014266 <dhcp_coarse_tmr+0x8e>
 8014250:	683b      	ldr	r3, [r7, #0]
 8014252:	89db      	ldrh	r3, [r3, #14]
 8014254:	1e5a      	subs	r2, r3, #1
 8014256:	b291      	uxth	r1, r2
 8014258:	683a      	ldr	r2, [r7, #0]
 801425a:	81d1      	strh	r1, [r2, #14]
 801425c:	2b01      	cmp	r3, #1
 801425e:	d102      	bne.n	8014266 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8014260:	6878      	ldr	r0, [r7, #4]
 8014262:	f000 f888 	bl	8014376 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	607b      	str	r3, [r7, #4]
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d1b9      	bne.n	80141e6 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8014272:	bf00      	nop
 8014274:	3708      	adds	r7, #8
 8014276:	46bd      	mov	sp, r7
 8014278:	bd80      	pop	{r7, pc}
 801427a:	bf00      	nop
 801427c:	20011804 	.word	0x20011804

08014280 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b082      	sub	sp, #8
 8014284:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8014286:	4b16      	ldr	r3, [pc, #88]	; (80142e0 <dhcp_fine_tmr+0x60>)
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	607b      	str	r3, [r7, #4]
 801428c:	e020      	b.n	80142d0 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	6a1b      	ldr	r3, [r3, #32]
 8014292:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8014294:	683b      	ldr	r3, [r7, #0]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d017      	beq.n	80142ca <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801429a:	683b      	ldr	r3, [r7, #0]
 801429c:	891b      	ldrh	r3, [r3, #8]
 801429e:	2b01      	cmp	r3, #1
 80142a0:	d906      	bls.n	80142b0 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80142a2:	683b      	ldr	r3, [r7, #0]
 80142a4:	891b      	ldrh	r3, [r3, #8]
 80142a6:	3b01      	subs	r3, #1
 80142a8:	b29a      	uxth	r2, r3
 80142aa:	683b      	ldr	r3, [r7, #0]
 80142ac:	811a      	strh	r2, [r3, #8]
 80142ae:	e00c      	b.n	80142ca <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80142b0:	683b      	ldr	r3, [r7, #0]
 80142b2:	891b      	ldrh	r3, [r3, #8]
 80142b4:	2b01      	cmp	r3, #1
 80142b6:	d108      	bne.n	80142ca <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80142b8:	683b      	ldr	r3, [r7, #0]
 80142ba:	891b      	ldrh	r3, [r3, #8]
 80142bc:	3b01      	subs	r3, #1
 80142be:	b29a      	uxth	r2, r3
 80142c0:	683b      	ldr	r3, [r7, #0]
 80142c2:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80142c4:	6878      	ldr	r0, [r7, #4]
 80142c6:	f000 f80d 	bl	80142e4 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	607b      	str	r3, [r7, #4]
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d1db      	bne.n	801428e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 80142d6:	bf00      	nop
 80142d8:	3708      	adds	r7, #8
 80142da:	46bd      	mov	sp, r7
 80142dc:	bd80      	pop	{r7, pc}
 80142de:	bf00      	nop
 80142e0:	20011804 	.word	0x20011804

080142e4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b084      	sub	sp, #16
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	6a1b      	ldr	r3, [r3, #32]
 80142f0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	795b      	ldrb	r3, [r3, #5]
 80142f6:	2b0c      	cmp	r3, #12
 80142f8:	d003      	beq.n	8014302 <dhcp_timeout+0x1e>
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	795b      	ldrb	r3, [r3, #5]
 80142fe:	2b06      	cmp	r3, #6
 8014300:	d103      	bne.n	801430a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8014302:	6878      	ldr	r0, [r7, #4]
 8014304:	f000 fa3a 	bl	801477c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8014308:	e031      	b.n	801436e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	795b      	ldrb	r3, [r3, #5]
 801430e:	2b01      	cmp	r3, #1
 8014310:	d10e      	bne.n	8014330 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	799b      	ldrb	r3, [r3, #6]
 8014316:	2b05      	cmp	r3, #5
 8014318:	d803      	bhi.n	8014322 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801431a:	6878      	ldr	r0, [r7, #4]
 801431c:	f7ff fe60 	bl	8013fe0 <dhcp_select>
}
 8014320:	e025      	b.n	801436e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8014322:	6878      	ldr	r0, [r7, #4]
 8014324:	f000 fd94 	bl	8014e50 <dhcp_release_and_stop>
      dhcp_start(netif);
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	f000 f907 	bl	801453c <dhcp_start>
}
 801432e:	e01e      	b.n	801436e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	795b      	ldrb	r3, [r3, #5]
 8014334:	2b08      	cmp	r3, #8
 8014336:	d10b      	bne.n	8014350 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	799b      	ldrb	r3, [r3, #6]
 801433c:	2b01      	cmp	r3, #1
 801433e:	d803      	bhi.n	8014348 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8014340:	6878      	ldr	r0, [r7, #4]
 8014342:	f7ff fdf3 	bl	8013f2c <dhcp_check>
}
 8014346:	e012      	b.n	801436e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014348:	6878      	ldr	r0, [r7, #4]
 801434a:	f000 fab9 	bl	80148c0 <dhcp_bind>
}
 801434e:	e00e      	b.n	801436e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	795b      	ldrb	r3, [r3, #5]
 8014354:	2b03      	cmp	r3, #3
 8014356:	d10a      	bne.n	801436e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	799b      	ldrb	r3, [r3, #6]
 801435c:	2b01      	cmp	r3, #1
 801435e:	d803      	bhi.n	8014368 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8014360:	6878      	ldr	r0, [r7, #4]
 8014362:	f000 fcbf 	bl	8014ce4 <dhcp_reboot>
}
 8014366:	e002      	b.n	801436e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8014368:	6878      	ldr	r0, [r7, #4]
 801436a:	f000 fa07 	bl	801477c <dhcp_discover>
}
 801436e:	bf00      	nop
 8014370:	3710      	adds	r7, #16
 8014372:	46bd      	mov	sp, r7
 8014374:	bd80      	pop	{r7, pc}

08014376 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8014376:	b580      	push	{r7, lr}
 8014378:	b084      	sub	sp, #16
 801437a:	af00      	add	r7, sp, #0
 801437c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	6a1b      	ldr	r3, [r3, #32]
 8014382:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	795b      	ldrb	r3, [r3, #5]
 8014388:	2b01      	cmp	r3, #1
 801438a:	d007      	beq.n	801439c <dhcp_t1_timeout+0x26>
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	795b      	ldrb	r3, [r3, #5]
 8014390:	2b0a      	cmp	r3, #10
 8014392:	d003      	beq.n	801439c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014398:	2b05      	cmp	r3, #5
 801439a:	d117      	bne.n	80143cc <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801439c:	6878      	ldr	r0, [r7, #4]
 801439e:	f000 fb69 	bl	8014a74 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	899b      	ldrh	r3, [r3, #12]
 80143a6:	461a      	mov	r2, r3
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	8a5b      	ldrh	r3, [r3, #18]
 80143ac:	1ad3      	subs	r3, r2, r3
 80143ae:	2b01      	cmp	r3, #1
 80143b0:	dd0c      	ble.n	80143cc <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	899b      	ldrh	r3, [r3, #12]
 80143b6:	461a      	mov	r2, r3
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	8a5b      	ldrh	r3, [r3, #18]
 80143bc:	1ad3      	subs	r3, r2, r3
 80143be:	2b00      	cmp	r3, #0
 80143c0:	da00      	bge.n	80143c4 <dhcp_t1_timeout+0x4e>
 80143c2:	3301      	adds	r3, #1
 80143c4:	105b      	asrs	r3, r3, #1
 80143c6:	b29a      	uxth	r2, r3
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80143cc:	bf00      	nop
 80143ce:	3710      	adds	r7, #16
 80143d0:	46bd      	mov	sp, r7
 80143d2:	bd80      	pop	{r7, pc}

080143d4 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b084      	sub	sp, #16
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	6a1b      	ldr	r3, [r3, #32]
 80143e0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	795b      	ldrb	r3, [r3, #5]
 80143e6:	2b01      	cmp	r3, #1
 80143e8:	d00b      	beq.n	8014402 <dhcp_t2_timeout+0x2e>
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	795b      	ldrb	r3, [r3, #5]
 80143ee:	2b0a      	cmp	r3, #10
 80143f0:	d007      	beq.n	8014402 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80143f6:	2b05      	cmp	r3, #5
 80143f8:	d003      	beq.n	8014402 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	795b      	ldrb	r3, [r3, #5]
 80143fe:	2b04      	cmp	r3, #4
 8014400:	d117      	bne.n	8014432 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8014402:	6878      	ldr	r0, [r7, #4]
 8014404:	f000 fbd2 	bl	8014bac <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	8a9b      	ldrh	r3, [r3, #20]
 801440c:	461a      	mov	r2, r3
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	8a5b      	ldrh	r3, [r3, #18]
 8014412:	1ad3      	subs	r3, r2, r3
 8014414:	2b01      	cmp	r3, #1
 8014416:	dd0c      	ble.n	8014432 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	8a9b      	ldrh	r3, [r3, #20]
 801441c:	461a      	mov	r2, r3
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	8a5b      	ldrh	r3, [r3, #18]
 8014422:	1ad3      	subs	r3, r2, r3
 8014424:	2b00      	cmp	r3, #0
 8014426:	da00      	bge.n	801442a <dhcp_t2_timeout+0x56>
 8014428:	3301      	adds	r3, #1
 801442a:	105b      	asrs	r3, r3, #1
 801442c:	b29a      	uxth	r2, r3
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8014432:	bf00      	nop
 8014434:	3710      	adds	r7, #16
 8014436:	46bd      	mov	sp, r7
 8014438:	bd80      	pop	{r7, pc}
	...

0801443c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801443c:	b580      	push	{r7, lr}
 801443e:	b086      	sub	sp, #24
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
 8014444:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	6a1b      	ldr	r3, [r3, #32]
 801444a:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801444c:	693b      	ldr	r3, [r7, #16]
 801444e:	2200      	movs	r2, #0
 8014450:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014452:	693b      	ldr	r3, [r7, #16]
 8014454:	2200      	movs	r2, #0
 8014456:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8014458:	4b36      	ldr	r3, [pc, #216]	; (8014534 <dhcp_handle_ack+0xf8>)
 801445a:	78db      	ldrb	r3, [r3, #3]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d003      	beq.n	8014468 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8014460:	4b35      	ldr	r3, [pc, #212]	; (8014538 <dhcp_handle_ack+0xfc>)
 8014462:	68da      	ldr	r2, [r3, #12]
 8014464:	693b      	ldr	r3, [r7, #16]
 8014466:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8014468:	4b32      	ldr	r3, [pc, #200]	; (8014534 <dhcp_handle_ack+0xf8>)
 801446a:	791b      	ldrb	r3, [r3, #4]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d004      	beq.n	801447a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8014470:	4b31      	ldr	r3, [pc, #196]	; (8014538 <dhcp_handle_ack+0xfc>)
 8014472:	691a      	ldr	r2, [r3, #16]
 8014474:	693b      	ldr	r3, [r7, #16]
 8014476:	62da      	str	r2, [r3, #44]	; 0x2c
 8014478:	e004      	b.n	8014484 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801447a:	693b      	ldr	r3, [r7, #16]
 801447c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801447e:	085a      	lsrs	r2, r3, #1
 8014480:	693b      	ldr	r3, [r7, #16]
 8014482:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8014484:	4b2b      	ldr	r3, [pc, #172]	; (8014534 <dhcp_handle_ack+0xf8>)
 8014486:	795b      	ldrb	r3, [r3, #5]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d004      	beq.n	8014496 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801448c:	4b2a      	ldr	r3, [pc, #168]	; (8014538 <dhcp_handle_ack+0xfc>)
 801448e:	695a      	ldr	r2, [r3, #20]
 8014490:	693b      	ldr	r3, [r7, #16]
 8014492:	631a      	str	r2, [r3, #48]	; 0x30
 8014494:	e007      	b.n	80144a6 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8014496:	693b      	ldr	r3, [r7, #16]
 8014498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801449a:	4613      	mov	r3, r2
 801449c:	00db      	lsls	r3, r3, #3
 801449e:	1a9b      	subs	r3, r3, r2
 80144a0:	08da      	lsrs	r2, r3, #3
 80144a2:	693b      	ldr	r3, [r7, #16]
 80144a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80144a6:	683b      	ldr	r3, [r7, #0]
 80144a8:	691a      	ldr	r2, [r3, #16]
 80144aa:	693b      	ldr	r3, [r7, #16]
 80144ac:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80144ae:	4b21      	ldr	r3, [pc, #132]	; (8014534 <dhcp_handle_ack+0xf8>)
 80144b0:	799b      	ldrb	r3, [r3, #6]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d00b      	beq.n	80144ce <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80144b6:	4b20      	ldr	r3, [pc, #128]	; (8014538 <dhcp_handle_ack+0xfc>)
 80144b8:	699b      	ldr	r3, [r3, #24]
 80144ba:	4618      	mov	r0, r3
 80144bc:	f7ff fc87 	bl	8013dce <lwip_htonl>
 80144c0:	4602      	mov	r2, r0
 80144c2:	693b      	ldr	r3, [r7, #16]
 80144c4:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80144c6:	693b      	ldr	r3, [r7, #16]
 80144c8:	2201      	movs	r2, #1
 80144ca:	71da      	strb	r2, [r3, #7]
 80144cc:	e002      	b.n	80144d4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80144ce:	693b      	ldr	r3, [r7, #16]
 80144d0:	2200      	movs	r2, #0
 80144d2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80144d4:	4b17      	ldr	r3, [pc, #92]	; (8014534 <dhcp_handle_ack+0xf8>)
 80144d6:	79db      	ldrb	r3, [r3, #7]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d007      	beq.n	80144ec <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80144dc:	4b16      	ldr	r3, [pc, #88]	; (8014538 <dhcp_handle_ack+0xfc>)
 80144de:	69db      	ldr	r3, [r3, #28]
 80144e0:	4618      	mov	r0, r3
 80144e2:	f7ff fc74 	bl	8013dce <lwip_htonl>
 80144e6:	4602      	mov	r2, r0
 80144e8:	693b      	ldr	r3, [r7, #16]
 80144ea:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 80144ec:	2300      	movs	r3, #0
 80144ee:	75fb      	strb	r3, [r7, #23]
 80144f0:	e013      	b.n	801451a <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 80144f2:	7dfb      	ldrb	r3, [r7, #23]
 80144f4:	3308      	adds	r3, #8
 80144f6:	4a10      	ldr	r2, [pc, #64]	; (8014538 <dhcp_handle_ack+0xfc>)
 80144f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80144fc:	4618      	mov	r0, r3
 80144fe:	f7ff fc66 	bl	8013dce <lwip_htonl>
 8014502:	4603      	mov	r3, r0
 8014504:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 8014506:	f107 020c 	add.w	r2, r7, #12
 801450a:	7dfb      	ldrb	r3, [r7, #23]
 801450c:	4611      	mov	r1, r2
 801450e:	4618      	mov	r0, r3
 8014510:	f001 fb24 	bl	8015b5c <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8014514:	7dfb      	ldrb	r3, [r7, #23]
 8014516:	3301      	adds	r3, #1
 8014518:	75fb      	strb	r3, [r7, #23]
 801451a:	7dfb      	ldrb	r3, [r7, #23]
 801451c:	2b01      	cmp	r3, #1
 801451e:	d805      	bhi.n	801452c <dhcp_handle_ack+0xf0>
 8014520:	7dfb      	ldrb	r3, [r7, #23]
 8014522:	3308      	adds	r3, #8
 8014524:	4a03      	ldr	r2, [pc, #12]	; (8014534 <dhcp_handle_ack+0xf8>)
 8014526:	5cd3      	ldrb	r3, [r2, r3]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d1e2      	bne.n	80144f2 <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801452c:	bf00      	nop
 801452e:	3718      	adds	r7, #24
 8014530:	46bd      	mov	sp, r7
 8014532:	bd80      	pop	{r7, pc}
 8014534:	2000df64 	.word	0x2000df64
 8014538:	2000df70 	.word	0x2000df70

0801453c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801453c:	b580      	push	{r7, lr}
 801453e:	b084      	sub	sp, #16
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d109      	bne.n	801455e <dhcp_start+0x22>
 801454a:	4b37      	ldr	r3, [pc, #220]	; (8014628 <dhcp_start+0xec>)
 801454c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8014550:	4936      	ldr	r1, [pc, #216]	; (801462c <dhcp_start+0xf0>)
 8014552:	4837      	ldr	r0, [pc, #220]	; (8014630 <dhcp_start+0xf4>)
 8014554:	f00f fd48 	bl	8023fe8 <iprintf>
 8014558:	f06f 030f 	mvn.w	r3, #15
 801455c:	e060      	b.n	8014620 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014564:	f003 0301 	and.w	r3, r3, #1
 8014568:	2b00      	cmp	r3, #0
 801456a:	d109      	bne.n	8014580 <dhcp_start+0x44>
 801456c:	4b2e      	ldr	r3, [pc, #184]	; (8014628 <dhcp_start+0xec>)
 801456e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8014572:	4930      	ldr	r1, [pc, #192]	; (8014634 <dhcp_start+0xf8>)
 8014574:	482e      	ldr	r0, [pc, #184]	; (8014630 <dhcp_start+0xf4>)
 8014576:	f00f fd37 	bl	8023fe8 <iprintf>
 801457a:	f06f 030f 	mvn.w	r3, #15
 801457e:	e04f      	b.n	8014620 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	6a1b      	ldr	r3, [r3, #32]
 8014584:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801458a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801458e:	d202      	bcs.n	8014596 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8014590:	f04f 33ff 	mov.w	r3, #4294967295
 8014594:	e044      	b.n	8014620 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d10d      	bne.n	80145b8 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801459c:	2034      	movs	r0, #52	; 0x34
 801459e:	f004 fba7 	bl	8018cf0 <mem_malloc>
 80145a2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d102      	bne.n	80145b0 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80145aa:	f04f 33ff 	mov.w	r3, #4294967295
 80145ae:	e037      	b.n	8014620 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	68fa      	ldr	r2, [r7, #12]
 80145b4:	621a      	str	r2, [r3, #32]
 80145b6:	e005      	b.n	80145c4 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	791b      	ldrb	r3, [r3, #4]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d001      	beq.n	80145c4 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80145c0:	f7ff fc70 	bl	8013ea4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80145c4:	2234      	movs	r2, #52	; 0x34
 80145c6:	2100      	movs	r1, #0
 80145c8:	68f8      	ldr	r0, [r7, #12]
 80145ca:	f00f fc5d 	bl	8023e88 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80145ce:	f7ff fc17 	bl	8013e00 <dhcp_inc_pcb_refcount>
 80145d2:	4603      	mov	r3, r0
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d002      	beq.n	80145de <dhcp_start+0xa2>
    return ERR_MEM;
 80145d8:	f04f 33ff 	mov.w	r3, #4294967295
 80145dc:	e020      	b.n	8014620 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	2201      	movs	r2, #1
 80145e2:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80145ea:	f003 0304 	and.w	r3, r3, #4
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d105      	bne.n	80145fe <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80145f2:	2102      	movs	r1, #2
 80145f4:	68f8      	ldr	r0, [r7, #12]
 80145f6:	f000 fcc5 	bl	8014f84 <dhcp_set_state>
    return ERR_OK;
 80145fa:	2300      	movs	r3, #0
 80145fc:	e010      	b.n	8014620 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80145fe:	6878      	ldr	r0, [r7, #4]
 8014600:	f000 f8bc 	bl	801477c <dhcp_discover>
 8014604:	4603      	mov	r3, r0
 8014606:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014608:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d005      	beq.n	801461c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8014610:	6878      	ldr	r0, [r7, #4]
 8014612:	f000 fc1d 	bl	8014e50 <dhcp_release_and_stop>
    return ERR_MEM;
 8014616:	f04f 33ff 	mov.w	r3, #4294967295
 801461a:	e001      	b.n	8014620 <dhcp_start+0xe4>
  }
  return result;
 801461c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014620:	4618      	mov	r0, r3
 8014622:	3710      	adds	r7, #16
 8014624:	46bd      	mov	sp, r7
 8014626:	bd80      	pop	{r7, pc}
 8014628:	08025738 	.word	0x08025738
 801462c:	08025838 	.word	0x08025838
 8014630:	080257b4 	.word	0x080257b4
 8014634:	0802587c 	.word	0x0802587c

08014638 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b084      	sub	sp, #16
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
 8014640:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d107      	bne.n	8014658 <dhcp_arp_reply+0x20>
 8014648:	4b0e      	ldr	r3, [pc, #56]	; (8014684 <dhcp_arp_reply+0x4c>)
 801464a:	f240 328b 	movw	r2, #907	; 0x38b
 801464e:	490e      	ldr	r1, [pc, #56]	; (8014688 <dhcp_arp_reply+0x50>)
 8014650:	480e      	ldr	r0, [pc, #56]	; (801468c <dhcp_arp_reply+0x54>)
 8014652:	f00f fcc9 	bl	8023fe8 <iprintf>
 8014656:	e012      	b.n	801467e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	6a1b      	ldr	r3, [r3, #32]
 801465c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d00c      	beq.n	801467e <dhcp_arp_reply+0x46>
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	795b      	ldrb	r3, [r3, #5]
 8014668:	2b08      	cmp	r3, #8
 801466a:	d108      	bne.n	801467e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801466c:	683b      	ldr	r3, [r7, #0]
 801466e:	681a      	ldr	r2, [r3, #0]
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	69db      	ldr	r3, [r3, #28]
 8014674:	429a      	cmp	r2, r3
 8014676:	d102      	bne.n	801467e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8014678:	6878      	ldr	r0, [r7, #4]
 801467a:	f000 f809 	bl	8014690 <dhcp_decline>
    }
  }
}
 801467e:	3710      	adds	r7, #16
 8014680:	46bd      	mov	sp, r7
 8014682:	bd80      	pop	{r7, pc}
 8014684:	08025738 	.word	0x08025738
 8014688:	08025838 	.word	0x08025838
 801468c:	080257b4 	.word	0x080257b4

08014690 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8014690:	b5b0      	push	{r4, r5, r7, lr}
 8014692:	b08a      	sub	sp, #40	; 0x28
 8014694:	af02      	add	r7, sp, #8
 8014696:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	6a1b      	ldr	r3, [r3, #32]
 801469c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801469e:	210c      	movs	r1, #12
 80146a0:	69b8      	ldr	r0, [r7, #24]
 80146a2:	f000 fc6f 	bl	8014f84 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80146a6:	f107 030c 	add.w	r3, r7, #12
 80146aa:	2204      	movs	r2, #4
 80146ac:	69b9      	ldr	r1, [r7, #24]
 80146ae:	6878      	ldr	r0, [r7, #4]
 80146b0:	f001 f922 	bl	80158f8 <dhcp_create_msg>
 80146b4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80146b6:	697b      	ldr	r3, [r7, #20]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d035      	beq.n	8014728 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80146bc:	697b      	ldr	r3, [r7, #20]
 80146be:	685b      	ldr	r3, [r3, #4]
 80146c0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80146c2:	89b8      	ldrh	r0, [r7, #12]
 80146c4:	693b      	ldr	r3, [r7, #16]
 80146c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80146ca:	2304      	movs	r3, #4
 80146cc:	2232      	movs	r2, #50	; 0x32
 80146ce:	f000 fc73 	bl	8014fb8 <dhcp_option>
 80146d2:	4603      	mov	r3, r0
 80146d4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80146d6:	89bc      	ldrh	r4, [r7, #12]
 80146d8:	693b      	ldr	r3, [r7, #16]
 80146da:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80146de:	69bb      	ldr	r3, [r7, #24]
 80146e0:	69db      	ldr	r3, [r3, #28]
 80146e2:	4618      	mov	r0, r3
 80146e4:	f7ff fb73 	bl	8013dce <lwip_htonl>
 80146e8:	4603      	mov	r3, r0
 80146ea:	461a      	mov	r2, r3
 80146ec:	4629      	mov	r1, r5
 80146ee:	4620      	mov	r0, r4
 80146f0:	f000 fcee 	bl	80150d0 <dhcp_option_long>
 80146f4:	4603      	mov	r3, r0
 80146f6:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80146f8:	89b8      	ldrh	r0, [r7, #12]
 80146fa:	693b      	ldr	r3, [r7, #16]
 80146fc:	33f0      	adds	r3, #240	; 0xf0
 80146fe:	697a      	ldr	r2, [r7, #20]
 8014700:	4619      	mov	r1, r3
 8014702:	f001 f9cf 	bl	8015aa4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014706:	4b19      	ldr	r3, [pc, #100]	; (801476c <dhcp_decline+0xdc>)
 8014708:	6818      	ldr	r0, [r3, #0]
 801470a:	4b19      	ldr	r3, [pc, #100]	; (8014770 <dhcp_decline+0xe0>)
 801470c:	9301      	str	r3, [sp, #4]
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	9300      	str	r3, [sp, #0]
 8014712:	2343      	movs	r3, #67	; 0x43
 8014714:	4a17      	ldr	r2, [pc, #92]	; (8014774 <dhcp_decline+0xe4>)
 8014716:	6979      	ldr	r1, [r7, #20]
 8014718:	f00c ff80 	bl	802161c <udp_sendto_if_src>
 801471c:	4603      	mov	r3, r0
 801471e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014720:	6978      	ldr	r0, [r7, #20]
 8014722:	f005 fb51 	bl	8019dc8 <pbuf_free>
 8014726:	e001      	b.n	801472c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014728:	23ff      	movs	r3, #255	; 0xff
 801472a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801472c:	69bb      	ldr	r3, [r7, #24]
 801472e:	799b      	ldrb	r3, [r3, #6]
 8014730:	2bff      	cmp	r3, #255	; 0xff
 8014732:	d005      	beq.n	8014740 <dhcp_decline+0xb0>
    dhcp->tries++;
 8014734:	69bb      	ldr	r3, [r7, #24]
 8014736:	799b      	ldrb	r3, [r3, #6]
 8014738:	3301      	adds	r3, #1
 801473a:	b2da      	uxtb	r2, r3
 801473c:	69bb      	ldr	r3, [r7, #24]
 801473e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8014740:	f242 7310 	movw	r3, #10000	; 0x2710
 8014744:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014746:	89fb      	ldrh	r3, [r7, #14]
 8014748:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801474c:	4a0a      	ldr	r2, [pc, #40]	; (8014778 <dhcp_decline+0xe8>)
 801474e:	fb82 1203 	smull	r1, r2, r2, r3
 8014752:	1152      	asrs	r2, r2, #5
 8014754:	17db      	asrs	r3, r3, #31
 8014756:	1ad3      	subs	r3, r2, r3
 8014758:	b29a      	uxth	r2, r3
 801475a:	69bb      	ldr	r3, [r7, #24]
 801475c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801475e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014762:	4618      	mov	r0, r3
 8014764:	3720      	adds	r7, #32
 8014766:	46bd      	mov	sp, r7
 8014768:	bdb0      	pop	{r4, r5, r7, pc}
 801476a:	bf00      	nop
 801476c:	20008490 	.word	0x20008490
 8014770:	08028a28 	.word	0x08028a28
 8014774:	08028a2c 	.word	0x08028a2c
 8014778:	10624dd3 	.word	0x10624dd3

0801477c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b08a      	sub	sp, #40	; 0x28
 8014780:	af02      	add	r7, sp, #8
 8014782:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	6a1b      	ldr	r3, [r3, #32]
 8014788:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801478a:	2300      	movs	r3, #0
 801478c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801478e:	69bb      	ldr	r3, [r7, #24]
 8014790:	2200      	movs	r2, #0
 8014792:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014794:	2106      	movs	r1, #6
 8014796:	69b8      	ldr	r0, [r7, #24]
 8014798:	f000 fbf4 	bl	8014f84 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801479c:	f107 0308 	add.w	r3, r7, #8
 80147a0:	2201      	movs	r2, #1
 80147a2:	69b9      	ldr	r1, [r7, #24]
 80147a4:	6878      	ldr	r0, [r7, #4]
 80147a6:	f001 f8a7 	bl	80158f8 <dhcp_create_msg>
 80147aa:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80147ac:	693b      	ldr	r3, [r7, #16]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d04b      	beq.n	801484a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80147b2:	693b      	ldr	r3, [r7, #16]
 80147b4:	685b      	ldr	r3, [r3, #4]
 80147b6:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80147b8:	8938      	ldrh	r0, [r7, #8]
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80147c0:	2302      	movs	r3, #2
 80147c2:	2239      	movs	r2, #57	; 0x39
 80147c4:	f000 fbf8 	bl	8014fb8 <dhcp_option>
 80147c8:	4603      	mov	r3, r0
 80147ca:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80147cc:	8938      	ldrh	r0, [r7, #8]
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80147d8:	461a      	mov	r2, r3
 80147da:	f000 fc47 	bl	801506c <dhcp_option_short>
 80147de:	4603      	mov	r3, r0
 80147e0:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80147e2:	8938      	ldrh	r0, [r7, #8]
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80147ea:	2304      	movs	r3, #4
 80147ec:	2237      	movs	r2, #55	; 0x37
 80147ee:	f000 fbe3 	bl	8014fb8 <dhcp_option>
 80147f2:	4603      	mov	r3, r0
 80147f4:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80147f6:	2300      	movs	r3, #0
 80147f8:	77fb      	strb	r3, [r7, #31]
 80147fa:	e00e      	b.n	801481a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80147fc:	8938      	ldrh	r0, [r7, #8]
 80147fe:	68fb      	ldr	r3, [r7, #12]
 8014800:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014804:	7ffb      	ldrb	r3, [r7, #31]
 8014806:	4a29      	ldr	r2, [pc, #164]	; (80148ac <dhcp_discover+0x130>)
 8014808:	5cd3      	ldrb	r3, [r2, r3]
 801480a:	461a      	mov	r2, r3
 801480c:	f000 fc08 	bl	8015020 <dhcp_option_byte>
 8014810:	4603      	mov	r3, r0
 8014812:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014814:	7ffb      	ldrb	r3, [r7, #31]
 8014816:	3301      	adds	r3, #1
 8014818:	77fb      	strb	r3, [r7, #31]
 801481a:	7ffb      	ldrb	r3, [r7, #31]
 801481c:	2b03      	cmp	r3, #3
 801481e:	d9ed      	bls.n	80147fc <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014820:	8938      	ldrh	r0, [r7, #8]
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	33f0      	adds	r3, #240	; 0xf0
 8014826:	693a      	ldr	r2, [r7, #16]
 8014828:	4619      	mov	r1, r3
 801482a:	f001 f93b 	bl	8015aa4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801482e:	4b20      	ldr	r3, [pc, #128]	; (80148b0 <dhcp_discover+0x134>)
 8014830:	6818      	ldr	r0, [r3, #0]
 8014832:	4b20      	ldr	r3, [pc, #128]	; (80148b4 <dhcp_discover+0x138>)
 8014834:	9301      	str	r3, [sp, #4]
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	9300      	str	r3, [sp, #0]
 801483a:	2343      	movs	r3, #67	; 0x43
 801483c:	4a1e      	ldr	r2, [pc, #120]	; (80148b8 <dhcp_discover+0x13c>)
 801483e:	6939      	ldr	r1, [r7, #16]
 8014840:	f00c feec 	bl	802161c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8014844:	6938      	ldr	r0, [r7, #16]
 8014846:	f005 fabf 	bl	8019dc8 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801484a:	69bb      	ldr	r3, [r7, #24]
 801484c:	799b      	ldrb	r3, [r3, #6]
 801484e:	2bff      	cmp	r3, #255	; 0xff
 8014850:	d005      	beq.n	801485e <dhcp_discover+0xe2>
    dhcp->tries++;
 8014852:	69bb      	ldr	r3, [r7, #24]
 8014854:	799b      	ldrb	r3, [r3, #6]
 8014856:	3301      	adds	r3, #1
 8014858:	b2da      	uxtb	r2, r3
 801485a:	69bb      	ldr	r3, [r7, #24]
 801485c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801485e:	69bb      	ldr	r3, [r7, #24]
 8014860:	799b      	ldrb	r3, [r3, #6]
 8014862:	2b05      	cmp	r3, #5
 8014864:	d80d      	bhi.n	8014882 <dhcp_discover+0x106>
 8014866:	69bb      	ldr	r3, [r7, #24]
 8014868:	799b      	ldrb	r3, [r3, #6]
 801486a:	461a      	mov	r2, r3
 801486c:	2301      	movs	r3, #1
 801486e:	4093      	lsls	r3, r2
 8014870:	b29b      	uxth	r3, r3
 8014872:	461a      	mov	r2, r3
 8014874:	0152      	lsls	r2, r2, #5
 8014876:	1ad2      	subs	r2, r2, r3
 8014878:	0092      	lsls	r2, r2, #2
 801487a:	4413      	add	r3, r2
 801487c:	00db      	lsls	r3, r3, #3
 801487e:	b29b      	uxth	r3, r3
 8014880:	e001      	b.n	8014886 <dhcp_discover+0x10a>
 8014882:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014886:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014888:	897b      	ldrh	r3, [r7, #10]
 801488a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801488e:	4a0b      	ldr	r2, [pc, #44]	; (80148bc <dhcp_discover+0x140>)
 8014890:	fb82 1203 	smull	r1, r2, r2, r3
 8014894:	1152      	asrs	r2, r2, #5
 8014896:	17db      	asrs	r3, r3, #31
 8014898:	1ad3      	subs	r3, r2, r3
 801489a:	b29a      	uxth	r2, r3
 801489c:	69bb      	ldr	r3, [r7, #24]
 801489e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80148a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80148a4:	4618      	mov	r0, r3
 80148a6:	3720      	adds	r7, #32
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bd80      	pop	{r7, pc}
 80148ac:	20000014 	.word	0x20000014
 80148b0:	20008490 	.word	0x20008490
 80148b4:	08028a28 	.word	0x08028a28
 80148b8:	08028a2c 	.word	0x08028a2c
 80148bc:	10624dd3 	.word	0x10624dd3

080148c0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80148c0:	b580      	push	{r7, lr}
 80148c2:	b088      	sub	sp, #32
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d107      	bne.n	80148de <dhcp_bind+0x1e>
 80148ce:	4b64      	ldr	r3, [pc, #400]	; (8014a60 <dhcp_bind+0x1a0>)
 80148d0:	f240 4215 	movw	r2, #1045	; 0x415
 80148d4:	4963      	ldr	r1, [pc, #396]	; (8014a64 <dhcp_bind+0x1a4>)
 80148d6:	4864      	ldr	r0, [pc, #400]	; (8014a68 <dhcp_bind+0x1a8>)
 80148d8:	f00f fb86 	bl	8023fe8 <iprintf>
 80148dc:	e0bc      	b.n	8014a58 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	6a1b      	ldr	r3, [r3, #32]
 80148e2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80148e4:	69bb      	ldr	r3, [r7, #24]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d107      	bne.n	80148fa <dhcp_bind+0x3a>
 80148ea:	4b5d      	ldr	r3, [pc, #372]	; (8014a60 <dhcp_bind+0x1a0>)
 80148ec:	f240 4217 	movw	r2, #1047	; 0x417
 80148f0:	495e      	ldr	r1, [pc, #376]	; (8014a6c <dhcp_bind+0x1ac>)
 80148f2:	485d      	ldr	r0, [pc, #372]	; (8014a68 <dhcp_bind+0x1a8>)
 80148f4:	f00f fb78 	bl	8023fe8 <iprintf>
 80148f8:	e0ae      	b.n	8014a58 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80148fa:	69bb      	ldr	r3, [r7, #24]
 80148fc:	2200      	movs	r2, #0
 80148fe:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8014900:	69bb      	ldr	r3, [r7, #24]
 8014902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014908:	d019      	beq.n	801493e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801490a:	69bb      	ldr	r3, [r7, #24]
 801490c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801490e:	331e      	adds	r3, #30
 8014910:	4a57      	ldr	r2, [pc, #348]	; (8014a70 <dhcp_bind+0x1b0>)
 8014912:	fba2 2303 	umull	r2, r3, r2, r3
 8014916:	095b      	lsrs	r3, r3, #5
 8014918:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801491a:	69fb      	ldr	r3, [r7, #28]
 801491c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014920:	d302      	bcc.n	8014928 <dhcp_bind+0x68>
      timeout = 0xffff;
 8014922:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014926:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8014928:	69fb      	ldr	r3, [r7, #28]
 801492a:	b29a      	uxth	r2, r3
 801492c:	69bb      	ldr	r3, [r7, #24]
 801492e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8014930:	69bb      	ldr	r3, [r7, #24]
 8014932:	8a9b      	ldrh	r3, [r3, #20]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d102      	bne.n	801493e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8014938:	69bb      	ldr	r3, [r7, #24]
 801493a:	2201      	movs	r2, #1
 801493c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801493e:	69bb      	ldr	r3, [r7, #24]
 8014940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014946:	d01d      	beq.n	8014984 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014948:	69bb      	ldr	r3, [r7, #24]
 801494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801494c:	331e      	adds	r3, #30
 801494e:	4a48      	ldr	r2, [pc, #288]	; (8014a70 <dhcp_bind+0x1b0>)
 8014950:	fba2 2303 	umull	r2, r3, r2, r3
 8014954:	095b      	lsrs	r3, r3, #5
 8014956:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014958:	69fb      	ldr	r3, [r7, #28]
 801495a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801495e:	d302      	bcc.n	8014966 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8014960:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014964:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8014966:	69fb      	ldr	r3, [r7, #28]
 8014968:	b29a      	uxth	r2, r3
 801496a:	69bb      	ldr	r3, [r7, #24]
 801496c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801496e:	69bb      	ldr	r3, [r7, #24]
 8014970:	895b      	ldrh	r3, [r3, #10]
 8014972:	2b00      	cmp	r3, #0
 8014974:	d102      	bne.n	801497c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8014976:	69bb      	ldr	r3, [r7, #24]
 8014978:	2201      	movs	r2, #1
 801497a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801497c:	69bb      	ldr	r3, [r7, #24]
 801497e:	895a      	ldrh	r2, [r3, #10]
 8014980:	69bb      	ldr	r3, [r7, #24]
 8014982:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8014984:	69bb      	ldr	r3, [r7, #24]
 8014986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014988:	f1b3 3fff 	cmp.w	r3, #4294967295
 801498c:	d01d      	beq.n	80149ca <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801498e:	69bb      	ldr	r3, [r7, #24]
 8014990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014992:	331e      	adds	r3, #30
 8014994:	4a36      	ldr	r2, [pc, #216]	; (8014a70 <dhcp_bind+0x1b0>)
 8014996:	fba2 2303 	umull	r2, r3, r2, r3
 801499a:	095b      	lsrs	r3, r3, #5
 801499c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801499e:	69fb      	ldr	r3, [r7, #28]
 80149a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80149a4:	d302      	bcc.n	80149ac <dhcp_bind+0xec>
      timeout = 0xffff;
 80149a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80149aa:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80149ac:	69fb      	ldr	r3, [r7, #28]
 80149ae:	b29a      	uxth	r2, r3
 80149b0:	69bb      	ldr	r3, [r7, #24]
 80149b2:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80149b4:	69bb      	ldr	r3, [r7, #24]
 80149b6:	899b      	ldrh	r3, [r3, #12]
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d102      	bne.n	80149c2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80149bc:	69bb      	ldr	r3, [r7, #24]
 80149be:	2201      	movs	r2, #1
 80149c0:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80149c2:	69bb      	ldr	r3, [r7, #24]
 80149c4:	899a      	ldrh	r2, [r3, #12]
 80149c6:	69bb      	ldr	r3, [r7, #24]
 80149c8:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80149ca:	69bb      	ldr	r3, [r7, #24]
 80149cc:	895a      	ldrh	r2, [r3, #10]
 80149ce:	69bb      	ldr	r3, [r7, #24]
 80149d0:	899b      	ldrh	r3, [r3, #12]
 80149d2:	429a      	cmp	r2, r3
 80149d4:	d306      	bcc.n	80149e4 <dhcp_bind+0x124>
 80149d6:	69bb      	ldr	r3, [r7, #24]
 80149d8:	899b      	ldrh	r3, [r3, #12]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d002      	beq.n	80149e4 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80149de:	69bb      	ldr	r3, [r7, #24]
 80149e0:	2200      	movs	r2, #0
 80149e2:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80149e4:	69bb      	ldr	r3, [r7, #24]
 80149e6:	79db      	ldrb	r3, [r3, #7]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d003      	beq.n	80149f4 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80149ec:	69bb      	ldr	r3, [r7, #24]
 80149ee:	6a1b      	ldr	r3, [r3, #32]
 80149f0:	613b      	str	r3, [r7, #16]
 80149f2:	e014      	b.n	8014a1e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80149f4:	69bb      	ldr	r3, [r7, #24]
 80149f6:	331c      	adds	r3, #28
 80149f8:	781b      	ldrb	r3, [r3, #0]
 80149fa:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80149fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	db02      	blt.n	8014a0a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8014a04:	23ff      	movs	r3, #255	; 0xff
 8014a06:	613b      	str	r3, [r7, #16]
 8014a08:	e009      	b.n	8014a1e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8014a0a:	7dfb      	ldrb	r3, [r7, #23]
 8014a0c:	2bbf      	cmp	r3, #191	; 0xbf
 8014a0e:	d903      	bls.n	8014a18 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8014a10:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8014a14:	613b      	str	r3, [r7, #16]
 8014a16:	e002      	b.n	8014a1e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8014a18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014a1c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8014a1e:	69bb      	ldr	r3, [r7, #24]
 8014a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a22:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d108      	bne.n	8014a3c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8014a2a:	69bb      	ldr	r3, [r7, #24]
 8014a2c:	69da      	ldr	r2, [r3, #28]
 8014a2e:	693b      	ldr	r3, [r7, #16]
 8014a30:	4013      	ands	r3, r2
 8014a32:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014a3a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8014a3c:	210a      	movs	r1, #10
 8014a3e:	69b8      	ldr	r0, [r7, #24]
 8014a40:	f000 faa0 	bl	8014f84 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8014a44:	69bb      	ldr	r3, [r7, #24]
 8014a46:	f103 011c 	add.w	r1, r3, #28
 8014a4a:	f107 030c 	add.w	r3, r7, #12
 8014a4e:	f107 0210 	add.w	r2, r7, #16
 8014a52:	6878      	ldr	r0, [r7, #4]
 8014a54:	f004 fd28 	bl	80194a8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8014a58:	3720      	adds	r7, #32
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	bd80      	pop	{r7, pc}
 8014a5e:	bf00      	nop
 8014a60:	08025738 	.word	0x08025738
 8014a64:	080258b4 	.word	0x080258b4
 8014a68:	080257b4 	.word	0x080257b4
 8014a6c:	080258d0 	.word	0x080258d0
 8014a70:	88888889 	.word	0x88888889

08014a74 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8014a74:	b580      	push	{r7, lr}
 8014a76:	b08a      	sub	sp, #40	; 0x28
 8014a78:	af02      	add	r7, sp, #8
 8014a7a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	6a1b      	ldr	r3, [r3, #32]
 8014a80:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8014a82:	2105      	movs	r1, #5
 8014a84:	69b8      	ldr	r0, [r7, #24]
 8014a86:	f000 fa7d 	bl	8014f84 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014a8a:	f107 030c 	add.w	r3, r7, #12
 8014a8e:	2203      	movs	r2, #3
 8014a90:	69b9      	ldr	r1, [r7, #24]
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	f000 ff30 	bl	80158f8 <dhcp_create_msg>
 8014a98:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014a9a:	697b      	ldr	r3, [r7, #20]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d04e      	beq.n	8014b3e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014aa0:	697b      	ldr	r3, [r7, #20]
 8014aa2:	685b      	ldr	r3, [r3, #4]
 8014aa4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014aa6:	89b8      	ldrh	r0, [r7, #12]
 8014aa8:	693b      	ldr	r3, [r7, #16]
 8014aaa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014aae:	2302      	movs	r3, #2
 8014ab0:	2239      	movs	r2, #57	; 0x39
 8014ab2:	f000 fa81 	bl	8014fb8 <dhcp_option>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014aba:	89b8      	ldrh	r0, [r7, #12]
 8014abc:	693b      	ldr	r3, [r7, #16]
 8014abe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014ac6:	461a      	mov	r2, r3
 8014ac8:	f000 fad0 	bl	801506c <dhcp_option_short>
 8014acc:	4603      	mov	r3, r0
 8014ace:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014ad0:	89b8      	ldrh	r0, [r7, #12]
 8014ad2:	693b      	ldr	r3, [r7, #16]
 8014ad4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014ad8:	2304      	movs	r3, #4
 8014ada:	2237      	movs	r2, #55	; 0x37
 8014adc:	f000 fa6c 	bl	8014fb8 <dhcp_option>
 8014ae0:	4603      	mov	r3, r0
 8014ae2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	77bb      	strb	r3, [r7, #30]
 8014ae8:	e00e      	b.n	8014b08 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014aea:	89b8      	ldrh	r0, [r7, #12]
 8014aec:	693b      	ldr	r3, [r7, #16]
 8014aee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014af2:	7fbb      	ldrb	r3, [r7, #30]
 8014af4:	4a2a      	ldr	r2, [pc, #168]	; (8014ba0 <dhcp_renew+0x12c>)
 8014af6:	5cd3      	ldrb	r3, [r2, r3]
 8014af8:	461a      	mov	r2, r3
 8014afa:	f000 fa91 	bl	8015020 <dhcp_option_byte>
 8014afe:	4603      	mov	r3, r0
 8014b00:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014b02:	7fbb      	ldrb	r3, [r7, #30]
 8014b04:	3301      	adds	r3, #1
 8014b06:	77bb      	strb	r3, [r7, #30]
 8014b08:	7fbb      	ldrb	r3, [r7, #30]
 8014b0a:	2b03      	cmp	r3, #3
 8014b0c:	d9ed      	bls.n	8014aea <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014b0e:	89b8      	ldrh	r0, [r7, #12]
 8014b10:	693b      	ldr	r3, [r7, #16]
 8014b12:	33f0      	adds	r3, #240	; 0xf0
 8014b14:	697a      	ldr	r2, [r7, #20]
 8014b16:	4619      	mov	r1, r3
 8014b18:	f000 ffc4 	bl	8015aa4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014b1c:	4b21      	ldr	r3, [pc, #132]	; (8014ba4 <dhcp_renew+0x130>)
 8014b1e:	6818      	ldr	r0, [r3, #0]
 8014b20:	69bb      	ldr	r3, [r7, #24]
 8014b22:	f103 0218 	add.w	r2, r3, #24
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	9300      	str	r3, [sp, #0]
 8014b2a:	2343      	movs	r3, #67	; 0x43
 8014b2c:	6979      	ldr	r1, [r7, #20]
 8014b2e:	f00c fd01 	bl	8021534 <udp_sendto_if>
 8014b32:	4603      	mov	r3, r0
 8014b34:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014b36:	6978      	ldr	r0, [r7, #20]
 8014b38:	f005 f946 	bl	8019dc8 <pbuf_free>
 8014b3c:	e001      	b.n	8014b42 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014b3e:	23ff      	movs	r3, #255	; 0xff
 8014b40:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014b42:	69bb      	ldr	r3, [r7, #24]
 8014b44:	799b      	ldrb	r3, [r3, #6]
 8014b46:	2bff      	cmp	r3, #255	; 0xff
 8014b48:	d005      	beq.n	8014b56 <dhcp_renew+0xe2>
    dhcp->tries++;
 8014b4a:	69bb      	ldr	r3, [r7, #24]
 8014b4c:	799b      	ldrb	r3, [r3, #6]
 8014b4e:	3301      	adds	r3, #1
 8014b50:	b2da      	uxtb	r2, r3
 8014b52:	69bb      	ldr	r3, [r7, #24]
 8014b54:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8014b56:	69bb      	ldr	r3, [r7, #24]
 8014b58:	799b      	ldrb	r3, [r3, #6]
 8014b5a:	2b09      	cmp	r3, #9
 8014b5c:	d80a      	bhi.n	8014b74 <dhcp_renew+0x100>
 8014b5e:	69bb      	ldr	r3, [r7, #24]
 8014b60:	799b      	ldrb	r3, [r3, #6]
 8014b62:	b29b      	uxth	r3, r3
 8014b64:	461a      	mov	r2, r3
 8014b66:	0152      	lsls	r2, r2, #5
 8014b68:	1ad2      	subs	r2, r2, r3
 8014b6a:	0092      	lsls	r2, r2, #2
 8014b6c:	4413      	add	r3, r2
 8014b6e:	011b      	lsls	r3, r3, #4
 8014b70:	b29b      	uxth	r3, r3
 8014b72:	e001      	b.n	8014b78 <dhcp_renew+0x104>
 8014b74:	f644 6320 	movw	r3, #20000	; 0x4e20
 8014b78:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014b7a:	89fb      	ldrh	r3, [r7, #14]
 8014b7c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014b80:	4a09      	ldr	r2, [pc, #36]	; (8014ba8 <dhcp_renew+0x134>)
 8014b82:	fb82 1203 	smull	r1, r2, r2, r3
 8014b86:	1152      	asrs	r2, r2, #5
 8014b88:	17db      	asrs	r3, r3, #31
 8014b8a:	1ad3      	subs	r3, r2, r3
 8014b8c:	b29a      	uxth	r2, r3
 8014b8e:	69bb      	ldr	r3, [r7, #24]
 8014b90:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014b92:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014b96:	4618      	mov	r0, r3
 8014b98:	3720      	adds	r7, #32
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	bd80      	pop	{r7, pc}
 8014b9e:	bf00      	nop
 8014ba0:	20000014 	.word	0x20000014
 8014ba4:	20008490 	.word	0x20008490
 8014ba8:	10624dd3 	.word	0x10624dd3

08014bac <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b08a      	sub	sp, #40	; 0x28
 8014bb0:	af02      	add	r7, sp, #8
 8014bb2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	6a1b      	ldr	r3, [r3, #32]
 8014bb8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8014bba:	2104      	movs	r1, #4
 8014bbc:	69b8      	ldr	r0, [r7, #24]
 8014bbe:	f000 f9e1 	bl	8014f84 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014bc2:	f107 030c 	add.w	r3, r7, #12
 8014bc6:	2203      	movs	r2, #3
 8014bc8:	69b9      	ldr	r1, [r7, #24]
 8014bca:	6878      	ldr	r0, [r7, #4]
 8014bcc:	f000 fe94 	bl	80158f8 <dhcp_create_msg>
 8014bd0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014bd2:	697b      	ldr	r3, [r7, #20]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d04c      	beq.n	8014c72 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014bd8:	697b      	ldr	r3, [r7, #20]
 8014bda:	685b      	ldr	r3, [r3, #4]
 8014bdc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014bde:	89b8      	ldrh	r0, [r7, #12]
 8014be0:	693b      	ldr	r3, [r7, #16]
 8014be2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014be6:	2302      	movs	r3, #2
 8014be8:	2239      	movs	r2, #57	; 0x39
 8014bea:	f000 f9e5 	bl	8014fb8 <dhcp_option>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014bf2:	89b8      	ldrh	r0, [r7, #12]
 8014bf4:	693b      	ldr	r3, [r7, #16]
 8014bf6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014bfe:	461a      	mov	r2, r3
 8014c00:	f000 fa34 	bl	801506c <dhcp_option_short>
 8014c04:	4603      	mov	r3, r0
 8014c06:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014c08:	89b8      	ldrh	r0, [r7, #12]
 8014c0a:	693b      	ldr	r3, [r7, #16]
 8014c0c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014c10:	2304      	movs	r3, #4
 8014c12:	2237      	movs	r2, #55	; 0x37
 8014c14:	f000 f9d0 	bl	8014fb8 <dhcp_option>
 8014c18:	4603      	mov	r3, r0
 8014c1a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	77bb      	strb	r3, [r7, #30]
 8014c20:	e00e      	b.n	8014c40 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014c22:	89b8      	ldrh	r0, [r7, #12]
 8014c24:	693b      	ldr	r3, [r7, #16]
 8014c26:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014c2a:	7fbb      	ldrb	r3, [r7, #30]
 8014c2c:	4a29      	ldr	r2, [pc, #164]	; (8014cd4 <dhcp_rebind+0x128>)
 8014c2e:	5cd3      	ldrb	r3, [r2, r3]
 8014c30:	461a      	mov	r2, r3
 8014c32:	f000 f9f5 	bl	8015020 <dhcp_option_byte>
 8014c36:	4603      	mov	r3, r0
 8014c38:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014c3a:	7fbb      	ldrb	r3, [r7, #30]
 8014c3c:	3301      	adds	r3, #1
 8014c3e:	77bb      	strb	r3, [r7, #30]
 8014c40:	7fbb      	ldrb	r3, [r7, #30]
 8014c42:	2b03      	cmp	r3, #3
 8014c44:	d9ed      	bls.n	8014c22 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014c46:	89b8      	ldrh	r0, [r7, #12]
 8014c48:	693b      	ldr	r3, [r7, #16]
 8014c4a:	33f0      	adds	r3, #240	; 0xf0
 8014c4c:	697a      	ldr	r2, [r7, #20]
 8014c4e:	4619      	mov	r1, r3
 8014c50:	f000 ff28 	bl	8015aa4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014c54:	4b20      	ldr	r3, [pc, #128]	; (8014cd8 <dhcp_rebind+0x12c>)
 8014c56:	6818      	ldr	r0, [r3, #0]
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	9300      	str	r3, [sp, #0]
 8014c5c:	2343      	movs	r3, #67	; 0x43
 8014c5e:	4a1f      	ldr	r2, [pc, #124]	; (8014cdc <dhcp_rebind+0x130>)
 8014c60:	6979      	ldr	r1, [r7, #20]
 8014c62:	f00c fc67 	bl	8021534 <udp_sendto_if>
 8014c66:	4603      	mov	r3, r0
 8014c68:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014c6a:	6978      	ldr	r0, [r7, #20]
 8014c6c:	f005 f8ac 	bl	8019dc8 <pbuf_free>
 8014c70:	e001      	b.n	8014c76 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014c72:	23ff      	movs	r3, #255	; 0xff
 8014c74:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014c76:	69bb      	ldr	r3, [r7, #24]
 8014c78:	799b      	ldrb	r3, [r3, #6]
 8014c7a:	2bff      	cmp	r3, #255	; 0xff
 8014c7c:	d005      	beq.n	8014c8a <dhcp_rebind+0xde>
    dhcp->tries++;
 8014c7e:	69bb      	ldr	r3, [r7, #24]
 8014c80:	799b      	ldrb	r3, [r3, #6]
 8014c82:	3301      	adds	r3, #1
 8014c84:	b2da      	uxtb	r2, r3
 8014c86:	69bb      	ldr	r3, [r7, #24]
 8014c88:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8014c8a:	69bb      	ldr	r3, [r7, #24]
 8014c8c:	799b      	ldrb	r3, [r3, #6]
 8014c8e:	2b09      	cmp	r3, #9
 8014c90:	d80a      	bhi.n	8014ca8 <dhcp_rebind+0xfc>
 8014c92:	69bb      	ldr	r3, [r7, #24]
 8014c94:	799b      	ldrb	r3, [r3, #6]
 8014c96:	b29b      	uxth	r3, r3
 8014c98:	461a      	mov	r2, r3
 8014c9a:	0152      	lsls	r2, r2, #5
 8014c9c:	1ad2      	subs	r2, r2, r3
 8014c9e:	0092      	lsls	r2, r2, #2
 8014ca0:	4413      	add	r3, r2
 8014ca2:	00db      	lsls	r3, r3, #3
 8014ca4:	b29b      	uxth	r3, r3
 8014ca6:	e001      	b.n	8014cac <dhcp_rebind+0x100>
 8014ca8:	f242 7310 	movw	r3, #10000	; 0x2710
 8014cac:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014cae:	89fb      	ldrh	r3, [r7, #14]
 8014cb0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014cb4:	4a0a      	ldr	r2, [pc, #40]	; (8014ce0 <dhcp_rebind+0x134>)
 8014cb6:	fb82 1203 	smull	r1, r2, r2, r3
 8014cba:	1152      	asrs	r2, r2, #5
 8014cbc:	17db      	asrs	r3, r3, #31
 8014cbe:	1ad3      	subs	r3, r2, r3
 8014cc0:	b29a      	uxth	r2, r3
 8014cc2:	69bb      	ldr	r3, [r7, #24]
 8014cc4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014cc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014cca:	4618      	mov	r0, r3
 8014ccc:	3720      	adds	r7, #32
 8014cce:	46bd      	mov	sp, r7
 8014cd0:	bd80      	pop	{r7, pc}
 8014cd2:	bf00      	nop
 8014cd4:	20000014 	.word	0x20000014
 8014cd8:	20008490 	.word	0x20008490
 8014cdc:	08028a2c 	.word	0x08028a2c
 8014ce0:	10624dd3 	.word	0x10624dd3

08014ce4 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8014ce4:	b5b0      	push	{r4, r5, r7, lr}
 8014ce6:	b08a      	sub	sp, #40	; 0x28
 8014ce8:	af02      	add	r7, sp, #8
 8014cea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	6a1b      	ldr	r3, [r3, #32]
 8014cf0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8014cf2:	2103      	movs	r1, #3
 8014cf4:	69b8      	ldr	r0, [r7, #24]
 8014cf6:	f000 f945 	bl	8014f84 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014cfa:	f107 030c 	add.w	r3, r7, #12
 8014cfe:	2203      	movs	r2, #3
 8014d00:	69b9      	ldr	r1, [r7, #24]
 8014d02:	6878      	ldr	r0, [r7, #4]
 8014d04:	f000 fdf8 	bl	80158f8 <dhcp_create_msg>
 8014d08:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014d0a:	697b      	ldr	r3, [r7, #20]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d066      	beq.n	8014dde <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014d10:	697b      	ldr	r3, [r7, #20]
 8014d12:	685b      	ldr	r3, [r3, #4]
 8014d14:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014d16:	89b8      	ldrh	r0, [r7, #12]
 8014d18:	693b      	ldr	r3, [r7, #16]
 8014d1a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d1e:	2302      	movs	r3, #2
 8014d20:	2239      	movs	r2, #57	; 0x39
 8014d22:	f000 f949 	bl	8014fb8 <dhcp_option>
 8014d26:	4603      	mov	r3, r0
 8014d28:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8014d2a:	89b8      	ldrh	r0, [r7, #12]
 8014d2c:	693b      	ldr	r3, [r7, #16]
 8014d2e:	33f0      	adds	r3, #240	; 0xf0
 8014d30:	f44f 7210 	mov.w	r2, #576	; 0x240
 8014d34:	4619      	mov	r1, r3
 8014d36:	f000 f999 	bl	801506c <dhcp_option_short>
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014d3e:	89b8      	ldrh	r0, [r7, #12]
 8014d40:	693b      	ldr	r3, [r7, #16]
 8014d42:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d46:	2304      	movs	r3, #4
 8014d48:	2232      	movs	r2, #50	; 0x32
 8014d4a:	f000 f935 	bl	8014fb8 <dhcp_option>
 8014d4e:	4603      	mov	r3, r0
 8014d50:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014d52:	89bc      	ldrh	r4, [r7, #12]
 8014d54:	693b      	ldr	r3, [r7, #16]
 8014d56:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014d5a:	69bb      	ldr	r3, [r7, #24]
 8014d5c:	69db      	ldr	r3, [r3, #28]
 8014d5e:	4618      	mov	r0, r3
 8014d60:	f7ff f835 	bl	8013dce <lwip_htonl>
 8014d64:	4603      	mov	r3, r0
 8014d66:	461a      	mov	r2, r3
 8014d68:	4629      	mov	r1, r5
 8014d6a:	4620      	mov	r0, r4
 8014d6c:	f000 f9b0 	bl	80150d0 <dhcp_option_long>
 8014d70:	4603      	mov	r3, r0
 8014d72:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014d74:	89b8      	ldrh	r0, [r7, #12]
 8014d76:	693b      	ldr	r3, [r7, #16]
 8014d78:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d7c:	2304      	movs	r3, #4
 8014d7e:	2237      	movs	r2, #55	; 0x37
 8014d80:	f000 f91a 	bl	8014fb8 <dhcp_option>
 8014d84:	4603      	mov	r3, r0
 8014d86:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014d88:	2300      	movs	r3, #0
 8014d8a:	77bb      	strb	r3, [r7, #30]
 8014d8c:	e00e      	b.n	8014dac <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014d8e:	89b8      	ldrh	r0, [r7, #12]
 8014d90:	693b      	ldr	r3, [r7, #16]
 8014d92:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d96:	7fbb      	ldrb	r3, [r7, #30]
 8014d98:	4a29      	ldr	r2, [pc, #164]	; (8014e40 <dhcp_reboot+0x15c>)
 8014d9a:	5cd3      	ldrb	r3, [r2, r3]
 8014d9c:	461a      	mov	r2, r3
 8014d9e:	f000 f93f 	bl	8015020 <dhcp_option_byte>
 8014da2:	4603      	mov	r3, r0
 8014da4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014da6:	7fbb      	ldrb	r3, [r7, #30]
 8014da8:	3301      	adds	r3, #1
 8014daa:	77bb      	strb	r3, [r7, #30]
 8014dac:	7fbb      	ldrb	r3, [r7, #30]
 8014dae:	2b03      	cmp	r3, #3
 8014db0:	d9ed      	bls.n	8014d8e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014db2:	89b8      	ldrh	r0, [r7, #12]
 8014db4:	693b      	ldr	r3, [r7, #16]
 8014db6:	33f0      	adds	r3, #240	; 0xf0
 8014db8:	697a      	ldr	r2, [r7, #20]
 8014dba:	4619      	mov	r1, r3
 8014dbc:	f000 fe72 	bl	8015aa4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014dc0:	4b20      	ldr	r3, [pc, #128]	; (8014e44 <dhcp_reboot+0x160>)
 8014dc2:	6818      	ldr	r0, [r3, #0]
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	9300      	str	r3, [sp, #0]
 8014dc8:	2343      	movs	r3, #67	; 0x43
 8014dca:	4a1f      	ldr	r2, [pc, #124]	; (8014e48 <dhcp_reboot+0x164>)
 8014dcc:	6979      	ldr	r1, [r7, #20]
 8014dce:	f00c fbb1 	bl	8021534 <udp_sendto_if>
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014dd6:	6978      	ldr	r0, [r7, #20]
 8014dd8:	f004 fff6 	bl	8019dc8 <pbuf_free>
 8014ddc:	e001      	b.n	8014de2 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014dde:	23ff      	movs	r3, #255	; 0xff
 8014de0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014de2:	69bb      	ldr	r3, [r7, #24]
 8014de4:	799b      	ldrb	r3, [r3, #6]
 8014de6:	2bff      	cmp	r3, #255	; 0xff
 8014de8:	d005      	beq.n	8014df6 <dhcp_reboot+0x112>
    dhcp->tries++;
 8014dea:	69bb      	ldr	r3, [r7, #24]
 8014dec:	799b      	ldrb	r3, [r3, #6]
 8014dee:	3301      	adds	r3, #1
 8014df0:	b2da      	uxtb	r2, r3
 8014df2:	69bb      	ldr	r3, [r7, #24]
 8014df4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8014df6:	69bb      	ldr	r3, [r7, #24]
 8014df8:	799b      	ldrb	r3, [r3, #6]
 8014dfa:	2b09      	cmp	r3, #9
 8014dfc:	d80a      	bhi.n	8014e14 <dhcp_reboot+0x130>
 8014dfe:	69bb      	ldr	r3, [r7, #24]
 8014e00:	799b      	ldrb	r3, [r3, #6]
 8014e02:	b29b      	uxth	r3, r3
 8014e04:	461a      	mov	r2, r3
 8014e06:	0152      	lsls	r2, r2, #5
 8014e08:	1ad2      	subs	r2, r2, r3
 8014e0a:	0092      	lsls	r2, r2, #2
 8014e0c:	4413      	add	r3, r2
 8014e0e:	00db      	lsls	r3, r3, #3
 8014e10:	b29b      	uxth	r3, r3
 8014e12:	e001      	b.n	8014e18 <dhcp_reboot+0x134>
 8014e14:	f242 7310 	movw	r3, #10000	; 0x2710
 8014e18:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014e1a:	89fb      	ldrh	r3, [r7, #14]
 8014e1c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014e20:	4a0a      	ldr	r2, [pc, #40]	; (8014e4c <dhcp_reboot+0x168>)
 8014e22:	fb82 1203 	smull	r1, r2, r2, r3
 8014e26:	1152      	asrs	r2, r2, #5
 8014e28:	17db      	asrs	r3, r3, #31
 8014e2a:	1ad3      	subs	r3, r2, r3
 8014e2c:	b29a      	uxth	r2, r3
 8014e2e:	69bb      	ldr	r3, [r7, #24]
 8014e30:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014e32:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014e36:	4618      	mov	r0, r3
 8014e38:	3720      	adds	r7, #32
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8014e3e:	bf00      	nop
 8014e40:	20000014 	.word	0x20000014
 8014e44:	20008490 	.word	0x20008490
 8014e48:	08028a2c 	.word	0x08028a2c
 8014e4c:	10624dd3 	.word	0x10624dd3

08014e50 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8014e50:	b5b0      	push	{r4, r5, r7, lr}
 8014e52:	b08a      	sub	sp, #40	; 0x28
 8014e54:	af02      	add	r7, sp, #8
 8014e56:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	6a1b      	ldr	r3, [r3, #32]
 8014e5c:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8014e5e:	69fb      	ldr	r3, [r7, #28]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	f000 8084 	beq.w	8014f6e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8014e66:	69fb      	ldr	r3, [r7, #28]
 8014e68:	795b      	ldrb	r3, [r3, #5]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	f000 8081 	beq.w	8014f72 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8014e70:	69fb      	ldr	r3, [r7, #28]
 8014e72:	699b      	ldr	r3, [r3, #24]
 8014e74:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8014e76:	69fb      	ldr	r3, [r7, #28]
 8014e78:	2200      	movs	r2, #0
 8014e7a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8014e7c:	69fb      	ldr	r3, [r7, #28]
 8014e7e:	2200      	movs	r2, #0
 8014e80:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014e82:	69fb      	ldr	r3, [r7, #28]
 8014e84:	2200      	movs	r2, #0
 8014e86:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014e88:	69fb      	ldr	r3, [r7, #28]
 8014e8a:	2200      	movs	r2, #0
 8014e8c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8014e8e:	69fb      	ldr	r3, [r7, #28]
 8014e90:	2200      	movs	r2, #0
 8014e92:	631a      	str	r2, [r3, #48]	; 0x30
 8014e94:	69fb      	ldr	r3, [r7, #28]
 8014e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014e98:	69fb      	ldr	r3, [r7, #28]
 8014e9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8014e9c:	69fb      	ldr	r3, [r7, #28]
 8014e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ea0:	69fb      	ldr	r3, [r7, #28]
 8014ea2:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014ea4:	69fb      	ldr	r3, [r7, #28]
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	829a      	strh	r2, [r3, #20]
 8014eaa:	69fb      	ldr	r3, [r7, #28]
 8014eac:	8a9a      	ldrh	r2, [r3, #20]
 8014eae:	69fb      	ldr	r3, [r7, #28]
 8014eb0:	825a      	strh	r2, [r3, #18]
 8014eb2:	69fb      	ldr	r3, [r7, #28]
 8014eb4:	8a5a      	ldrh	r2, [r3, #18]
 8014eb6:	69fb      	ldr	r3, [r7, #28]
 8014eb8:	821a      	strh	r2, [r3, #16]
 8014eba:	69fb      	ldr	r3, [r7, #28]
 8014ebc:	8a1a      	ldrh	r2, [r3, #16]
 8014ebe:	69fb      	ldr	r3, [r7, #28]
 8014ec0:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8014ec2:	6878      	ldr	r0, [r7, #4]
 8014ec4:	f000 fe1c 	bl	8015b00 <dhcp_supplied_address>
 8014ec8:	4603      	mov	r3, r0
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d03b      	beq.n	8014f46 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8014ece:	f107 030e 	add.w	r3, r7, #14
 8014ed2:	2207      	movs	r2, #7
 8014ed4:	69f9      	ldr	r1, [r7, #28]
 8014ed6:	6878      	ldr	r0, [r7, #4]
 8014ed8:	f000 fd0e 	bl	80158f8 <dhcp_create_msg>
 8014edc:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8014ede:	69bb      	ldr	r3, [r7, #24]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d030      	beq.n	8014f46 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014ee4:	69bb      	ldr	r3, [r7, #24]
 8014ee6:	685b      	ldr	r3, [r3, #4]
 8014ee8:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014eea:	89f8      	ldrh	r0, [r7, #14]
 8014eec:	697b      	ldr	r3, [r7, #20]
 8014eee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014ef2:	2304      	movs	r3, #4
 8014ef4:	2236      	movs	r2, #54	; 0x36
 8014ef6:	f000 f85f 	bl	8014fb8 <dhcp_option>
 8014efa:	4603      	mov	r3, r0
 8014efc:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8014efe:	89fc      	ldrh	r4, [r7, #14]
 8014f00:	697b      	ldr	r3, [r7, #20]
 8014f02:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014f06:	693b      	ldr	r3, [r7, #16]
 8014f08:	4618      	mov	r0, r3
 8014f0a:	f7fe ff60 	bl	8013dce <lwip_htonl>
 8014f0e:	4603      	mov	r3, r0
 8014f10:	461a      	mov	r2, r3
 8014f12:	4629      	mov	r1, r5
 8014f14:	4620      	mov	r0, r4
 8014f16:	f000 f8db 	bl	80150d0 <dhcp_option_long>
 8014f1a:	4603      	mov	r3, r0
 8014f1c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014f1e:	89f8      	ldrh	r0, [r7, #14]
 8014f20:	697b      	ldr	r3, [r7, #20]
 8014f22:	33f0      	adds	r3, #240	; 0xf0
 8014f24:	69ba      	ldr	r2, [r7, #24]
 8014f26:	4619      	mov	r1, r3
 8014f28:	f000 fdbc 	bl	8015aa4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014f2c:	4b13      	ldr	r3, [pc, #76]	; (8014f7c <dhcp_release_and_stop+0x12c>)
 8014f2e:	6818      	ldr	r0, [r3, #0]
 8014f30:	f107 0210 	add.w	r2, r7, #16
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	9300      	str	r3, [sp, #0]
 8014f38:	2343      	movs	r3, #67	; 0x43
 8014f3a:	69b9      	ldr	r1, [r7, #24]
 8014f3c:	f00c fafa 	bl	8021534 <udp_sendto_if>
      pbuf_free(p_out);
 8014f40:	69b8      	ldr	r0, [r7, #24]
 8014f42:	f004 ff41 	bl	8019dc8 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014f46:	4b0e      	ldr	r3, [pc, #56]	; (8014f80 <dhcp_release_and_stop+0x130>)
 8014f48:	4a0d      	ldr	r2, [pc, #52]	; (8014f80 <dhcp_release_and_stop+0x130>)
 8014f4a:	490d      	ldr	r1, [pc, #52]	; (8014f80 <dhcp_release_and_stop+0x130>)
 8014f4c:	6878      	ldr	r0, [r7, #4]
 8014f4e:	f004 faab 	bl	80194a8 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014f52:	2100      	movs	r1, #0
 8014f54:	69f8      	ldr	r0, [r7, #28]
 8014f56:	f000 f815 	bl	8014f84 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8014f5a:	69fb      	ldr	r3, [r7, #28]
 8014f5c:	791b      	ldrb	r3, [r3, #4]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d008      	beq.n	8014f74 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014f62:	f7fe ff9f 	bl	8013ea4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8014f66:	69fb      	ldr	r3, [r7, #28]
 8014f68:	2200      	movs	r2, #0
 8014f6a:	711a      	strb	r2, [r3, #4]
 8014f6c:	e002      	b.n	8014f74 <dhcp_release_and_stop+0x124>
    return;
 8014f6e:	bf00      	nop
 8014f70:	e000      	b.n	8014f74 <dhcp_release_and_stop+0x124>
    return;
 8014f72:	bf00      	nop
  }
}
 8014f74:	3720      	adds	r7, #32
 8014f76:	46bd      	mov	sp, r7
 8014f78:	bdb0      	pop	{r4, r5, r7, pc}
 8014f7a:	bf00      	nop
 8014f7c:	20008490 	.word	0x20008490
 8014f80:	08028a28 	.word	0x08028a28

08014f84 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8014f84:	b480      	push	{r7}
 8014f86:	b083      	sub	sp, #12
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
 8014f8c:	460b      	mov	r3, r1
 8014f8e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	795b      	ldrb	r3, [r3, #5]
 8014f94:	78fa      	ldrb	r2, [r7, #3]
 8014f96:	429a      	cmp	r2, r3
 8014f98:	d008      	beq.n	8014fac <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	78fa      	ldrb	r2, [r7, #3]
 8014f9e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	2200      	movs	r2, #0
 8014faa:	811a      	strh	r2, [r3, #8]
  }
}
 8014fac:	bf00      	nop
 8014fae:	370c      	adds	r7, #12
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fb6:	4770      	bx	lr

08014fb8 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b082      	sub	sp, #8
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6039      	str	r1, [r7, #0]
 8014fc0:	4611      	mov	r1, r2
 8014fc2:	461a      	mov	r2, r3
 8014fc4:	4603      	mov	r3, r0
 8014fc6:	80fb      	strh	r3, [r7, #6]
 8014fc8:	460b      	mov	r3, r1
 8014fca:	717b      	strb	r3, [r7, #5]
 8014fcc:	4613      	mov	r3, r2
 8014fce:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8014fd0:	88fa      	ldrh	r2, [r7, #6]
 8014fd2:	793b      	ldrb	r3, [r7, #4]
 8014fd4:	4413      	add	r3, r2
 8014fd6:	3302      	adds	r3, #2
 8014fd8:	2b44      	cmp	r3, #68	; 0x44
 8014fda:	d906      	bls.n	8014fea <dhcp_option+0x32>
 8014fdc:	4b0d      	ldr	r3, [pc, #52]	; (8015014 <dhcp_option+0x5c>)
 8014fde:	f240 529a 	movw	r2, #1434	; 0x59a
 8014fe2:	490d      	ldr	r1, [pc, #52]	; (8015018 <dhcp_option+0x60>)
 8014fe4:	480d      	ldr	r0, [pc, #52]	; (801501c <dhcp_option+0x64>)
 8014fe6:	f00e ffff 	bl	8023fe8 <iprintf>
  options[options_out_len++] = option_type;
 8014fea:	88fb      	ldrh	r3, [r7, #6]
 8014fec:	1c5a      	adds	r2, r3, #1
 8014fee:	80fa      	strh	r2, [r7, #6]
 8014ff0:	461a      	mov	r2, r3
 8014ff2:	683b      	ldr	r3, [r7, #0]
 8014ff4:	4413      	add	r3, r2
 8014ff6:	797a      	ldrb	r2, [r7, #5]
 8014ff8:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8014ffa:	88fb      	ldrh	r3, [r7, #6]
 8014ffc:	1c5a      	adds	r2, r3, #1
 8014ffe:	80fa      	strh	r2, [r7, #6]
 8015000:	461a      	mov	r2, r3
 8015002:	683b      	ldr	r3, [r7, #0]
 8015004:	4413      	add	r3, r2
 8015006:	793a      	ldrb	r2, [r7, #4]
 8015008:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801500a:	88fb      	ldrh	r3, [r7, #6]
}
 801500c:	4618      	mov	r0, r3
 801500e:	3708      	adds	r7, #8
 8015010:	46bd      	mov	sp, r7
 8015012:	bd80      	pop	{r7, pc}
 8015014:	08025738 	.word	0x08025738
 8015018:	080258e8 	.word	0x080258e8
 801501c:	080257b4 	.word	0x080257b4

08015020 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8015020:	b580      	push	{r7, lr}
 8015022:	b082      	sub	sp, #8
 8015024:	af00      	add	r7, sp, #0
 8015026:	4603      	mov	r3, r0
 8015028:	6039      	str	r1, [r7, #0]
 801502a:	80fb      	strh	r3, [r7, #6]
 801502c:	4613      	mov	r3, r2
 801502e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8015030:	88fb      	ldrh	r3, [r7, #6]
 8015032:	2b43      	cmp	r3, #67	; 0x43
 8015034:	d906      	bls.n	8015044 <dhcp_option_byte+0x24>
 8015036:	4b0a      	ldr	r3, [pc, #40]	; (8015060 <dhcp_option_byte+0x40>)
 8015038:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801503c:	4909      	ldr	r1, [pc, #36]	; (8015064 <dhcp_option_byte+0x44>)
 801503e:	480a      	ldr	r0, [pc, #40]	; (8015068 <dhcp_option_byte+0x48>)
 8015040:	f00e ffd2 	bl	8023fe8 <iprintf>
  options[options_out_len++] = value;
 8015044:	88fb      	ldrh	r3, [r7, #6]
 8015046:	1c5a      	adds	r2, r3, #1
 8015048:	80fa      	strh	r2, [r7, #6]
 801504a:	461a      	mov	r2, r3
 801504c:	683b      	ldr	r3, [r7, #0]
 801504e:	4413      	add	r3, r2
 8015050:	797a      	ldrb	r2, [r7, #5]
 8015052:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015054:	88fb      	ldrh	r3, [r7, #6]
}
 8015056:	4618      	mov	r0, r3
 8015058:	3708      	adds	r7, #8
 801505a:	46bd      	mov	sp, r7
 801505c:	bd80      	pop	{r7, pc}
 801505e:	bf00      	nop
 8015060:	08025738 	.word	0x08025738
 8015064:	0802592c 	.word	0x0802592c
 8015068:	080257b4 	.word	0x080257b4

0801506c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b082      	sub	sp, #8
 8015070:	af00      	add	r7, sp, #0
 8015072:	4603      	mov	r3, r0
 8015074:	6039      	str	r1, [r7, #0]
 8015076:	80fb      	strh	r3, [r7, #6]
 8015078:	4613      	mov	r3, r2
 801507a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801507c:	88fb      	ldrh	r3, [r7, #6]
 801507e:	3302      	adds	r3, #2
 8015080:	2b44      	cmp	r3, #68	; 0x44
 8015082:	d906      	bls.n	8015092 <dhcp_option_short+0x26>
 8015084:	4b0f      	ldr	r3, [pc, #60]	; (80150c4 <dhcp_option_short+0x58>)
 8015086:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801508a:	490f      	ldr	r1, [pc, #60]	; (80150c8 <dhcp_option_short+0x5c>)
 801508c:	480f      	ldr	r0, [pc, #60]	; (80150cc <dhcp_option_short+0x60>)
 801508e:	f00e ffab 	bl	8023fe8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8015092:	88bb      	ldrh	r3, [r7, #4]
 8015094:	0a1b      	lsrs	r3, r3, #8
 8015096:	b29a      	uxth	r2, r3
 8015098:	88fb      	ldrh	r3, [r7, #6]
 801509a:	1c59      	adds	r1, r3, #1
 801509c:	80f9      	strh	r1, [r7, #6]
 801509e:	4619      	mov	r1, r3
 80150a0:	683b      	ldr	r3, [r7, #0]
 80150a2:	440b      	add	r3, r1
 80150a4:	b2d2      	uxtb	r2, r2
 80150a6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80150a8:	88fb      	ldrh	r3, [r7, #6]
 80150aa:	1c5a      	adds	r2, r3, #1
 80150ac:	80fa      	strh	r2, [r7, #6]
 80150ae:	461a      	mov	r2, r3
 80150b0:	683b      	ldr	r3, [r7, #0]
 80150b2:	4413      	add	r3, r2
 80150b4:	88ba      	ldrh	r2, [r7, #4]
 80150b6:	b2d2      	uxtb	r2, r2
 80150b8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80150ba:	88fb      	ldrh	r3, [r7, #6]
}
 80150bc:	4618      	mov	r0, r3
 80150be:	3708      	adds	r7, #8
 80150c0:	46bd      	mov	sp, r7
 80150c2:	bd80      	pop	{r7, pc}
 80150c4:	08025738 	.word	0x08025738
 80150c8:	08025964 	.word	0x08025964
 80150cc:	080257b4 	.word	0x080257b4

080150d0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b084      	sub	sp, #16
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	4603      	mov	r3, r0
 80150d8:	60b9      	str	r1, [r7, #8]
 80150da:	607a      	str	r2, [r7, #4]
 80150dc:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80150de:	89fb      	ldrh	r3, [r7, #14]
 80150e0:	3304      	adds	r3, #4
 80150e2:	2b44      	cmp	r3, #68	; 0x44
 80150e4:	d906      	bls.n	80150f4 <dhcp_option_long+0x24>
 80150e6:	4b19      	ldr	r3, [pc, #100]	; (801514c <dhcp_option_long+0x7c>)
 80150e8:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80150ec:	4918      	ldr	r1, [pc, #96]	; (8015150 <dhcp_option_long+0x80>)
 80150ee:	4819      	ldr	r0, [pc, #100]	; (8015154 <dhcp_option_long+0x84>)
 80150f0:	f00e ff7a 	bl	8023fe8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	0e1a      	lsrs	r2, r3, #24
 80150f8:	89fb      	ldrh	r3, [r7, #14]
 80150fa:	1c59      	adds	r1, r3, #1
 80150fc:	81f9      	strh	r1, [r7, #14]
 80150fe:	4619      	mov	r1, r3
 8015100:	68bb      	ldr	r3, [r7, #8]
 8015102:	440b      	add	r3, r1
 8015104:	b2d2      	uxtb	r2, r2
 8015106:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	0c1a      	lsrs	r2, r3, #16
 801510c:	89fb      	ldrh	r3, [r7, #14]
 801510e:	1c59      	adds	r1, r3, #1
 8015110:	81f9      	strh	r1, [r7, #14]
 8015112:	4619      	mov	r1, r3
 8015114:	68bb      	ldr	r3, [r7, #8]
 8015116:	440b      	add	r3, r1
 8015118:	b2d2      	uxtb	r2, r2
 801511a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	0a1a      	lsrs	r2, r3, #8
 8015120:	89fb      	ldrh	r3, [r7, #14]
 8015122:	1c59      	adds	r1, r3, #1
 8015124:	81f9      	strh	r1, [r7, #14]
 8015126:	4619      	mov	r1, r3
 8015128:	68bb      	ldr	r3, [r7, #8]
 801512a:	440b      	add	r3, r1
 801512c:	b2d2      	uxtb	r2, r2
 801512e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8015130:	89fb      	ldrh	r3, [r7, #14]
 8015132:	1c5a      	adds	r2, r3, #1
 8015134:	81fa      	strh	r2, [r7, #14]
 8015136:	461a      	mov	r2, r3
 8015138:	68bb      	ldr	r3, [r7, #8]
 801513a:	4413      	add	r3, r2
 801513c:	687a      	ldr	r2, [r7, #4]
 801513e:	b2d2      	uxtb	r2, r2
 8015140:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015142:	89fb      	ldrh	r3, [r7, #14]
}
 8015144:	4618      	mov	r0, r3
 8015146:	3710      	adds	r7, #16
 8015148:	46bd      	mov	sp, r7
 801514a:	bd80      	pop	{r7, pc}
 801514c:	08025738 	.word	0x08025738
 8015150:	080259a0 	.word	0x080259a0
 8015154:	080257b4 	.word	0x080257b4

08015158 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8015158:	b580      	push	{r7, lr}
 801515a:	b090      	sub	sp, #64	; 0x40
 801515c:	af00      	add	r7, sp, #0
 801515e:	6078      	str	r0, [r7, #4]
 8015160:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8015162:	2300      	movs	r3, #0
 8015164:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8015166:	2300      	movs	r3, #0
 8015168:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801516a:	220a      	movs	r2, #10
 801516c:	2100      	movs	r1, #0
 801516e:	48ba      	ldr	r0, [pc, #744]	; (8015458 <dhcp_parse_reply+0x300>)
 8015170:	f00e fe8a 	bl	8023e88 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	895b      	ldrh	r3, [r3, #10]
 8015178:	2b2b      	cmp	r3, #43	; 0x2b
 801517a:	d802      	bhi.n	8015182 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801517c:	f06f 0301 	mvn.w	r3, #1
 8015180:	e2e9      	b.n	8015756 <dhcp_parse_reply+0x5fe>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	685b      	ldr	r3, [r3, #4]
 8015186:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8015188:	23f0      	movs	r3, #240	; 0xf0
 801518a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	891b      	ldrh	r3, [r3, #8]
 8015190:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015196:	e00c      	b.n	80151b2 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8015198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801519a:	895b      	ldrh	r3, [r3, #10]
 801519c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801519e:	1ad3      	subs	r3, r2, r3
 80151a0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80151a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151a4:	895b      	ldrh	r3, [r3, #10]
 80151a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80151a8:	1ad3      	subs	r3, r2, r3
 80151aa:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80151ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80151b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d004      	beq.n	80151c2 <dhcp_parse_reply+0x6a>
 80151b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151ba:	895b      	ldrh	r3, [r3, #10]
 80151bc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80151be:	429a      	cmp	r2, r3
 80151c0:	d2ea      	bcs.n	8015198 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80151c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d102      	bne.n	80151ce <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80151c8:	f06f 0301 	mvn.w	r3, #1
 80151cc:	e2c3      	b.n	8015756 <dhcp_parse_reply+0x5fe>
  }
  offset = options_idx;
 80151ce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80151d0:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80151d2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80151d4:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80151d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151d8:	685b      	ldr	r3, [r3, #4]
 80151da:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80151dc:	e267      	b.n	80156ae <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 80151de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80151e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80151e2:	4413      	add	r3, r2
 80151e4:	781b      	ldrb	r3, [r3, #0]
 80151e6:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80151e8:	2300      	movs	r3, #0
 80151ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80151ee:	f04f 33ff 	mov.w	r3, #4294967295
 80151f2:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80151f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80151f6:	3302      	adds	r3, #2
 80151f8:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80151fa:	8bfa      	ldrh	r2, [r7, #30]
 80151fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80151fe:	429a      	cmp	r2, r3
 8015200:	d202      	bcs.n	8015208 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8015202:	f06f 0301 	mvn.w	r3, #1
 8015206:	e2a6      	b.n	8015756 <dhcp_parse_reply+0x5fe>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8015208:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801520a:	3301      	adds	r3, #1
 801520c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801520e:	8952      	ldrh	r2, [r2, #10]
 8015210:	4293      	cmp	r3, r2
 8015212:	da07      	bge.n	8015224 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8015214:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015216:	3301      	adds	r3, #1
 8015218:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801521a:	4413      	add	r3, r2
 801521c:	781b      	ldrb	r3, [r3, #0]
 801521e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015222:	e00b      	b.n	801523c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8015224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d004      	beq.n	8015236 <dhcp_parse_reply+0xde>
 801522c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	685b      	ldr	r3, [r3, #4]
 8015232:	781b      	ldrb	r3, [r3, #0]
 8015234:	e000      	b.n	8015238 <dhcp_parse_reply+0xe0>
 8015236:	2300      	movs	r3, #0
 8015238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801523c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015240:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8015244:	7dfb      	ldrb	r3, [r7, #23]
 8015246:	2b3b      	cmp	r3, #59	; 0x3b
 8015248:	f200 815a 	bhi.w	8015500 <dhcp_parse_reply+0x3a8>
 801524c:	a201      	add	r2, pc, #4	; (adr r2, 8015254 <dhcp_parse_reply+0xfc>)
 801524e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015252:	bf00      	nop
 8015254:	08015345 	.word	0x08015345
 8015258:	08015355 	.word	0x08015355
 801525c:	08015501 	.word	0x08015501
 8015260:	08015377 	.word	0x08015377
 8015264:	08015501 	.word	0x08015501
 8015268:	08015501 	.word	0x08015501
 801526c:	080153a3 	.word	0x080153a3
 8015270:	08015501 	.word	0x08015501
 8015274:	08015501 	.word	0x08015501
 8015278:	08015501 	.word	0x08015501
 801527c:	08015501 	.word	0x08015501
 8015280:	08015501 	.word	0x08015501
 8015284:	08015501 	.word	0x08015501
 8015288:	08015501 	.word	0x08015501
 801528c:	08015501 	.word	0x08015501
 8015290:	08015501 	.word	0x08015501
 8015294:	08015501 	.word	0x08015501
 8015298:	08015501 	.word	0x08015501
 801529c:	08015501 	.word	0x08015501
 80152a0:	08015501 	.word	0x08015501
 80152a4:	08015501 	.word	0x08015501
 80152a8:	08015501 	.word	0x08015501
 80152ac:	08015501 	.word	0x08015501
 80152b0:	08015501 	.word	0x08015501
 80152b4:	08015501 	.word	0x08015501
 80152b8:	08015501 	.word	0x08015501
 80152bc:	08015501 	.word	0x08015501
 80152c0:	08015501 	.word	0x08015501
 80152c4:	08015501 	.word	0x08015501
 80152c8:	08015501 	.word	0x08015501
 80152cc:	08015501 	.word	0x08015501
 80152d0:	08015501 	.word	0x08015501
 80152d4:	08015501 	.word	0x08015501
 80152d8:	08015501 	.word	0x08015501
 80152dc:	08015501 	.word	0x08015501
 80152e0:	08015501 	.word	0x08015501
 80152e4:	08015501 	.word	0x08015501
 80152e8:	08015501 	.word	0x08015501
 80152ec:	08015501 	.word	0x08015501
 80152f0:	08015501 	.word	0x08015501
 80152f4:	08015501 	.word	0x08015501
 80152f8:	08015501 	.word	0x08015501
 80152fc:	08015501 	.word	0x08015501
 8015300:	08015501 	.word	0x08015501
 8015304:	08015501 	.word	0x08015501
 8015308:	08015501 	.word	0x08015501
 801530c:	08015501 	.word	0x08015501
 8015310:	08015501 	.word	0x08015501
 8015314:	08015501 	.word	0x08015501
 8015318:	08015501 	.word	0x08015501
 801531c:	08015501 	.word	0x08015501
 8015320:	080153f9 	.word	0x080153f9
 8015324:	0801541b 	.word	0x0801541b
 8015328:	08015479 	.word	0x08015479
 801532c:	0801549b 	.word	0x0801549b
 8015330:	08015501 	.word	0x08015501
 8015334:	08015501 	.word	0x08015501
 8015338:	08015501 	.word	0x08015501
 801533c:	080154bd 	.word	0x080154bd
 8015340:	080154df 	.word	0x080154df
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8015344:	2300      	movs	r3, #0
 8015346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801534a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801534e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8015352:	e0d9      	b.n	8015508 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015358:	2b04      	cmp	r3, #4
 801535a:	d009      	beq.n	8015370 <dhcp_parse_reply+0x218>
 801535c:	4b3f      	ldr	r3, [pc, #252]	; (801545c <dhcp_parse_reply+0x304>)
 801535e:	f240 622e 	movw	r2, #1582	; 0x62e
 8015362:	493f      	ldr	r1, [pc, #252]	; (8015460 <dhcp_parse_reply+0x308>)
 8015364:	483f      	ldr	r0, [pc, #252]	; (8015464 <dhcp_parse_reply+0x30c>)
 8015366:	f00e fe3f 	bl	8023fe8 <iprintf>
 801536a:	f06f 0305 	mvn.w	r3, #5
 801536e:	e1f2      	b.n	8015756 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8015370:	2306      	movs	r3, #6
 8015372:	623b      	str	r3, [r7, #32]
        break;
 8015374:	e0c8      	b.n	8015508 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8015376:	2304      	movs	r3, #4
 8015378:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801537c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015380:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015384:	429a      	cmp	r2, r3
 8015386:	d209      	bcs.n	801539c <dhcp_parse_reply+0x244>
 8015388:	4b34      	ldr	r3, [pc, #208]	; (801545c <dhcp_parse_reply+0x304>)
 801538a:	f240 6233 	movw	r2, #1587	; 0x633
 801538e:	4936      	ldr	r1, [pc, #216]	; (8015468 <dhcp_parse_reply+0x310>)
 8015390:	4834      	ldr	r0, [pc, #208]	; (8015464 <dhcp_parse_reply+0x30c>)
 8015392:	f00e fe29 	bl	8023fe8 <iprintf>
 8015396:	f06f 0305 	mvn.w	r3, #5
 801539a:	e1dc      	b.n	8015756 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801539c:	2307      	movs	r3, #7
 801539e:	623b      	str	r3, [r7, #32]
        break;
 80153a0:	e0b2      	b.n	8015508 <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 80153a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153a6:	f003 0303 	and.w	r3, r3, #3
 80153aa:	b2db      	uxtb	r3, r3
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d009      	beq.n	80153c4 <dhcp_parse_reply+0x26c>
 80153b0:	4b2a      	ldr	r3, [pc, #168]	; (801545c <dhcp_parse_reply+0x304>)
 80153b2:	f240 6239 	movw	r2, #1593	; 0x639
 80153b6:	492d      	ldr	r1, [pc, #180]	; (801546c <dhcp_parse_reply+0x314>)
 80153b8:	482a      	ldr	r0, [pc, #168]	; (8015464 <dhcp_parse_reply+0x30c>)
 80153ba:	f00e fe15 	bl	8023fe8 <iprintf>
 80153be:	f06f 0305 	mvn.w	r3, #5
 80153c2:	e1c8      	b.n	8015756 <dhcp_parse_reply+0x5fe>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 80153c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153c8:	2b08      	cmp	r3, #8
 80153ca:	bf28      	it	cs
 80153cc:	2308      	movcs	r3, #8
 80153ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80153d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80153d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80153da:	429a      	cmp	r2, r3
 80153dc:	d209      	bcs.n	80153f2 <dhcp_parse_reply+0x29a>
 80153de:	4b1f      	ldr	r3, [pc, #124]	; (801545c <dhcp_parse_reply+0x304>)
 80153e0:	f240 623c 	movw	r2, #1596	; 0x63c
 80153e4:	4920      	ldr	r1, [pc, #128]	; (8015468 <dhcp_parse_reply+0x310>)
 80153e6:	481f      	ldr	r0, [pc, #124]	; (8015464 <dhcp_parse_reply+0x30c>)
 80153e8:	f00e fdfe 	bl	8023fe8 <iprintf>
 80153ec:	f06f 0305 	mvn.w	r3, #5
 80153f0:	e1b1      	b.n	8015756 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 80153f2:	2308      	movs	r3, #8
 80153f4:	623b      	str	r3, [r7, #32]
        break;
 80153f6:	e087      	b.n	8015508 <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80153f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153fc:	2b04      	cmp	r3, #4
 80153fe:	d009      	beq.n	8015414 <dhcp_parse_reply+0x2bc>
 8015400:	4b16      	ldr	r3, [pc, #88]	; (801545c <dhcp_parse_reply+0x304>)
 8015402:	f240 6241 	movw	r2, #1601	; 0x641
 8015406:	4916      	ldr	r1, [pc, #88]	; (8015460 <dhcp_parse_reply+0x308>)
 8015408:	4816      	ldr	r0, [pc, #88]	; (8015464 <dhcp_parse_reply+0x30c>)
 801540a:	f00e fded 	bl	8023fe8 <iprintf>
 801540e:	f06f 0305 	mvn.w	r3, #5
 8015412:	e1a0      	b.n	8015756 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8015414:	2303      	movs	r3, #3
 8015416:	623b      	str	r3, [r7, #32]
        break;
 8015418:	e076      	b.n	8015508 <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801541a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801541e:	2b01      	cmp	r3, #1
 8015420:	d009      	beq.n	8015436 <dhcp_parse_reply+0x2de>
 8015422:	4b0e      	ldr	r3, [pc, #56]	; (801545c <dhcp_parse_reply+0x304>)
 8015424:	f240 624f 	movw	r2, #1615	; 0x64f
 8015428:	4911      	ldr	r1, [pc, #68]	; (8015470 <dhcp_parse_reply+0x318>)
 801542a:	480e      	ldr	r0, [pc, #56]	; (8015464 <dhcp_parse_reply+0x30c>)
 801542c:	f00e fddc 	bl	8023fe8 <iprintf>
 8015430:	f06f 0305 	mvn.w	r3, #5
 8015434:	e18f      	b.n	8015756 <dhcp_parse_reply+0x5fe>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8015436:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015438:	2bf0      	cmp	r3, #240	; 0xf0
 801543a:	d009      	beq.n	8015450 <dhcp_parse_reply+0x2f8>
 801543c:	4b07      	ldr	r3, [pc, #28]	; (801545c <dhcp_parse_reply+0x304>)
 801543e:	f240 6251 	movw	r2, #1617	; 0x651
 8015442:	490c      	ldr	r1, [pc, #48]	; (8015474 <dhcp_parse_reply+0x31c>)
 8015444:	4807      	ldr	r0, [pc, #28]	; (8015464 <dhcp_parse_reply+0x30c>)
 8015446:	f00e fdcf 	bl	8023fe8 <iprintf>
 801544a:	f06f 0305 	mvn.w	r3, #5
 801544e:	e182      	b.n	8015756 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8015450:	2300      	movs	r3, #0
 8015452:	623b      	str	r3, [r7, #32]
        break;
 8015454:	e058      	b.n	8015508 <dhcp_parse_reply+0x3b0>
 8015456:	bf00      	nop
 8015458:	2000df64 	.word	0x2000df64
 801545c:	08025738 	.word	0x08025738
 8015460:	080259dc 	.word	0x080259dc
 8015464:	080257b4 	.word	0x080257b4
 8015468:	080259e8 	.word	0x080259e8
 801546c:	080259fc 	.word	0x080259fc
 8015470:	08025a0c 	.word	0x08025a0c
 8015474:	08025a18 	.word	0x08025a18
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801547c:	2b01      	cmp	r3, #1
 801547e:	d009      	beq.n	8015494 <dhcp_parse_reply+0x33c>
 8015480:	4ba5      	ldr	r3, [pc, #660]	; (8015718 <dhcp_parse_reply+0x5c0>)
 8015482:	f240 6255 	movw	r2, #1621	; 0x655
 8015486:	49a5      	ldr	r1, [pc, #660]	; (801571c <dhcp_parse_reply+0x5c4>)
 8015488:	48a5      	ldr	r0, [pc, #660]	; (8015720 <dhcp_parse_reply+0x5c8>)
 801548a:	f00e fdad 	bl	8023fe8 <iprintf>
 801548e:	f06f 0305 	mvn.w	r3, #5
 8015492:	e160      	b.n	8015756 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8015494:	2301      	movs	r3, #1
 8015496:	623b      	str	r3, [r7, #32]
        break;
 8015498:	e036      	b.n	8015508 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801549a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801549e:	2b04      	cmp	r3, #4
 80154a0:	d009      	beq.n	80154b6 <dhcp_parse_reply+0x35e>
 80154a2:	4b9d      	ldr	r3, [pc, #628]	; (8015718 <dhcp_parse_reply+0x5c0>)
 80154a4:	f240 6259 	movw	r2, #1625	; 0x659
 80154a8:	499e      	ldr	r1, [pc, #632]	; (8015724 <dhcp_parse_reply+0x5cc>)
 80154aa:	489d      	ldr	r0, [pc, #628]	; (8015720 <dhcp_parse_reply+0x5c8>)
 80154ac:	f00e fd9c 	bl	8023fe8 <iprintf>
 80154b0:	f06f 0305 	mvn.w	r3, #5
 80154b4:	e14f      	b.n	8015756 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80154b6:	2302      	movs	r3, #2
 80154b8:	623b      	str	r3, [r7, #32]
        break;
 80154ba:	e025      	b.n	8015508 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80154bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80154c0:	2b04      	cmp	r3, #4
 80154c2:	d009      	beq.n	80154d8 <dhcp_parse_reply+0x380>
 80154c4:	4b94      	ldr	r3, [pc, #592]	; (8015718 <dhcp_parse_reply+0x5c0>)
 80154c6:	f240 625d 	movw	r2, #1629	; 0x65d
 80154ca:	4996      	ldr	r1, [pc, #600]	; (8015724 <dhcp_parse_reply+0x5cc>)
 80154cc:	4894      	ldr	r0, [pc, #592]	; (8015720 <dhcp_parse_reply+0x5c8>)
 80154ce:	f00e fd8b 	bl	8023fe8 <iprintf>
 80154d2:	f06f 0305 	mvn.w	r3, #5
 80154d6:	e13e      	b.n	8015756 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_T1;
 80154d8:	2304      	movs	r3, #4
 80154da:	623b      	str	r3, [r7, #32]
        break;
 80154dc:	e014      	b.n	8015508 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80154de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80154e2:	2b04      	cmp	r3, #4
 80154e4:	d009      	beq.n	80154fa <dhcp_parse_reply+0x3a2>
 80154e6:	4b8c      	ldr	r3, [pc, #560]	; (8015718 <dhcp_parse_reply+0x5c0>)
 80154e8:	f240 6261 	movw	r2, #1633	; 0x661
 80154ec:	498d      	ldr	r1, [pc, #564]	; (8015724 <dhcp_parse_reply+0x5cc>)
 80154ee:	488c      	ldr	r0, [pc, #560]	; (8015720 <dhcp_parse_reply+0x5c8>)
 80154f0:	f00e fd7a 	bl	8023fe8 <iprintf>
 80154f4:	f06f 0305 	mvn.w	r3, #5
 80154f8:	e12d      	b.n	8015756 <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_T2;
 80154fa:	2305      	movs	r3, #5
 80154fc:	623b      	str	r3, [r7, #32]
        break;
 80154fe:	e003      	b.n	8015508 <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 8015500:	2300      	movs	r3, #0
 8015502:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8015506:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8015508:	7dfb      	ldrb	r3, [r7, #23]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d103      	bne.n	8015516 <dhcp_parse_reply+0x3be>
      offset++;
 801550e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015510:	3301      	adds	r3, #1
 8015512:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015514:	e0a1      	b.n	801565a <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8015516:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801551c:	4413      	add	r3, r2
 801551e:	3302      	adds	r3, #2
 8015520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015524:	db02      	blt.n	801552c <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 8015526:	f06f 0301 	mvn.w	r3, #1
 801552a:	e114      	b.n	8015756 <dhcp_parse_reply+0x5fe>
      }
      offset = (u16_t)(offset + len + 2);
 801552c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015530:	b29a      	uxth	r2, r3
 8015532:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015534:	4413      	add	r3, r2
 8015536:	b29b      	uxth	r3, r3
 8015538:	3302      	adds	r3, #2
 801553a:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801553c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015540:	2b00      	cmp	r3, #0
 8015542:	f000 808a 	beq.w	801565a <dhcp_parse_reply+0x502>
        u32_t value = 0;
 8015546:	2300      	movs	r3, #0
 8015548:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801554a:	6a3b      	ldr	r3, [r7, #32]
 801554c:	2b00      	cmp	r3, #0
 801554e:	db02      	blt.n	8015556 <dhcp_parse_reply+0x3fe>
 8015550:	6a3b      	ldr	r3, [r7, #32]
 8015552:	2b09      	cmp	r3, #9
 8015554:	dd06      	ble.n	8015564 <dhcp_parse_reply+0x40c>
 8015556:	4b70      	ldr	r3, [pc, #448]	; (8015718 <dhcp_parse_reply+0x5c0>)
 8015558:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801555c:	4972      	ldr	r1, [pc, #456]	; (8015728 <dhcp_parse_reply+0x5d0>)
 801555e:	4870      	ldr	r0, [pc, #448]	; (8015720 <dhcp_parse_reply+0x5c8>)
 8015560:	f00e fd42 	bl	8023fe8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015564:	4a71      	ldr	r2, [pc, #452]	; (801572c <dhcp_parse_reply+0x5d4>)
 8015566:	6a3b      	ldr	r3, [r7, #32]
 8015568:	4413      	add	r3, r2
 801556a:	781b      	ldrb	r3, [r3, #0]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d174      	bne.n	801565a <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 8015570:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015574:	2b04      	cmp	r3, #4
 8015576:	bf28      	it	cs
 8015578:	2304      	movcs	r3, #4
 801557a:	b2db      	uxtb	r3, r3
 801557c:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801557e:	8bfb      	ldrh	r3, [r7, #30]
 8015580:	8aba      	ldrh	r2, [r7, #20]
 8015582:	f107 0108 	add.w	r1, r7, #8
 8015586:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015588:	f004 fe24 	bl	801a1d4 <pbuf_copy_partial>
 801558c:	4603      	mov	r3, r0
 801558e:	461a      	mov	r2, r3
 8015590:	8abb      	ldrh	r3, [r7, #20]
 8015592:	4293      	cmp	r3, r2
 8015594:	d002      	beq.n	801559c <dhcp_parse_reply+0x444>
            return ERR_BUF;
 8015596:	f06f 0301 	mvn.w	r3, #1
 801559a:	e0dc      	b.n	8015756 <dhcp_parse_reply+0x5fe>
          }
          if (decode_len > 4) {
 801559c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80155a0:	2b04      	cmp	r3, #4
 80155a2:	d933      	bls.n	801560c <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80155a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80155a8:	f003 0303 	and.w	r3, r3, #3
 80155ac:	b2db      	uxtb	r3, r3
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d009      	beq.n	80155c6 <dhcp_parse_reply+0x46e>
 80155b2:	4b59      	ldr	r3, [pc, #356]	; (8015718 <dhcp_parse_reply+0x5c0>)
 80155b4:	f240 6281 	movw	r2, #1665	; 0x681
 80155b8:	495d      	ldr	r1, [pc, #372]	; (8015730 <dhcp_parse_reply+0x5d8>)
 80155ba:	4859      	ldr	r0, [pc, #356]	; (8015720 <dhcp_parse_reply+0x5c8>)
 80155bc:	f00e fd14 	bl	8023fe8 <iprintf>
 80155c0:	f06f 0305 	mvn.w	r3, #5
 80155c4:	e0c7      	b.n	8015756 <dhcp_parse_reply+0x5fe>
            dhcp_got_option(dhcp, decode_idx);
 80155c6:	4a59      	ldr	r2, [pc, #356]	; (801572c <dhcp_parse_reply+0x5d4>)
 80155c8:	6a3b      	ldr	r3, [r7, #32]
 80155ca:	4413      	add	r3, r2
 80155cc:	2201      	movs	r2, #1
 80155ce:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80155d0:	68bb      	ldr	r3, [r7, #8]
 80155d2:	4618      	mov	r0, r3
 80155d4:	f7fe fbfb 	bl	8013dce <lwip_htonl>
 80155d8:	4601      	mov	r1, r0
 80155da:	4a56      	ldr	r2, [pc, #344]	; (8015734 <dhcp_parse_reply+0x5dc>)
 80155dc:	6a3b      	ldr	r3, [r7, #32]
 80155de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80155e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80155e6:	3b04      	subs	r3, #4
 80155e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80155ec:	8bfb      	ldrh	r3, [r7, #30]
 80155ee:	3304      	adds	r3, #4
 80155f0:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80155f2:	8a7a      	ldrh	r2, [r7, #18]
 80155f4:	8bfb      	ldrh	r3, [r7, #30]
 80155f6:	429a      	cmp	r2, r3
 80155f8:	d202      	bcs.n	8015600 <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 80155fa:	f06f 0301 	mvn.w	r3, #1
 80155fe:	e0aa      	b.n	8015756 <dhcp_parse_reply+0x5fe>
            }
            val_offset = next_val_offset;
 8015600:	8a7b      	ldrh	r3, [r7, #18]
 8015602:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015604:	6a3b      	ldr	r3, [r7, #32]
 8015606:	3301      	adds	r3, #1
 8015608:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801560a:	e79e      	b.n	801554a <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 801560c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015610:	2b04      	cmp	r3, #4
 8015612:	d106      	bne.n	8015622 <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 8015614:	68bb      	ldr	r3, [r7, #8]
 8015616:	4618      	mov	r0, r3
 8015618:	f7fe fbd9 	bl	8013dce <lwip_htonl>
 801561c:	4603      	mov	r3, r0
 801561e:	60bb      	str	r3, [r7, #8]
 8015620:	e011      	b.n	8015646 <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015622:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015626:	2b01      	cmp	r3, #1
 8015628:	d009      	beq.n	801563e <dhcp_parse_reply+0x4e6>
 801562a:	4b3b      	ldr	r3, [pc, #236]	; (8015718 <dhcp_parse_reply+0x5c0>)
 801562c:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8015630:	4941      	ldr	r1, [pc, #260]	; (8015738 <dhcp_parse_reply+0x5e0>)
 8015632:	483b      	ldr	r0, [pc, #236]	; (8015720 <dhcp_parse_reply+0x5c8>)
 8015634:	f00e fcd8 	bl	8023fe8 <iprintf>
 8015638:	f06f 0305 	mvn.w	r3, #5
 801563c:	e08b      	b.n	8015756 <dhcp_parse_reply+0x5fe>
            value = ((u8_t *)&value)[0];
 801563e:	f107 0308 	add.w	r3, r7, #8
 8015642:	781b      	ldrb	r3, [r3, #0]
 8015644:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8015646:	4a39      	ldr	r2, [pc, #228]	; (801572c <dhcp_parse_reply+0x5d4>)
 8015648:	6a3b      	ldr	r3, [r7, #32]
 801564a:	4413      	add	r3, r2
 801564c:	2201      	movs	r2, #1
 801564e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8015650:	68ba      	ldr	r2, [r7, #8]
 8015652:	4938      	ldr	r1, [pc, #224]	; (8015734 <dhcp_parse_reply+0x5dc>)
 8015654:	6a3b      	ldr	r3, [r7, #32]
 8015656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801565a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801565c:	895b      	ldrh	r3, [r3, #10]
 801565e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015660:	429a      	cmp	r2, r3
 8015662:	d324      	bcc.n	80156ae <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 8015664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015666:	895b      	ldrh	r3, [r3, #10]
 8015668:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801566a:	1ad3      	subs	r3, r2, r3
 801566c:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015670:	895b      	ldrh	r3, [r3, #10]
 8015672:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015674:	1ad3      	subs	r3, r2, r3
 8015676:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8015678:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801567a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801567c:	429a      	cmp	r2, r3
 801567e:	d213      	bcs.n	80156a8 <dhcp_parse_reply+0x550>
        q = q->next;
 8015680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8015686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015688:	2b00      	cmp	r3, #0
 801568a:	d109      	bne.n	80156a0 <dhcp_parse_reply+0x548>
 801568c:	4b22      	ldr	r3, [pc, #136]	; (8015718 <dhcp_parse_reply+0x5c0>)
 801568e:	f240 629d 	movw	r2, #1693	; 0x69d
 8015692:	492a      	ldr	r1, [pc, #168]	; (801573c <dhcp_parse_reply+0x5e4>)
 8015694:	4822      	ldr	r0, [pc, #136]	; (8015720 <dhcp_parse_reply+0x5c8>)
 8015696:	f00e fca7 	bl	8023fe8 <iprintf>
 801569a:	f06f 0305 	mvn.w	r3, #5
 801569e:	e05a      	b.n	8015756 <dhcp_parse_reply+0x5fe>
        options = (u8_t *)q->payload;
 80156a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156a2:	685b      	ldr	r3, [r3, #4]
 80156a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80156a6:	e002      	b.n	80156ae <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80156a8:	f06f 0301 	mvn.w	r3, #1
 80156ac:	e053      	b.n	8015756 <dhcp_parse_reply+0x5fe>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80156ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d00a      	beq.n	80156ca <dhcp_parse_reply+0x572>
 80156b4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80156b6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80156b8:	429a      	cmp	r2, r3
 80156ba:	d206      	bcs.n	80156ca <dhcp_parse_reply+0x572>
 80156bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80156be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80156c0:	4413      	add	r3, r2
 80156c2:	781b      	ldrb	r3, [r3, #0]
 80156c4:	2bff      	cmp	r3, #255	; 0xff
 80156c6:	f47f ad8a 	bne.w	80151de <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80156ca:	4b18      	ldr	r3, [pc, #96]	; (801572c <dhcp_parse_reply+0x5d4>)
 80156cc:	781b      	ldrb	r3, [r3, #0]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d018      	beq.n	8015704 <dhcp_parse_reply+0x5ac>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80156d2:	4b18      	ldr	r3, [pc, #96]	; (8015734 <dhcp_parse_reply+0x5dc>)
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80156d8:	4b14      	ldr	r3, [pc, #80]	; (801572c <dhcp_parse_reply+0x5d4>)
 80156da:	2200      	movs	r2, #0
 80156dc:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	2b01      	cmp	r3, #1
 80156e2:	d102      	bne.n	80156ea <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 80156e4:	2301      	movs	r3, #1
 80156e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80156e8:	e00c      	b.n	8015704 <dhcp_parse_reply+0x5ac>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	2b02      	cmp	r3, #2
 80156ee:	d102      	bne.n	80156f6 <dhcp_parse_reply+0x59e>
      parse_sname_as_options = 1;
 80156f0:	2301      	movs	r3, #1
 80156f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80156f4:	e006      	b.n	8015704 <dhcp_parse_reply+0x5ac>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80156f6:	68fb      	ldr	r3, [r7, #12]
 80156f8:	2b03      	cmp	r3, #3
 80156fa:	d103      	bne.n	8015704 <dhcp_parse_reply+0x5ac>
      parse_sname_as_options = 1;
 80156fc:	2301      	movs	r3, #1
 80156fe:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8015700:	2301      	movs	r3, #1
 8015702:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8015704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015706:	2b00      	cmp	r3, #0
 8015708:	d01a      	beq.n	8015740 <dhcp_parse_reply+0x5e8>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801570a:	2300      	movs	r3, #0
 801570c:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801570e:	236c      	movs	r3, #108	; 0x6c
 8015710:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015712:	23ec      	movs	r3, #236	; 0xec
 8015714:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8015716:	e53c      	b.n	8015192 <dhcp_parse_reply+0x3a>
 8015718:	08025738 	.word	0x08025738
 801571c:	08025a0c 	.word	0x08025a0c
 8015720:	080257b4 	.word	0x080257b4
 8015724:	080259dc 	.word	0x080259dc
 8015728:	08025a30 	.word	0x08025a30
 801572c:	2000df64 	.word	0x2000df64
 8015730:	08025a44 	.word	0x08025a44
 8015734:	2000df70 	.word	0x2000df70
 8015738:	08025a5c 	.word	0x08025a5c
 801573c:	08025a70 	.word	0x08025a70
  } else if (parse_sname_as_options) {
 8015740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015742:	2b00      	cmp	r3, #0
 8015744:	d006      	beq.n	8015754 <dhcp_parse_reply+0x5fc>
    parse_sname_as_options = 0;
 8015746:	2300      	movs	r3, #0
 8015748:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801574a:	232c      	movs	r3, #44	; 0x2c
 801574c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801574e:	236c      	movs	r3, #108	; 0x6c
 8015750:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8015752:	e51e      	b.n	8015192 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8015754:	2300      	movs	r3, #0
}
 8015756:	4618      	mov	r0, r3
 8015758:	3740      	adds	r7, #64	; 0x40
 801575a:	46bd      	mov	sp, r7
 801575c:	bd80      	pop	{r7, pc}
 801575e:	bf00      	nop

08015760 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015760:	b580      	push	{r7, lr}
 8015762:	b08a      	sub	sp, #40	; 0x28
 8015764:	af00      	add	r7, sp, #0
 8015766:	60f8      	str	r0, [r7, #12]
 8015768:	60b9      	str	r1, [r7, #8]
 801576a:	607a      	str	r2, [r7, #4]
 801576c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801576e:	4b5f      	ldr	r3, [pc, #380]	; (80158ec <dhcp_recv+0x18c>)
 8015770:	685b      	ldr	r3, [r3, #4]
 8015772:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015774:	6a3b      	ldr	r3, [r7, #32]
 8015776:	6a1b      	ldr	r3, [r3, #32]
 8015778:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	685b      	ldr	r3, [r3, #4]
 801577e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8015780:	69fb      	ldr	r3, [r7, #28]
 8015782:	2b00      	cmp	r3, #0
 8015784:	f000 809d 	beq.w	80158c2 <dhcp_recv+0x162>
 8015788:	69fb      	ldr	r3, [r7, #28]
 801578a:	791b      	ldrb	r3, [r3, #4]
 801578c:	2b00      	cmp	r3, #0
 801578e:	f000 8098 	beq.w	80158c2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	895b      	ldrh	r3, [r3, #10]
 8015796:	2b2b      	cmp	r3, #43	; 0x2b
 8015798:	f240 8095 	bls.w	80158c6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801579c:	69bb      	ldr	r3, [r7, #24]
 801579e:	781b      	ldrb	r3, [r3, #0]
 80157a0:	2b02      	cmp	r3, #2
 80157a2:	f040 8092 	bne.w	80158ca <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80157a6:	2300      	movs	r3, #0
 80157a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80157ac:	e012      	b.n	80157d4 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80157ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80157b2:	6a3a      	ldr	r2, [r7, #32]
 80157b4:	4413      	add	r3, r2
 80157b6:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 80157ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80157be:	69b9      	ldr	r1, [r7, #24]
 80157c0:	440b      	add	r3, r1
 80157c2:	7f1b      	ldrb	r3, [r3, #28]
 80157c4:	429a      	cmp	r2, r3
 80157c6:	f040 8082 	bne.w	80158ce <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80157ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80157ce:	3301      	adds	r3, #1
 80157d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80157d4:	6a3b      	ldr	r3, [r7, #32]
 80157d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80157da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80157de:	429a      	cmp	r2, r3
 80157e0:	d203      	bcs.n	80157ea <dhcp_recv+0x8a>
 80157e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80157e6:	2b05      	cmp	r3, #5
 80157e8:	d9e1      	bls.n	80157ae <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80157ea:	69bb      	ldr	r3, [r7, #24]
 80157ec:	685b      	ldr	r3, [r3, #4]
 80157ee:	4618      	mov	r0, r3
 80157f0:	f7fe faed 	bl	8013dce <lwip_htonl>
 80157f4:	4602      	mov	r2, r0
 80157f6:	69fb      	ldr	r3, [r7, #28]
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	429a      	cmp	r2, r3
 80157fc:	d169      	bne.n	80158d2 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80157fe:	69f9      	ldr	r1, [r7, #28]
 8015800:	6878      	ldr	r0, [r7, #4]
 8015802:	f7ff fca9 	bl	8015158 <dhcp_parse_reply>
 8015806:	4603      	mov	r3, r0
 8015808:	2b00      	cmp	r3, #0
 801580a:	d164      	bne.n	80158d6 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801580c:	4b38      	ldr	r3, [pc, #224]	; (80158f0 <dhcp_recv+0x190>)
 801580e:	785b      	ldrb	r3, [r3, #1]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d062      	beq.n	80158da <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	685b      	ldr	r3, [r3, #4]
 8015818:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801581a:	4b36      	ldr	r3, [pc, #216]	; (80158f4 <dhcp_recv+0x194>)
 801581c:	685b      	ldr	r3, [r3, #4]
 801581e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015820:	7cfb      	ldrb	r3, [r7, #19]
 8015822:	2b05      	cmp	r3, #5
 8015824:	d12a      	bne.n	801587c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015826:	69fb      	ldr	r3, [r7, #28]
 8015828:	795b      	ldrb	r3, [r3, #5]
 801582a:	2b01      	cmp	r3, #1
 801582c:	d112      	bne.n	8015854 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801582e:	6979      	ldr	r1, [r7, #20]
 8015830:	6a38      	ldr	r0, [r7, #32]
 8015832:	f7fe fe03 	bl	801443c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8015836:	6a3b      	ldr	r3, [r7, #32]
 8015838:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801583c:	f003 0308 	and.w	r3, r3, #8
 8015840:	2b00      	cmp	r3, #0
 8015842:	d003      	beq.n	801584c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8015844:	6a38      	ldr	r0, [r7, #32]
 8015846:	f7fe fb71 	bl	8013f2c <dhcp_check>
 801584a:	e047      	b.n	80158dc <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801584c:	6a38      	ldr	r0, [r7, #32]
 801584e:	f7ff f837 	bl	80148c0 <dhcp_bind>
 8015852:	e043      	b.n	80158dc <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015854:	69fb      	ldr	r3, [r7, #28]
 8015856:	795b      	ldrb	r3, [r3, #5]
 8015858:	2b03      	cmp	r3, #3
 801585a:	d007      	beq.n	801586c <dhcp_recv+0x10c>
 801585c:	69fb      	ldr	r3, [r7, #28]
 801585e:	795b      	ldrb	r3, [r3, #5]
 8015860:	2b04      	cmp	r3, #4
 8015862:	d003      	beq.n	801586c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8015864:	69fb      	ldr	r3, [r7, #28]
 8015866:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8015868:	2b05      	cmp	r3, #5
 801586a:	d137      	bne.n	80158dc <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 801586c:	6979      	ldr	r1, [r7, #20]
 801586e:	6a38      	ldr	r0, [r7, #32]
 8015870:	f7fe fde4 	bl	801443c <dhcp_handle_ack>
      dhcp_bind(netif);
 8015874:	6a38      	ldr	r0, [r7, #32]
 8015876:	f7ff f823 	bl	80148c0 <dhcp_bind>
 801587a:	e02f      	b.n	80158dc <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801587c:	7cfb      	ldrb	r3, [r7, #19]
 801587e:	2b06      	cmp	r3, #6
 8015880:	d113      	bne.n	80158aa <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015882:	69fb      	ldr	r3, [r7, #28]
 8015884:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8015886:	2b03      	cmp	r3, #3
 8015888:	d00b      	beq.n	80158a2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801588a:	69fb      	ldr	r3, [r7, #28]
 801588c:	795b      	ldrb	r3, [r3, #5]
 801588e:	2b01      	cmp	r3, #1
 8015890:	d007      	beq.n	80158a2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015892:	69fb      	ldr	r3, [r7, #28]
 8015894:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015896:	2b04      	cmp	r3, #4
 8015898:	d003      	beq.n	80158a2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801589a:	69fb      	ldr	r3, [r7, #28]
 801589c:	795b      	ldrb	r3, [r3, #5]
 801589e:	2b05      	cmp	r3, #5
 80158a0:	d103      	bne.n	80158aa <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80158a2:	6a38      	ldr	r0, [r7, #32]
 80158a4:	f7fe fb28 	bl	8013ef8 <dhcp_handle_nak>
 80158a8:	e018      	b.n	80158dc <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80158aa:	7cfb      	ldrb	r3, [r7, #19]
 80158ac:	2b02      	cmp	r3, #2
 80158ae:	d108      	bne.n	80158c2 <dhcp_recv+0x162>
 80158b0:	69fb      	ldr	r3, [r7, #28]
 80158b2:	795b      	ldrb	r3, [r3, #5]
 80158b4:	2b06      	cmp	r3, #6
 80158b6:	d104      	bne.n	80158c2 <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80158b8:	6979      	ldr	r1, [r7, #20]
 80158ba:	6a38      	ldr	r0, [r7, #32]
 80158bc:	f7fe fb6a 	bl	8013f94 <dhcp_handle_offer>
 80158c0:	e00c      	b.n	80158dc <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 80158c2:	bf00      	nop
 80158c4:	e00a      	b.n	80158dc <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80158c6:	bf00      	nop
 80158c8:	e008      	b.n	80158dc <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80158ca:	bf00      	nop
 80158cc:	e006      	b.n	80158dc <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 80158ce:	bf00      	nop
 80158d0:	e004      	b.n	80158dc <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80158d2:	bf00      	nop
 80158d4:	e002      	b.n	80158dc <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80158d6:	bf00      	nop
 80158d8:	e000      	b.n	80158dc <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80158da:	bf00      	nop
  pbuf_free(p);
 80158dc:	6878      	ldr	r0, [r7, #4]
 80158de:	f004 fa73 	bl	8019dc8 <pbuf_free>
}
 80158e2:	bf00      	nop
 80158e4:	3728      	adds	r7, #40	; 0x28
 80158e6:	46bd      	mov	sp, r7
 80158e8:	bd80      	pop	{r7, pc}
 80158ea:	bf00      	nop
 80158ec:	2000df98 	.word	0x2000df98
 80158f0:	2000df64 	.word	0x2000df64
 80158f4:	2000df70 	.word	0x2000df70

080158f8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80158f8:	b580      	push	{r7, lr}
 80158fa:	b088      	sub	sp, #32
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	60f8      	str	r0, [r7, #12]
 8015900:	60b9      	str	r1, [r7, #8]
 8015902:	603b      	str	r3, [r7, #0]
 8015904:	4613      	mov	r3, r2
 8015906:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	2b00      	cmp	r3, #0
 801590c:	d108      	bne.n	8015920 <dhcp_create_msg+0x28>
 801590e:	4b5f      	ldr	r3, [pc, #380]	; (8015a8c <dhcp_create_msg+0x194>)
 8015910:	f240 7269 	movw	r2, #1897	; 0x769
 8015914:	495e      	ldr	r1, [pc, #376]	; (8015a90 <dhcp_create_msg+0x198>)
 8015916:	485f      	ldr	r0, [pc, #380]	; (8015a94 <dhcp_create_msg+0x19c>)
 8015918:	f00e fb66 	bl	8023fe8 <iprintf>
 801591c:	2300      	movs	r3, #0
 801591e:	e0b1      	b.n	8015a84 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015920:	68bb      	ldr	r3, [r7, #8]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d108      	bne.n	8015938 <dhcp_create_msg+0x40>
 8015926:	4b59      	ldr	r3, [pc, #356]	; (8015a8c <dhcp_create_msg+0x194>)
 8015928:	f240 726a 	movw	r2, #1898	; 0x76a
 801592c:	495a      	ldr	r1, [pc, #360]	; (8015a98 <dhcp_create_msg+0x1a0>)
 801592e:	4859      	ldr	r0, [pc, #356]	; (8015a94 <dhcp_create_msg+0x19c>)
 8015930:	f00e fb5a 	bl	8023fe8 <iprintf>
 8015934:	2300      	movs	r3, #0
 8015936:	e0a5      	b.n	8015a84 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8015938:	f44f 7220 	mov.w	r2, #640	; 0x280
 801593c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8015940:	2036      	movs	r0, #54	; 0x36
 8015942:	f003 ff61 	bl	8019808 <pbuf_alloc>
 8015946:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8015948:	69bb      	ldr	r3, [r7, #24]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d101      	bne.n	8015952 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801594e:	2300      	movs	r3, #0
 8015950:	e098      	b.n	8015a84 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8015952:	69bb      	ldr	r3, [r7, #24]
 8015954:	895b      	ldrh	r3, [r3, #10]
 8015956:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801595a:	d206      	bcs.n	801596a <dhcp_create_msg+0x72>
 801595c:	4b4b      	ldr	r3, [pc, #300]	; (8015a8c <dhcp_create_msg+0x194>)
 801595e:	f240 7272 	movw	r2, #1906	; 0x772
 8015962:	494e      	ldr	r1, [pc, #312]	; (8015a9c <dhcp_create_msg+0x1a4>)
 8015964:	484b      	ldr	r0, [pc, #300]	; (8015a94 <dhcp_create_msg+0x19c>)
 8015966:	f00e fb3f 	bl	8023fe8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801596a:	79fb      	ldrb	r3, [r7, #7]
 801596c:	2b03      	cmp	r3, #3
 801596e:	d103      	bne.n	8015978 <dhcp_create_msg+0x80>
 8015970:	68bb      	ldr	r3, [r7, #8]
 8015972:	795b      	ldrb	r3, [r3, #5]
 8015974:	2b03      	cmp	r3, #3
 8015976:	d10d      	bne.n	8015994 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8015978:	68bb      	ldr	r3, [r7, #8]
 801597a:	799b      	ldrb	r3, [r3, #6]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d105      	bne.n	801598c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8015980:	f00e fb4a 	bl	8024018 <rand>
 8015984:	4603      	mov	r3, r0
 8015986:	461a      	mov	r2, r3
 8015988:	4b45      	ldr	r3, [pc, #276]	; (8015aa0 <dhcp_create_msg+0x1a8>)
 801598a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801598c:	4b44      	ldr	r3, [pc, #272]	; (8015aa0 <dhcp_create_msg+0x1a8>)
 801598e:	681a      	ldr	r2, [r3, #0]
 8015990:	68bb      	ldr	r3, [r7, #8]
 8015992:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8015994:	69bb      	ldr	r3, [r7, #24]
 8015996:	685b      	ldr	r3, [r3, #4]
 8015998:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801599a:	f44f 729a 	mov.w	r2, #308	; 0x134
 801599e:	2100      	movs	r1, #0
 80159a0:	6978      	ldr	r0, [r7, #20]
 80159a2:	f00e fa71 	bl	8023e88 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80159a6:	697b      	ldr	r3, [r7, #20]
 80159a8:	2201      	movs	r2, #1
 80159aa:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80159ac:	697b      	ldr	r3, [r7, #20]
 80159ae:	2201      	movs	r2, #1
 80159b0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80159b8:	697b      	ldr	r3, [r7, #20]
 80159ba:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80159bc:	68bb      	ldr	r3, [r7, #8]
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	4618      	mov	r0, r3
 80159c2:	f7fe fa04 	bl	8013dce <lwip_htonl>
 80159c6:	4602      	mov	r2, r0
 80159c8:	697b      	ldr	r3, [r7, #20]
 80159ca:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80159cc:	79fb      	ldrb	r3, [r7, #7]
 80159ce:	2b08      	cmp	r3, #8
 80159d0:	d010      	beq.n	80159f4 <dhcp_create_msg+0xfc>
 80159d2:	79fb      	ldrb	r3, [r7, #7]
 80159d4:	2b04      	cmp	r3, #4
 80159d6:	d00d      	beq.n	80159f4 <dhcp_create_msg+0xfc>
 80159d8:	79fb      	ldrb	r3, [r7, #7]
 80159da:	2b07      	cmp	r3, #7
 80159dc:	d00a      	beq.n	80159f4 <dhcp_create_msg+0xfc>
 80159de:	79fb      	ldrb	r3, [r7, #7]
 80159e0:	2b03      	cmp	r3, #3
 80159e2:	d10c      	bne.n	80159fe <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80159e4:	68bb      	ldr	r3, [r7, #8]
 80159e6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80159e8:	2b05      	cmp	r3, #5
 80159ea:	d003      	beq.n	80159f4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80159ec:	68bb      	ldr	r3, [r7, #8]
 80159ee:	795b      	ldrb	r3, [r3, #5]
 80159f0:	2b04      	cmp	r3, #4
 80159f2:	d104      	bne.n	80159fe <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	3304      	adds	r3, #4
 80159f8:	681a      	ldr	r2, [r3, #0]
 80159fa:	697b      	ldr	r3, [r7, #20]
 80159fc:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80159fe:	2300      	movs	r3, #0
 8015a00:	83fb      	strh	r3, [r7, #30]
 8015a02:	e00c      	b.n	8015a1e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8015a04:	8bfa      	ldrh	r2, [r7, #30]
 8015a06:	8bfb      	ldrh	r3, [r7, #30]
 8015a08:	68f9      	ldr	r1, [r7, #12]
 8015a0a:	440a      	add	r2, r1
 8015a0c:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
 8015a10:	697a      	ldr	r2, [r7, #20]
 8015a12:	4413      	add	r3, r2
 8015a14:	460a      	mov	r2, r1
 8015a16:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015a18:	8bfb      	ldrh	r3, [r7, #30]
 8015a1a:	3301      	adds	r3, #1
 8015a1c:	83fb      	strh	r3, [r7, #30]
 8015a1e:	8bfb      	ldrh	r3, [r7, #30]
 8015a20:	2b05      	cmp	r3, #5
 8015a22:	d9ef      	bls.n	8015a04 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8015a24:	697b      	ldr	r3, [r7, #20]
 8015a26:	2200      	movs	r2, #0
 8015a28:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015a2c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8015a30:	2200      	movs	r2, #0
 8015a32:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8015a36:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8015a3a:	2200      	movs	r2, #0
 8015a3c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8015a40:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8015a44:	2200      	movs	r2, #0
 8015a46:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015a4a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8015a4e:	697b      	ldr	r3, [r7, #20]
 8015a50:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015a54:	2301      	movs	r3, #1
 8015a56:	2235      	movs	r2, #53	; 0x35
 8015a58:	2000      	movs	r0, #0
 8015a5a:	f7ff faad 	bl	8014fb8 <dhcp_option>
 8015a5e:	4603      	mov	r3, r0
 8015a60:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8015a62:	697b      	ldr	r3, [r7, #20]
 8015a64:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015a68:	79fa      	ldrb	r2, [r7, #7]
 8015a6a:	8a7b      	ldrh	r3, [r7, #18]
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f7ff fad7 	bl	8015020 <dhcp_option_byte>
 8015a72:	4603      	mov	r3, r0
 8015a74:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8015a76:	683b      	ldr	r3, [r7, #0]
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d002      	beq.n	8015a82 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8015a7c:	683b      	ldr	r3, [r7, #0]
 8015a7e:	8a7a      	ldrh	r2, [r7, #18]
 8015a80:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8015a82:	69bb      	ldr	r3, [r7, #24]
}
 8015a84:	4618      	mov	r0, r3
 8015a86:	3720      	adds	r7, #32
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd80      	pop	{r7, pc}
 8015a8c:	08025738 	.word	0x08025738
 8015a90:	08025a84 	.word	0x08025a84
 8015a94:	080257b4 	.word	0x080257b4
 8015a98:	08025aa4 	.word	0x08025aa4
 8015a9c:	08025ac4 	.word	0x08025ac4
 8015aa0:	20008498 	.word	0x20008498

08015aa4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b084      	sub	sp, #16
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	4603      	mov	r3, r0
 8015aac:	60b9      	str	r1, [r7, #8]
 8015aae:	607a      	str	r2, [r7, #4]
 8015ab0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8015ab2:	89fb      	ldrh	r3, [r7, #14]
 8015ab4:	1c5a      	adds	r2, r3, #1
 8015ab6:	81fa      	strh	r2, [r7, #14]
 8015ab8:	461a      	mov	r2, r3
 8015aba:	68bb      	ldr	r3, [r7, #8]
 8015abc:	4413      	add	r3, r2
 8015abe:	22ff      	movs	r2, #255	; 0xff
 8015ac0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015ac2:	e007      	b.n	8015ad4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8015ac4:	89fb      	ldrh	r3, [r7, #14]
 8015ac6:	1c5a      	adds	r2, r3, #1
 8015ac8:	81fa      	strh	r2, [r7, #14]
 8015aca:	461a      	mov	r2, r3
 8015acc:	68bb      	ldr	r3, [r7, #8]
 8015ace:	4413      	add	r3, r2
 8015ad0:	2200      	movs	r2, #0
 8015ad2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015ad4:	89fb      	ldrh	r3, [r7, #14]
 8015ad6:	2b43      	cmp	r3, #67	; 0x43
 8015ad8:	d904      	bls.n	8015ae4 <dhcp_option_trailer+0x40>
 8015ada:	89fb      	ldrh	r3, [r7, #14]
 8015adc:	f003 0303 	and.w	r3, r3, #3
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d002      	beq.n	8015aea <dhcp_option_trailer+0x46>
 8015ae4:	89fb      	ldrh	r3, [r7, #14]
 8015ae6:	2b43      	cmp	r3, #67	; 0x43
 8015ae8:	d9ec      	bls.n	8015ac4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8015aea:	89fb      	ldrh	r3, [r7, #14]
 8015aec:	33f0      	adds	r3, #240	; 0xf0
 8015aee:	b29b      	uxth	r3, r3
 8015af0:	4619      	mov	r1, r3
 8015af2:	6878      	ldr	r0, [r7, #4]
 8015af4:	f003 ffe2 	bl	8019abc <pbuf_realloc>
}
 8015af8:	bf00      	nop
 8015afa:	3710      	adds	r7, #16
 8015afc:	46bd      	mov	sp, r7
 8015afe:	bd80      	pop	{r7, pc}

08015b00 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8015b00:	b480      	push	{r7}
 8015b02:	b085      	sub	sp, #20
 8015b04:	af00      	add	r7, sp, #0
 8015b06:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d017      	beq.n	8015b3e <dhcp_supplied_address+0x3e>
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	6a1b      	ldr	r3, [r3, #32]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d013      	beq.n	8015b3e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	6a1b      	ldr	r3, [r3, #32]
 8015b1a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	795b      	ldrb	r3, [r3, #5]
 8015b20:	2b0a      	cmp	r3, #10
 8015b22:	d007      	beq.n	8015b34 <dhcp_supplied_address+0x34>
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	795b      	ldrb	r3, [r3, #5]
 8015b28:	2b05      	cmp	r3, #5
 8015b2a:	d003      	beq.n	8015b34 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015b30:	2b04      	cmp	r3, #4
 8015b32:	d101      	bne.n	8015b38 <dhcp_supplied_address+0x38>
 8015b34:	2301      	movs	r3, #1
 8015b36:	e000      	b.n	8015b3a <dhcp_supplied_address+0x3a>
 8015b38:	2300      	movs	r3, #0
 8015b3a:	b2db      	uxtb	r3, r3
 8015b3c:	e000      	b.n	8015b40 <dhcp_supplied_address+0x40>
  }
  return 0;
 8015b3e:	2300      	movs	r3, #0
}
 8015b40:	4618      	mov	r0, r3
 8015b42:	3714      	adds	r7, #20
 8015b44:	46bd      	mov	sp, r7
 8015b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b4a:	4770      	bx	lr

08015b4c <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 8015b4c:	b480      	push	{r7}
 8015b4e:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 8015b50:	bf00      	nop
 8015b52:	46bd      	mov	sp, r7
 8015b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b58:	4770      	bx	lr
	...

08015b5c <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 8015b5c:	b480      	push	{r7}
 8015b5e:	b083      	sub	sp, #12
 8015b60:	af00      	add	r7, sp, #0
 8015b62:	4603      	mov	r3, r0
 8015b64:	6039      	str	r1, [r7, #0]
 8015b66:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 8015b68:	79fb      	ldrb	r3, [r7, #7]
 8015b6a:	2b01      	cmp	r3, #1
 8015b6c:	d80f      	bhi.n	8015b8e <dns_setserver+0x32>
    if (dnsserver != NULL) {
 8015b6e:	683b      	ldr	r3, [r7, #0]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d006      	beq.n	8015b82 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 8015b74:	79fb      	ldrb	r3, [r7, #7]
 8015b76:	4909      	ldr	r1, [pc, #36]	; (8015b9c <dns_setserver+0x40>)
 8015b78:	683a      	ldr	r2, [r7, #0]
 8015b7a:	6812      	ldr	r2, [r2, #0]
 8015b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 8015b80:	e005      	b.n	8015b8e <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 8015b82:	79fb      	ldrb	r3, [r7, #7]
 8015b84:	4905      	ldr	r1, [pc, #20]	; (8015b9c <dns_setserver+0x40>)
 8015b86:	4a06      	ldr	r2, [pc, #24]	; (8015ba0 <dns_setserver+0x44>)
 8015b88:	6812      	ldr	r2, [r2, #0]
 8015b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015b8e:	bf00      	nop
 8015b90:	370c      	adds	r7, #12
 8015b92:	46bd      	mov	sp, r7
 8015b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b98:	4770      	bx	lr
 8015b9a:	bf00      	nop
 8015b9c:	2000891c 	.word	0x2000891c
 8015ba0:	08028a28 	.word	0x08028a28

08015ba4 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 8015ba4:	b580      	push	{r7, lr}
 8015ba6:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 8015ba8:	f000 faaa 	bl	8016100 <dns_check_entries>
}
 8015bac:	bf00      	nop
 8015bae:	bd80      	pop	{r7, pc}

08015bb0 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 8015bb0:	b580      	push	{r7, lr}
 8015bb2:	b090      	sub	sp, #64	; 0x40
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 8015bba:	79fa      	ldrb	r2, [r7, #7]
 8015bbc:	4613      	mov	r3, r2
 8015bbe:	011b      	lsls	r3, r3, #4
 8015bc0:	4413      	add	r3, r2
 8015bc2:	011b      	lsls	r3, r3, #4
 8015bc4:	4a6c      	ldr	r2, [pc, #432]	; (8015d78 <dns_send+0x1c8>)
 8015bc6:	4413      	add	r3, r2
 8015bc8:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8015bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bcc:	7adb      	ldrb	r3, [r3, #11]
 8015bce:	2b01      	cmp	r3, #1
 8015bd0:	d906      	bls.n	8015be0 <dns_send+0x30>
 8015bd2:	4b6a      	ldr	r3, [pc, #424]	; (8015d7c <dns_send+0x1cc>)
 8015bd4:	f240 22fa 	movw	r2, #762	; 0x2fa
 8015bd8:	4969      	ldr	r1, [pc, #420]	; (8015d80 <dns_send+0x1d0>)
 8015bda:	486a      	ldr	r0, [pc, #424]	; (8015d84 <dns_send+0x1d4>)
 8015bdc:	f00e fa04 	bl	8023fe8 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8015be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015be2:	7adb      	ldrb	r3, [r3, #11]
 8015be4:	461a      	mov	r2, r3
 8015be6:	4b68      	ldr	r3, [pc, #416]	; (8015d88 <dns_send+0x1d8>)
 8015be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d109      	bne.n	8015c04 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 8015bf0:	79fb      	ldrb	r3, [r7, #7]
 8015bf2:	2100      	movs	r1, #0
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	f000 f8cb 	bl	8015d90 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 8015bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bfc:	2200      	movs	r2, #0
 8015bfe:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 8015c00:	2300      	movs	r3, #0
 8015c02:	e0b4      	b.n	8015d6e <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8015c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c06:	3310      	adds	r3, #16
 8015c08:	4618      	mov	r0, r3
 8015c0a:	f7ea fb01 	bl	8000210 <strlen>
 8015c0e:	4603      	mov	r3, r0
 8015c10:	b29b      	uxth	r3, r3
 8015c12:	3312      	adds	r3, #18
 8015c14:	b29b      	uxth	r3, r3
 8015c16:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015c1a:	4619      	mov	r1, r3
 8015c1c:	2036      	movs	r0, #54	; 0x36
 8015c1e:	f003 fdf3 	bl	8019808 <pbuf_alloc>
 8015c22:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 8015c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	f000 8095 	beq.w	8015d56 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8015c2c:	f107 0310 	add.w	r3, r7, #16
 8015c30:	220c      	movs	r2, #12
 8015c32:	2100      	movs	r1, #0
 8015c34:	4618      	mov	r0, r3
 8015c36:	f00e f927 	bl	8023e88 <memset>
    hdr.id = lwip_htons(entry->txid);
 8015c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c3c:	891b      	ldrh	r3, [r3, #8]
 8015c3e:	4618      	mov	r0, r3
 8015c40:	f7fe f8b0 	bl	8013da4 <lwip_htons>
 8015c44:	4603      	mov	r3, r0
 8015c46:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 8015c48:	2301      	movs	r3, #1
 8015c4a:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 8015c4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015c50:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8015c52:	f107 0310 	add.w	r3, r7, #16
 8015c56:	220c      	movs	r2, #12
 8015c58:	4619      	mov	r1, r3
 8015c5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015c5c:	f004 fb68 	bl	801a330 <pbuf_take>
    hostname = entry->name;
 8015c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c62:	3310      	adds	r3, #16
 8015c64:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 8015c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c68:	3b01      	subs	r3, #1
 8015c6a:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 8015c6c:	230c      	movs	r3, #12
 8015c6e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 8015c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c72:	3301      	adds	r3, #1
 8015c74:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 8015c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c78:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015c80:	e007      	b.n	8015c92 <dns_send+0xe2>
        ++n;
 8015c82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015c86:	3301      	adds	r3, #1
 8015c88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8015c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c8e:	3301      	adds	r3, #1
 8015c90:	63bb      	str	r3, [r7, #56]	; 0x38
 8015c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c94:	781b      	ldrb	r3, [r3, #0]
 8015c96:	2b2e      	cmp	r3, #46	; 0x2e
 8015c98:	d003      	beq.n	8015ca2 <dns_send+0xf2>
 8015c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c9c:	781b      	ldrb	r3, [r3, #0]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d1ef      	bne.n	8015c82 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 8015ca2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ca6:	1ad3      	subs	r3, r2, r3
 8015ca8:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 8015caa:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8015cac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015cb0:	4413      	add	r3, r2
 8015cb2:	3301      	adds	r3, #1
 8015cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015cb8:	da53      	bge.n	8015d62 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 8015cba:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015cbe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015cc0:	4619      	mov	r1, r3
 8015cc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015cc4:	f004 fc62 	bl	801a58c <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8015cc8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015cca:	3301      	adds	r3, #1
 8015ccc:	b29b      	uxth	r3, r3
 8015cce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015cd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015cd4:	f004 fbbe 	bl	801a454 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 8015cd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015cdc:	b29a      	uxth	r2, r3
 8015cde:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015ce0:	4413      	add	r3, r2
 8015ce2:	b29b      	uxth	r3, r3
 8015ce4:	3301      	adds	r3, #1
 8015ce6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 8015ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015cea:	781b      	ldrb	r3, [r3, #0]
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	d1bf      	bne.n	8015c70 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 8015cf0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	4619      	mov	r1, r3
 8015cf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015cf8:	f004 fc48 	bl	801a58c <pbuf_put_at>
    query_idx++;
 8015cfc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015cfe:	3301      	adds	r3, #1
 8015d00:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8015d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015d06:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8015d08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015d0c:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8015d0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015d10:	f107 010c 	add.w	r1, r7, #12
 8015d14:	2204      	movs	r2, #4
 8015d16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015d18:	f004 fb9c 	bl	801a454 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 8015d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d1e:	7bdb      	ldrb	r3, [r3, #15]
 8015d20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 8015d24:	2335      	movs	r3, #53	; 0x35
 8015d26:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 8015d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d2a:	7adb      	ldrb	r3, [r3, #11]
 8015d2c:	009b      	lsls	r3, r3, #2
 8015d2e:	4a16      	ldr	r2, [pc, #88]	; (8015d88 <dns_send+0x1d8>)
 8015d30:	4413      	add	r3, r2
 8015d32:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8015d34:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8015d38:	4a14      	ldr	r2, [pc, #80]	; (8015d8c <dns_send+0x1dc>)
 8015d3a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015d3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d40:	69fa      	ldr	r2, [r7, #28]
 8015d42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015d44:	f00b fb9a 	bl	802147c <udp_sendto>
 8015d48:	4603      	mov	r3, r0
 8015d4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 8015d4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015d50:	f004 f83a 	bl	8019dc8 <pbuf_free>
 8015d54:	e002      	b.n	8015d5c <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 8015d56:	23ff      	movs	r3, #255	; 0xff
 8015d58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 8015d5c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8015d60:	e005      	b.n	8015d6e <dns_send+0x1be>
        goto overflow_return;
 8015d62:	bf00      	nop
overflow_return:
  pbuf_free(p);
 8015d64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015d66:	f004 f82f 	bl	8019dc8 <pbuf_free>
  return ERR_VAL;
 8015d6a:	f06f 0305 	mvn.w	r3, #5
}
 8015d6e:	4618      	mov	r0, r3
 8015d70:	3740      	adds	r7, #64	; 0x40
 8015d72:	46bd      	mov	sp, r7
 8015d74:	bd80      	pop	{r7, pc}
 8015d76:	bf00      	nop
 8015d78:	200084ac 	.word	0x200084ac
 8015d7c:	08025b04 	.word	0x08025b04
 8015d80:	08025b50 	.word	0x08025b50
 8015d84:	08025b68 	.word	0x08025b68
 8015d88:	2000891c 	.word	0x2000891c
 8015d8c:	2000849c 	.word	0x2000849c

08015d90 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8015d90:	b590      	push	{r4, r7, lr}
 8015d92:	b085      	sub	sp, #20
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	4603      	mov	r3, r0
 8015d98:	6039      	str	r1, [r7, #0]
 8015d9a:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	73fb      	strb	r3, [r7, #15]
 8015da0:	e03d      	b.n	8015e1e <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8015da2:	7bfa      	ldrb	r2, [r7, #15]
 8015da4:	4957      	ldr	r1, [pc, #348]	; (8015f04 <dns_call_found+0x174>)
 8015da6:	4613      	mov	r3, r2
 8015da8:	005b      	lsls	r3, r3, #1
 8015daa:	4413      	add	r3, r2
 8015dac:	009b      	lsls	r3, r3, #2
 8015dae:	440b      	add	r3, r1
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d030      	beq.n	8015e18 <dns_call_found+0x88>
 8015db6:	7bfa      	ldrb	r2, [r7, #15]
 8015db8:	4952      	ldr	r1, [pc, #328]	; (8015f04 <dns_call_found+0x174>)
 8015dba:	4613      	mov	r3, r2
 8015dbc:	005b      	lsls	r3, r3, #1
 8015dbe:	4413      	add	r3, r2
 8015dc0:	009b      	lsls	r3, r3, #2
 8015dc2:	440b      	add	r3, r1
 8015dc4:	3308      	adds	r3, #8
 8015dc6:	781b      	ldrb	r3, [r3, #0]
 8015dc8:	79fa      	ldrb	r2, [r7, #7]
 8015dca:	429a      	cmp	r2, r3
 8015dcc:	d124      	bne.n	8015e18 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8015dce:	7bfa      	ldrb	r2, [r7, #15]
 8015dd0:	494c      	ldr	r1, [pc, #304]	; (8015f04 <dns_call_found+0x174>)
 8015dd2:	4613      	mov	r3, r2
 8015dd4:	005b      	lsls	r3, r3, #1
 8015dd6:	4413      	add	r3, r2
 8015dd8:	009b      	lsls	r3, r3, #2
 8015dda:	440b      	add	r3, r1
 8015ddc:	681c      	ldr	r4, [r3, #0]
 8015dde:	79fa      	ldrb	r2, [r7, #7]
 8015de0:	4613      	mov	r3, r2
 8015de2:	011b      	lsls	r3, r3, #4
 8015de4:	4413      	add	r3, r2
 8015de6:	011b      	lsls	r3, r3, #4
 8015de8:	3310      	adds	r3, #16
 8015dea:	4a47      	ldr	r2, [pc, #284]	; (8015f08 <dns_call_found+0x178>)
 8015dec:	1898      	adds	r0, r3, r2
 8015dee:	7bfa      	ldrb	r2, [r7, #15]
 8015df0:	4944      	ldr	r1, [pc, #272]	; (8015f04 <dns_call_found+0x174>)
 8015df2:	4613      	mov	r3, r2
 8015df4:	005b      	lsls	r3, r3, #1
 8015df6:	4413      	add	r3, r2
 8015df8:	009b      	lsls	r3, r3, #2
 8015dfa:	440b      	add	r3, r1
 8015dfc:	3304      	adds	r3, #4
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	461a      	mov	r2, r3
 8015e02:	6839      	ldr	r1, [r7, #0]
 8015e04:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 8015e06:	7bfa      	ldrb	r2, [r7, #15]
 8015e08:	493e      	ldr	r1, [pc, #248]	; (8015f04 <dns_call_found+0x174>)
 8015e0a:	4613      	mov	r3, r2
 8015e0c:	005b      	lsls	r3, r3, #1
 8015e0e:	4413      	add	r3, r2
 8015e10:	009b      	lsls	r3, r3, #2
 8015e12:	440b      	add	r3, r1
 8015e14:	2200      	movs	r2, #0
 8015e16:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8015e18:	7bfb      	ldrb	r3, [r7, #15]
 8015e1a:	3301      	adds	r3, #1
 8015e1c:	73fb      	strb	r3, [r7, #15]
 8015e1e:	7bfb      	ldrb	r3, [r7, #15]
 8015e20:	2b03      	cmp	r3, #3
 8015e22:	d9be      	bls.n	8015da2 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8015e24:	2300      	movs	r3, #0
 8015e26:	73fb      	strb	r3, [r7, #15]
 8015e28:	e031      	b.n	8015e8e <dns_call_found+0xfe>
    if (i == idx) {
 8015e2a:	7bfa      	ldrb	r2, [r7, #15]
 8015e2c:	79fb      	ldrb	r3, [r7, #7]
 8015e2e:	429a      	cmp	r2, r3
 8015e30:	d029      	beq.n	8015e86 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8015e32:	7bfa      	ldrb	r2, [r7, #15]
 8015e34:	4934      	ldr	r1, [pc, #208]	; (8015f08 <dns_call_found+0x178>)
 8015e36:	4613      	mov	r3, r2
 8015e38:	011b      	lsls	r3, r3, #4
 8015e3a:	4413      	add	r3, r2
 8015e3c:	011b      	lsls	r3, r3, #4
 8015e3e:	440b      	add	r3, r1
 8015e40:	330a      	adds	r3, #10
 8015e42:	781b      	ldrb	r3, [r3, #0]
 8015e44:	2b02      	cmp	r3, #2
 8015e46:	d11f      	bne.n	8015e88 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8015e48:	7bfa      	ldrb	r2, [r7, #15]
 8015e4a:	492f      	ldr	r1, [pc, #188]	; (8015f08 <dns_call_found+0x178>)
 8015e4c:	4613      	mov	r3, r2
 8015e4e:	011b      	lsls	r3, r3, #4
 8015e50:	4413      	add	r3, r2
 8015e52:	011b      	lsls	r3, r3, #4
 8015e54:	440b      	add	r3, r1
 8015e56:	330f      	adds	r3, #15
 8015e58:	7819      	ldrb	r1, [r3, #0]
 8015e5a:	79fa      	ldrb	r2, [r7, #7]
 8015e5c:	482a      	ldr	r0, [pc, #168]	; (8015f08 <dns_call_found+0x178>)
 8015e5e:	4613      	mov	r3, r2
 8015e60:	011b      	lsls	r3, r3, #4
 8015e62:	4413      	add	r3, r2
 8015e64:	011b      	lsls	r3, r3, #4
 8015e66:	4403      	add	r3, r0
 8015e68:	330f      	adds	r3, #15
 8015e6a:	781b      	ldrb	r3, [r3, #0]
 8015e6c:	4299      	cmp	r1, r3
 8015e6e:	d10b      	bne.n	8015e88 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8015e70:	79fa      	ldrb	r2, [r7, #7]
 8015e72:	4925      	ldr	r1, [pc, #148]	; (8015f08 <dns_call_found+0x178>)
 8015e74:	4613      	mov	r3, r2
 8015e76:	011b      	lsls	r3, r3, #4
 8015e78:	4413      	add	r3, r2
 8015e7a:	011b      	lsls	r3, r3, #4
 8015e7c:	440b      	add	r3, r1
 8015e7e:	330f      	adds	r3, #15
 8015e80:	2204      	movs	r2, #4
 8015e82:	701a      	strb	r2, [r3, #0]
        break;
 8015e84:	e006      	b.n	8015e94 <dns_call_found+0x104>
      continue; /* only check other requests */
 8015e86:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8015e88:	7bfb      	ldrb	r3, [r7, #15]
 8015e8a:	3301      	adds	r3, #1
 8015e8c:	73fb      	strb	r3, [r7, #15]
 8015e8e:	7bfb      	ldrb	r3, [r7, #15]
 8015e90:	2b03      	cmp	r3, #3
 8015e92:	d9ca      	bls.n	8015e2a <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8015e94:	79fa      	ldrb	r2, [r7, #7]
 8015e96:	491c      	ldr	r1, [pc, #112]	; (8015f08 <dns_call_found+0x178>)
 8015e98:	4613      	mov	r3, r2
 8015e9a:	011b      	lsls	r3, r3, #4
 8015e9c:	4413      	add	r3, r2
 8015e9e:	011b      	lsls	r3, r3, #4
 8015ea0:	440b      	add	r3, r1
 8015ea2:	330f      	adds	r3, #15
 8015ea4:	781b      	ldrb	r3, [r3, #0]
 8015ea6:	2b03      	cmp	r3, #3
 8015ea8:	d827      	bhi.n	8015efa <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8015eaa:	79fa      	ldrb	r2, [r7, #7]
 8015eac:	4916      	ldr	r1, [pc, #88]	; (8015f08 <dns_call_found+0x178>)
 8015eae:	4613      	mov	r3, r2
 8015eb0:	011b      	lsls	r3, r3, #4
 8015eb2:	4413      	add	r3, r2
 8015eb4:	011b      	lsls	r3, r3, #4
 8015eb6:	440b      	add	r3, r1
 8015eb8:	330f      	adds	r3, #15
 8015eba:	781b      	ldrb	r3, [r3, #0]
 8015ebc:	461a      	mov	r2, r3
 8015ebe:	4b13      	ldr	r3, [pc, #76]	; (8015f0c <dns_call_found+0x17c>)
 8015ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	f00b fda5 	bl	8021a14 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8015eca:	79fa      	ldrb	r2, [r7, #7]
 8015ecc:	490e      	ldr	r1, [pc, #56]	; (8015f08 <dns_call_found+0x178>)
 8015ece:	4613      	mov	r3, r2
 8015ed0:	011b      	lsls	r3, r3, #4
 8015ed2:	4413      	add	r3, r2
 8015ed4:	011b      	lsls	r3, r3, #4
 8015ed6:	440b      	add	r3, r1
 8015ed8:	330f      	adds	r3, #15
 8015eda:	781b      	ldrb	r3, [r3, #0]
 8015edc:	4619      	mov	r1, r3
 8015ede:	4b0b      	ldr	r3, [pc, #44]	; (8015f0c <dns_call_found+0x17c>)
 8015ee0:	2200      	movs	r2, #0
 8015ee2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8015ee6:	79fa      	ldrb	r2, [r7, #7]
 8015ee8:	4907      	ldr	r1, [pc, #28]	; (8015f08 <dns_call_found+0x178>)
 8015eea:	4613      	mov	r3, r2
 8015eec:	011b      	lsls	r3, r3, #4
 8015eee:	4413      	add	r3, r2
 8015ef0:	011b      	lsls	r3, r3, #4
 8015ef2:	440b      	add	r3, r1
 8015ef4:	330f      	adds	r3, #15
 8015ef6:	2204      	movs	r2, #4
 8015ef8:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8015efa:	bf00      	nop
 8015efc:	3714      	adds	r7, #20
 8015efe:	46bd      	mov	sp, r7
 8015f00:	bd90      	pop	{r4, r7, pc}
 8015f02:	bf00      	nop
 8015f04:	200088ec 	.word	0x200088ec
 8015f08:	200084ac 	.word	0x200084ac
 8015f0c:	2000849c 	.word	0x2000849c

08015f10 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8015f10:	b580      	push	{r7, lr}
 8015f12:	b082      	sub	sp, #8
 8015f14:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 8015f16:	f00e f87f 	bl	8024018 <rand>
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8015f1e:	2300      	movs	r3, #0
 8015f20:	71fb      	strb	r3, [r7, #7]
 8015f22:	e01a      	b.n	8015f5a <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8015f24:	79fa      	ldrb	r2, [r7, #7]
 8015f26:	4911      	ldr	r1, [pc, #68]	; (8015f6c <dns_create_txid+0x5c>)
 8015f28:	4613      	mov	r3, r2
 8015f2a:	011b      	lsls	r3, r3, #4
 8015f2c:	4413      	add	r3, r2
 8015f2e:	011b      	lsls	r3, r3, #4
 8015f30:	440b      	add	r3, r1
 8015f32:	330a      	adds	r3, #10
 8015f34:	781b      	ldrb	r3, [r3, #0]
 8015f36:	2b02      	cmp	r3, #2
 8015f38:	d10c      	bne.n	8015f54 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8015f3a:	79fa      	ldrb	r2, [r7, #7]
 8015f3c:	490b      	ldr	r1, [pc, #44]	; (8015f6c <dns_create_txid+0x5c>)
 8015f3e:	4613      	mov	r3, r2
 8015f40:	011b      	lsls	r3, r3, #4
 8015f42:	4413      	add	r3, r2
 8015f44:	011b      	lsls	r3, r3, #4
 8015f46:	440b      	add	r3, r1
 8015f48:	3308      	adds	r3, #8
 8015f4a:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8015f4c:	88ba      	ldrh	r2, [r7, #4]
 8015f4e:	429a      	cmp	r2, r3
 8015f50:	d100      	bne.n	8015f54 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 8015f52:	e7e0      	b.n	8015f16 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8015f54:	79fb      	ldrb	r3, [r7, #7]
 8015f56:	3301      	adds	r3, #1
 8015f58:	71fb      	strb	r3, [r7, #7]
 8015f5a:	79fb      	ldrb	r3, [r7, #7]
 8015f5c:	2b03      	cmp	r3, #3
 8015f5e:	d9e1      	bls.n	8015f24 <dns_create_txid+0x14>
    }
  }

  return txid;
 8015f60:	88bb      	ldrh	r3, [r7, #4]
}
 8015f62:	4618      	mov	r0, r3
 8015f64:	3708      	adds	r7, #8
 8015f66:	46bd      	mov	sp, r7
 8015f68:	bd80      	pop	{r7, pc}
 8015f6a:	bf00      	nop
 8015f6c:	200084ac 	.word	0x200084ac

08015f70 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 8015f70:	b480      	push	{r7}
 8015f72:	b085      	sub	sp, #20
 8015f74:	af00      	add	r7, sp, #0
 8015f76:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 8015f78:	2300      	movs	r3, #0
 8015f7a:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d00e      	beq.n	8015fa0 <dns_backupserver_available+0x30>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	7adb      	ldrb	r3, [r3, #11]
 8015f86:	3301      	adds	r3, #1
 8015f88:	2b01      	cmp	r3, #1
 8015f8a:	dc09      	bgt.n	8015fa0 <dns_backupserver_available+0x30>
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	7adb      	ldrb	r3, [r3, #11]
 8015f90:	3301      	adds	r3, #1
 8015f92:	4a07      	ldr	r2, [pc, #28]	; (8015fb0 <dns_backupserver_available+0x40>)
 8015f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d001      	beq.n	8015fa0 <dns_backupserver_available+0x30>
      ret = 1;
 8015f9c:	2301      	movs	r3, #1
 8015f9e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8015fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	3714      	adds	r7, #20
 8015fa6:	46bd      	mov	sp, r7
 8015fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fac:	4770      	bx	lr
 8015fae:	bf00      	nop
 8015fb0:	2000891c 	.word	0x2000891c

08015fb4 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b084      	sub	sp, #16
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	4603      	mov	r3, r0
 8015fbc:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8015fbe:	79fa      	ldrb	r2, [r7, #7]
 8015fc0:	4613      	mov	r3, r2
 8015fc2:	011b      	lsls	r3, r3, #4
 8015fc4:	4413      	add	r3, r2
 8015fc6:	011b      	lsls	r3, r3, #4
 8015fc8:	4a48      	ldr	r2, [pc, #288]	; (80160ec <dns_check_entry+0x138>)
 8015fca:	4413      	add	r3, r2
 8015fcc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8015fce:	79fb      	ldrb	r3, [r7, #7]
 8015fd0:	2b03      	cmp	r3, #3
 8015fd2:	d906      	bls.n	8015fe2 <dns_check_entry+0x2e>
 8015fd4:	4b46      	ldr	r3, [pc, #280]	; (80160f0 <dns_check_entry+0x13c>)
 8015fd6:	f240 421c 	movw	r2, #1052	; 0x41c
 8015fda:	4946      	ldr	r1, [pc, #280]	; (80160f4 <dns_check_entry+0x140>)
 8015fdc:	4846      	ldr	r0, [pc, #280]	; (80160f8 <dns_check_entry+0x144>)
 8015fde:	f00e f803 	bl	8023fe8 <iprintf>

  switch (entry->state) {
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	7a9b      	ldrb	r3, [r3, #10]
 8015fe6:	2b03      	cmp	r3, #3
 8015fe8:	d86f      	bhi.n	80160ca <dns_check_entry+0x116>
 8015fea:	a201      	add	r2, pc, #4	; (adr r2, 8015ff0 <dns_check_entry+0x3c>)
 8015fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ff0:	080160db 	.word	0x080160db
 8015ff4:	08016001 	.word	0x08016001
 8015ff8:	08016033 	.word	0x08016033
 8015ffc:	080160a9 	.word	0x080160a9
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8016000:	f7ff ff86 	bl	8015f10 <dns_create_txid>
 8016004:	4603      	mov	r3, r0
 8016006:	461a      	mov	r2, r3
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	2202      	movs	r2, #2
 8016010:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	2200      	movs	r2, #0
 8016016:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	2201      	movs	r2, #1
 801601c:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	2200      	movs	r2, #0
 8016022:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8016024:	79fb      	ldrb	r3, [r7, #7]
 8016026:	4618      	mov	r0, r3
 8016028:	f7ff fdc2 	bl	8015bb0 <dns_send>
 801602c:	4603      	mov	r3, r0
 801602e:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8016030:	e058      	b.n	80160e4 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	7b1b      	ldrb	r3, [r3, #12]
 8016036:	3b01      	subs	r3, #1
 8016038:	b2da      	uxtb	r2, r3
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	731a      	strb	r2, [r3, #12]
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	7b1b      	ldrb	r3, [r3, #12]
 8016042:	2b00      	cmp	r3, #0
 8016044:	d14b      	bne.n	80160de <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8016046:	68fb      	ldr	r3, [r7, #12]
 8016048:	7b5b      	ldrb	r3, [r3, #13]
 801604a:	3301      	adds	r3, #1
 801604c:	b2da      	uxtb	r2, r3
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	735a      	strb	r2, [r3, #13]
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	7b5b      	ldrb	r3, [r3, #13]
 8016056:	2b04      	cmp	r3, #4
 8016058:	d11b      	bne.n	8016092 <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 801605a:	68f8      	ldr	r0, [r7, #12]
 801605c:	f7ff ff88 	bl	8015f70 <dns_backupserver_available>
 8016060:	4603      	mov	r3, r0
 8016062:	2b00      	cmp	r3, #0
 8016064:	d00c      	beq.n	8016080 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	7adb      	ldrb	r3, [r3, #11]
 801606a:	3301      	adds	r3, #1
 801606c:	b2da      	uxtb	r2, r3
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	2201      	movs	r2, #1
 8016076:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	2200      	movs	r2, #0
 801607c:	735a      	strb	r2, [r3, #13]
 801607e:	e00c      	b.n	801609a <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8016080:	79fb      	ldrb	r3, [r7, #7]
 8016082:	2100      	movs	r1, #0
 8016084:	4618      	mov	r0, r3
 8016086:	f7ff fe83 	bl	8015d90 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	2200      	movs	r2, #0
 801608e:	729a      	strb	r2, [r3, #10]
            break;
 8016090:	e028      	b.n	80160e4 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	7b5a      	ldrb	r2, [r3, #13]
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 801609a:	79fb      	ldrb	r3, [r7, #7]
 801609c:	4618      	mov	r0, r3
 801609e:	f7ff fd87 	bl	8015bb0 <dns_send>
 80160a2:	4603      	mov	r3, r0
 80160a4:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 80160a6:	e01a      	b.n	80160de <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d008      	beq.n	80160c2 <dns_check_entry+0x10e>
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	1e5a      	subs	r2, r3, #1
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	601a      	str	r2, [r3, #0]
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d10f      	bne.n	80160e2 <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	2200      	movs	r2, #0
 80160c6:	729a      	strb	r2, [r3, #10]
      }
      break;
 80160c8:	e00b      	b.n	80160e2 <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 80160ca:	4b09      	ldr	r3, [pc, #36]	; (80160f0 <dns_check_entry+0x13c>)
 80160cc:	f240 425b 	movw	r2, #1115	; 0x45b
 80160d0:	490a      	ldr	r1, [pc, #40]	; (80160fc <dns_check_entry+0x148>)
 80160d2:	4809      	ldr	r0, [pc, #36]	; (80160f8 <dns_check_entry+0x144>)
 80160d4:	f00d ff88 	bl	8023fe8 <iprintf>
      break;
 80160d8:	e004      	b.n	80160e4 <dns_check_entry+0x130>
      break;
 80160da:	bf00      	nop
 80160dc:	e002      	b.n	80160e4 <dns_check_entry+0x130>
      break;
 80160de:	bf00      	nop
 80160e0:	e000      	b.n	80160e4 <dns_check_entry+0x130>
      break;
 80160e2:	bf00      	nop
  }
}
 80160e4:	bf00      	nop
 80160e6:	3710      	adds	r7, #16
 80160e8:	46bd      	mov	sp, r7
 80160ea:	bd80      	pop	{r7, pc}
 80160ec:	200084ac 	.word	0x200084ac
 80160f0:	08025b04 	.word	0x08025b04
 80160f4:	08025b90 	.word	0x08025b90
 80160f8:	08025b68 	.word	0x08025b68
 80160fc:	08025bac 	.word	0x08025bac

08016100 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8016100:	b580      	push	{r7, lr}
 8016102:	b082      	sub	sp, #8
 8016104:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8016106:	2300      	movs	r3, #0
 8016108:	71fb      	strb	r3, [r7, #7]
 801610a:	e006      	b.n	801611a <dns_check_entries+0x1a>
    dns_check_entry(i);
 801610c:	79fb      	ldrb	r3, [r7, #7]
 801610e:	4618      	mov	r0, r3
 8016110:	f7ff ff50 	bl	8015fb4 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8016114:	79fb      	ldrb	r3, [r7, #7]
 8016116:	3301      	adds	r3, #1
 8016118:	71fb      	strb	r3, [r7, #7]
 801611a:	79fb      	ldrb	r3, [r7, #7]
 801611c:	2b03      	cmp	r3, #3
 801611e:	d9f5      	bls.n	801610c <dns_check_entries+0xc>
  }
}
 8016120:	bf00      	nop
 8016122:	3708      	adds	r7, #8
 8016124:	46bd      	mov	sp, r7
 8016126:	bd80      	pop	{r7, pc}

08016128 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016128:	b580      	push	{r7, lr}
 801612a:	b082      	sub	sp, #8
 801612c:	af00      	add	r7, sp, #0
 801612e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016130:	4915      	ldr	r1, [pc, #84]	; (8016188 <etharp_free_entry+0x60>)
 8016132:	687a      	ldr	r2, [r7, #4]
 8016134:	4613      	mov	r3, r2
 8016136:	005b      	lsls	r3, r3, #1
 8016138:	4413      	add	r3, r2
 801613a:	00db      	lsls	r3, r3, #3
 801613c:	440b      	add	r3, r1
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	2b00      	cmp	r3, #0
 8016142:	d013      	beq.n	801616c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016144:	4910      	ldr	r1, [pc, #64]	; (8016188 <etharp_free_entry+0x60>)
 8016146:	687a      	ldr	r2, [r7, #4]
 8016148:	4613      	mov	r3, r2
 801614a:	005b      	lsls	r3, r3, #1
 801614c:	4413      	add	r3, r2
 801614e:	00db      	lsls	r3, r3, #3
 8016150:	440b      	add	r3, r1
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	4618      	mov	r0, r3
 8016156:	f003 fe37 	bl	8019dc8 <pbuf_free>
    arp_table[i].q = NULL;
 801615a:	490b      	ldr	r1, [pc, #44]	; (8016188 <etharp_free_entry+0x60>)
 801615c:	687a      	ldr	r2, [r7, #4]
 801615e:	4613      	mov	r3, r2
 8016160:	005b      	lsls	r3, r3, #1
 8016162:	4413      	add	r3, r2
 8016164:	00db      	lsls	r3, r3, #3
 8016166:	440b      	add	r3, r1
 8016168:	2200      	movs	r2, #0
 801616a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801616c:	4906      	ldr	r1, [pc, #24]	; (8016188 <etharp_free_entry+0x60>)
 801616e:	687a      	ldr	r2, [r7, #4]
 8016170:	4613      	mov	r3, r2
 8016172:	005b      	lsls	r3, r3, #1
 8016174:	4413      	add	r3, r2
 8016176:	00db      	lsls	r3, r3, #3
 8016178:	440b      	add	r3, r1
 801617a:	3314      	adds	r3, #20
 801617c:	2200      	movs	r2, #0
 801617e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016180:	bf00      	nop
 8016182:	3708      	adds	r7, #8
 8016184:	46bd      	mov	sp, r7
 8016186:	bd80      	pop	{r7, pc}
 8016188:	20008924 	.word	0x20008924

0801618c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801618c:	b580      	push	{r7, lr}
 801618e:	b082      	sub	sp, #8
 8016190:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016192:	2300      	movs	r3, #0
 8016194:	607b      	str	r3, [r7, #4]
 8016196:	e096      	b.n	80162c6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016198:	494f      	ldr	r1, [pc, #316]	; (80162d8 <etharp_tmr+0x14c>)
 801619a:	687a      	ldr	r2, [r7, #4]
 801619c:	4613      	mov	r3, r2
 801619e:	005b      	lsls	r3, r3, #1
 80161a0:	4413      	add	r3, r2
 80161a2:	00db      	lsls	r3, r3, #3
 80161a4:	440b      	add	r3, r1
 80161a6:	3314      	adds	r3, #20
 80161a8:	781b      	ldrb	r3, [r3, #0]
 80161aa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80161ac:	78fb      	ldrb	r3, [r7, #3]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	f000 8086 	beq.w	80162c0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80161b4:	4948      	ldr	r1, [pc, #288]	; (80162d8 <etharp_tmr+0x14c>)
 80161b6:	687a      	ldr	r2, [r7, #4]
 80161b8:	4613      	mov	r3, r2
 80161ba:	005b      	lsls	r3, r3, #1
 80161bc:	4413      	add	r3, r2
 80161be:	00db      	lsls	r3, r3, #3
 80161c0:	440b      	add	r3, r1
 80161c2:	3312      	adds	r3, #18
 80161c4:	881b      	ldrh	r3, [r3, #0]
 80161c6:	3301      	adds	r3, #1
 80161c8:	b298      	uxth	r0, r3
 80161ca:	4943      	ldr	r1, [pc, #268]	; (80162d8 <etharp_tmr+0x14c>)
 80161cc:	687a      	ldr	r2, [r7, #4]
 80161ce:	4613      	mov	r3, r2
 80161d0:	005b      	lsls	r3, r3, #1
 80161d2:	4413      	add	r3, r2
 80161d4:	00db      	lsls	r3, r3, #3
 80161d6:	440b      	add	r3, r1
 80161d8:	3312      	adds	r3, #18
 80161da:	4602      	mov	r2, r0
 80161dc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80161de:	493e      	ldr	r1, [pc, #248]	; (80162d8 <etharp_tmr+0x14c>)
 80161e0:	687a      	ldr	r2, [r7, #4]
 80161e2:	4613      	mov	r3, r2
 80161e4:	005b      	lsls	r3, r3, #1
 80161e6:	4413      	add	r3, r2
 80161e8:	00db      	lsls	r3, r3, #3
 80161ea:	440b      	add	r3, r1
 80161ec:	3312      	adds	r3, #18
 80161ee:	881b      	ldrh	r3, [r3, #0]
 80161f0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80161f4:	d215      	bcs.n	8016222 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80161f6:	4938      	ldr	r1, [pc, #224]	; (80162d8 <etharp_tmr+0x14c>)
 80161f8:	687a      	ldr	r2, [r7, #4]
 80161fa:	4613      	mov	r3, r2
 80161fc:	005b      	lsls	r3, r3, #1
 80161fe:	4413      	add	r3, r2
 8016200:	00db      	lsls	r3, r3, #3
 8016202:	440b      	add	r3, r1
 8016204:	3314      	adds	r3, #20
 8016206:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016208:	2b01      	cmp	r3, #1
 801620a:	d10e      	bne.n	801622a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801620c:	4932      	ldr	r1, [pc, #200]	; (80162d8 <etharp_tmr+0x14c>)
 801620e:	687a      	ldr	r2, [r7, #4]
 8016210:	4613      	mov	r3, r2
 8016212:	005b      	lsls	r3, r3, #1
 8016214:	4413      	add	r3, r2
 8016216:	00db      	lsls	r3, r3, #3
 8016218:	440b      	add	r3, r1
 801621a:	3312      	adds	r3, #18
 801621c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801621e:	2b04      	cmp	r3, #4
 8016220:	d903      	bls.n	801622a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016222:	6878      	ldr	r0, [r7, #4]
 8016224:	f7ff ff80 	bl	8016128 <etharp_free_entry>
 8016228:	e04a      	b.n	80162c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801622a:	492b      	ldr	r1, [pc, #172]	; (80162d8 <etharp_tmr+0x14c>)
 801622c:	687a      	ldr	r2, [r7, #4]
 801622e:	4613      	mov	r3, r2
 8016230:	005b      	lsls	r3, r3, #1
 8016232:	4413      	add	r3, r2
 8016234:	00db      	lsls	r3, r3, #3
 8016236:	440b      	add	r3, r1
 8016238:	3314      	adds	r3, #20
 801623a:	781b      	ldrb	r3, [r3, #0]
 801623c:	2b03      	cmp	r3, #3
 801623e:	d10a      	bne.n	8016256 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016240:	4925      	ldr	r1, [pc, #148]	; (80162d8 <etharp_tmr+0x14c>)
 8016242:	687a      	ldr	r2, [r7, #4]
 8016244:	4613      	mov	r3, r2
 8016246:	005b      	lsls	r3, r3, #1
 8016248:	4413      	add	r3, r2
 801624a:	00db      	lsls	r3, r3, #3
 801624c:	440b      	add	r3, r1
 801624e:	3314      	adds	r3, #20
 8016250:	2204      	movs	r2, #4
 8016252:	701a      	strb	r2, [r3, #0]
 8016254:	e034      	b.n	80162c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016256:	4920      	ldr	r1, [pc, #128]	; (80162d8 <etharp_tmr+0x14c>)
 8016258:	687a      	ldr	r2, [r7, #4]
 801625a:	4613      	mov	r3, r2
 801625c:	005b      	lsls	r3, r3, #1
 801625e:	4413      	add	r3, r2
 8016260:	00db      	lsls	r3, r3, #3
 8016262:	440b      	add	r3, r1
 8016264:	3314      	adds	r3, #20
 8016266:	781b      	ldrb	r3, [r3, #0]
 8016268:	2b04      	cmp	r3, #4
 801626a:	d10a      	bne.n	8016282 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801626c:	491a      	ldr	r1, [pc, #104]	; (80162d8 <etharp_tmr+0x14c>)
 801626e:	687a      	ldr	r2, [r7, #4]
 8016270:	4613      	mov	r3, r2
 8016272:	005b      	lsls	r3, r3, #1
 8016274:	4413      	add	r3, r2
 8016276:	00db      	lsls	r3, r3, #3
 8016278:	440b      	add	r3, r1
 801627a:	3314      	adds	r3, #20
 801627c:	2202      	movs	r2, #2
 801627e:	701a      	strb	r2, [r3, #0]
 8016280:	e01e      	b.n	80162c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016282:	4915      	ldr	r1, [pc, #84]	; (80162d8 <etharp_tmr+0x14c>)
 8016284:	687a      	ldr	r2, [r7, #4]
 8016286:	4613      	mov	r3, r2
 8016288:	005b      	lsls	r3, r3, #1
 801628a:	4413      	add	r3, r2
 801628c:	00db      	lsls	r3, r3, #3
 801628e:	440b      	add	r3, r1
 8016290:	3314      	adds	r3, #20
 8016292:	781b      	ldrb	r3, [r3, #0]
 8016294:	2b01      	cmp	r3, #1
 8016296:	d113      	bne.n	80162c0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016298:	490f      	ldr	r1, [pc, #60]	; (80162d8 <etharp_tmr+0x14c>)
 801629a:	687a      	ldr	r2, [r7, #4]
 801629c:	4613      	mov	r3, r2
 801629e:	005b      	lsls	r3, r3, #1
 80162a0:	4413      	add	r3, r2
 80162a2:	00db      	lsls	r3, r3, #3
 80162a4:	440b      	add	r3, r1
 80162a6:	3308      	adds	r3, #8
 80162a8:	6818      	ldr	r0, [r3, #0]
 80162aa:	687a      	ldr	r2, [r7, #4]
 80162ac:	4613      	mov	r3, r2
 80162ae:	005b      	lsls	r3, r3, #1
 80162b0:	4413      	add	r3, r2
 80162b2:	00db      	lsls	r3, r3, #3
 80162b4:	4a08      	ldr	r2, [pc, #32]	; (80162d8 <etharp_tmr+0x14c>)
 80162b6:	4413      	add	r3, r2
 80162b8:	3304      	adds	r3, #4
 80162ba:	4619      	mov	r1, r3
 80162bc:	f000 fe72 	bl	8016fa4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	3301      	adds	r3, #1
 80162c4:	607b      	str	r3, [r7, #4]
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	2b09      	cmp	r3, #9
 80162ca:	f77f af65 	ble.w	8016198 <etharp_tmr+0xc>
      }
    }
  }
}
 80162ce:	bf00      	nop
 80162d0:	3708      	adds	r7, #8
 80162d2:	46bd      	mov	sp, r7
 80162d4:	bd80      	pop	{r7, pc}
 80162d6:	bf00      	nop
 80162d8:	20008924 	.word	0x20008924

080162dc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80162dc:	b580      	push	{r7, lr}
 80162de:	b08a      	sub	sp, #40	; 0x28
 80162e0:	af00      	add	r7, sp, #0
 80162e2:	60f8      	str	r0, [r7, #12]
 80162e4:	460b      	mov	r3, r1
 80162e6:	607a      	str	r2, [r7, #4]
 80162e8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80162ea:	230a      	movs	r3, #10
 80162ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80162ee:	230a      	movs	r3, #10
 80162f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80162f2:	230a      	movs	r3, #10
 80162f4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80162f6:	2300      	movs	r3, #0
 80162f8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80162fa:	230a      	movs	r3, #10
 80162fc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80162fe:	2300      	movs	r3, #0
 8016300:	83bb      	strh	r3, [r7, #28]
 8016302:	2300      	movs	r3, #0
 8016304:	837b      	strh	r3, [r7, #26]
 8016306:	2300      	movs	r3, #0
 8016308:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801630a:	2300      	movs	r3, #0
 801630c:	843b      	strh	r3, [r7, #32]
 801630e:	e0ae      	b.n	801646e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016310:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016314:	49a6      	ldr	r1, [pc, #664]	; (80165b0 <etharp_find_entry+0x2d4>)
 8016316:	4613      	mov	r3, r2
 8016318:	005b      	lsls	r3, r3, #1
 801631a:	4413      	add	r3, r2
 801631c:	00db      	lsls	r3, r3, #3
 801631e:	440b      	add	r3, r1
 8016320:	3314      	adds	r3, #20
 8016322:	781b      	ldrb	r3, [r3, #0]
 8016324:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016326:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801632a:	2b0a      	cmp	r3, #10
 801632c:	d105      	bne.n	801633a <etharp_find_entry+0x5e>
 801632e:	7dfb      	ldrb	r3, [r7, #23]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d102      	bne.n	801633a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016334:	8c3b      	ldrh	r3, [r7, #32]
 8016336:	847b      	strh	r3, [r7, #34]	; 0x22
 8016338:	e095      	b.n	8016466 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801633a:	7dfb      	ldrb	r3, [r7, #23]
 801633c:	2b00      	cmp	r3, #0
 801633e:	f000 8092 	beq.w	8016466 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016342:	7dfb      	ldrb	r3, [r7, #23]
 8016344:	2b01      	cmp	r3, #1
 8016346:	d009      	beq.n	801635c <etharp_find_entry+0x80>
 8016348:	7dfb      	ldrb	r3, [r7, #23]
 801634a:	2b01      	cmp	r3, #1
 801634c:	d806      	bhi.n	801635c <etharp_find_entry+0x80>
 801634e:	4b99      	ldr	r3, [pc, #612]	; (80165b4 <etharp_find_entry+0x2d8>)
 8016350:	f44f 7292 	mov.w	r2, #292	; 0x124
 8016354:	4998      	ldr	r1, [pc, #608]	; (80165b8 <etharp_find_entry+0x2dc>)
 8016356:	4899      	ldr	r0, [pc, #612]	; (80165bc <etharp_find_entry+0x2e0>)
 8016358:	f00d fe46 	bl	8023fe8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	2b00      	cmp	r3, #0
 8016360:	d020      	beq.n	80163a4 <etharp_find_entry+0xc8>
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	6819      	ldr	r1, [r3, #0]
 8016366:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801636a:	4891      	ldr	r0, [pc, #580]	; (80165b0 <etharp_find_entry+0x2d4>)
 801636c:	4613      	mov	r3, r2
 801636e:	005b      	lsls	r3, r3, #1
 8016370:	4413      	add	r3, r2
 8016372:	00db      	lsls	r3, r3, #3
 8016374:	4403      	add	r3, r0
 8016376:	3304      	adds	r3, #4
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	4299      	cmp	r1, r3
 801637c:	d112      	bne.n	80163a4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	2b00      	cmp	r3, #0
 8016382:	d00c      	beq.n	801639e <etharp_find_entry+0xc2>
 8016384:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016388:	4989      	ldr	r1, [pc, #548]	; (80165b0 <etharp_find_entry+0x2d4>)
 801638a:	4613      	mov	r3, r2
 801638c:	005b      	lsls	r3, r3, #1
 801638e:	4413      	add	r3, r2
 8016390:	00db      	lsls	r3, r3, #3
 8016392:	440b      	add	r3, r1
 8016394:	3308      	adds	r3, #8
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	687a      	ldr	r2, [r7, #4]
 801639a:	429a      	cmp	r2, r3
 801639c:	d102      	bne.n	80163a4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801639e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80163a2:	e100      	b.n	80165a6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80163a4:	7dfb      	ldrb	r3, [r7, #23]
 80163a6:	2b01      	cmp	r3, #1
 80163a8:	d140      	bne.n	801642c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80163aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163ae:	4980      	ldr	r1, [pc, #512]	; (80165b0 <etharp_find_entry+0x2d4>)
 80163b0:	4613      	mov	r3, r2
 80163b2:	005b      	lsls	r3, r3, #1
 80163b4:	4413      	add	r3, r2
 80163b6:	00db      	lsls	r3, r3, #3
 80163b8:	440b      	add	r3, r1
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d01a      	beq.n	80163f6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80163c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163c4:	497a      	ldr	r1, [pc, #488]	; (80165b0 <etharp_find_entry+0x2d4>)
 80163c6:	4613      	mov	r3, r2
 80163c8:	005b      	lsls	r3, r3, #1
 80163ca:	4413      	add	r3, r2
 80163cc:	00db      	lsls	r3, r3, #3
 80163ce:	440b      	add	r3, r1
 80163d0:	3312      	adds	r3, #18
 80163d2:	881b      	ldrh	r3, [r3, #0]
 80163d4:	8bba      	ldrh	r2, [r7, #28]
 80163d6:	429a      	cmp	r2, r3
 80163d8:	d845      	bhi.n	8016466 <etharp_find_entry+0x18a>
            old_queue = i;
 80163da:	8c3b      	ldrh	r3, [r7, #32]
 80163dc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80163de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163e2:	4973      	ldr	r1, [pc, #460]	; (80165b0 <etharp_find_entry+0x2d4>)
 80163e4:	4613      	mov	r3, r2
 80163e6:	005b      	lsls	r3, r3, #1
 80163e8:	4413      	add	r3, r2
 80163ea:	00db      	lsls	r3, r3, #3
 80163ec:	440b      	add	r3, r1
 80163ee:	3312      	adds	r3, #18
 80163f0:	881b      	ldrh	r3, [r3, #0]
 80163f2:	83bb      	strh	r3, [r7, #28]
 80163f4:	e037      	b.n	8016466 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80163f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163fa:	496d      	ldr	r1, [pc, #436]	; (80165b0 <etharp_find_entry+0x2d4>)
 80163fc:	4613      	mov	r3, r2
 80163fe:	005b      	lsls	r3, r3, #1
 8016400:	4413      	add	r3, r2
 8016402:	00db      	lsls	r3, r3, #3
 8016404:	440b      	add	r3, r1
 8016406:	3312      	adds	r3, #18
 8016408:	881b      	ldrh	r3, [r3, #0]
 801640a:	8b7a      	ldrh	r2, [r7, #26]
 801640c:	429a      	cmp	r2, r3
 801640e:	d82a      	bhi.n	8016466 <etharp_find_entry+0x18a>
            old_pending = i;
 8016410:	8c3b      	ldrh	r3, [r7, #32]
 8016412:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016414:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016418:	4965      	ldr	r1, [pc, #404]	; (80165b0 <etharp_find_entry+0x2d4>)
 801641a:	4613      	mov	r3, r2
 801641c:	005b      	lsls	r3, r3, #1
 801641e:	4413      	add	r3, r2
 8016420:	00db      	lsls	r3, r3, #3
 8016422:	440b      	add	r3, r1
 8016424:	3312      	adds	r3, #18
 8016426:	881b      	ldrh	r3, [r3, #0]
 8016428:	837b      	strh	r3, [r7, #26]
 801642a:	e01c      	b.n	8016466 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801642c:	7dfb      	ldrb	r3, [r7, #23]
 801642e:	2b01      	cmp	r3, #1
 8016430:	d919      	bls.n	8016466 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016432:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016436:	495e      	ldr	r1, [pc, #376]	; (80165b0 <etharp_find_entry+0x2d4>)
 8016438:	4613      	mov	r3, r2
 801643a:	005b      	lsls	r3, r3, #1
 801643c:	4413      	add	r3, r2
 801643e:	00db      	lsls	r3, r3, #3
 8016440:	440b      	add	r3, r1
 8016442:	3312      	adds	r3, #18
 8016444:	881b      	ldrh	r3, [r3, #0]
 8016446:	8b3a      	ldrh	r2, [r7, #24]
 8016448:	429a      	cmp	r2, r3
 801644a:	d80c      	bhi.n	8016466 <etharp_find_entry+0x18a>
            old_stable = i;
 801644c:	8c3b      	ldrh	r3, [r7, #32]
 801644e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016450:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016454:	4956      	ldr	r1, [pc, #344]	; (80165b0 <etharp_find_entry+0x2d4>)
 8016456:	4613      	mov	r3, r2
 8016458:	005b      	lsls	r3, r3, #1
 801645a:	4413      	add	r3, r2
 801645c:	00db      	lsls	r3, r3, #3
 801645e:	440b      	add	r3, r1
 8016460:	3312      	adds	r3, #18
 8016462:	881b      	ldrh	r3, [r3, #0]
 8016464:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016466:	8c3b      	ldrh	r3, [r7, #32]
 8016468:	3301      	adds	r3, #1
 801646a:	b29b      	uxth	r3, r3
 801646c:	843b      	strh	r3, [r7, #32]
 801646e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016472:	2b09      	cmp	r3, #9
 8016474:	f77f af4c 	ble.w	8016310 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016478:	7afb      	ldrb	r3, [r7, #11]
 801647a:	f003 0302 	and.w	r3, r3, #2
 801647e:	2b00      	cmp	r3, #0
 8016480:	d108      	bne.n	8016494 <etharp_find_entry+0x1b8>
 8016482:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016486:	2b0a      	cmp	r3, #10
 8016488:	d107      	bne.n	801649a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801648a:	7afb      	ldrb	r3, [r7, #11]
 801648c:	f003 0301 	and.w	r3, r3, #1
 8016490:	2b00      	cmp	r3, #0
 8016492:	d102      	bne.n	801649a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016494:	f04f 33ff 	mov.w	r3, #4294967295
 8016498:	e085      	b.n	80165a6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801649a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801649e:	2b09      	cmp	r3, #9
 80164a0:	dc02      	bgt.n	80164a8 <etharp_find_entry+0x1cc>
    i = empty;
 80164a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80164a4:	843b      	strh	r3, [r7, #32]
 80164a6:	e039      	b.n	801651c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80164a8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80164ac:	2b09      	cmp	r3, #9
 80164ae:	dc14      	bgt.n	80164da <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80164b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80164b2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80164b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80164b8:	493d      	ldr	r1, [pc, #244]	; (80165b0 <etharp_find_entry+0x2d4>)
 80164ba:	4613      	mov	r3, r2
 80164bc:	005b      	lsls	r3, r3, #1
 80164be:	4413      	add	r3, r2
 80164c0:	00db      	lsls	r3, r3, #3
 80164c2:	440b      	add	r3, r1
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d018      	beq.n	80164fc <etharp_find_entry+0x220>
 80164ca:	4b3a      	ldr	r3, [pc, #232]	; (80165b4 <etharp_find_entry+0x2d8>)
 80164cc:	f240 126d 	movw	r2, #365	; 0x16d
 80164d0:	493b      	ldr	r1, [pc, #236]	; (80165c0 <etharp_find_entry+0x2e4>)
 80164d2:	483a      	ldr	r0, [pc, #232]	; (80165bc <etharp_find_entry+0x2e0>)
 80164d4:	f00d fd88 	bl	8023fe8 <iprintf>
 80164d8:	e010      	b.n	80164fc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80164da:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80164de:	2b09      	cmp	r3, #9
 80164e0:	dc02      	bgt.n	80164e8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80164e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80164e4:	843b      	strh	r3, [r7, #32]
 80164e6:	e009      	b.n	80164fc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80164e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80164ec:	2b09      	cmp	r3, #9
 80164ee:	dc02      	bgt.n	80164f6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80164f0:	8bfb      	ldrh	r3, [r7, #30]
 80164f2:	843b      	strh	r3, [r7, #32]
 80164f4:	e002      	b.n	80164fc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80164f6:	f04f 33ff 	mov.w	r3, #4294967295
 80164fa:	e054      	b.n	80165a6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80164fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016500:	2b09      	cmp	r3, #9
 8016502:	dd06      	ble.n	8016512 <etharp_find_entry+0x236>
 8016504:	4b2b      	ldr	r3, [pc, #172]	; (80165b4 <etharp_find_entry+0x2d8>)
 8016506:	f240 127f 	movw	r2, #383	; 0x17f
 801650a:	492e      	ldr	r1, [pc, #184]	; (80165c4 <etharp_find_entry+0x2e8>)
 801650c:	482b      	ldr	r0, [pc, #172]	; (80165bc <etharp_find_entry+0x2e0>)
 801650e:	f00d fd6b 	bl	8023fe8 <iprintf>
    etharp_free_entry(i);
 8016512:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016516:	4618      	mov	r0, r3
 8016518:	f7ff fe06 	bl	8016128 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801651c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016520:	2b09      	cmp	r3, #9
 8016522:	dd06      	ble.n	8016532 <etharp_find_entry+0x256>
 8016524:	4b23      	ldr	r3, [pc, #140]	; (80165b4 <etharp_find_entry+0x2d8>)
 8016526:	f240 1283 	movw	r2, #387	; 0x183
 801652a:	4926      	ldr	r1, [pc, #152]	; (80165c4 <etharp_find_entry+0x2e8>)
 801652c:	4823      	ldr	r0, [pc, #140]	; (80165bc <etharp_find_entry+0x2e0>)
 801652e:	f00d fd5b 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016532:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016536:	491e      	ldr	r1, [pc, #120]	; (80165b0 <etharp_find_entry+0x2d4>)
 8016538:	4613      	mov	r3, r2
 801653a:	005b      	lsls	r3, r3, #1
 801653c:	4413      	add	r3, r2
 801653e:	00db      	lsls	r3, r3, #3
 8016540:	440b      	add	r3, r1
 8016542:	3314      	adds	r3, #20
 8016544:	781b      	ldrb	r3, [r3, #0]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d006      	beq.n	8016558 <etharp_find_entry+0x27c>
 801654a:	4b1a      	ldr	r3, [pc, #104]	; (80165b4 <etharp_find_entry+0x2d8>)
 801654c:	f240 1285 	movw	r2, #389	; 0x185
 8016550:	491d      	ldr	r1, [pc, #116]	; (80165c8 <etharp_find_entry+0x2ec>)
 8016552:	481a      	ldr	r0, [pc, #104]	; (80165bc <etharp_find_entry+0x2e0>)
 8016554:	f00d fd48 	bl	8023fe8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d00b      	beq.n	8016576 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801655e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	6819      	ldr	r1, [r3, #0]
 8016566:	4812      	ldr	r0, [pc, #72]	; (80165b0 <etharp_find_entry+0x2d4>)
 8016568:	4613      	mov	r3, r2
 801656a:	005b      	lsls	r3, r3, #1
 801656c:	4413      	add	r3, r2
 801656e:	00db      	lsls	r3, r3, #3
 8016570:	4403      	add	r3, r0
 8016572:	3304      	adds	r3, #4
 8016574:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016576:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801657a:	490d      	ldr	r1, [pc, #52]	; (80165b0 <etharp_find_entry+0x2d4>)
 801657c:	4613      	mov	r3, r2
 801657e:	005b      	lsls	r3, r3, #1
 8016580:	4413      	add	r3, r2
 8016582:	00db      	lsls	r3, r3, #3
 8016584:	440b      	add	r3, r1
 8016586:	3312      	adds	r3, #18
 8016588:	2200      	movs	r2, #0
 801658a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801658c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016590:	4907      	ldr	r1, [pc, #28]	; (80165b0 <etharp_find_entry+0x2d4>)
 8016592:	4613      	mov	r3, r2
 8016594:	005b      	lsls	r3, r3, #1
 8016596:	4413      	add	r3, r2
 8016598:	00db      	lsls	r3, r3, #3
 801659a:	440b      	add	r3, r1
 801659c:	3308      	adds	r3, #8
 801659e:	687a      	ldr	r2, [r7, #4]
 80165a0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80165a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80165a6:	4618      	mov	r0, r3
 80165a8:	3728      	adds	r7, #40	; 0x28
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}
 80165ae:	bf00      	nop
 80165b0:	20008924 	.word	0x20008924
 80165b4:	08025bcc 	.word	0x08025bcc
 80165b8:	08025c20 	.word	0x08025c20
 80165bc:	08025c60 	.word	0x08025c60
 80165c0:	08025c88 	.word	0x08025c88
 80165c4:	08025ca0 	.word	0x08025ca0
 80165c8:	08025cb4 	.word	0x08025cb4

080165cc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80165cc:	b580      	push	{r7, lr}
 80165ce:	b088      	sub	sp, #32
 80165d0:	af02      	add	r7, sp, #8
 80165d2:	60f8      	str	r0, [r7, #12]
 80165d4:	60b9      	str	r1, [r7, #8]
 80165d6:	607a      	str	r2, [r7, #4]
 80165d8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80165e0:	2b06      	cmp	r3, #6
 80165e2:	d006      	beq.n	80165f2 <etharp_update_arp_entry+0x26>
 80165e4:	4b48      	ldr	r3, [pc, #288]	; (8016708 <etharp_update_arp_entry+0x13c>)
 80165e6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80165ea:	4948      	ldr	r1, [pc, #288]	; (801670c <etharp_update_arp_entry+0x140>)
 80165ec:	4848      	ldr	r0, [pc, #288]	; (8016710 <etharp_update_arp_entry+0x144>)
 80165ee:	f00d fcfb 	bl	8023fe8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80165f2:	68bb      	ldr	r3, [r7, #8]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d012      	beq.n	801661e <etharp_update_arp_entry+0x52>
 80165f8:	68bb      	ldr	r3, [r7, #8]
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d00e      	beq.n	801661e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016600:	68bb      	ldr	r3, [r7, #8]
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	68f9      	ldr	r1, [r7, #12]
 8016606:	4618      	mov	r0, r3
 8016608:	f001 fa0e 	bl	8017a28 <ip4_addr_isbroadcast_u32>
 801660c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801660e:	2b00      	cmp	r3, #0
 8016610:	d105      	bne.n	801661e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016612:	68bb      	ldr	r3, [r7, #8]
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801661a:	2be0      	cmp	r3, #224	; 0xe0
 801661c:	d102      	bne.n	8016624 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801661e:	f06f 030f 	mvn.w	r3, #15
 8016622:	e06c      	b.n	80166fe <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016624:	78fb      	ldrb	r3, [r7, #3]
 8016626:	68fa      	ldr	r2, [r7, #12]
 8016628:	4619      	mov	r1, r3
 801662a:	68b8      	ldr	r0, [r7, #8]
 801662c:	f7ff fe56 	bl	80162dc <etharp_find_entry>
 8016630:	4603      	mov	r3, r0
 8016632:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016634:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016638:	2b00      	cmp	r3, #0
 801663a:	da02      	bge.n	8016642 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801663c:	8afb      	ldrh	r3, [r7, #22]
 801663e:	b25b      	sxtb	r3, r3
 8016640:	e05d      	b.n	80166fe <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016642:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016646:	4933      	ldr	r1, [pc, #204]	; (8016714 <etharp_update_arp_entry+0x148>)
 8016648:	4613      	mov	r3, r2
 801664a:	005b      	lsls	r3, r3, #1
 801664c:	4413      	add	r3, r2
 801664e:	00db      	lsls	r3, r3, #3
 8016650:	440b      	add	r3, r1
 8016652:	3314      	adds	r3, #20
 8016654:	2202      	movs	r2, #2
 8016656:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016658:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801665c:	492d      	ldr	r1, [pc, #180]	; (8016714 <etharp_update_arp_entry+0x148>)
 801665e:	4613      	mov	r3, r2
 8016660:	005b      	lsls	r3, r3, #1
 8016662:	4413      	add	r3, r2
 8016664:	00db      	lsls	r3, r3, #3
 8016666:	440b      	add	r3, r1
 8016668:	3308      	adds	r3, #8
 801666a:	68fa      	ldr	r2, [r7, #12]
 801666c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801666e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016672:	4613      	mov	r3, r2
 8016674:	005b      	lsls	r3, r3, #1
 8016676:	4413      	add	r3, r2
 8016678:	00db      	lsls	r3, r3, #3
 801667a:	3308      	adds	r3, #8
 801667c:	4a25      	ldr	r2, [pc, #148]	; (8016714 <etharp_update_arp_entry+0x148>)
 801667e:	4413      	add	r3, r2
 8016680:	3304      	adds	r3, #4
 8016682:	2206      	movs	r2, #6
 8016684:	6879      	ldr	r1, [r7, #4]
 8016686:	4618      	mov	r0, r3
 8016688:	f00d fbf3 	bl	8023e72 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801668c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016690:	4920      	ldr	r1, [pc, #128]	; (8016714 <etharp_update_arp_entry+0x148>)
 8016692:	4613      	mov	r3, r2
 8016694:	005b      	lsls	r3, r3, #1
 8016696:	4413      	add	r3, r2
 8016698:	00db      	lsls	r3, r3, #3
 801669a:	440b      	add	r3, r1
 801669c:	3312      	adds	r3, #18
 801669e:	2200      	movs	r2, #0
 80166a0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80166a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80166a6:	491b      	ldr	r1, [pc, #108]	; (8016714 <etharp_update_arp_entry+0x148>)
 80166a8:	4613      	mov	r3, r2
 80166aa:	005b      	lsls	r3, r3, #1
 80166ac:	4413      	add	r3, r2
 80166ae:	00db      	lsls	r3, r3, #3
 80166b0:	440b      	add	r3, r1
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d021      	beq.n	80166fc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80166b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80166bc:	4915      	ldr	r1, [pc, #84]	; (8016714 <etharp_update_arp_entry+0x148>)
 80166be:	4613      	mov	r3, r2
 80166c0:	005b      	lsls	r3, r3, #1
 80166c2:	4413      	add	r3, r2
 80166c4:	00db      	lsls	r3, r3, #3
 80166c6:	440b      	add	r3, r1
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80166cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80166d0:	4910      	ldr	r1, [pc, #64]	; (8016714 <etharp_update_arp_entry+0x148>)
 80166d2:	4613      	mov	r3, r2
 80166d4:	005b      	lsls	r3, r3, #1
 80166d6:	4413      	add	r3, r2
 80166d8:	00db      	lsls	r3, r3, #3
 80166da:	440b      	add	r3, r1
 80166dc:	2200      	movs	r2, #0
 80166de:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80166e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80166ea:	9300      	str	r3, [sp, #0]
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	6939      	ldr	r1, [r7, #16]
 80166f0:	68f8      	ldr	r0, [r7, #12]
 80166f2:	f000 fcf7 	bl	80170e4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80166f6:	6938      	ldr	r0, [r7, #16]
 80166f8:	f003 fb66 	bl	8019dc8 <pbuf_free>
  }
  return ERR_OK;
 80166fc:	2300      	movs	r3, #0
}
 80166fe:	4618      	mov	r0, r3
 8016700:	3718      	adds	r7, #24
 8016702:	46bd      	mov	sp, r7
 8016704:	bd80      	pop	{r7, pc}
 8016706:	bf00      	nop
 8016708:	08025bcc 	.word	0x08025bcc
 801670c:	08025ce0 	.word	0x08025ce0
 8016710:	08025c60 	.word	0x08025c60
 8016714:	20008924 	.word	0x20008924

08016718 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016718:	b580      	push	{r7, lr}
 801671a:	b084      	sub	sp, #16
 801671c:	af00      	add	r7, sp, #0
 801671e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016720:	2300      	movs	r3, #0
 8016722:	60fb      	str	r3, [r7, #12]
 8016724:	e01e      	b.n	8016764 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016726:	4913      	ldr	r1, [pc, #76]	; (8016774 <etharp_cleanup_netif+0x5c>)
 8016728:	68fa      	ldr	r2, [r7, #12]
 801672a:	4613      	mov	r3, r2
 801672c:	005b      	lsls	r3, r3, #1
 801672e:	4413      	add	r3, r2
 8016730:	00db      	lsls	r3, r3, #3
 8016732:	440b      	add	r3, r1
 8016734:	3314      	adds	r3, #20
 8016736:	781b      	ldrb	r3, [r3, #0]
 8016738:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801673a:	7afb      	ldrb	r3, [r7, #11]
 801673c:	2b00      	cmp	r3, #0
 801673e:	d00e      	beq.n	801675e <etharp_cleanup_netif+0x46>
 8016740:	490c      	ldr	r1, [pc, #48]	; (8016774 <etharp_cleanup_netif+0x5c>)
 8016742:	68fa      	ldr	r2, [r7, #12]
 8016744:	4613      	mov	r3, r2
 8016746:	005b      	lsls	r3, r3, #1
 8016748:	4413      	add	r3, r2
 801674a:	00db      	lsls	r3, r3, #3
 801674c:	440b      	add	r3, r1
 801674e:	3308      	adds	r3, #8
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	687a      	ldr	r2, [r7, #4]
 8016754:	429a      	cmp	r2, r3
 8016756:	d102      	bne.n	801675e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016758:	68f8      	ldr	r0, [r7, #12]
 801675a:	f7ff fce5 	bl	8016128 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	3301      	adds	r3, #1
 8016762:	60fb      	str	r3, [r7, #12]
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	2b09      	cmp	r3, #9
 8016768:	dddd      	ble.n	8016726 <etharp_cleanup_netif+0xe>
    }
  }
}
 801676a:	bf00      	nop
 801676c:	3710      	adds	r7, #16
 801676e:	46bd      	mov	sp, r7
 8016770:	bd80      	pop	{r7, pc}
 8016772:	bf00      	nop
 8016774:	20008924 	.word	0x20008924

08016778 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016778:	b5b0      	push	{r4, r5, r7, lr}
 801677a:	b08a      	sub	sp, #40	; 0x28
 801677c:	af04      	add	r7, sp, #16
 801677e:	6078      	str	r0, [r7, #4]
 8016780:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016782:	683b      	ldr	r3, [r7, #0]
 8016784:	2b00      	cmp	r3, #0
 8016786:	d107      	bne.n	8016798 <etharp_input+0x20>
 8016788:	4b3f      	ldr	r3, [pc, #252]	; (8016888 <etharp_input+0x110>)
 801678a:	f240 228a 	movw	r2, #650	; 0x28a
 801678e:	493f      	ldr	r1, [pc, #252]	; (801688c <etharp_input+0x114>)
 8016790:	483f      	ldr	r0, [pc, #252]	; (8016890 <etharp_input+0x118>)
 8016792:	f00d fc29 	bl	8023fe8 <iprintf>
 8016796:	e074      	b.n	8016882 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	685b      	ldr	r3, [r3, #4]
 801679c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801679e:	693b      	ldr	r3, [r7, #16]
 80167a0:	881b      	ldrh	r3, [r3, #0]
 80167a2:	b29b      	uxth	r3, r3
 80167a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80167a8:	d10c      	bne.n	80167c4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80167aa:	693b      	ldr	r3, [r7, #16]
 80167ac:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80167ae:	2b06      	cmp	r3, #6
 80167b0:	d108      	bne.n	80167c4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80167b2:	693b      	ldr	r3, [r7, #16]
 80167b4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80167b6:	2b04      	cmp	r3, #4
 80167b8:	d104      	bne.n	80167c4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80167ba:	693b      	ldr	r3, [r7, #16]
 80167bc:	885b      	ldrh	r3, [r3, #2]
 80167be:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80167c0:	2b08      	cmp	r3, #8
 80167c2:	d003      	beq.n	80167cc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80167c4:	6878      	ldr	r0, [r7, #4]
 80167c6:	f003 faff 	bl	8019dc8 <pbuf_free>
    return;
 80167ca:	e05a      	b.n	8016882 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80167cc:	693b      	ldr	r3, [r7, #16]
 80167ce:	330e      	adds	r3, #14
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80167d4:	693b      	ldr	r3, [r7, #16]
 80167d6:	3318      	adds	r3, #24
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80167dc:	683b      	ldr	r3, [r7, #0]
 80167de:	3304      	adds	r3, #4
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d102      	bne.n	80167ec <etharp_input+0x74>
    for_us = 0;
 80167e6:	2300      	movs	r3, #0
 80167e8:	75fb      	strb	r3, [r7, #23]
 80167ea:	e009      	b.n	8016800 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80167ec:	68ba      	ldr	r2, [r7, #8]
 80167ee:	683b      	ldr	r3, [r7, #0]
 80167f0:	3304      	adds	r3, #4
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	429a      	cmp	r2, r3
 80167f6:	bf0c      	ite	eq
 80167f8:	2301      	moveq	r3, #1
 80167fa:	2300      	movne	r3, #0
 80167fc:	b2db      	uxtb	r3, r3
 80167fe:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016800:	693b      	ldr	r3, [r7, #16]
 8016802:	f103 0208 	add.w	r2, r3, #8
 8016806:	7dfb      	ldrb	r3, [r7, #23]
 8016808:	2b00      	cmp	r3, #0
 801680a:	d001      	beq.n	8016810 <etharp_input+0x98>
 801680c:	2301      	movs	r3, #1
 801680e:	e000      	b.n	8016812 <etharp_input+0x9a>
 8016810:	2302      	movs	r3, #2
 8016812:	f107 010c 	add.w	r1, r7, #12
 8016816:	6838      	ldr	r0, [r7, #0]
 8016818:	f7ff fed8 	bl	80165cc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801681c:	693b      	ldr	r3, [r7, #16]
 801681e:	88db      	ldrh	r3, [r3, #6]
 8016820:	b29b      	uxth	r3, r3
 8016822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016826:	d003      	beq.n	8016830 <etharp_input+0xb8>
 8016828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801682c:	d01e      	beq.n	801686c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801682e:	e025      	b.n	801687c <etharp_input+0x104>
      if (for_us) {
 8016830:	7dfb      	ldrb	r3, [r7, #23]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d021      	beq.n	801687a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016836:	683b      	ldr	r3, [r7, #0]
 8016838:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801683c:	693b      	ldr	r3, [r7, #16]
 801683e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016842:	683b      	ldr	r3, [r7, #0]
 8016844:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8016848:	683b      	ldr	r3, [r7, #0]
 801684a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801684c:	693a      	ldr	r2, [r7, #16]
 801684e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016850:	2102      	movs	r1, #2
 8016852:	9103      	str	r1, [sp, #12]
 8016854:	f107 010c 	add.w	r1, r7, #12
 8016858:	9102      	str	r1, [sp, #8]
 801685a:	9201      	str	r2, [sp, #4]
 801685c:	9300      	str	r3, [sp, #0]
 801685e:	462b      	mov	r3, r5
 8016860:	4622      	mov	r2, r4
 8016862:	4601      	mov	r1, r0
 8016864:	6838      	ldr	r0, [r7, #0]
 8016866:	f000 faef 	bl	8016e48 <etharp_raw>
      break;
 801686a:	e006      	b.n	801687a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801686c:	f107 030c 	add.w	r3, r7, #12
 8016870:	4619      	mov	r1, r3
 8016872:	6838      	ldr	r0, [r7, #0]
 8016874:	f7fd fee0 	bl	8014638 <dhcp_arp_reply>
      break;
 8016878:	e000      	b.n	801687c <etharp_input+0x104>
      break;
 801687a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801687c:	6878      	ldr	r0, [r7, #4]
 801687e:	f003 faa3 	bl	8019dc8 <pbuf_free>
}
 8016882:	3718      	adds	r7, #24
 8016884:	46bd      	mov	sp, r7
 8016886:	bdb0      	pop	{r4, r5, r7, pc}
 8016888:	08025bcc 	.word	0x08025bcc
 801688c:	08025d38 	.word	0x08025d38
 8016890:	08025c60 	.word	0x08025c60

08016894 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b086      	sub	sp, #24
 8016898:	af02      	add	r7, sp, #8
 801689a:	60f8      	str	r0, [r7, #12]
 801689c:	60b9      	str	r1, [r7, #8]
 801689e:	4613      	mov	r3, r2
 80168a0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80168a2:	79fa      	ldrb	r2, [r7, #7]
 80168a4:	4944      	ldr	r1, [pc, #272]	; (80169b8 <etharp_output_to_arp_index+0x124>)
 80168a6:	4613      	mov	r3, r2
 80168a8:	005b      	lsls	r3, r3, #1
 80168aa:	4413      	add	r3, r2
 80168ac:	00db      	lsls	r3, r3, #3
 80168ae:	440b      	add	r3, r1
 80168b0:	3314      	adds	r3, #20
 80168b2:	781b      	ldrb	r3, [r3, #0]
 80168b4:	2b01      	cmp	r3, #1
 80168b6:	d806      	bhi.n	80168c6 <etharp_output_to_arp_index+0x32>
 80168b8:	4b40      	ldr	r3, [pc, #256]	; (80169bc <etharp_output_to_arp_index+0x128>)
 80168ba:	f240 22ef 	movw	r2, #751	; 0x2ef
 80168be:	4940      	ldr	r1, [pc, #256]	; (80169c0 <etharp_output_to_arp_index+0x12c>)
 80168c0:	4840      	ldr	r0, [pc, #256]	; (80169c4 <etharp_output_to_arp_index+0x130>)
 80168c2:	f00d fb91 	bl	8023fe8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80168c6:	79fa      	ldrb	r2, [r7, #7]
 80168c8:	493b      	ldr	r1, [pc, #236]	; (80169b8 <etharp_output_to_arp_index+0x124>)
 80168ca:	4613      	mov	r3, r2
 80168cc:	005b      	lsls	r3, r3, #1
 80168ce:	4413      	add	r3, r2
 80168d0:	00db      	lsls	r3, r3, #3
 80168d2:	440b      	add	r3, r1
 80168d4:	3314      	adds	r3, #20
 80168d6:	781b      	ldrb	r3, [r3, #0]
 80168d8:	2b02      	cmp	r3, #2
 80168da:	d153      	bne.n	8016984 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80168dc:	79fa      	ldrb	r2, [r7, #7]
 80168de:	4936      	ldr	r1, [pc, #216]	; (80169b8 <etharp_output_to_arp_index+0x124>)
 80168e0:	4613      	mov	r3, r2
 80168e2:	005b      	lsls	r3, r3, #1
 80168e4:	4413      	add	r3, r2
 80168e6:	00db      	lsls	r3, r3, #3
 80168e8:	440b      	add	r3, r1
 80168ea:	3312      	adds	r3, #18
 80168ec:	881b      	ldrh	r3, [r3, #0]
 80168ee:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80168f2:	d919      	bls.n	8016928 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80168f4:	79fa      	ldrb	r2, [r7, #7]
 80168f6:	4613      	mov	r3, r2
 80168f8:	005b      	lsls	r3, r3, #1
 80168fa:	4413      	add	r3, r2
 80168fc:	00db      	lsls	r3, r3, #3
 80168fe:	4a2e      	ldr	r2, [pc, #184]	; (80169b8 <etharp_output_to_arp_index+0x124>)
 8016900:	4413      	add	r3, r2
 8016902:	3304      	adds	r3, #4
 8016904:	4619      	mov	r1, r3
 8016906:	68f8      	ldr	r0, [r7, #12]
 8016908:	f000 fb4c 	bl	8016fa4 <etharp_request>
 801690c:	4603      	mov	r3, r0
 801690e:	2b00      	cmp	r3, #0
 8016910:	d138      	bne.n	8016984 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016912:	79fa      	ldrb	r2, [r7, #7]
 8016914:	4928      	ldr	r1, [pc, #160]	; (80169b8 <etharp_output_to_arp_index+0x124>)
 8016916:	4613      	mov	r3, r2
 8016918:	005b      	lsls	r3, r3, #1
 801691a:	4413      	add	r3, r2
 801691c:	00db      	lsls	r3, r3, #3
 801691e:	440b      	add	r3, r1
 8016920:	3314      	adds	r3, #20
 8016922:	2203      	movs	r2, #3
 8016924:	701a      	strb	r2, [r3, #0]
 8016926:	e02d      	b.n	8016984 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016928:	79fa      	ldrb	r2, [r7, #7]
 801692a:	4923      	ldr	r1, [pc, #140]	; (80169b8 <etharp_output_to_arp_index+0x124>)
 801692c:	4613      	mov	r3, r2
 801692e:	005b      	lsls	r3, r3, #1
 8016930:	4413      	add	r3, r2
 8016932:	00db      	lsls	r3, r3, #3
 8016934:	440b      	add	r3, r1
 8016936:	3312      	adds	r3, #18
 8016938:	881b      	ldrh	r3, [r3, #0]
 801693a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801693e:	d321      	bcc.n	8016984 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016940:	79fa      	ldrb	r2, [r7, #7]
 8016942:	4613      	mov	r3, r2
 8016944:	005b      	lsls	r3, r3, #1
 8016946:	4413      	add	r3, r2
 8016948:	00db      	lsls	r3, r3, #3
 801694a:	4a1b      	ldr	r2, [pc, #108]	; (80169b8 <etharp_output_to_arp_index+0x124>)
 801694c:	4413      	add	r3, r2
 801694e:	1d19      	adds	r1, r3, #4
 8016950:	79fa      	ldrb	r2, [r7, #7]
 8016952:	4613      	mov	r3, r2
 8016954:	005b      	lsls	r3, r3, #1
 8016956:	4413      	add	r3, r2
 8016958:	00db      	lsls	r3, r3, #3
 801695a:	3308      	adds	r3, #8
 801695c:	4a16      	ldr	r2, [pc, #88]	; (80169b8 <etharp_output_to_arp_index+0x124>)
 801695e:	4413      	add	r3, r2
 8016960:	3304      	adds	r3, #4
 8016962:	461a      	mov	r2, r3
 8016964:	68f8      	ldr	r0, [r7, #12]
 8016966:	f000 fafb 	bl	8016f60 <etharp_request_dst>
 801696a:	4603      	mov	r3, r0
 801696c:	2b00      	cmp	r3, #0
 801696e:	d109      	bne.n	8016984 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016970:	79fa      	ldrb	r2, [r7, #7]
 8016972:	4911      	ldr	r1, [pc, #68]	; (80169b8 <etharp_output_to_arp_index+0x124>)
 8016974:	4613      	mov	r3, r2
 8016976:	005b      	lsls	r3, r3, #1
 8016978:	4413      	add	r3, r2
 801697a:	00db      	lsls	r3, r3, #3
 801697c:	440b      	add	r3, r1
 801697e:	3314      	adds	r3, #20
 8016980:	2203      	movs	r2, #3
 8016982:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801698a:	79fa      	ldrb	r2, [r7, #7]
 801698c:	4613      	mov	r3, r2
 801698e:	005b      	lsls	r3, r3, #1
 8016990:	4413      	add	r3, r2
 8016992:	00db      	lsls	r3, r3, #3
 8016994:	3308      	adds	r3, #8
 8016996:	4a08      	ldr	r2, [pc, #32]	; (80169b8 <etharp_output_to_arp_index+0x124>)
 8016998:	4413      	add	r3, r2
 801699a:	1d1a      	adds	r2, r3, #4
 801699c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80169a0:	9300      	str	r3, [sp, #0]
 80169a2:	4613      	mov	r3, r2
 80169a4:	460a      	mov	r2, r1
 80169a6:	68b9      	ldr	r1, [r7, #8]
 80169a8:	68f8      	ldr	r0, [r7, #12]
 80169aa:	f000 fb9b 	bl	80170e4 <ethernet_output>
 80169ae:	4603      	mov	r3, r0
}
 80169b0:	4618      	mov	r0, r3
 80169b2:	3710      	adds	r7, #16
 80169b4:	46bd      	mov	sp, r7
 80169b6:	bd80      	pop	{r7, pc}
 80169b8:	20008924 	.word	0x20008924
 80169bc:	08025bcc 	.word	0x08025bcc
 80169c0:	08025d58 	.word	0x08025d58
 80169c4:	08025c60 	.word	0x08025c60

080169c8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80169c8:	b580      	push	{r7, lr}
 80169ca:	b08a      	sub	sp, #40	; 0x28
 80169cc:	af02      	add	r7, sp, #8
 80169ce:	60f8      	str	r0, [r7, #12]
 80169d0:	60b9      	str	r1, [r7, #8]
 80169d2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80169d8:	68fb      	ldr	r3, [r7, #12]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d106      	bne.n	80169ec <etharp_output+0x24>
 80169de:	4b73      	ldr	r3, [pc, #460]	; (8016bac <etharp_output+0x1e4>)
 80169e0:	f240 321e 	movw	r2, #798	; 0x31e
 80169e4:	4972      	ldr	r1, [pc, #456]	; (8016bb0 <etharp_output+0x1e8>)
 80169e6:	4873      	ldr	r0, [pc, #460]	; (8016bb4 <etharp_output+0x1ec>)
 80169e8:	f00d fafe 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80169ec:	68bb      	ldr	r3, [r7, #8]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d106      	bne.n	8016a00 <etharp_output+0x38>
 80169f2:	4b6e      	ldr	r3, [pc, #440]	; (8016bac <etharp_output+0x1e4>)
 80169f4:	f240 321f 	movw	r2, #799	; 0x31f
 80169f8:	496f      	ldr	r1, [pc, #444]	; (8016bb8 <etharp_output+0x1f0>)
 80169fa:	486e      	ldr	r0, [pc, #440]	; (8016bb4 <etharp_output+0x1ec>)
 80169fc:	f00d faf4 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d106      	bne.n	8016a14 <etharp_output+0x4c>
 8016a06:	4b69      	ldr	r3, [pc, #420]	; (8016bac <etharp_output+0x1e4>)
 8016a08:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016a0c:	496b      	ldr	r1, [pc, #428]	; (8016bbc <etharp_output+0x1f4>)
 8016a0e:	4869      	ldr	r0, [pc, #420]	; (8016bb4 <etharp_output+0x1ec>)
 8016a10:	f00d faea 	bl	8023fe8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	68f9      	ldr	r1, [r7, #12]
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	f001 f804 	bl	8017a28 <ip4_addr_isbroadcast_u32>
 8016a20:	4603      	mov	r3, r0
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d002      	beq.n	8016a2c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016a26:	4b66      	ldr	r3, [pc, #408]	; (8016bc0 <etharp_output+0x1f8>)
 8016a28:	61fb      	str	r3, [r7, #28]
 8016a2a:	e0af      	b.n	8016b8c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016a34:	2be0      	cmp	r3, #224	; 0xe0
 8016a36:	d118      	bne.n	8016a6a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016a38:	2301      	movs	r3, #1
 8016a3a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016a3c:	2300      	movs	r3, #0
 8016a3e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016a40:	235e      	movs	r3, #94	; 0x5e
 8016a42:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	3301      	adds	r3, #1
 8016a48:	781b      	ldrb	r3, [r3, #0]
 8016a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016a4e:	b2db      	uxtb	r3, r3
 8016a50:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	3302      	adds	r3, #2
 8016a56:	781b      	ldrb	r3, [r3, #0]
 8016a58:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	3303      	adds	r3, #3
 8016a5e:	781b      	ldrb	r3, [r3, #0]
 8016a60:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016a62:	f107 0310 	add.w	r3, r7, #16
 8016a66:	61fb      	str	r3, [r7, #28]
 8016a68:	e090      	b.n	8016b8c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	681a      	ldr	r2, [r3, #0]
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	3304      	adds	r3, #4
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	405a      	eors	r2, r3
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	3308      	adds	r3, #8
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	4013      	ands	r3, r2
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d012      	beq.n	8016aa8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016a88:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016a8c:	4293      	cmp	r3, r2
 8016a8e:	d00b      	beq.n	8016aa8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	330c      	adds	r3, #12
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d003      	beq.n	8016aa2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	330c      	adds	r3, #12
 8016a9e:	61bb      	str	r3, [r7, #24]
 8016aa0:	e002      	b.n	8016aa8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016aa2:	f06f 0303 	mvn.w	r3, #3
 8016aa6:	e07d      	b.n	8016ba4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016aa8:	4b46      	ldr	r3, [pc, #280]	; (8016bc4 <etharp_output+0x1fc>)
 8016aaa:	781b      	ldrb	r3, [r3, #0]
 8016aac:	4619      	mov	r1, r3
 8016aae:	4a46      	ldr	r2, [pc, #280]	; (8016bc8 <etharp_output+0x200>)
 8016ab0:	460b      	mov	r3, r1
 8016ab2:	005b      	lsls	r3, r3, #1
 8016ab4:	440b      	add	r3, r1
 8016ab6:	00db      	lsls	r3, r3, #3
 8016ab8:	4413      	add	r3, r2
 8016aba:	3314      	adds	r3, #20
 8016abc:	781b      	ldrb	r3, [r3, #0]
 8016abe:	2b01      	cmp	r3, #1
 8016ac0:	d925      	bls.n	8016b0e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016ac2:	4b40      	ldr	r3, [pc, #256]	; (8016bc4 <etharp_output+0x1fc>)
 8016ac4:	781b      	ldrb	r3, [r3, #0]
 8016ac6:	4619      	mov	r1, r3
 8016ac8:	4a3f      	ldr	r2, [pc, #252]	; (8016bc8 <etharp_output+0x200>)
 8016aca:	460b      	mov	r3, r1
 8016acc:	005b      	lsls	r3, r3, #1
 8016ace:	440b      	add	r3, r1
 8016ad0:	00db      	lsls	r3, r3, #3
 8016ad2:	4413      	add	r3, r2
 8016ad4:	3308      	adds	r3, #8
 8016ad6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016ad8:	68fa      	ldr	r2, [r7, #12]
 8016ada:	429a      	cmp	r2, r3
 8016adc:	d117      	bne.n	8016b0e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016ade:	69bb      	ldr	r3, [r7, #24]
 8016ae0:	681a      	ldr	r2, [r3, #0]
 8016ae2:	4b38      	ldr	r3, [pc, #224]	; (8016bc4 <etharp_output+0x1fc>)
 8016ae4:	781b      	ldrb	r3, [r3, #0]
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	4937      	ldr	r1, [pc, #220]	; (8016bc8 <etharp_output+0x200>)
 8016aea:	4603      	mov	r3, r0
 8016aec:	005b      	lsls	r3, r3, #1
 8016aee:	4403      	add	r3, r0
 8016af0:	00db      	lsls	r3, r3, #3
 8016af2:	440b      	add	r3, r1
 8016af4:	3304      	adds	r3, #4
 8016af6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016af8:	429a      	cmp	r2, r3
 8016afa:	d108      	bne.n	8016b0e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016afc:	4b31      	ldr	r3, [pc, #196]	; (8016bc4 <etharp_output+0x1fc>)
 8016afe:	781b      	ldrb	r3, [r3, #0]
 8016b00:	461a      	mov	r2, r3
 8016b02:	68b9      	ldr	r1, [r7, #8]
 8016b04:	68f8      	ldr	r0, [r7, #12]
 8016b06:	f7ff fec5 	bl	8016894 <etharp_output_to_arp_index>
 8016b0a:	4603      	mov	r3, r0
 8016b0c:	e04a      	b.n	8016ba4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016b0e:	2300      	movs	r3, #0
 8016b10:	75fb      	strb	r3, [r7, #23]
 8016b12:	e031      	b.n	8016b78 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016b14:	7dfa      	ldrb	r2, [r7, #23]
 8016b16:	492c      	ldr	r1, [pc, #176]	; (8016bc8 <etharp_output+0x200>)
 8016b18:	4613      	mov	r3, r2
 8016b1a:	005b      	lsls	r3, r3, #1
 8016b1c:	4413      	add	r3, r2
 8016b1e:	00db      	lsls	r3, r3, #3
 8016b20:	440b      	add	r3, r1
 8016b22:	3314      	adds	r3, #20
 8016b24:	781b      	ldrb	r3, [r3, #0]
 8016b26:	2b01      	cmp	r3, #1
 8016b28:	d923      	bls.n	8016b72 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016b2a:	7dfa      	ldrb	r2, [r7, #23]
 8016b2c:	4926      	ldr	r1, [pc, #152]	; (8016bc8 <etharp_output+0x200>)
 8016b2e:	4613      	mov	r3, r2
 8016b30:	005b      	lsls	r3, r3, #1
 8016b32:	4413      	add	r3, r2
 8016b34:	00db      	lsls	r3, r3, #3
 8016b36:	440b      	add	r3, r1
 8016b38:	3308      	adds	r3, #8
 8016b3a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016b3c:	68fa      	ldr	r2, [r7, #12]
 8016b3e:	429a      	cmp	r2, r3
 8016b40:	d117      	bne.n	8016b72 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016b42:	69bb      	ldr	r3, [r7, #24]
 8016b44:	6819      	ldr	r1, [r3, #0]
 8016b46:	7dfa      	ldrb	r2, [r7, #23]
 8016b48:	481f      	ldr	r0, [pc, #124]	; (8016bc8 <etharp_output+0x200>)
 8016b4a:	4613      	mov	r3, r2
 8016b4c:	005b      	lsls	r3, r3, #1
 8016b4e:	4413      	add	r3, r2
 8016b50:	00db      	lsls	r3, r3, #3
 8016b52:	4403      	add	r3, r0
 8016b54:	3304      	adds	r3, #4
 8016b56:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016b58:	4299      	cmp	r1, r3
 8016b5a:	d10a      	bne.n	8016b72 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016b5c:	4a19      	ldr	r2, [pc, #100]	; (8016bc4 <etharp_output+0x1fc>)
 8016b5e:	7dfb      	ldrb	r3, [r7, #23]
 8016b60:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016b62:	7dfb      	ldrb	r3, [r7, #23]
 8016b64:	461a      	mov	r2, r3
 8016b66:	68b9      	ldr	r1, [r7, #8]
 8016b68:	68f8      	ldr	r0, [r7, #12]
 8016b6a:	f7ff fe93 	bl	8016894 <etharp_output_to_arp_index>
 8016b6e:	4603      	mov	r3, r0
 8016b70:	e018      	b.n	8016ba4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016b72:	7dfb      	ldrb	r3, [r7, #23]
 8016b74:	3301      	adds	r3, #1
 8016b76:	75fb      	strb	r3, [r7, #23]
 8016b78:	7dfb      	ldrb	r3, [r7, #23]
 8016b7a:	2b09      	cmp	r3, #9
 8016b7c:	d9ca      	bls.n	8016b14 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016b7e:	68ba      	ldr	r2, [r7, #8]
 8016b80:	69b9      	ldr	r1, [r7, #24]
 8016b82:	68f8      	ldr	r0, [r7, #12]
 8016b84:	f000 f822 	bl	8016bcc <etharp_query>
 8016b88:	4603      	mov	r3, r0
 8016b8a:	e00b      	b.n	8016ba4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016b92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016b96:	9300      	str	r3, [sp, #0]
 8016b98:	69fb      	ldr	r3, [r7, #28]
 8016b9a:	68b9      	ldr	r1, [r7, #8]
 8016b9c:	68f8      	ldr	r0, [r7, #12]
 8016b9e:	f000 faa1 	bl	80170e4 <ethernet_output>
 8016ba2:	4603      	mov	r3, r0
}
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	3720      	adds	r7, #32
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	bd80      	pop	{r7, pc}
 8016bac:	08025bcc 	.word	0x08025bcc
 8016bb0:	08025d38 	.word	0x08025d38
 8016bb4:	08025c60 	.word	0x08025c60
 8016bb8:	08025d88 	.word	0x08025d88
 8016bbc:	08025d28 	.word	0x08025d28
 8016bc0:	08028a18 	.word	0x08028a18
 8016bc4:	20008a14 	.word	0x20008a14
 8016bc8:	20008924 	.word	0x20008924

08016bcc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016bcc:	b580      	push	{r7, lr}
 8016bce:	b08c      	sub	sp, #48	; 0x30
 8016bd0:	af02      	add	r7, sp, #8
 8016bd2:	60f8      	str	r0, [r7, #12]
 8016bd4:	60b9      	str	r1, [r7, #8]
 8016bd6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	3326      	adds	r3, #38	; 0x26
 8016bdc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016bde:	23ff      	movs	r3, #255	; 0xff
 8016be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016be4:	2300      	movs	r3, #0
 8016be6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016be8:	68bb      	ldr	r3, [r7, #8]
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	68f9      	ldr	r1, [r7, #12]
 8016bee:	4618      	mov	r0, r3
 8016bf0:	f000 ff1a 	bl	8017a28 <ip4_addr_isbroadcast_u32>
 8016bf4:	4603      	mov	r3, r0
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d10c      	bne.n	8016c14 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016bfa:	68bb      	ldr	r3, [r7, #8]
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016c02:	2be0      	cmp	r3, #224	; 0xe0
 8016c04:	d006      	beq.n	8016c14 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016c06:	68bb      	ldr	r3, [r7, #8]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d003      	beq.n	8016c14 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016c0c:	68bb      	ldr	r3, [r7, #8]
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d102      	bne.n	8016c1a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016c14:	f06f 030f 	mvn.w	r3, #15
 8016c18:	e102      	b.n	8016e20 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016c1a:	68fa      	ldr	r2, [r7, #12]
 8016c1c:	2101      	movs	r1, #1
 8016c1e:	68b8      	ldr	r0, [r7, #8]
 8016c20:	f7ff fb5c 	bl	80162dc <etharp_find_entry>
 8016c24:	4603      	mov	r3, r0
 8016c26:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016c28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	da02      	bge.n	8016c36 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016c30:	8a7b      	ldrh	r3, [r7, #18]
 8016c32:	b25b      	sxtb	r3, r3
 8016c34:	e0f4      	b.n	8016e20 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016c36:	8a7b      	ldrh	r3, [r7, #18]
 8016c38:	2b7e      	cmp	r3, #126	; 0x7e
 8016c3a:	d906      	bls.n	8016c4a <etharp_query+0x7e>
 8016c3c:	4b7a      	ldr	r3, [pc, #488]	; (8016e28 <etharp_query+0x25c>)
 8016c3e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016c42:	497a      	ldr	r1, [pc, #488]	; (8016e2c <etharp_query+0x260>)
 8016c44:	487a      	ldr	r0, [pc, #488]	; (8016e30 <etharp_query+0x264>)
 8016c46:	f00d f9cf 	bl	8023fe8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016c4a:	8a7b      	ldrh	r3, [r7, #18]
 8016c4c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016c4e:	7c7a      	ldrb	r2, [r7, #17]
 8016c50:	4978      	ldr	r1, [pc, #480]	; (8016e34 <etharp_query+0x268>)
 8016c52:	4613      	mov	r3, r2
 8016c54:	005b      	lsls	r3, r3, #1
 8016c56:	4413      	add	r3, r2
 8016c58:	00db      	lsls	r3, r3, #3
 8016c5a:	440b      	add	r3, r1
 8016c5c:	3314      	adds	r3, #20
 8016c5e:	781b      	ldrb	r3, [r3, #0]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d115      	bne.n	8016c90 <etharp_query+0xc4>
    is_new_entry = 1;
 8016c64:	2301      	movs	r3, #1
 8016c66:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016c68:	7c7a      	ldrb	r2, [r7, #17]
 8016c6a:	4972      	ldr	r1, [pc, #456]	; (8016e34 <etharp_query+0x268>)
 8016c6c:	4613      	mov	r3, r2
 8016c6e:	005b      	lsls	r3, r3, #1
 8016c70:	4413      	add	r3, r2
 8016c72:	00db      	lsls	r3, r3, #3
 8016c74:	440b      	add	r3, r1
 8016c76:	3314      	adds	r3, #20
 8016c78:	2201      	movs	r2, #1
 8016c7a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016c7c:	7c7a      	ldrb	r2, [r7, #17]
 8016c7e:	496d      	ldr	r1, [pc, #436]	; (8016e34 <etharp_query+0x268>)
 8016c80:	4613      	mov	r3, r2
 8016c82:	005b      	lsls	r3, r3, #1
 8016c84:	4413      	add	r3, r2
 8016c86:	00db      	lsls	r3, r3, #3
 8016c88:	440b      	add	r3, r1
 8016c8a:	3308      	adds	r3, #8
 8016c8c:	68fa      	ldr	r2, [r7, #12]
 8016c8e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016c90:	7c7a      	ldrb	r2, [r7, #17]
 8016c92:	4968      	ldr	r1, [pc, #416]	; (8016e34 <etharp_query+0x268>)
 8016c94:	4613      	mov	r3, r2
 8016c96:	005b      	lsls	r3, r3, #1
 8016c98:	4413      	add	r3, r2
 8016c9a:	00db      	lsls	r3, r3, #3
 8016c9c:	440b      	add	r3, r1
 8016c9e:	3314      	adds	r3, #20
 8016ca0:	781b      	ldrb	r3, [r3, #0]
 8016ca2:	2b01      	cmp	r3, #1
 8016ca4:	d011      	beq.n	8016cca <etharp_query+0xfe>
 8016ca6:	7c7a      	ldrb	r2, [r7, #17]
 8016ca8:	4962      	ldr	r1, [pc, #392]	; (8016e34 <etharp_query+0x268>)
 8016caa:	4613      	mov	r3, r2
 8016cac:	005b      	lsls	r3, r3, #1
 8016cae:	4413      	add	r3, r2
 8016cb0:	00db      	lsls	r3, r3, #3
 8016cb2:	440b      	add	r3, r1
 8016cb4:	3314      	adds	r3, #20
 8016cb6:	781b      	ldrb	r3, [r3, #0]
 8016cb8:	2b01      	cmp	r3, #1
 8016cba:	d806      	bhi.n	8016cca <etharp_query+0xfe>
 8016cbc:	4b5a      	ldr	r3, [pc, #360]	; (8016e28 <etharp_query+0x25c>)
 8016cbe:	f240 32cf 	movw	r2, #975	; 0x3cf
 8016cc2:	495d      	ldr	r1, [pc, #372]	; (8016e38 <etharp_query+0x26c>)
 8016cc4:	485a      	ldr	r0, [pc, #360]	; (8016e30 <etharp_query+0x264>)
 8016cc6:	f00d f98f 	bl	8023fe8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016cca:	6a3b      	ldr	r3, [r7, #32]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d102      	bne.n	8016cd6 <etharp_query+0x10a>
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d10c      	bne.n	8016cf0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016cd6:	68b9      	ldr	r1, [r7, #8]
 8016cd8:	68f8      	ldr	r0, [r7, #12]
 8016cda:	f000 f963 	bl	8016fa4 <etharp_request>
 8016cde:	4603      	mov	r3, r0
 8016ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d102      	bne.n	8016cf0 <etharp_query+0x124>
      return result;
 8016cea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016cee:	e097      	b.n	8016e20 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d106      	bne.n	8016d04 <etharp_query+0x138>
 8016cf6:	4b4c      	ldr	r3, [pc, #304]	; (8016e28 <etharp_query+0x25c>)
 8016cf8:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016cfc:	494f      	ldr	r1, [pc, #316]	; (8016e3c <etharp_query+0x270>)
 8016cfe:	484c      	ldr	r0, [pc, #304]	; (8016e30 <etharp_query+0x264>)
 8016d00:	f00d f972 	bl	8023fe8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016d04:	7c7a      	ldrb	r2, [r7, #17]
 8016d06:	494b      	ldr	r1, [pc, #300]	; (8016e34 <etharp_query+0x268>)
 8016d08:	4613      	mov	r3, r2
 8016d0a:	005b      	lsls	r3, r3, #1
 8016d0c:	4413      	add	r3, r2
 8016d0e:	00db      	lsls	r3, r3, #3
 8016d10:	440b      	add	r3, r1
 8016d12:	3314      	adds	r3, #20
 8016d14:	781b      	ldrb	r3, [r3, #0]
 8016d16:	2b01      	cmp	r3, #1
 8016d18:	d918      	bls.n	8016d4c <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016d1a:	4a49      	ldr	r2, [pc, #292]	; (8016e40 <etharp_query+0x274>)
 8016d1c:	7c7b      	ldrb	r3, [r7, #17]
 8016d1e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016d20:	7c7a      	ldrb	r2, [r7, #17]
 8016d22:	4613      	mov	r3, r2
 8016d24:	005b      	lsls	r3, r3, #1
 8016d26:	4413      	add	r3, r2
 8016d28:	00db      	lsls	r3, r3, #3
 8016d2a:	3308      	adds	r3, #8
 8016d2c:	4a41      	ldr	r2, [pc, #260]	; (8016e34 <etharp_query+0x268>)
 8016d2e:	4413      	add	r3, r2
 8016d30:	1d1a      	adds	r2, r3, #4
 8016d32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016d36:	9300      	str	r3, [sp, #0]
 8016d38:	4613      	mov	r3, r2
 8016d3a:	697a      	ldr	r2, [r7, #20]
 8016d3c:	6879      	ldr	r1, [r7, #4]
 8016d3e:	68f8      	ldr	r0, [r7, #12]
 8016d40:	f000 f9d0 	bl	80170e4 <ethernet_output>
 8016d44:	4603      	mov	r3, r0
 8016d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016d4a:	e067      	b.n	8016e1c <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016d4c:	7c7a      	ldrb	r2, [r7, #17]
 8016d4e:	4939      	ldr	r1, [pc, #228]	; (8016e34 <etharp_query+0x268>)
 8016d50:	4613      	mov	r3, r2
 8016d52:	005b      	lsls	r3, r3, #1
 8016d54:	4413      	add	r3, r2
 8016d56:	00db      	lsls	r3, r3, #3
 8016d58:	440b      	add	r3, r1
 8016d5a:	3314      	adds	r3, #20
 8016d5c:	781b      	ldrb	r3, [r3, #0]
 8016d5e:	2b01      	cmp	r3, #1
 8016d60:	d15c      	bne.n	8016e1c <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016d62:	2300      	movs	r3, #0
 8016d64:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016d6a:	e01c      	b.n	8016da6 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016d6c:	69fb      	ldr	r3, [r7, #28]
 8016d6e:	895a      	ldrh	r2, [r3, #10]
 8016d70:	69fb      	ldr	r3, [r7, #28]
 8016d72:	891b      	ldrh	r3, [r3, #8]
 8016d74:	429a      	cmp	r2, r3
 8016d76:	d10a      	bne.n	8016d8e <etharp_query+0x1c2>
 8016d78:	69fb      	ldr	r3, [r7, #28]
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d006      	beq.n	8016d8e <etharp_query+0x1c2>
 8016d80:	4b29      	ldr	r3, [pc, #164]	; (8016e28 <etharp_query+0x25c>)
 8016d82:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016d86:	492f      	ldr	r1, [pc, #188]	; (8016e44 <etharp_query+0x278>)
 8016d88:	4829      	ldr	r0, [pc, #164]	; (8016e30 <etharp_query+0x264>)
 8016d8a:	f00d f92d 	bl	8023fe8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016d8e:	69fb      	ldr	r3, [r7, #28]
 8016d90:	7b1b      	ldrb	r3, [r3, #12]
 8016d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d002      	beq.n	8016da0 <etharp_query+0x1d4>
        copy_needed = 1;
 8016d9a:	2301      	movs	r3, #1
 8016d9c:	61bb      	str	r3, [r7, #24]
        break;
 8016d9e:	e005      	b.n	8016dac <etharp_query+0x1e0>
      }
      p = p->next;
 8016da0:	69fb      	ldr	r3, [r7, #28]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016da6:	69fb      	ldr	r3, [r7, #28]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d1df      	bne.n	8016d6c <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8016dac:	69bb      	ldr	r3, [r7, #24]
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d007      	beq.n	8016dc2 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016db2:	687a      	ldr	r2, [r7, #4]
 8016db4:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016db8:	200e      	movs	r0, #14
 8016dba:	f003 fbb5 	bl	801a528 <pbuf_clone>
 8016dbe:	61f8      	str	r0, [r7, #28]
 8016dc0:	e004      	b.n	8016dcc <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016dc6:	69f8      	ldr	r0, [r7, #28]
 8016dc8:	f003 f8a4 	bl	8019f14 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016dcc:	69fb      	ldr	r3, [r7, #28]
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d021      	beq.n	8016e16 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016dd2:	7c7a      	ldrb	r2, [r7, #17]
 8016dd4:	4917      	ldr	r1, [pc, #92]	; (8016e34 <etharp_query+0x268>)
 8016dd6:	4613      	mov	r3, r2
 8016dd8:	005b      	lsls	r3, r3, #1
 8016dda:	4413      	add	r3, r2
 8016ddc:	00db      	lsls	r3, r3, #3
 8016dde:	440b      	add	r3, r1
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d00a      	beq.n	8016dfc <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016de6:	7c7a      	ldrb	r2, [r7, #17]
 8016de8:	4912      	ldr	r1, [pc, #72]	; (8016e34 <etharp_query+0x268>)
 8016dea:	4613      	mov	r3, r2
 8016dec:	005b      	lsls	r3, r3, #1
 8016dee:	4413      	add	r3, r2
 8016df0:	00db      	lsls	r3, r3, #3
 8016df2:	440b      	add	r3, r1
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	4618      	mov	r0, r3
 8016df8:	f002 ffe6 	bl	8019dc8 <pbuf_free>
      }
      arp_table[i].q = p;
 8016dfc:	7c7a      	ldrb	r2, [r7, #17]
 8016dfe:	490d      	ldr	r1, [pc, #52]	; (8016e34 <etharp_query+0x268>)
 8016e00:	4613      	mov	r3, r2
 8016e02:	005b      	lsls	r3, r3, #1
 8016e04:	4413      	add	r3, r2
 8016e06:	00db      	lsls	r3, r3, #3
 8016e08:	440b      	add	r3, r1
 8016e0a:	69fa      	ldr	r2, [r7, #28]
 8016e0c:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016e0e:	2300      	movs	r3, #0
 8016e10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016e14:	e002      	b.n	8016e1c <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016e16:	23ff      	movs	r3, #255	; 0xff
 8016e18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016e1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016e20:	4618      	mov	r0, r3
 8016e22:	3728      	adds	r7, #40	; 0x28
 8016e24:	46bd      	mov	sp, r7
 8016e26:	bd80      	pop	{r7, pc}
 8016e28:	08025bcc 	.word	0x08025bcc
 8016e2c:	08025d94 	.word	0x08025d94
 8016e30:	08025c60 	.word	0x08025c60
 8016e34:	20008924 	.word	0x20008924
 8016e38:	08025da4 	.word	0x08025da4
 8016e3c:	08025d88 	.word	0x08025d88
 8016e40:	20008a14 	.word	0x20008a14
 8016e44:	08025dcc 	.word	0x08025dcc

08016e48 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016e48:	b580      	push	{r7, lr}
 8016e4a:	b08a      	sub	sp, #40	; 0x28
 8016e4c:	af02      	add	r7, sp, #8
 8016e4e:	60f8      	str	r0, [r7, #12]
 8016e50:	60b9      	str	r1, [r7, #8]
 8016e52:	607a      	str	r2, [r7, #4]
 8016e54:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016e56:	2300      	movs	r3, #0
 8016e58:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d106      	bne.n	8016e6e <etharp_raw+0x26>
 8016e60:	4b3a      	ldr	r3, [pc, #232]	; (8016f4c <etharp_raw+0x104>)
 8016e62:	f240 4257 	movw	r2, #1111	; 0x457
 8016e66:	493a      	ldr	r1, [pc, #232]	; (8016f50 <etharp_raw+0x108>)
 8016e68:	483a      	ldr	r0, [pc, #232]	; (8016f54 <etharp_raw+0x10c>)
 8016e6a:	f00d f8bd 	bl	8023fe8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016e6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016e72:	211c      	movs	r1, #28
 8016e74:	200e      	movs	r0, #14
 8016e76:	f002 fcc7 	bl	8019808 <pbuf_alloc>
 8016e7a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016e7c:	69bb      	ldr	r3, [r7, #24]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d102      	bne.n	8016e88 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016e82:	f04f 33ff 	mov.w	r3, #4294967295
 8016e86:	e05d      	b.n	8016f44 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016e88:	69bb      	ldr	r3, [r7, #24]
 8016e8a:	895b      	ldrh	r3, [r3, #10]
 8016e8c:	2b1b      	cmp	r3, #27
 8016e8e:	d806      	bhi.n	8016e9e <etharp_raw+0x56>
 8016e90:	4b2e      	ldr	r3, [pc, #184]	; (8016f4c <etharp_raw+0x104>)
 8016e92:	f240 4263 	movw	r2, #1123	; 0x463
 8016e96:	4930      	ldr	r1, [pc, #192]	; (8016f58 <etharp_raw+0x110>)
 8016e98:	482e      	ldr	r0, [pc, #184]	; (8016f54 <etharp_raw+0x10c>)
 8016e9a:	f00d f8a5 	bl	8023fe8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016e9e:	69bb      	ldr	r3, [r7, #24]
 8016ea0:	685b      	ldr	r3, [r3, #4]
 8016ea2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016ea4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	f7fc ff7c 	bl	8013da4 <lwip_htons>
 8016eac:	4603      	mov	r3, r0
 8016eae:	461a      	mov	r2, r3
 8016eb0:	697b      	ldr	r3, [r7, #20]
 8016eb2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016eba:	2b06      	cmp	r3, #6
 8016ebc:	d006      	beq.n	8016ecc <etharp_raw+0x84>
 8016ebe:	4b23      	ldr	r3, [pc, #140]	; (8016f4c <etharp_raw+0x104>)
 8016ec0:	f240 426a 	movw	r2, #1130	; 0x46a
 8016ec4:	4925      	ldr	r1, [pc, #148]	; (8016f5c <etharp_raw+0x114>)
 8016ec6:	4823      	ldr	r0, [pc, #140]	; (8016f54 <etharp_raw+0x10c>)
 8016ec8:	f00d f88e 	bl	8023fe8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016ecc:	697b      	ldr	r3, [r7, #20]
 8016ece:	3308      	adds	r3, #8
 8016ed0:	2206      	movs	r2, #6
 8016ed2:	6839      	ldr	r1, [r7, #0]
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	f00c ffcc 	bl	8023e72 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016eda:	697b      	ldr	r3, [r7, #20]
 8016edc:	3312      	adds	r3, #18
 8016ede:	2206      	movs	r2, #6
 8016ee0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	f00c ffc5 	bl	8023e72 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016ee8:	697b      	ldr	r3, [r7, #20]
 8016eea:	330e      	adds	r3, #14
 8016eec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016eee:	6812      	ldr	r2, [r2, #0]
 8016ef0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016ef2:	697b      	ldr	r3, [r7, #20]
 8016ef4:	3318      	adds	r3, #24
 8016ef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016ef8:	6812      	ldr	r2, [r2, #0]
 8016efa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016efc:	697b      	ldr	r3, [r7, #20]
 8016efe:	2200      	movs	r2, #0
 8016f00:	701a      	strb	r2, [r3, #0]
 8016f02:	2200      	movs	r2, #0
 8016f04:	f042 0201 	orr.w	r2, r2, #1
 8016f08:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016f0a:	697b      	ldr	r3, [r7, #20]
 8016f0c:	2200      	movs	r2, #0
 8016f0e:	f042 0208 	orr.w	r2, r2, #8
 8016f12:	709a      	strb	r2, [r3, #2]
 8016f14:	2200      	movs	r2, #0
 8016f16:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016f18:	697b      	ldr	r3, [r7, #20]
 8016f1a:	2206      	movs	r2, #6
 8016f1c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016f1e:	697b      	ldr	r3, [r7, #20]
 8016f20:	2204      	movs	r2, #4
 8016f22:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016f24:	f640 0306 	movw	r3, #2054	; 0x806
 8016f28:	9300      	str	r3, [sp, #0]
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	68ba      	ldr	r2, [r7, #8]
 8016f2e:	69b9      	ldr	r1, [r7, #24]
 8016f30:	68f8      	ldr	r0, [r7, #12]
 8016f32:	f000 f8d7 	bl	80170e4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016f36:	69b8      	ldr	r0, [r7, #24]
 8016f38:	f002 ff46 	bl	8019dc8 <pbuf_free>
  p = NULL;
 8016f3c:	2300      	movs	r3, #0
 8016f3e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016f40:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016f44:	4618      	mov	r0, r3
 8016f46:	3720      	adds	r7, #32
 8016f48:	46bd      	mov	sp, r7
 8016f4a:	bd80      	pop	{r7, pc}
 8016f4c:	08025bcc 	.word	0x08025bcc
 8016f50:	08025d38 	.word	0x08025d38
 8016f54:	08025c60 	.word	0x08025c60
 8016f58:	08025de8 	.word	0x08025de8
 8016f5c:	08025e1c 	.word	0x08025e1c

08016f60 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016f60:	b580      	push	{r7, lr}
 8016f62:	b088      	sub	sp, #32
 8016f64:	af04      	add	r7, sp, #16
 8016f66:	60f8      	str	r0, [r7, #12]
 8016f68:	60b9      	str	r1, [r7, #8]
 8016f6a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016f7c:	2201      	movs	r2, #1
 8016f7e:	9203      	str	r2, [sp, #12]
 8016f80:	68ba      	ldr	r2, [r7, #8]
 8016f82:	9202      	str	r2, [sp, #8]
 8016f84:	4a06      	ldr	r2, [pc, #24]	; (8016fa0 <etharp_request_dst+0x40>)
 8016f86:	9201      	str	r2, [sp, #4]
 8016f88:	9300      	str	r3, [sp, #0]
 8016f8a:	4603      	mov	r3, r0
 8016f8c:	687a      	ldr	r2, [r7, #4]
 8016f8e:	68f8      	ldr	r0, [r7, #12]
 8016f90:	f7ff ff5a 	bl	8016e48 <etharp_raw>
 8016f94:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016f96:	4618      	mov	r0, r3
 8016f98:	3710      	adds	r7, #16
 8016f9a:	46bd      	mov	sp, r7
 8016f9c:	bd80      	pop	{r7, pc}
 8016f9e:	bf00      	nop
 8016fa0:	08028a20 	.word	0x08028a20

08016fa4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016fa4:	b580      	push	{r7, lr}
 8016fa6:	b082      	sub	sp, #8
 8016fa8:	af00      	add	r7, sp, #0
 8016faa:	6078      	str	r0, [r7, #4]
 8016fac:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016fae:	4a05      	ldr	r2, [pc, #20]	; (8016fc4 <etharp_request+0x20>)
 8016fb0:	6839      	ldr	r1, [r7, #0]
 8016fb2:	6878      	ldr	r0, [r7, #4]
 8016fb4:	f7ff ffd4 	bl	8016f60 <etharp_request_dst>
 8016fb8:	4603      	mov	r3, r0
}
 8016fba:	4618      	mov	r0, r3
 8016fbc:	3708      	adds	r7, #8
 8016fbe:	46bd      	mov	sp, r7
 8016fc0:	bd80      	pop	{r7, pc}
 8016fc2:	bf00      	nop
 8016fc4:	08028a18 	.word	0x08028a18

08016fc8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016fc8:	b580      	push	{r7, lr}
 8016fca:	b086      	sub	sp, #24
 8016fcc:	af00      	add	r7, sp, #0
 8016fce:	6078      	str	r0, [r7, #4]
 8016fd0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016fd2:	230e      	movs	r3, #14
 8016fd4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	895b      	ldrh	r3, [r3, #10]
 8016fda:	2b0e      	cmp	r3, #14
 8016fdc:	d96e      	bls.n	80170bc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	7bdb      	ldrb	r3, [r3, #15]
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d106      	bne.n	8016ff4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016fe6:	683b      	ldr	r3, [r7, #0]
 8016fe8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016fec:	3301      	adds	r3, #1
 8016fee:	b2da      	uxtb	r2, r3
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	685b      	ldr	r3, [r3, #4]
 8016ff8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016ffa:	693b      	ldr	r3, [r7, #16]
 8016ffc:	7b1a      	ldrb	r2, [r3, #12]
 8016ffe:	7b5b      	ldrb	r3, [r3, #13]
 8017000:	021b      	lsls	r3, r3, #8
 8017002:	4313      	orrs	r3, r2
 8017004:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017006:	693b      	ldr	r3, [r7, #16]
 8017008:	781b      	ldrb	r3, [r3, #0]
 801700a:	f003 0301 	and.w	r3, r3, #1
 801700e:	2b00      	cmp	r3, #0
 8017010:	d023      	beq.n	801705a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017012:	693b      	ldr	r3, [r7, #16]
 8017014:	781b      	ldrb	r3, [r3, #0]
 8017016:	2b01      	cmp	r3, #1
 8017018:	d10f      	bne.n	801703a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801701a:	693b      	ldr	r3, [r7, #16]
 801701c:	785b      	ldrb	r3, [r3, #1]
 801701e:	2b00      	cmp	r3, #0
 8017020:	d11b      	bne.n	801705a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017022:	693b      	ldr	r3, [r7, #16]
 8017024:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017026:	2b5e      	cmp	r3, #94	; 0x5e
 8017028:	d117      	bne.n	801705a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	7b5b      	ldrb	r3, [r3, #13]
 801702e:	f043 0310 	orr.w	r3, r3, #16
 8017032:	b2da      	uxtb	r2, r3
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	735a      	strb	r2, [r3, #13]
 8017038:	e00f      	b.n	801705a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801703a:	693b      	ldr	r3, [r7, #16]
 801703c:	2206      	movs	r2, #6
 801703e:	4928      	ldr	r1, [pc, #160]	; (80170e0 <ethernet_input+0x118>)
 8017040:	4618      	mov	r0, r3
 8017042:	f00c ff07 	bl	8023e54 <memcmp>
 8017046:	4603      	mov	r3, r0
 8017048:	2b00      	cmp	r3, #0
 801704a:	d106      	bne.n	801705a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	7b5b      	ldrb	r3, [r3, #13]
 8017050:	f043 0308 	orr.w	r3, r3, #8
 8017054:	b2da      	uxtb	r2, r3
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801705a:	89fb      	ldrh	r3, [r7, #14]
 801705c:	2b08      	cmp	r3, #8
 801705e:	d003      	beq.n	8017068 <ethernet_input+0xa0>
 8017060:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017064:	d014      	beq.n	8017090 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017066:	e032      	b.n	80170ce <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017068:	683b      	ldr	r3, [r7, #0]
 801706a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801706e:	f003 0308 	and.w	r3, r3, #8
 8017072:	2b00      	cmp	r3, #0
 8017074:	d024      	beq.n	80170c0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017076:	8afb      	ldrh	r3, [r7, #22]
 8017078:	4619      	mov	r1, r3
 801707a:	6878      	ldr	r0, [r7, #4]
 801707c:	f002 fe1e 	bl	8019cbc <pbuf_remove_header>
 8017080:	4603      	mov	r3, r0
 8017082:	2b00      	cmp	r3, #0
 8017084:	d11e      	bne.n	80170c4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017086:	6839      	ldr	r1, [r7, #0]
 8017088:	6878      	ldr	r0, [r7, #4]
 801708a:	f000 fab5 	bl	80175f8 <ip4_input>
      break;
 801708e:	e013      	b.n	80170b8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017090:	683b      	ldr	r3, [r7, #0]
 8017092:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017096:	f003 0308 	and.w	r3, r3, #8
 801709a:	2b00      	cmp	r3, #0
 801709c:	d014      	beq.n	80170c8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801709e:	8afb      	ldrh	r3, [r7, #22]
 80170a0:	4619      	mov	r1, r3
 80170a2:	6878      	ldr	r0, [r7, #4]
 80170a4:	f002 fe0a 	bl	8019cbc <pbuf_remove_header>
 80170a8:	4603      	mov	r3, r0
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d10e      	bne.n	80170cc <ethernet_input+0x104>
        etharp_input(p, netif);
 80170ae:	6839      	ldr	r1, [r7, #0]
 80170b0:	6878      	ldr	r0, [r7, #4]
 80170b2:	f7ff fb61 	bl	8016778 <etharp_input>
      break;
 80170b6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80170b8:	2300      	movs	r3, #0
 80170ba:	e00c      	b.n	80170d6 <ethernet_input+0x10e>
    goto free_and_return;
 80170bc:	bf00      	nop
 80170be:	e006      	b.n	80170ce <ethernet_input+0x106>
        goto free_and_return;
 80170c0:	bf00      	nop
 80170c2:	e004      	b.n	80170ce <ethernet_input+0x106>
        goto free_and_return;
 80170c4:	bf00      	nop
 80170c6:	e002      	b.n	80170ce <ethernet_input+0x106>
        goto free_and_return;
 80170c8:	bf00      	nop
 80170ca:	e000      	b.n	80170ce <ethernet_input+0x106>
        goto free_and_return;
 80170cc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80170ce:	6878      	ldr	r0, [r7, #4]
 80170d0:	f002 fe7a 	bl	8019dc8 <pbuf_free>
  return ERR_OK;
 80170d4:	2300      	movs	r3, #0
}
 80170d6:	4618      	mov	r0, r3
 80170d8:	3718      	adds	r7, #24
 80170da:	46bd      	mov	sp, r7
 80170dc:	bd80      	pop	{r7, pc}
 80170de:	bf00      	nop
 80170e0:	08028a18 	.word	0x08028a18

080170e4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80170e4:	b580      	push	{r7, lr}
 80170e6:	b086      	sub	sp, #24
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	60f8      	str	r0, [r7, #12]
 80170ec:	60b9      	str	r1, [r7, #8]
 80170ee:	607a      	str	r2, [r7, #4]
 80170f0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80170f2:	8c3b      	ldrh	r3, [r7, #32]
 80170f4:	4618      	mov	r0, r3
 80170f6:	f7fc fe55 	bl	8013da4 <lwip_htons>
 80170fa:	4603      	mov	r3, r0
 80170fc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80170fe:	210e      	movs	r1, #14
 8017100:	68b8      	ldr	r0, [r7, #8]
 8017102:	f002 fdcb 	bl	8019c9c <pbuf_add_header>
 8017106:	4603      	mov	r3, r0
 8017108:	2b00      	cmp	r3, #0
 801710a:	d125      	bne.n	8017158 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801710c:	68bb      	ldr	r3, [r7, #8]
 801710e:	685b      	ldr	r3, [r3, #4]
 8017110:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017112:	693b      	ldr	r3, [r7, #16]
 8017114:	8afa      	ldrh	r2, [r7, #22]
 8017116:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017118:	693b      	ldr	r3, [r7, #16]
 801711a:	2206      	movs	r2, #6
 801711c:	6839      	ldr	r1, [r7, #0]
 801711e:	4618      	mov	r0, r3
 8017120:	f00c fea7 	bl	8023e72 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017124:	693b      	ldr	r3, [r7, #16]
 8017126:	3306      	adds	r3, #6
 8017128:	2206      	movs	r2, #6
 801712a:	6879      	ldr	r1, [r7, #4]
 801712c:	4618      	mov	r0, r3
 801712e:	f00c fea0 	bl	8023e72 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017138:	2b06      	cmp	r3, #6
 801713a:	d006      	beq.n	801714a <ethernet_output+0x66>
 801713c:	4b0a      	ldr	r3, [pc, #40]	; (8017168 <ethernet_output+0x84>)
 801713e:	f240 1233 	movw	r2, #307	; 0x133
 8017142:	490a      	ldr	r1, [pc, #40]	; (801716c <ethernet_output+0x88>)
 8017144:	480a      	ldr	r0, [pc, #40]	; (8017170 <ethernet_output+0x8c>)
 8017146:	f00c ff4f 	bl	8023fe8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	699b      	ldr	r3, [r3, #24]
 801714e:	68b9      	ldr	r1, [r7, #8]
 8017150:	68f8      	ldr	r0, [r7, #12]
 8017152:	4798      	blx	r3
 8017154:	4603      	mov	r3, r0
 8017156:	e002      	b.n	801715e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017158:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801715a:	f06f 0301 	mvn.w	r3, #1
}
 801715e:	4618      	mov	r0, r3
 8017160:	3718      	adds	r7, #24
 8017162:	46bd      	mov	sp, r7
 8017164:	bd80      	pop	{r7, pc}
 8017166:	bf00      	nop
 8017168:	08025e60 	.word	0x08025e60
 801716c:	08025eb4 	.word	0x08025eb4
 8017170:	08025ee8 	.word	0x08025ee8

08017174 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017174:	b580      	push	{r7, lr}
 8017176:	b08e      	sub	sp, #56	; 0x38
 8017178:	af04      	add	r7, sp, #16
 801717a:	6078      	str	r0, [r7, #4]
 801717c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801717e:	4b79      	ldr	r3, [pc, #484]	; (8017364 <icmp_input+0x1f0>)
 8017180:	689b      	ldr	r3, [r3, #8]
 8017182:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017186:	781b      	ldrb	r3, [r3, #0]
 8017188:	f003 030f 	and.w	r3, r3, #15
 801718c:	b2db      	uxtb	r3, r3
 801718e:	009b      	lsls	r3, r3, #2
 8017190:	b2db      	uxtb	r3, r3
 8017192:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017194:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017196:	2b13      	cmp	r3, #19
 8017198:	f240 80cd 	bls.w	8017336 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	895b      	ldrh	r3, [r3, #10]
 80171a0:	2b03      	cmp	r3, #3
 80171a2:	f240 80ca 	bls.w	801733a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	685b      	ldr	r3, [r3, #4]
 80171aa:	781b      	ldrb	r3, [r3, #0]
 80171ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80171b0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	f000 80b7 	beq.w	8017328 <icmp_input+0x1b4>
 80171ba:	2b08      	cmp	r3, #8
 80171bc:	f040 80b7 	bne.w	801732e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80171c0:	4b69      	ldr	r3, [pc, #420]	; (8017368 <icmp_input+0x1f4>)
 80171c2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80171c4:	4b67      	ldr	r3, [pc, #412]	; (8017364 <icmp_input+0x1f0>)
 80171c6:	695b      	ldr	r3, [r3, #20]
 80171c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80171cc:	2be0      	cmp	r3, #224	; 0xe0
 80171ce:	f000 80bb 	beq.w	8017348 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80171d2:	4b64      	ldr	r3, [pc, #400]	; (8017364 <icmp_input+0x1f0>)
 80171d4:	695a      	ldr	r2, [r3, #20]
 80171d6:	4b63      	ldr	r3, [pc, #396]	; (8017364 <icmp_input+0x1f0>)
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	4619      	mov	r1, r3
 80171dc:	4610      	mov	r0, r2
 80171de:	f000 fc23 	bl	8017a28 <ip4_addr_isbroadcast_u32>
 80171e2:	4603      	mov	r3, r0
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	f040 80b1 	bne.w	801734c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	891b      	ldrh	r3, [r3, #8]
 80171ee:	2b07      	cmp	r3, #7
 80171f0:	f240 80a5 	bls.w	801733e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80171f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80171f6:	330e      	adds	r3, #14
 80171f8:	4619      	mov	r1, r3
 80171fa:	6878      	ldr	r0, [r7, #4]
 80171fc:	f002 fd4e 	bl	8019c9c <pbuf_add_header>
 8017200:	4603      	mov	r3, r0
 8017202:	2b00      	cmp	r3, #0
 8017204:	d04b      	beq.n	801729e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	891a      	ldrh	r2, [r3, #8]
 801720a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801720c:	4413      	add	r3, r2
 801720e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	891b      	ldrh	r3, [r3, #8]
 8017214:	8b7a      	ldrh	r2, [r7, #26]
 8017216:	429a      	cmp	r2, r3
 8017218:	f0c0 809a 	bcc.w	8017350 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801721c:	8b7b      	ldrh	r3, [r7, #26]
 801721e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017222:	4619      	mov	r1, r3
 8017224:	200e      	movs	r0, #14
 8017226:	f002 faef 	bl	8019808 <pbuf_alloc>
 801722a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801722c:	697b      	ldr	r3, [r7, #20]
 801722e:	2b00      	cmp	r3, #0
 8017230:	f000 8090 	beq.w	8017354 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017234:	697b      	ldr	r3, [r7, #20]
 8017236:	895b      	ldrh	r3, [r3, #10]
 8017238:	461a      	mov	r2, r3
 801723a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801723c:	3308      	adds	r3, #8
 801723e:	429a      	cmp	r2, r3
 8017240:	d203      	bcs.n	801724a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017242:	6978      	ldr	r0, [r7, #20]
 8017244:	f002 fdc0 	bl	8019dc8 <pbuf_free>
          goto icmperr;
 8017248:	e085      	b.n	8017356 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801724a:	697b      	ldr	r3, [r7, #20]
 801724c:	685b      	ldr	r3, [r3, #4]
 801724e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017250:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017252:	4618      	mov	r0, r3
 8017254:	f00c fe0d 	bl	8023e72 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017258:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801725a:	4619      	mov	r1, r3
 801725c:	6978      	ldr	r0, [r7, #20]
 801725e:	f002 fd2d 	bl	8019cbc <pbuf_remove_header>
 8017262:	4603      	mov	r3, r0
 8017264:	2b00      	cmp	r3, #0
 8017266:	d009      	beq.n	801727c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017268:	4b40      	ldr	r3, [pc, #256]	; (801736c <icmp_input+0x1f8>)
 801726a:	22b6      	movs	r2, #182	; 0xb6
 801726c:	4940      	ldr	r1, [pc, #256]	; (8017370 <icmp_input+0x1fc>)
 801726e:	4841      	ldr	r0, [pc, #260]	; (8017374 <icmp_input+0x200>)
 8017270:	f00c feba 	bl	8023fe8 <iprintf>
          pbuf_free(r);
 8017274:	6978      	ldr	r0, [r7, #20]
 8017276:	f002 fda7 	bl	8019dc8 <pbuf_free>
          goto icmperr;
 801727a:	e06c      	b.n	8017356 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801727c:	6879      	ldr	r1, [r7, #4]
 801727e:	6978      	ldr	r0, [r7, #20]
 8017280:	f002 fed6 	bl	801a030 <pbuf_copy>
 8017284:	4603      	mov	r3, r0
 8017286:	2b00      	cmp	r3, #0
 8017288:	d003      	beq.n	8017292 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801728a:	6978      	ldr	r0, [r7, #20]
 801728c:	f002 fd9c 	bl	8019dc8 <pbuf_free>
          goto icmperr;
 8017290:	e061      	b.n	8017356 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8017292:	6878      	ldr	r0, [r7, #4]
 8017294:	f002 fd98 	bl	8019dc8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017298:	697b      	ldr	r3, [r7, #20]
 801729a:	607b      	str	r3, [r7, #4]
 801729c:	e00f      	b.n	80172be <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801729e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80172a0:	330e      	adds	r3, #14
 80172a2:	4619      	mov	r1, r3
 80172a4:	6878      	ldr	r0, [r7, #4]
 80172a6:	f002 fd09 	bl	8019cbc <pbuf_remove_header>
 80172aa:	4603      	mov	r3, r0
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d006      	beq.n	80172be <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80172b0:	4b2e      	ldr	r3, [pc, #184]	; (801736c <icmp_input+0x1f8>)
 80172b2:	22c7      	movs	r2, #199	; 0xc7
 80172b4:	4930      	ldr	r1, [pc, #192]	; (8017378 <icmp_input+0x204>)
 80172b6:	482f      	ldr	r0, [pc, #188]	; (8017374 <icmp_input+0x200>)
 80172b8:	f00c fe96 	bl	8023fe8 <iprintf>
          goto icmperr;
 80172bc:	e04b      	b.n	8017356 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	685b      	ldr	r3, [r3, #4]
 80172c2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80172c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80172c6:	4619      	mov	r1, r3
 80172c8:	6878      	ldr	r0, [r7, #4]
 80172ca:	f002 fce7 	bl	8019c9c <pbuf_add_header>
 80172ce:	4603      	mov	r3, r0
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d12b      	bne.n	801732c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	685b      	ldr	r3, [r3, #4]
 80172d8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80172da:	69fb      	ldr	r3, [r7, #28]
 80172dc:	681a      	ldr	r2, [r3, #0]
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80172e2:	4b20      	ldr	r3, [pc, #128]	; (8017364 <icmp_input+0x1f0>)
 80172e4:	691a      	ldr	r2, [r3, #16]
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80172ea:	693b      	ldr	r3, [r7, #16]
 80172ec:	2200      	movs	r2, #0
 80172ee:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80172f0:	693b      	ldr	r3, [r7, #16]
 80172f2:	2200      	movs	r2, #0
 80172f4:	709a      	strb	r2, [r3, #2]
 80172f6:	2200      	movs	r2, #0
 80172f8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80172fa:	68fb      	ldr	r3, [r7, #12]
 80172fc:	22ff      	movs	r2, #255	; 0xff
 80172fe:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	2200      	movs	r2, #0
 8017304:	729a      	strb	r2, [r3, #10]
 8017306:	2200      	movs	r2, #0
 8017308:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801730a:	683b      	ldr	r3, [r7, #0]
 801730c:	9302      	str	r3, [sp, #8]
 801730e:	2301      	movs	r3, #1
 8017310:	9301      	str	r3, [sp, #4]
 8017312:	2300      	movs	r3, #0
 8017314:	9300      	str	r3, [sp, #0]
 8017316:	23ff      	movs	r3, #255	; 0xff
 8017318:	2200      	movs	r2, #0
 801731a:	69f9      	ldr	r1, [r7, #28]
 801731c:	6878      	ldr	r0, [r7, #4]
 801731e:	f000 faab 	bl	8017878 <ip4_output_if>
 8017322:	4603      	mov	r3, r0
 8017324:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017326:	e001      	b.n	801732c <icmp_input+0x1b8>
      break;
 8017328:	bf00      	nop
 801732a:	e000      	b.n	801732e <icmp_input+0x1ba>
      break;
 801732c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801732e:	6878      	ldr	r0, [r7, #4]
 8017330:	f002 fd4a 	bl	8019dc8 <pbuf_free>
  return;
 8017334:	e013      	b.n	801735e <icmp_input+0x1ea>
    goto lenerr;
 8017336:	bf00      	nop
 8017338:	e002      	b.n	8017340 <icmp_input+0x1cc>
    goto lenerr;
 801733a:	bf00      	nop
 801733c:	e000      	b.n	8017340 <icmp_input+0x1cc>
        goto lenerr;
 801733e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017340:	6878      	ldr	r0, [r7, #4]
 8017342:	f002 fd41 	bl	8019dc8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017346:	e00a      	b.n	801735e <icmp_input+0x1ea>
        goto icmperr;
 8017348:	bf00      	nop
 801734a:	e004      	b.n	8017356 <icmp_input+0x1e2>
        goto icmperr;
 801734c:	bf00      	nop
 801734e:	e002      	b.n	8017356 <icmp_input+0x1e2>
          goto icmperr;
 8017350:	bf00      	nop
 8017352:	e000      	b.n	8017356 <icmp_input+0x1e2>
          goto icmperr;
 8017354:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017356:	6878      	ldr	r0, [r7, #4]
 8017358:	f002 fd36 	bl	8019dc8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801735c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801735e:	3728      	adds	r7, #40	; 0x28
 8017360:	46bd      	mov	sp, r7
 8017362:	bd80      	pop	{r7, pc}
 8017364:	2000df98 	.word	0x2000df98
 8017368:	2000dfac 	.word	0x2000dfac
 801736c:	08025f10 	.word	0x08025f10
 8017370:	08025f64 	.word	0x08025f64
 8017374:	08025f9c 	.word	0x08025f9c
 8017378:	08025fc4 	.word	0x08025fc4

0801737c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801737c:	b580      	push	{r7, lr}
 801737e:	b082      	sub	sp, #8
 8017380:	af00      	add	r7, sp, #0
 8017382:	6078      	str	r0, [r7, #4]
 8017384:	460b      	mov	r3, r1
 8017386:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017388:	78fb      	ldrb	r3, [r7, #3]
 801738a:	461a      	mov	r2, r3
 801738c:	2103      	movs	r1, #3
 801738e:	6878      	ldr	r0, [r7, #4]
 8017390:	f000 f814 	bl	80173bc <icmp_send_response>
}
 8017394:	bf00      	nop
 8017396:	3708      	adds	r7, #8
 8017398:	46bd      	mov	sp, r7
 801739a:	bd80      	pop	{r7, pc}

0801739c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801739c:	b580      	push	{r7, lr}
 801739e:	b082      	sub	sp, #8
 80173a0:	af00      	add	r7, sp, #0
 80173a2:	6078      	str	r0, [r7, #4]
 80173a4:	460b      	mov	r3, r1
 80173a6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80173a8:	78fb      	ldrb	r3, [r7, #3]
 80173aa:	461a      	mov	r2, r3
 80173ac:	210b      	movs	r1, #11
 80173ae:	6878      	ldr	r0, [r7, #4]
 80173b0:	f000 f804 	bl	80173bc <icmp_send_response>
}
 80173b4:	bf00      	nop
 80173b6:	3708      	adds	r7, #8
 80173b8:	46bd      	mov	sp, r7
 80173ba:	bd80      	pop	{r7, pc}

080173bc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80173bc:	b580      	push	{r7, lr}
 80173be:	b08c      	sub	sp, #48	; 0x30
 80173c0:	af04      	add	r7, sp, #16
 80173c2:	6078      	str	r0, [r7, #4]
 80173c4:	460b      	mov	r3, r1
 80173c6:	70fb      	strb	r3, [r7, #3]
 80173c8:	4613      	mov	r3, r2
 80173ca:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80173cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80173d0:	2124      	movs	r1, #36	; 0x24
 80173d2:	2022      	movs	r0, #34	; 0x22
 80173d4:	f002 fa18 	bl	8019808 <pbuf_alloc>
 80173d8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80173da:	69fb      	ldr	r3, [r7, #28]
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d04c      	beq.n	801747a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80173e0:	69fb      	ldr	r3, [r7, #28]
 80173e2:	895b      	ldrh	r3, [r3, #10]
 80173e4:	2b23      	cmp	r3, #35	; 0x23
 80173e6:	d806      	bhi.n	80173f6 <icmp_send_response+0x3a>
 80173e8:	4b26      	ldr	r3, [pc, #152]	; (8017484 <icmp_send_response+0xc8>)
 80173ea:	f240 1269 	movw	r2, #361	; 0x169
 80173ee:	4926      	ldr	r1, [pc, #152]	; (8017488 <icmp_send_response+0xcc>)
 80173f0:	4826      	ldr	r0, [pc, #152]	; (801748c <icmp_send_response+0xd0>)
 80173f2:	f00c fdf9 	bl	8023fe8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	685b      	ldr	r3, [r3, #4]
 80173fa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80173fc:	69fb      	ldr	r3, [r7, #28]
 80173fe:	685b      	ldr	r3, [r3, #4]
 8017400:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017402:	697b      	ldr	r3, [r7, #20]
 8017404:	78fa      	ldrb	r2, [r7, #3]
 8017406:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017408:	697b      	ldr	r3, [r7, #20]
 801740a:	78ba      	ldrb	r2, [r7, #2]
 801740c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801740e:	697b      	ldr	r3, [r7, #20]
 8017410:	2200      	movs	r2, #0
 8017412:	711a      	strb	r2, [r3, #4]
 8017414:	2200      	movs	r2, #0
 8017416:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017418:	697b      	ldr	r3, [r7, #20]
 801741a:	2200      	movs	r2, #0
 801741c:	719a      	strb	r2, [r3, #6]
 801741e:	2200      	movs	r2, #0
 8017420:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017422:	69fb      	ldr	r3, [r7, #28]
 8017424:	685b      	ldr	r3, [r3, #4]
 8017426:	f103 0008 	add.w	r0, r3, #8
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	685b      	ldr	r3, [r3, #4]
 801742e:	221c      	movs	r2, #28
 8017430:	4619      	mov	r1, r3
 8017432:	f00c fd1e 	bl	8023e72 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017436:	69bb      	ldr	r3, [r7, #24]
 8017438:	68db      	ldr	r3, [r3, #12]
 801743a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801743c:	f107 030c 	add.w	r3, r7, #12
 8017440:	4618      	mov	r0, r3
 8017442:	f000 f83f 	bl	80174c4 <ip4_route>
 8017446:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017448:	693b      	ldr	r3, [r7, #16]
 801744a:	2b00      	cmp	r3, #0
 801744c:	d011      	beq.n	8017472 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801744e:	697b      	ldr	r3, [r7, #20]
 8017450:	2200      	movs	r2, #0
 8017452:	709a      	strb	r2, [r3, #2]
 8017454:	2200      	movs	r2, #0
 8017456:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017458:	f107 020c 	add.w	r2, r7, #12
 801745c:	693b      	ldr	r3, [r7, #16]
 801745e:	9302      	str	r3, [sp, #8]
 8017460:	2301      	movs	r3, #1
 8017462:	9301      	str	r3, [sp, #4]
 8017464:	2300      	movs	r3, #0
 8017466:	9300      	str	r3, [sp, #0]
 8017468:	23ff      	movs	r3, #255	; 0xff
 801746a:	2100      	movs	r1, #0
 801746c:	69f8      	ldr	r0, [r7, #28]
 801746e:	f000 fa03 	bl	8017878 <ip4_output_if>
  }
  pbuf_free(q);
 8017472:	69f8      	ldr	r0, [r7, #28]
 8017474:	f002 fca8 	bl	8019dc8 <pbuf_free>
 8017478:	e000      	b.n	801747c <icmp_send_response+0xc0>
    return;
 801747a:	bf00      	nop
}
 801747c:	3720      	adds	r7, #32
 801747e:	46bd      	mov	sp, r7
 8017480:	bd80      	pop	{r7, pc}
 8017482:	bf00      	nop
 8017484:	08025f10 	.word	0x08025f10
 8017488:	08025ff8 	.word	0x08025ff8
 801748c:	08025f9c 	.word	0x08025f9c

08017490 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8017490:	b580      	push	{r7, lr}
 8017492:	b082      	sub	sp, #8
 8017494:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8017496:	2300      	movs	r3, #0
 8017498:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801749a:	f003 f9f1 	bl	801a880 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801749e:	f001 f9ff 	bl	80188a0 <mem_init>
  memp_init();
 80174a2:	f001 fd5b 	bl	8018f5c <memp_init>
  pbuf_init();
  netif_init();
 80174a6:	f001 fe8b 	bl	80191c0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80174aa:	f009 fe25 	bl	80210f8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80174ae:	f003 fa71 	bl	801a994 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 80174b2:	f7fe fb4b 	bl	8015b4c <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80174b6:	f009 fd67 	bl	8020f88 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80174ba:	bf00      	nop
 80174bc:	3708      	adds	r7, #8
 80174be:	46bd      	mov	sp, r7
 80174c0:	bd80      	pop	{r7, pc}
	...

080174c4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80174c4:	b480      	push	{r7}
 80174c6:	b085      	sub	sp, #20
 80174c8:	af00      	add	r7, sp, #0
 80174ca:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80174cc:	4b33      	ldr	r3, [pc, #204]	; (801759c <ip4_route+0xd8>)
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	60fb      	str	r3, [r7, #12]
 80174d2:	e036      	b.n	8017542 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80174d4:	68fb      	ldr	r3, [r7, #12]
 80174d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80174da:	f003 0301 	and.w	r3, r3, #1
 80174de:	b2db      	uxtb	r3, r3
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d02b      	beq.n	801753c <ip4_route+0x78>
 80174e4:	68fb      	ldr	r3, [r7, #12]
 80174e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80174ea:	089b      	lsrs	r3, r3, #2
 80174ec:	f003 0301 	and.w	r3, r3, #1
 80174f0:	b2db      	uxtb	r3, r3
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d022      	beq.n	801753c <ip4_route+0x78>
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	3304      	adds	r3, #4
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d01d      	beq.n	801753c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	681a      	ldr	r2, [r3, #0]
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	3304      	adds	r3, #4
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	405a      	eors	r2, r3
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	3308      	adds	r3, #8
 8017510:	681b      	ldr	r3, [r3, #0]
 8017512:	4013      	ands	r3, r2
 8017514:	2b00      	cmp	r3, #0
 8017516:	d101      	bne.n	801751c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	e038      	b.n	801758e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017522:	f003 0302 	and.w	r3, r3, #2
 8017526:	2b00      	cmp	r3, #0
 8017528:	d108      	bne.n	801753c <ip4_route+0x78>
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	681a      	ldr	r2, [r3, #0]
 801752e:	68fb      	ldr	r3, [r7, #12]
 8017530:	330c      	adds	r3, #12
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	429a      	cmp	r2, r3
 8017536:	d101      	bne.n	801753c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017538:	68fb      	ldr	r3, [r7, #12]
 801753a:	e028      	b.n	801758e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	681b      	ldr	r3, [r3, #0]
 8017540:	60fb      	str	r3, [r7, #12]
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d1c5      	bne.n	80174d4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017548:	4b15      	ldr	r3, [pc, #84]	; (80175a0 <ip4_route+0xdc>)
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	2b00      	cmp	r3, #0
 801754e:	d01a      	beq.n	8017586 <ip4_route+0xc2>
 8017550:	4b13      	ldr	r3, [pc, #76]	; (80175a0 <ip4_route+0xdc>)
 8017552:	681b      	ldr	r3, [r3, #0]
 8017554:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017558:	f003 0301 	and.w	r3, r3, #1
 801755c:	2b00      	cmp	r3, #0
 801755e:	d012      	beq.n	8017586 <ip4_route+0xc2>
 8017560:	4b0f      	ldr	r3, [pc, #60]	; (80175a0 <ip4_route+0xdc>)
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017568:	f003 0304 	and.w	r3, r3, #4
 801756c:	2b00      	cmp	r3, #0
 801756e:	d00a      	beq.n	8017586 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017570:	4b0b      	ldr	r3, [pc, #44]	; (80175a0 <ip4_route+0xdc>)
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	3304      	adds	r3, #4
 8017576:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017578:	2b00      	cmp	r3, #0
 801757a:	d004      	beq.n	8017586 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	b2db      	uxtb	r3, r3
 8017582:	2b7f      	cmp	r3, #127	; 0x7f
 8017584:	d101      	bne.n	801758a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017586:	2300      	movs	r3, #0
 8017588:	e001      	b.n	801758e <ip4_route+0xca>
  }

  return netif_default;
 801758a:	4b05      	ldr	r3, [pc, #20]	; (80175a0 <ip4_route+0xdc>)
 801758c:	681b      	ldr	r3, [r3, #0]
}
 801758e:	4618      	mov	r0, r3
 8017590:	3714      	adds	r7, #20
 8017592:	46bd      	mov	sp, r7
 8017594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017598:	4770      	bx	lr
 801759a:	bf00      	nop
 801759c:	20011804 	.word	0x20011804
 80175a0:	20011808 	.word	0x20011808

080175a4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80175a4:	b580      	push	{r7, lr}
 80175a6:	b082      	sub	sp, #8
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80175b2:	f003 0301 	and.w	r3, r3, #1
 80175b6:	b2db      	uxtb	r3, r3
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d016      	beq.n	80175ea <ip4_input_accept+0x46>
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	3304      	adds	r3, #4
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d011      	beq.n	80175ea <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80175c6:	4b0b      	ldr	r3, [pc, #44]	; (80175f4 <ip4_input_accept+0x50>)
 80175c8:	695a      	ldr	r2, [r3, #20]
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	3304      	adds	r3, #4
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	429a      	cmp	r2, r3
 80175d2:	d008      	beq.n	80175e6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80175d4:	4b07      	ldr	r3, [pc, #28]	; (80175f4 <ip4_input_accept+0x50>)
 80175d6:	695b      	ldr	r3, [r3, #20]
 80175d8:	6879      	ldr	r1, [r7, #4]
 80175da:	4618      	mov	r0, r3
 80175dc:	f000 fa24 	bl	8017a28 <ip4_addr_isbroadcast_u32>
 80175e0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d001      	beq.n	80175ea <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80175e6:	2301      	movs	r3, #1
 80175e8:	e000      	b.n	80175ec <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80175ea:	2300      	movs	r3, #0
}
 80175ec:	4618      	mov	r0, r3
 80175ee:	3708      	adds	r7, #8
 80175f0:	46bd      	mov	sp, r7
 80175f2:	bd80      	pop	{r7, pc}
 80175f4:	2000df98 	.word	0x2000df98

080175f8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80175f8:	b580      	push	{r7, lr}
 80175fa:	b088      	sub	sp, #32
 80175fc:	af00      	add	r7, sp, #0
 80175fe:	6078      	str	r0, [r7, #4]
 8017600:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8017602:	2301      	movs	r3, #1
 8017604:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	685b      	ldr	r3, [r3, #4]
 801760a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801760c:	69fb      	ldr	r3, [r7, #28]
 801760e:	781b      	ldrb	r3, [r3, #0]
 8017610:	091b      	lsrs	r3, r3, #4
 8017612:	b2db      	uxtb	r3, r3
 8017614:	2b04      	cmp	r3, #4
 8017616:	d004      	beq.n	8017622 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017618:	6878      	ldr	r0, [r7, #4]
 801761a:	f002 fbd5 	bl	8019dc8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801761e:	2300      	movs	r3, #0
 8017620:	e121      	b.n	8017866 <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017622:	69fb      	ldr	r3, [r7, #28]
 8017624:	781b      	ldrb	r3, [r3, #0]
 8017626:	f003 030f 	and.w	r3, r3, #15
 801762a:	b2db      	uxtb	r3, r3
 801762c:	009b      	lsls	r3, r3, #2
 801762e:	b2db      	uxtb	r3, r3
 8017630:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017632:	69fb      	ldr	r3, [r7, #28]
 8017634:	885b      	ldrh	r3, [r3, #2]
 8017636:	b29b      	uxth	r3, r3
 8017638:	4618      	mov	r0, r3
 801763a:	f7fc fbb3 	bl	8013da4 <lwip_htons>
 801763e:	4603      	mov	r3, r0
 8017640:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	891b      	ldrh	r3, [r3, #8]
 8017646:	8a3a      	ldrh	r2, [r7, #16]
 8017648:	429a      	cmp	r2, r3
 801764a:	d204      	bcs.n	8017656 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801764c:	8a3b      	ldrh	r3, [r7, #16]
 801764e:	4619      	mov	r1, r3
 8017650:	6878      	ldr	r0, [r7, #4]
 8017652:	f002 fa33 	bl	8019abc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	895b      	ldrh	r3, [r3, #10]
 801765a:	8a7a      	ldrh	r2, [r7, #18]
 801765c:	429a      	cmp	r2, r3
 801765e:	d807      	bhi.n	8017670 <ip4_input+0x78>
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	891b      	ldrh	r3, [r3, #8]
 8017664:	8a3a      	ldrh	r2, [r7, #16]
 8017666:	429a      	cmp	r2, r3
 8017668:	d802      	bhi.n	8017670 <ip4_input+0x78>
 801766a:	8a7b      	ldrh	r3, [r7, #18]
 801766c:	2b13      	cmp	r3, #19
 801766e:	d804      	bhi.n	801767a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017670:	6878      	ldr	r0, [r7, #4]
 8017672:	f002 fba9 	bl	8019dc8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017676:	2300      	movs	r3, #0
 8017678:	e0f5      	b.n	8017866 <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801767a:	69fb      	ldr	r3, [r7, #28]
 801767c:	691b      	ldr	r3, [r3, #16]
 801767e:	4a7c      	ldr	r2, [pc, #496]	; (8017870 <ip4_input+0x278>)
 8017680:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017682:	69fb      	ldr	r3, [r7, #28]
 8017684:	68db      	ldr	r3, [r3, #12]
 8017686:	4a7a      	ldr	r2, [pc, #488]	; (8017870 <ip4_input+0x278>)
 8017688:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801768a:	4b79      	ldr	r3, [pc, #484]	; (8017870 <ip4_input+0x278>)
 801768c:	695b      	ldr	r3, [r3, #20]
 801768e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017692:	2be0      	cmp	r3, #224	; 0xe0
 8017694:	d112      	bne.n	80176bc <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017696:	683b      	ldr	r3, [r7, #0]
 8017698:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801769c:	f003 0301 	and.w	r3, r3, #1
 80176a0:	b2db      	uxtb	r3, r3
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d007      	beq.n	80176b6 <ip4_input+0xbe>
 80176a6:	683b      	ldr	r3, [r7, #0]
 80176a8:	3304      	adds	r3, #4
 80176aa:	681b      	ldr	r3, [r3, #0]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d002      	beq.n	80176b6 <ip4_input+0xbe>
      netif = inp;
 80176b0:	683b      	ldr	r3, [r7, #0]
 80176b2:	61bb      	str	r3, [r7, #24]
 80176b4:	e02a      	b.n	801770c <ip4_input+0x114>
    } else {
      netif = NULL;
 80176b6:	2300      	movs	r3, #0
 80176b8:	61bb      	str	r3, [r7, #24]
 80176ba:	e027      	b.n	801770c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80176bc:	6838      	ldr	r0, [r7, #0]
 80176be:	f7ff ff71 	bl	80175a4 <ip4_input_accept>
 80176c2:	4603      	mov	r3, r0
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d002      	beq.n	80176ce <ip4_input+0xd6>
      netif = inp;
 80176c8:	683b      	ldr	r3, [r7, #0]
 80176ca:	61bb      	str	r3, [r7, #24]
 80176cc:	e01e      	b.n	801770c <ip4_input+0x114>
    } else {
      netif = NULL;
 80176ce:	2300      	movs	r3, #0
 80176d0:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80176d2:	4b67      	ldr	r3, [pc, #412]	; (8017870 <ip4_input+0x278>)
 80176d4:	695b      	ldr	r3, [r3, #20]
 80176d6:	b2db      	uxtb	r3, r3
 80176d8:	2b7f      	cmp	r3, #127	; 0x7f
 80176da:	d017      	beq.n	801770c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80176dc:	4b65      	ldr	r3, [pc, #404]	; (8017874 <ip4_input+0x27c>)
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	61bb      	str	r3, [r7, #24]
 80176e2:	e00e      	b.n	8017702 <ip4_input+0x10a>
          if (netif == inp) {
 80176e4:	69ba      	ldr	r2, [r7, #24]
 80176e6:	683b      	ldr	r3, [r7, #0]
 80176e8:	429a      	cmp	r2, r3
 80176ea:	d006      	beq.n	80176fa <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80176ec:	69b8      	ldr	r0, [r7, #24]
 80176ee:	f7ff ff59 	bl	80175a4 <ip4_input_accept>
 80176f2:	4603      	mov	r3, r0
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d108      	bne.n	801770a <ip4_input+0x112>
 80176f8:	e000      	b.n	80176fc <ip4_input+0x104>
            continue;
 80176fa:	bf00      	nop
        NETIF_FOREACH(netif) {
 80176fc:	69bb      	ldr	r3, [r7, #24]
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	61bb      	str	r3, [r7, #24]
 8017702:	69bb      	ldr	r3, [r7, #24]
 8017704:	2b00      	cmp	r3, #0
 8017706:	d1ed      	bne.n	80176e4 <ip4_input+0xec>
 8017708:	e000      	b.n	801770c <ip4_input+0x114>
            break;
 801770a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801770c:	69bb      	ldr	r3, [r7, #24]
 801770e:	2b00      	cmp	r3, #0
 8017710:	d111      	bne.n	8017736 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8017712:	69fb      	ldr	r3, [r7, #28]
 8017714:	7a5b      	ldrb	r3, [r3, #9]
 8017716:	2b11      	cmp	r3, #17
 8017718:	d10d      	bne.n	8017736 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801771a:	8a7b      	ldrh	r3, [r7, #18]
 801771c:	69fa      	ldr	r2, [r7, #28]
 801771e:	4413      	add	r3, r2
 8017720:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	885b      	ldrh	r3, [r3, #2]
 8017726:	b29b      	uxth	r3, r3
 8017728:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801772c:	d103      	bne.n	8017736 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801772e:	683b      	ldr	r3, [r7, #0]
 8017730:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8017732:	2300      	movs	r3, #0
 8017734:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8017736:	697b      	ldr	r3, [r7, #20]
 8017738:	2b00      	cmp	r3, #0
 801773a:	d017      	beq.n	801776c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801773c:	4b4c      	ldr	r3, [pc, #304]	; (8017870 <ip4_input+0x278>)
 801773e:	691b      	ldr	r3, [r3, #16]
 8017740:	2b00      	cmp	r3, #0
 8017742:	d013      	beq.n	801776c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017744:	4b4a      	ldr	r3, [pc, #296]	; (8017870 <ip4_input+0x278>)
 8017746:	691b      	ldr	r3, [r3, #16]
 8017748:	6839      	ldr	r1, [r7, #0]
 801774a:	4618      	mov	r0, r3
 801774c:	f000 f96c 	bl	8017a28 <ip4_addr_isbroadcast_u32>
 8017750:	4603      	mov	r3, r0
 8017752:	2b00      	cmp	r3, #0
 8017754:	d105      	bne.n	8017762 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017756:	4b46      	ldr	r3, [pc, #280]	; (8017870 <ip4_input+0x278>)
 8017758:	691b      	ldr	r3, [r3, #16]
 801775a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801775e:	2be0      	cmp	r3, #224	; 0xe0
 8017760:	d104      	bne.n	801776c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017762:	6878      	ldr	r0, [r7, #4]
 8017764:	f002 fb30 	bl	8019dc8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017768:	2300      	movs	r3, #0
 801776a:	e07c      	b.n	8017866 <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801776c:	69bb      	ldr	r3, [r7, #24]
 801776e:	2b00      	cmp	r3, #0
 8017770:	d104      	bne.n	801777c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017772:	6878      	ldr	r0, [r7, #4]
 8017774:	f002 fb28 	bl	8019dc8 <pbuf_free>
    return ERR_OK;
 8017778:	2300      	movs	r3, #0
 801777a:	e074      	b.n	8017866 <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801777c:	69fb      	ldr	r3, [r7, #28]
 801777e:	88db      	ldrh	r3, [r3, #6]
 8017780:	b29b      	uxth	r3, r3
 8017782:	461a      	mov	r2, r3
 8017784:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017788:	4013      	ands	r3, r2
 801778a:	2b00      	cmp	r3, #0
 801778c:	d00b      	beq.n	80177a6 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801778e:	6878      	ldr	r0, [r7, #4]
 8017790:	f000 fc90 	bl	80180b4 <ip4_reass>
 8017794:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	2b00      	cmp	r3, #0
 801779a:	d101      	bne.n	80177a0 <ip4_input+0x1a8>
      return ERR_OK;
 801779c:	2300      	movs	r3, #0
 801779e:	e062      	b.n	8017866 <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	685b      	ldr	r3, [r3, #4]
 80177a4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80177a6:	4a32      	ldr	r2, [pc, #200]	; (8017870 <ip4_input+0x278>)
 80177a8:	69bb      	ldr	r3, [r7, #24]
 80177aa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80177ac:	4a30      	ldr	r2, [pc, #192]	; (8017870 <ip4_input+0x278>)
 80177ae:	683b      	ldr	r3, [r7, #0]
 80177b0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80177b2:	4a2f      	ldr	r2, [pc, #188]	; (8017870 <ip4_input+0x278>)
 80177b4:	69fb      	ldr	r3, [r7, #28]
 80177b6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80177b8:	69fb      	ldr	r3, [r7, #28]
 80177ba:	781b      	ldrb	r3, [r3, #0]
 80177bc:	f003 030f 	and.w	r3, r3, #15
 80177c0:	b2db      	uxtb	r3, r3
 80177c2:	009b      	lsls	r3, r3, #2
 80177c4:	b2db      	uxtb	r3, r3
 80177c6:	b29a      	uxth	r2, r3
 80177c8:	4b29      	ldr	r3, [pc, #164]	; (8017870 <ip4_input+0x278>)
 80177ca:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80177cc:	8a7b      	ldrh	r3, [r7, #18]
 80177ce:	4619      	mov	r1, r3
 80177d0:	6878      	ldr	r0, [r7, #4]
 80177d2:	f002 fa73 	bl	8019cbc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80177d6:	69fb      	ldr	r3, [r7, #28]
 80177d8:	7a5b      	ldrb	r3, [r3, #9]
 80177da:	2b06      	cmp	r3, #6
 80177dc:	d009      	beq.n	80177f2 <ip4_input+0x1fa>
 80177de:	2b11      	cmp	r3, #17
 80177e0:	d002      	beq.n	80177e8 <ip4_input+0x1f0>
 80177e2:	2b01      	cmp	r3, #1
 80177e4:	d00a      	beq.n	80177fc <ip4_input+0x204>
 80177e6:	e00e      	b.n	8017806 <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80177e8:	6839      	ldr	r1, [r7, #0]
 80177ea:	6878      	ldr	r0, [r7, #4]
 80177ec:	f009 fd32 	bl	8021254 <udp_input>
        break;
 80177f0:	e026      	b.n	8017840 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80177f2:	6839      	ldr	r1, [r7, #0]
 80177f4:	6878      	ldr	r0, [r7, #4]
 80177f6:	f004 ff2b 	bl	801c650 <tcp_input>
        break;
 80177fa:	e021      	b.n	8017840 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80177fc:	6839      	ldr	r1, [r7, #0]
 80177fe:	6878      	ldr	r0, [r7, #4]
 8017800:	f7ff fcb8 	bl	8017174 <icmp_input>
        break;
 8017804:	e01c      	b.n	8017840 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017806:	4b1a      	ldr	r3, [pc, #104]	; (8017870 <ip4_input+0x278>)
 8017808:	695b      	ldr	r3, [r3, #20]
 801780a:	69b9      	ldr	r1, [r7, #24]
 801780c:	4618      	mov	r0, r3
 801780e:	f000 f90b 	bl	8017a28 <ip4_addr_isbroadcast_u32>
 8017812:	4603      	mov	r3, r0
 8017814:	2b00      	cmp	r3, #0
 8017816:	d10f      	bne.n	8017838 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017818:	4b15      	ldr	r3, [pc, #84]	; (8017870 <ip4_input+0x278>)
 801781a:	695b      	ldr	r3, [r3, #20]
 801781c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017820:	2be0      	cmp	r3, #224	; 0xe0
 8017822:	d009      	beq.n	8017838 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017824:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017828:	4619      	mov	r1, r3
 801782a:	6878      	ldr	r0, [r7, #4]
 801782c:	f002 fab9 	bl	8019da2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017830:	2102      	movs	r1, #2
 8017832:	6878      	ldr	r0, [r7, #4]
 8017834:	f7ff fda2 	bl	801737c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017838:	6878      	ldr	r0, [r7, #4]
 801783a:	f002 fac5 	bl	8019dc8 <pbuf_free>
        break;
 801783e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017840:	4b0b      	ldr	r3, [pc, #44]	; (8017870 <ip4_input+0x278>)
 8017842:	2200      	movs	r2, #0
 8017844:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017846:	4b0a      	ldr	r3, [pc, #40]	; (8017870 <ip4_input+0x278>)
 8017848:	2200      	movs	r2, #0
 801784a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801784c:	4b08      	ldr	r3, [pc, #32]	; (8017870 <ip4_input+0x278>)
 801784e:	2200      	movs	r2, #0
 8017850:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017852:	4b07      	ldr	r3, [pc, #28]	; (8017870 <ip4_input+0x278>)
 8017854:	2200      	movs	r2, #0
 8017856:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017858:	4b05      	ldr	r3, [pc, #20]	; (8017870 <ip4_input+0x278>)
 801785a:	2200      	movs	r2, #0
 801785c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801785e:	4b04      	ldr	r3, [pc, #16]	; (8017870 <ip4_input+0x278>)
 8017860:	2200      	movs	r2, #0
 8017862:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017864:	2300      	movs	r3, #0
}
 8017866:	4618      	mov	r0, r3
 8017868:	3720      	adds	r7, #32
 801786a:	46bd      	mov	sp, r7
 801786c:	bd80      	pop	{r7, pc}
 801786e:	bf00      	nop
 8017870:	2000df98 	.word	0x2000df98
 8017874:	20011804 	.word	0x20011804

08017878 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017878:	b580      	push	{r7, lr}
 801787a:	b08a      	sub	sp, #40	; 0x28
 801787c:	af04      	add	r7, sp, #16
 801787e:	60f8      	str	r0, [r7, #12]
 8017880:	60b9      	str	r1, [r7, #8]
 8017882:	607a      	str	r2, [r7, #4]
 8017884:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017886:	68bb      	ldr	r3, [r7, #8]
 8017888:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	2b00      	cmp	r3, #0
 801788e:	d009      	beq.n	80178a4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017890:	68bb      	ldr	r3, [r7, #8]
 8017892:	2b00      	cmp	r3, #0
 8017894:	d003      	beq.n	801789e <ip4_output_if+0x26>
 8017896:	68bb      	ldr	r3, [r7, #8]
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	2b00      	cmp	r3, #0
 801789c:	d102      	bne.n	80178a4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178a0:	3304      	adds	r3, #4
 80178a2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80178a4:	78fa      	ldrb	r2, [r7, #3]
 80178a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178a8:	9302      	str	r3, [sp, #8]
 80178aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80178ae:	9301      	str	r3, [sp, #4]
 80178b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80178b4:	9300      	str	r3, [sp, #0]
 80178b6:	4613      	mov	r3, r2
 80178b8:	687a      	ldr	r2, [r7, #4]
 80178ba:	6979      	ldr	r1, [r7, #20]
 80178bc:	68f8      	ldr	r0, [r7, #12]
 80178be:	f000 f805 	bl	80178cc <ip4_output_if_src>
 80178c2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80178c4:	4618      	mov	r0, r3
 80178c6:	3718      	adds	r7, #24
 80178c8:	46bd      	mov	sp, r7
 80178ca:	bd80      	pop	{r7, pc}

080178cc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80178cc:	b580      	push	{r7, lr}
 80178ce:	b088      	sub	sp, #32
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	60f8      	str	r0, [r7, #12]
 80178d4:	60b9      	str	r1, [r7, #8]
 80178d6:	607a      	str	r2, [r7, #4]
 80178d8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	7b9b      	ldrb	r3, [r3, #14]
 80178de:	2b01      	cmp	r3, #1
 80178e0:	d006      	beq.n	80178f0 <ip4_output_if_src+0x24>
 80178e2:	4b4b      	ldr	r3, [pc, #300]	; (8017a10 <ip4_output_if_src+0x144>)
 80178e4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80178e8:	494a      	ldr	r1, [pc, #296]	; (8017a14 <ip4_output_if_src+0x148>)
 80178ea:	484b      	ldr	r0, [pc, #300]	; (8017a18 <ip4_output_if_src+0x14c>)
 80178ec:	f00c fb7c 	bl	8023fe8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d060      	beq.n	80179b8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80178f6:	2314      	movs	r3, #20
 80178f8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80178fa:	2114      	movs	r1, #20
 80178fc:	68f8      	ldr	r0, [r7, #12]
 80178fe:	f002 f9cd 	bl	8019c9c <pbuf_add_header>
 8017902:	4603      	mov	r3, r0
 8017904:	2b00      	cmp	r3, #0
 8017906:	d002      	beq.n	801790e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017908:	f06f 0301 	mvn.w	r3, #1
 801790c:	e07c      	b.n	8017a08 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	685b      	ldr	r3, [r3, #4]
 8017912:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	895b      	ldrh	r3, [r3, #10]
 8017918:	2b13      	cmp	r3, #19
 801791a:	d806      	bhi.n	801792a <ip4_output_if_src+0x5e>
 801791c:	4b3c      	ldr	r3, [pc, #240]	; (8017a10 <ip4_output_if_src+0x144>)
 801791e:	f240 3289 	movw	r2, #905	; 0x389
 8017922:	493e      	ldr	r1, [pc, #248]	; (8017a1c <ip4_output_if_src+0x150>)
 8017924:	483c      	ldr	r0, [pc, #240]	; (8017a18 <ip4_output_if_src+0x14c>)
 8017926:	f00c fb5f 	bl	8023fe8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801792a:	69fb      	ldr	r3, [r7, #28]
 801792c:	78fa      	ldrb	r2, [r7, #3]
 801792e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017930:	69fb      	ldr	r3, [r7, #28]
 8017932:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017936:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	681a      	ldr	r2, [r3, #0]
 801793c:	69fb      	ldr	r3, [r7, #28]
 801793e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017940:	8b7b      	ldrh	r3, [r7, #26]
 8017942:	089b      	lsrs	r3, r3, #2
 8017944:	b29b      	uxth	r3, r3
 8017946:	b2db      	uxtb	r3, r3
 8017948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801794c:	b2da      	uxtb	r2, r3
 801794e:	69fb      	ldr	r3, [r7, #28]
 8017950:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017952:	69fb      	ldr	r3, [r7, #28]
 8017954:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017958:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	891b      	ldrh	r3, [r3, #8]
 801795e:	4618      	mov	r0, r3
 8017960:	f7fc fa20 	bl	8013da4 <lwip_htons>
 8017964:	4603      	mov	r3, r0
 8017966:	461a      	mov	r2, r3
 8017968:	69fb      	ldr	r3, [r7, #28]
 801796a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801796c:	69fb      	ldr	r3, [r7, #28]
 801796e:	2200      	movs	r2, #0
 8017970:	719a      	strb	r2, [r3, #6]
 8017972:	2200      	movs	r2, #0
 8017974:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017976:	4b2a      	ldr	r3, [pc, #168]	; (8017a20 <ip4_output_if_src+0x154>)
 8017978:	881b      	ldrh	r3, [r3, #0]
 801797a:	4618      	mov	r0, r3
 801797c:	f7fc fa12 	bl	8013da4 <lwip_htons>
 8017980:	4603      	mov	r3, r0
 8017982:	461a      	mov	r2, r3
 8017984:	69fb      	ldr	r3, [r7, #28]
 8017986:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017988:	4b25      	ldr	r3, [pc, #148]	; (8017a20 <ip4_output_if_src+0x154>)
 801798a:	881b      	ldrh	r3, [r3, #0]
 801798c:	3301      	adds	r3, #1
 801798e:	b29a      	uxth	r2, r3
 8017990:	4b23      	ldr	r3, [pc, #140]	; (8017a20 <ip4_output_if_src+0x154>)
 8017992:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017994:	68bb      	ldr	r3, [r7, #8]
 8017996:	2b00      	cmp	r3, #0
 8017998:	d104      	bne.n	80179a4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801799a:	4b22      	ldr	r3, [pc, #136]	; (8017a24 <ip4_output_if_src+0x158>)
 801799c:	681a      	ldr	r2, [r3, #0]
 801799e:	69fb      	ldr	r3, [r7, #28]
 80179a0:	60da      	str	r2, [r3, #12]
 80179a2:	e003      	b.n	80179ac <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80179a4:	68bb      	ldr	r3, [r7, #8]
 80179a6:	681a      	ldr	r2, [r3, #0]
 80179a8:	69fb      	ldr	r3, [r7, #28]
 80179aa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80179ac:	69fb      	ldr	r3, [r7, #28]
 80179ae:	2200      	movs	r2, #0
 80179b0:	729a      	strb	r2, [r3, #10]
 80179b2:	2200      	movs	r2, #0
 80179b4:	72da      	strb	r2, [r3, #11]
 80179b6:	e00f      	b.n	80179d8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80179b8:	68fb      	ldr	r3, [r7, #12]
 80179ba:	895b      	ldrh	r3, [r3, #10]
 80179bc:	2b13      	cmp	r3, #19
 80179be:	d802      	bhi.n	80179c6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80179c0:	f06f 0301 	mvn.w	r3, #1
 80179c4:	e020      	b.n	8017a08 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	685b      	ldr	r3, [r3, #4]
 80179ca:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80179cc:	69fb      	ldr	r3, [r7, #28]
 80179ce:	691b      	ldr	r3, [r3, #16]
 80179d0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80179d2:	f107 0314 	add.w	r3, r7, #20
 80179d6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80179d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d00c      	beq.n	80179fa <ip4_output_if_src+0x12e>
 80179e0:	68fb      	ldr	r3, [r7, #12]
 80179e2:	891a      	ldrh	r2, [r3, #8]
 80179e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80179e8:	429a      	cmp	r2, r3
 80179ea:	d906      	bls.n	80179fa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80179ec:	687a      	ldr	r2, [r7, #4]
 80179ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80179f0:	68f8      	ldr	r0, [r7, #12]
 80179f2:	f000 fd4b 	bl	801848c <ip4_frag>
 80179f6:	4603      	mov	r3, r0
 80179f8:	e006      	b.n	8017a08 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80179fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179fc:	695b      	ldr	r3, [r3, #20]
 80179fe:	687a      	ldr	r2, [r7, #4]
 8017a00:	68f9      	ldr	r1, [r7, #12]
 8017a02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a04:	4798      	blx	r3
 8017a06:	4603      	mov	r3, r0
}
 8017a08:	4618      	mov	r0, r3
 8017a0a:	3720      	adds	r7, #32
 8017a0c:	46bd      	mov	sp, r7
 8017a0e:	bd80      	pop	{r7, pc}
 8017a10:	08026024 	.word	0x08026024
 8017a14:	08026074 	.word	0x08026074
 8017a18:	08026080 	.word	0x08026080
 8017a1c:	080260a8 	.word	0x080260a8
 8017a20:	20008a16 	.word	0x20008a16
 8017a24:	08028a28 	.word	0x08028a28

08017a28 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017a28:	b480      	push	{r7}
 8017a2a:	b085      	sub	sp, #20
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	6078      	str	r0, [r7, #4]
 8017a30:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a3c:	d002      	beq.n	8017a44 <ip4_addr_isbroadcast_u32+0x1c>
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d101      	bne.n	8017a48 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017a44:	2301      	movs	r3, #1
 8017a46:	e02a      	b.n	8017a9e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017a48:	683b      	ldr	r3, [r7, #0]
 8017a4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017a4e:	f003 0302 	and.w	r3, r3, #2
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d101      	bne.n	8017a5a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017a56:	2300      	movs	r3, #0
 8017a58:	e021      	b.n	8017a9e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017a5a:	683b      	ldr	r3, [r7, #0]
 8017a5c:	3304      	adds	r3, #4
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	687a      	ldr	r2, [r7, #4]
 8017a62:	429a      	cmp	r2, r3
 8017a64:	d101      	bne.n	8017a6a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017a66:	2300      	movs	r3, #0
 8017a68:	e019      	b.n	8017a9e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017a6a:	68fa      	ldr	r2, [r7, #12]
 8017a6c:	683b      	ldr	r3, [r7, #0]
 8017a6e:	3304      	adds	r3, #4
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	405a      	eors	r2, r3
 8017a74:	683b      	ldr	r3, [r7, #0]
 8017a76:	3308      	adds	r3, #8
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	4013      	ands	r3, r2
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d10d      	bne.n	8017a9c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017a80:	683b      	ldr	r3, [r7, #0]
 8017a82:	3308      	adds	r3, #8
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	43da      	mvns	r2, r3
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017a8c:	683b      	ldr	r3, [r7, #0]
 8017a8e:	3308      	adds	r3, #8
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017a94:	429a      	cmp	r2, r3
 8017a96:	d101      	bne.n	8017a9c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017a98:	2301      	movs	r3, #1
 8017a9a:	e000      	b.n	8017a9e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017a9c:	2300      	movs	r3, #0
  }
}
 8017a9e:	4618      	mov	r0, r3
 8017aa0:	3714      	adds	r7, #20
 8017aa2:	46bd      	mov	sp, r7
 8017aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aa8:	4770      	bx	lr
	...

08017aac <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017aac:	b580      	push	{r7, lr}
 8017aae:	b084      	sub	sp, #16
 8017ab0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017ab6:	4b12      	ldr	r3, [pc, #72]	; (8017b00 <ip_reass_tmr+0x54>)
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017abc:	e018      	b.n	8017af0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017abe:	68fb      	ldr	r3, [r7, #12]
 8017ac0:	7fdb      	ldrb	r3, [r3, #31]
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d00b      	beq.n	8017ade <ip_reass_tmr+0x32>
      r->timer--;
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	7fdb      	ldrb	r3, [r3, #31]
 8017aca:	3b01      	subs	r3, #1
 8017acc:	b2da      	uxtb	r2, r3
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	60fb      	str	r3, [r7, #12]
 8017adc:	e008      	b.n	8017af0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017ae8:	68b9      	ldr	r1, [r7, #8]
 8017aea:	6878      	ldr	r0, [r7, #4]
 8017aec:	f000 f80a 	bl	8017b04 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d1e3      	bne.n	8017abe <ip_reass_tmr+0x12>
    }
  }
}
 8017af6:	bf00      	nop
 8017af8:	3710      	adds	r7, #16
 8017afa:	46bd      	mov	sp, r7
 8017afc:	bd80      	pop	{r7, pc}
 8017afe:	bf00      	nop
 8017b00:	20008a18 	.word	0x20008a18

08017b04 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017b04:	b580      	push	{r7, lr}
 8017b06:	b088      	sub	sp, #32
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	6078      	str	r0, [r7, #4]
 8017b0c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017b0e:	2300      	movs	r3, #0
 8017b10:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017b12:	683a      	ldr	r2, [r7, #0]
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	429a      	cmp	r2, r3
 8017b18:	d105      	bne.n	8017b26 <ip_reass_free_complete_datagram+0x22>
 8017b1a:	4b45      	ldr	r3, [pc, #276]	; (8017c30 <ip_reass_free_complete_datagram+0x12c>)
 8017b1c:	22ab      	movs	r2, #171	; 0xab
 8017b1e:	4945      	ldr	r1, [pc, #276]	; (8017c34 <ip_reass_free_complete_datagram+0x130>)
 8017b20:	4845      	ldr	r0, [pc, #276]	; (8017c38 <ip_reass_free_complete_datagram+0x134>)
 8017b22:	f00c fa61 	bl	8023fe8 <iprintf>
  if (prev != NULL) {
 8017b26:	683b      	ldr	r3, [r7, #0]
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d00a      	beq.n	8017b42 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017b2c:	683b      	ldr	r3, [r7, #0]
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	687a      	ldr	r2, [r7, #4]
 8017b32:	429a      	cmp	r2, r3
 8017b34:	d005      	beq.n	8017b42 <ip_reass_free_complete_datagram+0x3e>
 8017b36:	4b3e      	ldr	r3, [pc, #248]	; (8017c30 <ip_reass_free_complete_datagram+0x12c>)
 8017b38:	22ad      	movs	r2, #173	; 0xad
 8017b3a:	4940      	ldr	r1, [pc, #256]	; (8017c3c <ip_reass_free_complete_datagram+0x138>)
 8017b3c:	483e      	ldr	r0, [pc, #248]	; (8017c38 <ip_reass_free_complete_datagram+0x134>)
 8017b3e:	f00c fa53 	bl	8023fe8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	685b      	ldr	r3, [r3, #4]
 8017b46:	685b      	ldr	r3, [r3, #4]
 8017b48:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017b4a:	697b      	ldr	r3, [r7, #20]
 8017b4c:	889b      	ldrh	r3, [r3, #4]
 8017b4e:	b29b      	uxth	r3, r3
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d12a      	bne.n	8017baa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	685b      	ldr	r3, [r3, #4]
 8017b58:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017b5a:	697b      	ldr	r3, [r7, #20]
 8017b5c:	681a      	ldr	r2, [r3, #0]
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017b62:	69bb      	ldr	r3, [r7, #24]
 8017b64:	6858      	ldr	r0, [r3, #4]
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	3308      	adds	r3, #8
 8017b6a:	2214      	movs	r2, #20
 8017b6c:	4619      	mov	r1, r3
 8017b6e:	f00c f980 	bl	8023e72 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017b72:	2101      	movs	r1, #1
 8017b74:	69b8      	ldr	r0, [r7, #24]
 8017b76:	f7ff fc11 	bl	801739c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017b7a:	69b8      	ldr	r0, [r7, #24]
 8017b7c:	f002 f9b2 	bl	8019ee4 <pbuf_clen>
 8017b80:	4603      	mov	r3, r0
 8017b82:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017b84:	8bfa      	ldrh	r2, [r7, #30]
 8017b86:	8a7b      	ldrh	r3, [r7, #18]
 8017b88:	4413      	add	r3, r2
 8017b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017b8e:	db05      	blt.n	8017b9c <ip_reass_free_complete_datagram+0x98>
 8017b90:	4b27      	ldr	r3, [pc, #156]	; (8017c30 <ip_reass_free_complete_datagram+0x12c>)
 8017b92:	22bc      	movs	r2, #188	; 0xbc
 8017b94:	492a      	ldr	r1, [pc, #168]	; (8017c40 <ip_reass_free_complete_datagram+0x13c>)
 8017b96:	4828      	ldr	r0, [pc, #160]	; (8017c38 <ip_reass_free_complete_datagram+0x134>)
 8017b98:	f00c fa26 	bl	8023fe8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017b9c:	8bfa      	ldrh	r2, [r7, #30]
 8017b9e:	8a7b      	ldrh	r3, [r7, #18]
 8017ba0:	4413      	add	r3, r2
 8017ba2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017ba4:	69b8      	ldr	r0, [r7, #24]
 8017ba6:	f002 f90f 	bl	8019dc8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	685b      	ldr	r3, [r3, #4]
 8017bae:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017bb0:	e01f      	b.n	8017bf2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017bb2:	69bb      	ldr	r3, [r7, #24]
 8017bb4:	685b      	ldr	r3, [r3, #4]
 8017bb6:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017bb8:	69bb      	ldr	r3, [r7, #24]
 8017bba:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017bbc:	697b      	ldr	r3, [r7, #20]
 8017bbe:	681b      	ldr	r3, [r3, #0]
 8017bc0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017bc2:	68f8      	ldr	r0, [r7, #12]
 8017bc4:	f002 f98e 	bl	8019ee4 <pbuf_clen>
 8017bc8:	4603      	mov	r3, r0
 8017bca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017bcc:	8bfa      	ldrh	r2, [r7, #30]
 8017bce:	8a7b      	ldrh	r3, [r7, #18]
 8017bd0:	4413      	add	r3, r2
 8017bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017bd6:	db05      	blt.n	8017be4 <ip_reass_free_complete_datagram+0xe0>
 8017bd8:	4b15      	ldr	r3, [pc, #84]	; (8017c30 <ip_reass_free_complete_datagram+0x12c>)
 8017bda:	22cc      	movs	r2, #204	; 0xcc
 8017bdc:	4918      	ldr	r1, [pc, #96]	; (8017c40 <ip_reass_free_complete_datagram+0x13c>)
 8017bde:	4816      	ldr	r0, [pc, #88]	; (8017c38 <ip_reass_free_complete_datagram+0x134>)
 8017be0:	f00c fa02 	bl	8023fe8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017be4:	8bfa      	ldrh	r2, [r7, #30]
 8017be6:	8a7b      	ldrh	r3, [r7, #18]
 8017be8:	4413      	add	r3, r2
 8017bea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017bec:	68f8      	ldr	r0, [r7, #12]
 8017bee:	f002 f8eb 	bl	8019dc8 <pbuf_free>
  while (p != NULL) {
 8017bf2:	69bb      	ldr	r3, [r7, #24]
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d1dc      	bne.n	8017bb2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017bf8:	6839      	ldr	r1, [r7, #0]
 8017bfa:	6878      	ldr	r0, [r7, #4]
 8017bfc:	f000 f8c2 	bl	8017d84 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017c00:	4b10      	ldr	r3, [pc, #64]	; (8017c44 <ip_reass_free_complete_datagram+0x140>)
 8017c02:	881b      	ldrh	r3, [r3, #0]
 8017c04:	8bfa      	ldrh	r2, [r7, #30]
 8017c06:	429a      	cmp	r2, r3
 8017c08:	d905      	bls.n	8017c16 <ip_reass_free_complete_datagram+0x112>
 8017c0a:	4b09      	ldr	r3, [pc, #36]	; (8017c30 <ip_reass_free_complete_datagram+0x12c>)
 8017c0c:	22d2      	movs	r2, #210	; 0xd2
 8017c0e:	490e      	ldr	r1, [pc, #56]	; (8017c48 <ip_reass_free_complete_datagram+0x144>)
 8017c10:	4809      	ldr	r0, [pc, #36]	; (8017c38 <ip_reass_free_complete_datagram+0x134>)
 8017c12:	f00c f9e9 	bl	8023fe8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017c16:	4b0b      	ldr	r3, [pc, #44]	; (8017c44 <ip_reass_free_complete_datagram+0x140>)
 8017c18:	881a      	ldrh	r2, [r3, #0]
 8017c1a:	8bfb      	ldrh	r3, [r7, #30]
 8017c1c:	1ad3      	subs	r3, r2, r3
 8017c1e:	b29a      	uxth	r2, r3
 8017c20:	4b08      	ldr	r3, [pc, #32]	; (8017c44 <ip_reass_free_complete_datagram+0x140>)
 8017c22:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017c24:	8bfb      	ldrh	r3, [r7, #30]
}
 8017c26:	4618      	mov	r0, r3
 8017c28:	3720      	adds	r7, #32
 8017c2a:	46bd      	mov	sp, r7
 8017c2c:	bd80      	pop	{r7, pc}
 8017c2e:	bf00      	nop
 8017c30:	080260d8 	.word	0x080260d8
 8017c34:	08026130 	.word	0x08026130
 8017c38:	0802613c 	.word	0x0802613c
 8017c3c:	08026164 	.word	0x08026164
 8017c40:	08026178 	.word	0x08026178
 8017c44:	20008a1c 	.word	0x20008a1c
 8017c48:	08026198 	.word	0x08026198

08017c4c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017c4c:	b580      	push	{r7, lr}
 8017c4e:	b08a      	sub	sp, #40	; 0x28
 8017c50:	af00      	add	r7, sp, #0
 8017c52:	6078      	str	r0, [r7, #4]
 8017c54:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017c56:	2300      	movs	r3, #0
 8017c58:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017c5a:	2300      	movs	r3, #0
 8017c5c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017c5e:	2300      	movs	r3, #0
 8017c60:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017c62:	2300      	movs	r3, #0
 8017c64:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017c66:	2300      	movs	r3, #0
 8017c68:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017c6a:	4b28      	ldr	r3, [pc, #160]	; (8017d0c <ip_reass_remove_oldest_datagram+0xc0>)
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017c70:	e030      	b.n	8017cd4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c74:	695a      	ldr	r2, [r3, #20]
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	68db      	ldr	r3, [r3, #12]
 8017c7a:	429a      	cmp	r2, r3
 8017c7c:	d10c      	bne.n	8017c98 <ip_reass_remove_oldest_datagram+0x4c>
 8017c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c80:	699a      	ldr	r2, [r3, #24]
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	691b      	ldr	r3, [r3, #16]
 8017c86:	429a      	cmp	r2, r3
 8017c88:	d106      	bne.n	8017c98 <ip_reass_remove_oldest_datagram+0x4c>
 8017c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c8c:	899a      	ldrh	r2, [r3, #12]
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	889b      	ldrh	r3, [r3, #4]
 8017c92:	b29b      	uxth	r3, r3
 8017c94:	429a      	cmp	r2, r3
 8017c96:	d014      	beq.n	8017cc2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017c98:	693b      	ldr	r3, [r7, #16]
 8017c9a:	3301      	adds	r3, #1
 8017c9c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017c9e:	6a3b      	ldr	r3, [r7, #32]
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d104      	bne.n	8017cae <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ca6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017ca8:	69fb      	ldr	r3, [r7, #28]
 8017caa:	61bb      	str	r3, [r7, #24]
 8017cac:	e009      	b.n	8017cc2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cb0:	7fda      	ldrb	r2, [r3, #31]
 8017cb2:	6a3b      	ldr	r3, [r7, #32]
 8017cb4:	7fdb      	ldrb	r3, [r3, #31]
 8017cb6:	429a      	cmp	r2, r3
 8017cb8:	d803      	bhi.n	8017cc2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cbc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017cbe:	69fb      	ldr	r3, [r7, #28]
 8017cc0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d001      	beq.n	8017cce <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ccc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cd0:	681b      	ldr	r3, [r3, #0]
 8017cd2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d1cb      	bne.n	8017c72 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017cda:	6a3b      	ldr	r3, [r7, #32]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d008      	beq.n	8017cf2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017ce0:	69b9      	ldr	r1, [r7, #24]
 8017ce2:	6a38      	ldr	r0, [r7, #32]
 8017ce4:	f7ff ff0e 	bl	8017b04 <ip_reass_free_complete_datagram>
 8017ce8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017cea:	697a      	ldr	r2, [r7, #20]
 8017cec:	68fb      	ldr	r3, [r7, #12]
 8017cee:	4413      	add	r3, r2
 8017cf0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017cf2:	697a      	ldr	r2, [r7, #20]
 8017cf4:	683b      	ldr	r3, [r7, #0]
 8017cf6:	429a      	cmp	r2, r3
 8017cf8:	da02      	bge.n	8017d00 <ip_reass_remove_oldest_datagram+0xb4>
 8017cfa:	693b      	ldr	r3, [r7, #16]
 8017cfc:	2b01      	cmp	r3, #1
 8017cfe:	dcac      	bgt.n	8017c5a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017d00:	697b      	ldr	r3, [r7, #20]
}
 8017d02:	4618      	mov	r0, r3
 8017d04:	3728      	adds	r7, #40	; 0x28
 8017d06:	46bd      	mov	sp, r7
 8017d08:	bd80      	pop	{r7, pc}
 8017d0a:	bf00      	nop
 8017d0c:	20008a18 	.word	0x20008a18

08017d10 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017d10:	b580      	push	{r7, lr}
 8017d12:	b084      	sub	sp, #16
 8017d14:	af00      	add	r7, sp, #0
 8017d16:	6078      	str	r0, [r7, #4]
 8017d18:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017d1a:	2004      	movs	r0, #4
 8017d1c:	f001 f96a 	bl	8018ff4 <memp_malloc>
 8017d20:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d110      	bne.n	8017d4a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017d28:	6839      	ldr	r1, [r7, #0]
 8017d2a:	6878      	ldr	r0, [r7, #4]
 8017d2c:	f7ff ff8e 	bl	8017c4c <ip_reass_remove_oldest_datagram>
 8017d30:	4602      	mov	r2, r0
 8017d32:	683b      	ldr	r3, [r7, #0]
 8017d34:	4293      	cmp	r3, r2
 8017d36:	dc03      	bgt.n	8017d40 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017d38:	2004      	movs	r0, #4
 8017d3a:	f001 f95b 	bl	8018ff4 <memp_malloc>
 8017d3e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d101      	bne.n	8017d4a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017d46:	2300      	movs	r3, #0
 8017d48:	e016      	b.n	8017d78 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017d4a:	2220      	movs	r2, #32
 8017d4c:	2100      	movs	r1, #0
 8017d4e:	68f8      	ldr	r0, [r7, #12]
 8017d50:	f00c f89a 	bl	8023e88 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017d54:	68fb      	ldr	r3, [r7, #12]
 8017d56:	220f      	movs	r2, #15
 8017d58:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017d5a:	4b09      	ldr	r3, [pc, #36]	; (8017d80 <ip_reass_enqueue_new_datagram+0x70>)
 8017d5c:	681a      	ldr	r2, [r3, #0]
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017d62:	4a07      	ldr	r2, [pc, #28]	; (8017d80 <ip_reass_enqueue_new_datagram+0x70>)
 8017d64:	68fb      	ldr	r3, [r7, #12]
 8017d66:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	3308      	adds	r3, #8
 8017d6c:	2214      	movs	r2, #20
 8017d6e:	6879      	ldr	r1, [r7, #4]
 8017d70:	4618      	mov	r0, r3
 8017d72:	f00c f87e 	bl	8023e72 <memcpy>
  return ipr;
 8017d76:	68fb      	ldr	r3, [r7, #12]
}
 8017d78:	4618      	mov	r0, r3
 8017d7a:	3710      	adds	r7, #16
 8017d7c:	46bd      	mov	sp, r7
 8017d7e:	bd80      	pop	{r7, pc}
 8017d80:	20008a18 	.word	0x20008a18

08017d84 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017d84:	b580      	push	{r7, lr}
 8017d86:	b082      	sub	sp, #8
 8017d88:	af00      	add	r7, sp, #0
 8017d8a:	6078      	str	r0, [r7, #4]
 8017d8c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017d8e:	4b10      	ldr	r3, [pc, #64]	; (8017dd0 <ip_reass_dequeue_datagram+0x4c>)
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	687a      	ldr	r2, [r7, #4]
 8017d94:	429a      	cmp	r2, r3
 8017d96:	d104      	bne.n	8017da2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	4a0c      	ldr	r2, [pc, #48]	; (8017dd0 <ip_reass_dequeue_datagram+0x4c>)
 8017d9e:	6013      	str	r3, [r2, #0]
 8017da0:	e00d      	b.n	8017dbe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017da2:	683b      	ldr	r3, [r7, #0]
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d106      	bne.n	8017db6 <ip_reass_dequeue_datagram+0x32>
 8017da8:	4b0a      	ldr	r3, [pc, #40]	; (8017dd4 <ip_reass_dequeue_datagram+0x50>)
 8017daa:	f240 1245 	movw	r2, #325	; 0x145
 8017dae:	490a      	ldr	r1, [pc, #40]	; (8017dd8 <ip_reass_dequeue_datagram+0x54>)
 8017db0:	480a      	ldr	r0, [pc, #40]	; (8017ddc <ip_reass_dequeue_datagram+0x58>)
 8017db2:	f00c f919 	bl	8023fe8 <iprintf>
    prev->next = ipr->next;
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	681a      	ldr	r2, [r3, #0]
 8017dba:	683b      	ldr	r3, [r7, #0]
 8017dbc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017dbe:	6879      	ldr	r1, [r7, #4]
 8017dc0:	2004      	movs	r0, #4
 8017dc2:	f001 f969 	bl	8019098 <memp_free>
}
 8017dc6:	bf00      	nop
 8017dc8:	3708      	adds	r7, #8
 8017dca:	46bd      	mov	sp, r7
 8017dcc:	bd80      	pop	{r7, pc}
 8017dce:	bf00      	nop
 8017dd0:	20008a18 	.word	0x20008a18
 8017dd4:	080260d8 	.word	0x080260d8
 8017dd8:	080261bc 	.word	0x080261bc
 8017ddc:	0802613c 	.word	0x0802613c

08017de0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017de0:	b580      	push	{r7, lr}
 8017de2:	b08c      	sub	sp, #48	; 0x30
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	60f8      	str	r0, [r7, #12]
 8017de8:	60b9      	str	r1, [r7, #8]
 8017dea:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017dec:	2300      	movs	r3, #0
 8017dee:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017df0:	2301      	movs	r3, #1
 8017df2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017df4:	68bb      	ldr	r3, [r7, #8]
 8017df6:	685b      	ldr	r3, [r3, #4]
 8017df8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017dfa:	69fb      	ldr	r3, [r7, #28]
 8017dfc:	885b      	ldrh	r3, [r3, #2]
 8017dfe:	b29b      	uxth	r3, r3
 8017e00:	4618      	mov	r0, r3
 8017e02:	f7fb ffcf 	bl	8013da4 <lwip_htons>
 8017e06:	4603      	mov	r3, r0
 8017e08:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017e0a:	69fb      	ldr	r3, [r7, #28]
 8017e0c:	781b      	ldrb	r3, [r3, #0]
 8017e0e:	f003 030f 	and.w	r3, r3, #15
 8017e12:	b2db      	uxtb	r3, r3
 8017e14:	009b      	lsls	r3, r3, #2
 8017e16:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017e18:	7e7b      	ldrb	r3, [r7, #25]
 8017e1a:	b29b      	uxth	r3, r3
 8017e1c:	8b7a      	ldrh	r2, [r7, #26]
 8017e1e:	429a      	cmp	r2, r3
 8017e20:	d202      	bcs.n	8017e28 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017e22:	f04f 33ff 	mov.w	r3, #4294967295
 8017e26:	e135      	b.n	8018094 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017e28:	7e7b      	ldrb	r3, [r7, #25]
 8017e2a:	b29b      	uxth	r3, r3
 8017e2c:	8b7a      	ldrh	r2, [r7, #26]
 8017e2e:	1ad3      	subs	r3, r2, r3
 8017e30:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017e32:	69fb      	ldr	r3, [r7, #28]
 8017e34:	88db      	ldrh	r3, [r3, #6]
 8017e36:	b29b      	uxth	r3, r3
 8017e38:	4618      	mov	r0, r3
 8017e3a:	f7fb ffb3 	bl	8013da4 <lwip_htons>
 8017e3e:	4603      	mov	r3, r0
 8017e40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017e44:	b29b      	uxth	r3, r3
 8017e46:	00db      	lsls	r3, r3, #3
 8017e48:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017e4a:	68bb      	ldr	r3, [r7, #8]
 8017e4c:	685b      	ldr	r3, [r3, #4]
 8017e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e52:	2200      	movs	r2, #0
 8017e54:	701a      	strb	r2, [r3, #0]
 8017e56:	2200      	movs	r2, #0
 8017e58:	705a      	strb	r2, [r3, #1]
 8017e5a:	2200      	movs	r2, #0
 8017e5c:	709a      	strb	r2, [r3, #2]
 8017e5e:	2200      	movs	r2, #0
 8017e60:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e64:	8afa      	ldrh	r2, [r7, #22]
 8017e66:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017e68:	8afa      	ldrh	r2, [r7, #22]
 8017e6a:	8b7b      	ldrh	r3, [r7, #26]
 8017e6c:	4413      	add	r3, r2
 8017e6e:	b29a      	uxth	r2, r3
 8017e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e72:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e76:	88db      	ldrh	r3, [r3, #6]
 8017e78:	b29b      	uxth	r3, r3
 8017e7a:	8afa      	ldrh	r2, [r7, #22]
 8017e7c:	429a      	cmp	r2, r3
 8017e7e:	d902      	bls.n	8017e86 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017e80:	f04f 33ff 	mov.w	r3, #4294967295
 8017e84:	e106      	b.n	8018094 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	685b      	ldr	r3, [r3, #4]
 8017e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8017e8c:	e068      	b.n	8017f60 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e90:	685b      	ldr	r3, [r3, #4]
 8017e92:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e96:	889b      	ldrh	r3, [r3, #4]
 8017e98:	b29a      	uxth	r2, r3
 8017e9a:	693b      	ldr	r3, [r7, #16]
 8017e9c:	889b      	ldrh	r3, [r3, #4]
 8017e9e:	b29b      	uxth	r3, r3
 8017ea0:	429a      	cmp	r2, r3
 8017ea2:	d235      	bcs.n	8017f10 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ea8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d020      	beq.n	8017ef2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eb2:	889b      	ldrh	r3, [r3, #4]
 8017eb4:	b29a      	uxth	r2, r3
 8017eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eb8:	88db      	ldrh	r3, [r3, #6]
 8017eba:	b29b      	uxth	r3, r3
 8017ebc:	429a      	cmp	r2, r3
 8017ebe:	d307      	bcc.n	8017ed0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ec2:	88db      	ldrh	r3, [r3, #6]
 8017ec4:	b29a      	uxth	r2, r3
 8017ec6:	693b      	ldr	r3, [r7, #16]
 8017ec8:	889b      	ldrh	r3, [r3, #4]
 8017eca:	b29b      	uxth	r3, r3
 8017ecc:	429a      	cmp	r2, r3
 8017ece:	d902      	bls.n	8017ed6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8017ed4:	e0de      	b.n	8018094 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ed8:	68ba      	ldr	r2, [r7, #8]
 8017eda:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ede:	88db      	ldrh	r3, [r3, #6]
 8017ee0:	b29a      	uxth	r2, r3
 8017ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ee4:	889b      	ldrh	r3, [r3, #4]
 8017ee6:	b29b      	uxth	r3, r3
 8017ee8:	429a      	cmp	r2, r3
 8017eea:	d03d      	beq.n	8017f68 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017eec:	2300      	movs	r3, #0
 8017eee:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017ef0:	e03a      	b.n	8017f68 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ef4:	88db      	ldrh	r3, [r3, #6]
 8017ef6:	b29a      	uxth	r2, r3
 8017ef8:	693b      	ldr	r3, [r7, #16]
 8017efa:	889b      	ldrh	r3, [r3, #4]
 8017efc:	b29b      	uxth	r3, r3
 8017efe:	429a      	cmp	r2, r3
 8017f00:	d902      	bls.n	8017f08 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017f02:	f04f 33ff 	mov.w	r3, #4294967295
 8017f06:	e0c5      	b.n	8018094 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	68ba      	ldr	r2, [r7, #8]
 8017f0c:	605a      	str	r2, [r3, #4]
      break;
 8017f0e:	e02b      	b.n	8017f68 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f12:	889b      	ldrh	r3, [r3, #4]
 8017f14:	b29a      	uxth	r2, r3
 8017f16:	693b      	ldr	r3, [r7, #16]
 8017f18:	889b      	ldrh	r3, [r3, #4]
 8017f1a:	b29b      	uxth	r3, r3
 8017f1c:	429a      	cmp	r2, r3
 8017f1e:	d102      	bne.n	8017f26 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017f20:	f04f 33ff 	mov.w	r3, #4294967295
 8017f24:	e0b6      	b.n	8018094 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f28:	889b      	ldrh	r3, [r3, #4]
 8017f2a:	b29a      	uxth	r2, r3
 8017f2c:	693b      	ldr	r3, [r7, #16]
 8017f2e:	88db      	ldrh	r3, [r3, #6]
 8017f30:	b29b      	uxth	r3, r3
 8017f32:	429a      	cmp	r2, r3
 8017f34:	d202      	bcs.n	8017f3c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017f36:	f04f 33ff 	mov.w	r3, #4294967295
 8017f3a:	e0ab      	b.n	8018094 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d009      	beq.n	8017f56 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f44:	88db      	ldrh	r3, [r3, #6]
 8017f46:	b29a      	uxth	r2, r3
 8017f48:	693b      	ldr	r3, [r7, #16]
 8017f4a:	889b      	ldrh	r3, [r3, #4]
 8017f4c:	b29b      	uxth	r3, r3
 8017f4e:	429a      	cmp	r2, r3
 8017f50:	d001      	beq.n	8017f56 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017f52:	2300      	movs	r3, #0
 8017f54:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017f56:	693b      	ldr	r3, [r7, #16]
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017f5c:	693b      	ldr	r3, [r7, #16]
 8017f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d193      	bne.n	8017e8e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017f66:	e000      	b.n	8017f6a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017f68:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d12d      	bne.n	8017fcc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d01c      	beq.n	8017fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f78:	88db      	ldrh	r3, [r3, #6]
 8017f7a:	b29a      	uxth	r2, r3
 8017f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f7e:	889b      	ldrh	r3, [r3, #4]
 8017f80:	b29b      	uxth	r3, r3
 8017f82:	429a      	cmp	r2, r3
 8017f84:	d906      	bls.n	8017f94 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017f86:	4b45      	ldr	r3, [pc, #276]	; (801809c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017f88:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017f8c:	4944      	ldr	r1, [pc, #272]	; (80180a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017f8e:	4845      	ldr	r0, [pc, #276]	; (80180a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017f90:	f00c f82a 	bl	8023fe8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f96:	68ba      	ldr	r2, [r7, #8]
 8017f98:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f9c:	88db      	ldrh	r3, [r3, #6]
 8017f9e:	b29a      	uxth	r2, r3
 8017fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fa2:	889b      	ldrh	r3, [r3, #4]
 8017fa4:	b29b      	uxth	r3, r3
 8017fa6:	429a      	cmp	r2, r3
 8017fa8:	d010      	beq.n	8017fcc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017faa:	2300      	movs	r3, #0
 8017fac:	623b      	str	r3, [r7, #32]
 8017fae:	e00d      	b.n	8017fcc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017fb0:	68fb      	ldr	r3, [r7, #12]
 8017fb2:	685b      	ldr	r3, [r3, #4]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d006      	beq.n	8017fc6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017fb8:	4b38      	ldr	r3, [pc, #224]	; (801809c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017fba:	f240 12bf 	movw	r2, #447	; 0x1bf
 8017fbe:	493a      	ldr	r1, [pc, #232]	; (80180a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017fc0:	4838      	ldr	r0, [pc, #224]	; (80180a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017fc2:	f00c f811 	bl	8023fe8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	68ba      	ldr	r2, [r7, #8]
 8017fca:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d105      	bne.n	8017fde <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017fd2:	68fb      	ldr	r3, [r7, #12]
 8017fd4:	7f9b      	ldrb	r3, [r3, #30]
 8017fd6:	f003 0301 	and.w	r3, r3, #1
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d059      	beq.n	8018092 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017fde:	6a3b      	ldr	r3, [r7, #32]
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d04f      	beq.n	8018084 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017fe4:	68fb      	ldr	r3, [r7, #12]
 8017fe6:	685b      	ldr	r3, [r3, #4]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d006      	beq.n	8017ffa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	685b      	ldr	r3, [r3, #4]
 8017ff0:	685b      	ldr	r3, [r3, #4]
 8017ff2:	889b      	ldrh	r3, [r3, #4]
 8017ff4:	b29b      	uxth	r3, r3
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d002      	beq.n	8018000 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017ffa:	2300      	movs	r3, #0
 8017ffc:	623b      	str	r3, [r7, #32]
 8017ffe:	e041      	b.n	8018084 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018002:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801800a:	e012      	b.n	8018032 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801800e:	685b      	ldr	r3, [r3, #4]
 8018010:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018014:	88db      	ldrh	r3, [r3, #6]
 8018016:	b29a      	uxth	r2, r3
 8018018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801801a:	889b      	ldrh	r3, [r3, #4]
 801801c:	b29b      	uxth	r3, r3
 801801e:	429a      	cmp	r2, r3
 8018020:	d002      	beq.n	8018028 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018022:	2300      	movs	r3, #0
 8018024:	623b      	str	r3, [r7, #32]
            break;
 8018026:	e007      	b.n	8018038 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801802a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801802c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801802e:	681b      	ldr	r3, [r3, #0]
 8018030:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018034:	2b00      	cmp	r3, #0
 8018036:	d1e9      	bne.n	801800c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018038:	6a3b      	ldr	r3, [r7, #32]
 801803a:	2b00      	cmp	r3, #0
 801803c:	d022      	beq.n	8018084 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	685b      	ldr	r3, [r3, #4]
 8018042:	2b00      	cmp	r3, #0
 8018044:	d106      	bne.n	8018054 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018046:	4b15      	ldr	r3, [pc, #84]	; (801809c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018048:	f240 12df 	movw	r2, #479	; 0x1df
 801804c:	4917      	ldr	r1, [pc, #92]	; (80180ac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801804e:	4815      	ldr	r0, [pc, #84]	; (80180a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018050:	f00b ffca 	bl	8023fe8 <iprintf>
          LWIP_ASSERT("sanity check",
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	685b      	ldr	r3, [r3, #4]
 8018058:	685b      	ldr	r3, [r3, #4]
 801805a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801805c:	429a      	cmp	r2, r3
 801805e:	d106      	bne.n	801806e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018060:	4b0e      	ldr	r3, [pc, #56]	; (801809c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018062:	f240 12e1 	movw	r2, #481	; 0x1e1
 8018066:	4911      	ldr	r1, [pc, #68]	; (80180ac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018068:	480e      	ldr	r0, [pc, #56]	; (80180a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801806a:	f00b ffbd 	bl	8023fe8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801806e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	2b00      	cmp	r3, #0
 8018074:	d006      	beq.n	8018084 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018076:	4b09      	ldr	r3, [pc, #36]	; (801809c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018078:	f240 12e3 	movw	r2, #483	; 0x1e3
 801807c:	490c      	ldr	r1, [pc, #48]	; (80180b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801807e:	4809      	ldr	r0, [pc, #36]	; (80180a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018080:	f00b ffb2 	bl	8023fe8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018084:	6a3b      	ldr	r3, [r7, #32]
 8018086:	2b00      	cmp	r3, #0
 8018088:	bf14      	ite	ne
 801808a:	2301      	movne	r3, #1
 801808c:	2300      	moveq	r3, #0
 801808e:	b2db      	uxtb	r3, r3
 8018090:	e000      	b.n	8018094 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018092:	2300      	movs	r3, #0
}
 8018094:	4618      	mov	r0, r3
 8018096:	3730      	adds	r7, #48	; 0x30
 8018098:	46bd      	mov	sp, r7
 801809a:	bd80      	pop	{r7, pc}
 801809c:	080260d8 	.word	0x080260d8
 80180a0:	080261d8 	.word	0x080261d8
 80180a4:	0802613c 	.word	0x0802613c
 80180a8:	080261f8 	.word	0x080261f8
 80180ac:	08026230 	.word	0x08026230
 80180b0:	08026240 	.word	0x08026240

080180b4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80180b4:	b580      	push	{r7, lr}
 80180b6:	b08e      	sub	sp, #56	; 0x38
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	685b      	ldr	r3, [r3, #4]
 80180c0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80180c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180c4:	781b      	ldrb	r3, [r3, #0]
 80180c6:	f003 030f 	and.w	r3, r3, #15
 80180ca:	b2db      	uxtb	r3, r3
 80180cc:	009b      	lsls	r3, r3, #2
 80180ce:	b2db      	uxtb	r3, r3
 80180d0:	2b14      	cmp	r3, #20
 80180d2:	f040 8167 	bne.w	80183a4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80180d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180d8:	88db      	ldrh	r3, [r3, #6]
 80180da:	b29b      	uxth	r3, r3
 80180dc:	4618      	mov	r0, r3
 80180de:	f7fb fe61 	bl	8013da4 <lwip_htons>
 80180e2:	4603      	mov	r3, r0
 80180e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80180e8:	b29b      	uxth	r3, r3
 80180ea:	00db      	lsls	r3, r3, #3
 80180ec:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80180ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180f0:	885b      	ldrh	r3, [r3, #2]
 80180f2:	b29b      	uxth	r3, r3
 80180f4:	4618      	mov	r0, r3
 80180f6:	f7fb fe55 	bl	8013da4 <lwip_htons>
 80180fa:	4603      	mov	r3, r0
 80180fc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80180fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018100:	781b      	ldrb	r3, [r3, #0]
 8018102:	f003 030f 	and.w	r3, r3, #15
 8018106:	b2db      	uxtb	r3, r3
 8018108:	009b      	lsls	r3, r3, #2
 801810a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801810e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018112:	b29b      	uxth	r3, r3
 8018114:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018116:	429a      	cmp	r2, r3
 8018118:	f0c0 8146 	bcc.w	80183a8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801811c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018120:	b29b      	uxth	r3, r3
 8018122:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018124:	1ad3      	subs	r3, r2, r3
 8018126:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018128:	6878      	ldr	r0, [r7, #4]
 801812a:	f001 fedb 	bl	8019ee4 <pbuf_clen>
 801812e:	4603      	mov	r3, r0
 8018130:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018132:	4ba3      	ldr	r3, [pc, #652]	; (80183c0 <ip4_reass+0x30c>)
 8018134:	881b      	ldrh	r3, [r3, #0]
 8018136:	461a      	mov	r2, r3
 8018138:	8c3b      	ldrh	r3, [r7, #32]
 801813a:	4413      	add	r3, r2
 801813c:	2b0a      	cmp	r3, #10
 801813e:	dd10      	ble.n	8018162 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018140:	8c3b      	ldrh	r3, [r7, #32]
 8018142:	4619      	mov	r1, r3
 8018144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018146:	f7ff fd81 	bl	8017c4c <ip_reass_remove_oldest_datagram>
 801814a:	4603      	mov	r3, r0
 801814c:	2b00      	cmp	r3, #0
 801814e:	f000 812d 	beq.w	80183ac <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018152:	4b9b      	ldr	r3, [pc, #620]	; (80183c0 <ip4_reass+0x30c>)
 8018154:	881b      	ldrh	r3, [r3, #0]
 8018156:	461a      	mov	r2, r3
 8018158:	8c3b      	ldrh	r3, [r7, #32]
 801815a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801815c:	2b0a      	cmp	r3, #10
 801815e:	f300 8125 	bgt.w	80183ac <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018162:	4b98      	ldr	r3, [pc, #608]	; (80183c4 <ip4_reass+0x310>)
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	633b      	str	r3, [r7, #48]	; 0x30
 8018168:	e015      	b.n	8018196 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801816c:	695a      	ldr	r2, [r3, #20]
 801816e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018170:	68db      	ldr	r3, [r3, #12]
 8018172:	429a      	cmp	r2, r3
 8018174:	d10c      	bne.n	8018190 <ip4_reass+0xdc>
 8018176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018178:	699a      	ldr	r2, [r3, #24]
 801817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801817c:	691b      	ldr	r3, [r3, #16]
 801817e:	429a      	cmp	r2, r3
 8018180:	d106      	bne.n	8018190 <ip4_reass+0xdc>
 8018182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018184:	899a      	ldrh	r2, [r3, #12]
 8018186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018188:	889b      	ldrh	r3, [r3, #4]
 801818a:	b29b      	uxth	r3, r3
 801818c:	429a      	cmp	r2, r3
 801818e:	d006      	beq.n	801819e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	633b      	str	r3, [r7, #48]	; 0x30
 8018196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018198:	2b00      	cmp	r3, #0
 801819a:	d1e6      	bne.n	801816a <ip4_reass+0xb6>
 801819c:	e000      	b.n	80181a0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801819e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80181a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d109      	bne.n	80181ba <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80181a6:	8c3b      	ldrh	r3, [r7, #32]
 80181a8:	4619      	mov	r1, r3
 80181aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80181ac:	f7ff fdb0 	bl	8017d10 <ip_reass_enqueue_new_datagram>
 80181b0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80181b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d11c      	bne.n	80181f2 <ip4_reass+0x13e>
      goto nullreturn;
 80181b8:	e0f9      	b.n	80183ae <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80181ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181bc:	88db      	ldrh	r3, [r3, #6]
 80181be:	b29b      	uxth	r3, r3
 80181c0:	4618      	mov	r0, r3
 80181c2:	f7fb fdef 	bl	8013da4 <lwip_htons>
 80181c6:	4603      	mov	r3, r0
 80181c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d110      	bne.n	80181f2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80181d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181d2:	89db      	ldrh	r3, [r3, #14]
 80181d4:	4618      	mov	r0, r3
 80181d6:	f7fb fde5 	bl	8013da4 <lwip_htons>
 80181da:	4603      	mov	r3, r0
 80181dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d006      	beq.n	80181f2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80181e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181e6:	3308      	adds	r3, #8
 80181e8:	2214      	movs	r2, #20
 80181ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80181ec:	4618      	mov	r0, r3
 80181ee:	f00b fe40 	bl	8023e72 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80181f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181f4:	88db      	ldrh	r3, [r3, #6]
 80181f6:	b29b      	uxth	r3, r3
 80181f8:	f003 0320 	and.w	r3, r3, #32
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	bf0c      	ite	eq
 8018200:	2301      	moveq	r3, #1
 8018202:	2300      	movne	r3, #0
 8018204:	b2db      	uxtb	r3, r3
 8018206:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018208:	69fb      	ldr	r3, [r7, #28]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d00e      	beq.n	801822c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801820e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018210:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018212:	4413      	add	r3, r2
 8018214:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018216:	8b7a      	ldrh	r2, [r7, #26]
 8018218:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801821a:	429a      	cmp	r2, r3
 801821c:	f0c0 80a0 	bcc.w	8018360 <ip4_reass+0x2ac>
 8018220:	8b7b      	ldrh	r3, [r7, #26]
 8018222:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8018226:	4293      	cmp	r3, r2
 8018228:	f200 809a 	bhi.w	8018360 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801822c:	69fa      	ldr	r2, [r7, #28]
 801822e:	6879      	ldr	r1, [r7, #4]
 8018230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018232:	f7ff fdd5 	bl	8017de0 <ip_reass_chain_frag_into_datagram_and_validate>
 8018236:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018238:	697b      	ldr	r3, [r7, #20]
 801823a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801823e:	f000 8091 	beq.w	8018364 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018242:	4b5f      	ldr	r3, [pc, #380]	; (80183c0 <ip4_reass+0x30c>)
 8018244:	881a      	ldrh	r2, [r3, #0]
 8018246:	8c3b      	ldrh	r3, [r7, #32]
 8018248:	4413      	add	r3, r2
 801824a:	b29a      	uxth	r2, r3
 801824c:	4b5c      	ldr	r3, [pc, #368]	; (80183c0 <ip4_reass+0x30c>)
 801824e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018250:	69fb      	ldr	r3, [r7, #28]
 8018252:	2b00      	cmp	r3, #0
 8018254:	d00d      	beq.n	8018272 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018256:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018258:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801825a:	4413      	add	r3, r2
 801825c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018260:	8a7a      	ldrh	r2, [r7, #18]
 8018262:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018266:	7f9b      	ldrb	r3, [r3, #30]
 8018268:	f043 0301 	orr.w	r3, r3, #1
 801826c:	b2da      	uxtb	r2, r3
 801826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018270:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018272:	697b      	ldr	r3, [r7, #20]
 8018274:	2b01      	cmp	r3, #1
 8018276:	d171      	bne.n	801835c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801827a:	8b9b      	ldrh	r3, [r3, #28]
 801827c:	3314      	adds	r3, #20
 801827e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018282:	685b      	ldr	r3, [r3, #4]
 8018284:	685b      	ldr	r3, [r3, #4]
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801828c:	685b      	ldr	r3, [r3, #4]
 801828e:	685b      	ldr	r3, [r3, #4]
 8018290:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018294:	3308      	adds	r3, #8
 8018296:	2214      	movs	r2, #20
 8018298:	4619      	mov	r1, r3
 801829a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801829c:	f00b fde9 	bl	8023e72 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80182a0:	8a3b      	ldrh	r3, [r7, #16]
 80182a2:	4618      	mov	r0, r3
 80182a4:	f7fb fd7e 	bl	8013da4 <lwip_htons>
 80182a8:	4603      	mov	r3, r0
 80182aa:	461a      	mov	r2, r3
 80182ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182ae:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80182b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182b2:	2200      	movs	r2, #0
 80182b4:	719a      	strb	r2, [r3, #6]
 80182b6:	2200      	movs	r2, #0
 80182b8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80182ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182bc:	2200      	movs	r2, #0
 80182be:	729a      	strb	r2, [r3, #10]
 80182c0:	2200      	movs	r2, #0
 80182c2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80182c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182c6:	685b      	ldr	r3, [r3, #4]
 80182c8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80182ca:	e00d      	b.n	80182e8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80182cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182ce:	685b      	ldr	r3, [r3, #4]
 80182d0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80182d2:	2114      	movs	r1, #20
 80182d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80182d6:	f001 fcf1 	bl	8019cbc <pbuf_remove_header>
      pbuf_cat(p, r);
 80182da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80182dc:	6878      	ldr	r0, [r7, #4]
 80182de:	f001 fe41 	bl	8019f64 <pbuf_cat>
      r = iprh->next_pbuf;
 80182e2:	68fb      	ldr	r3, [r7, #12]
 80182e4:	681b      	ldr	r3, [r3, #0]
 80182e6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80182e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d1ee      	bne.n	80182cc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80182ee:	4b35      	ldr	r3, [pc, #212]	; (80183c4 <ip4_reass+0x310>)
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80182f4:	429a      	cmp	r2, r3
 80182f6:	d102      	bne.n	80182fe <ip4_reass+0x24a>
      ipr_prev = NULL;
 80182f8:	2300      	movs	r3, #0
 80182fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80182fc:	e010      	b.n	8018320 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80182fe:	4b31      	ldr	r3, [pc, #196]	; (80183c4 <ip4_reass+0x310>)
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018304:	e007      	b.n	8018316 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801830c:	429a      	cmp	r2, r3
 801830e:	d006      	beq.n	801831e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018318:	2b00      	cmp	r3, #0
 801831a:	d1f4      	bne.n	8018306 <ip4_reass+0x252>
 801831c:	e000      	b.n	8018320 <ip4_reass+0x26c>
          break;
 801831e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018320:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018324:	f7ff fd2e 	bl	8017d84 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018328:	6878      	ldr	r0, [r7, #4]
 801832a:	f001 fddb 	bl	8019ee4 <pbuf_clen>
 801832e:	4603      	mov	r3, r0
 8018330:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018332:	4b23      	ldr	r3, [pc, #140]	; (80183c0 <ip4_reass+0x30c>)
 8018334:	881b      	ldrh	r3, [r3, #0]
 8018336:	8c3a      	ldrh	r2, [r7, #32]
 8018338:	429a      	cmp	r2, r3
 801833a:	d906      	bls.n	801834a <ip4_reass+0x296>
 801833c:	4b22      	ldr	r3, [pc, #136]	; (80183c8 <ip4_reass+0x314>)
 801833e:	f240 229b 	movw	r2, #667	; 0x29b
 8018342:	4922      	ldr	r1, [pc, #136]	; (80183cc <ip4_reass+0x318>)
 8018344:	4822      	ldr	r0, [pc, #136]	; (80183d0 <ip4_reass+0x31c>)
 8018346:	f00b fe4f 	bl	8023fe8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801834a:	4b1d      	ldr	r3, [pc, #116]	; (80183c0 <ip4_reass+0x30c>)
 801834c:	881a      	ldrh	r2, [r3, #0]
 801834e:	8c3b      	ldrh	r3, [r7, #32]
 8018350:	1ad3      	subs	r3, r2, r3
 8018352:	b29a      	uxth	r2, r3
 8018354:	4b1a      	ldr	r3, [pc, #104]	; (80183c0 <ip4_reass+0x30c>)
 8018356:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	e02c      	b.n	80183b6 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801835c:	2300      	movs	r3, #0
 801835e:	e02a      	b.n	80183b6 <ip4_reass+0x302>

nullreturn_ipr:
 8018360:	bf00      	nop
 8018362:	e000      	b.n	8018366 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8018364:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018368:	2b00      	cmp	r3, #0
 801836a:	d106      	bne.n	801837a <ip4_reass+0x2c6>
 801836c:	4b16      	ldr	r3, [pc, #88]	; (80183c8 <ip4_reass+0x314>)
 801836e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018372:	4918      	ldr	r1, [pc, #96]	; (80183d4 <ip4_reass+0x320>)
 8018374:	4816      	ldr	r0, [pc, #88]	; (80183d0 <ip4_reass+0x31c>)
 8018376:	f00b fe37 	bl	8023fe8 <iprintf>
  if (ipr->p == NULL) {
 801837a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801837c:	685b      	ldr	r3, [r3, #4]
 801837e:	2b00      	cmp	r3, #0
 8018380:	d114      	bne.n	80183ac <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018382:	4b10      	ldr	r3, [pc, #64]	; (80183c4 <ip4_reass+0x310>)
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018388:	429a      	cmp	r2, r3
 801838a:	d006      	beq.n	801839a <ip4_reass+0x2e6>
 801838c:	4b0e      	ldr	r3, [pc, #56]	; (80183c8 <ip4_reass+0x314>)
 801838e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018392:	4911      	ldr	r1, [pc, #68]	; (80183d8 <ip4_reass+0x324>)
 8018394:	480e      	ldr	r0, [pc, #56]	; (80183d0 <ip4_reass+0x31c>)
 8018396:	f00b fe27 	bl	8023fe8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801839a:	2100      	movs	r1, #0
 801839c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801839e:	f7ff fcf1 	bl	8017d84 <ip_reass_dequeue_datagram>
 80183a2:	e004      	b.n	80183ae <ip4_reass+0x2fa>
    goto nullreturn;
 80183a4:	bf00      	nop
 80183a6:	e002      	b.n	80183ae <ip4_reass+0x2fa>
    goto nullreturn;
 80183a8:	bf00      	nop
 80183aa:	e000      	b.n	80183ae <ip4_reass+0x2fa>
  }

nullreturn:
 80183ac:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80183ae:	6878      	ldr	r0, [r7, #4]
 80183b0:	f001 fd0a 	bl	8019dc8 <pbuf_free>
  return NULL;
 80183b4:	2300      	movs	r3, #0
}
 80183b6:	4618      	mov	r0, r3
 80183b8:	3738      	adds	r7, #56	; 0x38
 80183ba:	46bd      	mov	sp, r7
 80183bc:	bd80      	pop	{r7, pc}
 80183be:	bf00      	nop
 80183c0:	20008a1c 	.word	0x20008a1c
 80183c4:	20008a18 	.word	0x20008a18
 80183c8:	080260d8 	.word	0x080260d8
 80183cc:	08026264 	.word	0x08026264
 80183d0:	0802613c 	.word	0x0802613c
 80183d4:	08026280 	.word	0x08026280
 80183d8:	0802628c 	.word	0x0802628c

080183dc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80183dc:	b580      	push	{r7, lr}
 80183de:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80183e0:	2005      	movs	r0, #5
 80183e2:	f000 fe07 	bl	8018ff4 <memp_malloc>
 80183e6:	4603      	mov	r3, r0
}
 80183e8:	4618      	mov	r0, r3
 80183ea:	bd80      	pop	{r7, pc}

080183ec <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80183ec:	b580      	push	{r7, lr}
 80183ee:	b082      	sub	sp, #8
 80183f0:	af00      	add	r7, sp, #0
 80183f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d106      	bne.n	8018408 <ip_frag_free_pbuf_custom_ref+0x1c>
 80183fa:	4b07      	ldr	r3, [pc, #28]	; (8018418 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80183fc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018400:	4906      	ldr	r1, [pc, #24]	; (801841c <ip_frag_free_pbuf_custom_ref+0x30>)
 8018402:	4807      	ldr	r0, [pc, #28]	; (8018420 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018404:	f00b fdf0 	bl	8023fe8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018408:	6879      	ldr	r1, [r7, #4]
 801840a:	2005      	movs	r0, #5
 801840c:	f000 fe44 	bl	8019098 <memp_free>
}
 8018410:	bf00      	nop
 8018412:	3708      	adds	r7, #8
 8018414:	46bd      	mov	sp, r7
 8018416:	bd80      	pop	{r7, pc}
 8018418:	080260d8 	.word	0x080260d8
 801841c:	080262ac 	.word	0x080262ac
 8018420:	0802613c 	.word	0x0802613c

08018424 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018424:	b580      	push	{r7, lr}
 8018426:	b084      	sub	sp, #16
 8018428:	af00      	add	r7, sp, #0
 801842a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018430:	68fb      	ldr	r3, [r7, #12]
 8018432:	2b00      	cmp	r3, #0
 8018434:	d106      	bne.n	8018444 <ipfrag_free_pbuf_custom+0x20>
 8018436:	4b11      	ldr	r3, [pc, #68]	; (801847c <ipfrag_free_pbuf_custom+0x58>)
 8018438:	f240 22ce 	movw	r2, #718	; 0x2ce
 801843c:	4910      	ldr	r1, [pc, #64]	; (8018480 <ipfrag_free_pbuf_custom+0x5c>)
 801843e:	4811      	ldr	r0, [pc, #68]	; (8018484 <ipfrag_free_pbuf_custom+0x60>)
 8018440:	f00b fdd2 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018444:	68fa      	ldr	r2, [r7, #12]
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	429a      	cmp	r2, r3
 801844a:	d006      	beq.n	801845a <ipfrag_free_pbuf_custom+0x36>
 801844c:	4b0b      	ldr	r3, [pc, #44]	; (801847c <ipfrag_free_pbuf_custom+0x58>)
 801844e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018452:	490d      	ldr	r1, [pc, #52]	; (8018488 <ipfrag_free_pbuf_custom+0x64>)
 8018454:	480b      	ldr	r0, [pc, #44]	; (8018484 <ipfrag_free_pbuf_custom+0x60>)
 8018456:	f00b fdc7 	bl	8023fe8 <iprintf>
  if (pcr->original != NULL) {
 801845a:	68fb      	ldr	r3, [r7, #12]
 801845c:	695b      	ldr	r3, [r3, #20]
 801845e:	2b00      	cmp	r3, #0
 8018460:	d004      	beq.n	801846c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	695b      	ldr	r3, [r3, #20]
 8018466:	4618      	mov	r0, r3
 8018468:	f001 fcae 	bl	8019dc8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801846c:	68f8      	ldr	r0, [r7, #12]
 801846e:	f7ff ffbd 	bl	80183ec <ip_frag_free_pbuf_custom_ref>
}
 8018472:	bf00      	nop
 8018474:	3710      	adds	r7, #16
 8018476:	46bd      	mov	sp, r7
 8018478:	bd80      	pop	{r7, pc}
 801847a:	bf00      	nop
 801847c:	080260d8 	.word	0x080260d8
 8018480:	080262b8 	.word	0x080262b8
 8018484:	0802613c 	.word	0x0802613c
 8018488:	080262c4 	.word	0x080262c4

0801848c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801848c:	b580      	push	{r7, lr}
 801848e:	b094      	sub	sp, #80	; 0x50
 8018490:	af02      	add	r7, sp, #8
 8018492:	60f8      	str	r0, [r7, #12]
 8018494:	60b9      	str	r1, [r7, #8]
 8018496:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018498:	2300      	movs	r3, #0
 801849a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801849e:	68bb      	ldr	r3, [r7, #8]
 80184a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80184a2:	3b14      	subs	r3, #20
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	da00      	bge.n	80184aa <ip4_frag+0x1e>
 80184a8:	3307      	adds	r3, #7
 80184aa:	10db      	asrs	r3, r3, #3
 80184ac:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80184ae:	2314      	movs	r3, #20
 80184b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80184b2:	68fb      	ldr	r3, [r7, #12]
 80184b4:	685b      	ldr	r3, [r3, #4]
 80184b6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80184b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184ba:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80184bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184be:	781b      	ldrb	r3, [r3, #0]
 80184c0:	f003 030f 	and.w	r3, r3, #15
 80184c4:	b2db      	uxtb	r3, r3
 80184c6:	009b      	lsls	r3, r3, #2
 80184c8:	b2db      	uxtb	r3, r3
 80184ca:	2b14      	cmp	r3, #20
 80184cc:	d002      	beq.n	80184d4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80184ce:	f06f 0305 	mvn.w	r3, #5
 80184d2:	e10f      	b.n	80186f4 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	895b      	ldrh	r3, [r3, #10]
 80184d8:	2b13      	cmp	r3, #19
 80184da:	d809      	bhi.n	80184f0 <ip4_frag+0x64>
 80184dc:	4b87      	ldr	r3, [pc, #540]	; (80186fc <ip4_frag+0x270>)
 80184de:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80184e2:	4987      	ldr	r1, [pc, #540]	; (8018700 <ip4_frag+0x274>)
 80184e4:	4887      	ldr	r0, [pc, #540]	; (8018704 <ip4_frag+0x278>)
 80184e6:	f00b fd7f 	bl	8023fe8 <iprintf>
 80184ea:	f06f 0305 	mvn.w	r3, #5
 80184ee:	e101      	b.n	80186f4 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80184f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184f2:	88db      	ldrh	r3, [r3, #6]
 80184f4:	b29b      	uxth	r3, r3
 80184f6:	4618      	mov	r0, r3
 80184f8:	f7fb fc54 	bl	8013da4 <lwip_htons>
 80184fc:	4603      	mov	r3, r0
 80184fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018500:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018502:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018506:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801850a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801850c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018510:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018512:	68fb      	ldr	r3, [r7, #12]
 8018514:	891b      	ldrh	r3, [r3, #8]
 8018516:	3b14      	subs	r3, #20
 8018518:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801851c:	e0e0      	b.n	80186e0 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801851e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018520:	00db      	lsls	r3, r3, #3
 8018522:	b29b      	uxth	r3, r3
 8018524:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018528:	4293      	cmp	r3, r2
 801852a:	bf28      	it	cs
 801852c:	4613      	movcs	r3, r2
 801852e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018530:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018534:	2114      	movs	r1, #20
 8018536:	200e      	movs	r0, #14
 8018538:	f001 f966 	bl	8019808 <pbuf_alloc>
 801853c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801853e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018540:	2b00      	cmp	r3, #0
 8018542:	f000 80d4 	beq.w	80186ee <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018548:	895b      	ldrh	r3, [r3, #10]
 801854a:	2b13      	cmp	r3, #19
 801854c:	d806      	bhi.n	801855c <ip4_frag+0xd0>
 801854e:	4b6b      	ldr	r3, [pc, #428]	; (80186fc <ip4_frag+0x270>)
 8018550:	f240 3225 	movw	r2, #805	; 0x325
 8018554:	496c      	ldr	r1, [pc, #432]	; (8018708 <ip4_frag+0x27c>)
 8018556:	486b      	ldr	r0, [pc, #428]	; (8018704 <ip4_frag+0x278>)
 8018558:	f00b fd46 	bl	8023fe8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801855e:	685b      	ldr	r3, [r3, #4]
 8018560:	2214      	movs	r2, #20
 8018562:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018564:	4618      	mov	r0, r3
 8018566:	f00b fc84 	bl	8023e72 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801856c:	685b      	ldr	r3, [r3, #4]
 801856e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018570:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018572:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018576:	e064      	b.n	8018642 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018578:	68fb      	ldr	r3, [r7, #12]
 801857a:	895a      	ldrh	r2, [r3, #10]
 801857c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801857e:	1ad3      	subs	r3, r2, r3
 8018580:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018582:	68fb      	ldr	r3, [r7, #12]
 8018584:	895b      	ldrh	r3, [r3, #10]
 8018586:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018588:	429a      	cmp	r2, r3
 801858a:	d906      	bls.n	801859a <ip4_frag+0x10e>
 801858c:	4b5b      	ldr	r3, [pc, #364]	; (80186fc <ip4_frag+0x270>)
 801858e:	f240 322d 	movw	r2, #813	; 0x32d
 8018592:	495e      	ldr	r1, [pc, #376]	; (801870c <ip4_frag+0x280>)
 8018594:	485b      	ldr	r0, [pc, #364]	; (8018704 <ip4_frag+0x278>)
 8018596:	f00b fd27 	bl	8023fe8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801859a:	8bfa      	ldrh	r2, [r7, #30]
 801859c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80185a0:	4293      	cmp	r3, r2
 80185a2:	bf28      	it	cs
 80185a4:	4613      	movcs	r3, r2
 80185a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80185aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d105      	bne.n	80185be <ip4_frag+0x132>
        poff = 0;
 80185b2:	2300      	movs	r3, #0
 80185b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	60fb      	str	r3, [r7, #12]
        continue;
 80185bc:	e041      	b.n	8018642 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80185be:	f7ff ff0d 	bl	80183dc <ip_frag_alloc_pbuf_custom_ref>
 80185c2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80185c4:	69bb      	ldr	r3, [r7, #24]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d103      	bne.n	80185d2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80185ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80185cc:	f001 fbfc 	bl	8019dc8 <pbuf_free>
        goto memerr;
 80185d0:	e08e      	b.n	80186f0 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80185d2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80185d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80185da:	4413      	add	r3, r2
 80185dc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80185e0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80185e4:	9201      	str	r2, [sp, #4]
 80185e6:	9300      	str	r3, [sp, #0]
 80185e8:	4603      	mov	r3, r0
 80185ea:	2241      	movs	r2, #65	; 0x41
 80185ec:	2000      	movs	r0, #0
 80185ee:	f001 fa31 	bl	8019a54 <pbuf_alloced_custom>
 80185f2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80185f4:	697b      	ldr	r3, [r7, #20]
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d106      	bne.n	8018608 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80185fa:	69b8      	ldr	r0, [r7, #24]
 80185fc:	f7ff fef6 	bl	80183ec <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018600:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018602:	f001 fbe1 	bl	8019dc8 <pbuf_free>
        goto memerr;
 8018606:	e073      	b.n	80186f0 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8018608:	68f8      	ldr	r0, [r7, #12]
 801860a:	f001 fc83 	bl	8019f14 <pbuf_ref>
      pcr->original = p;
 801860e:	69bb      	ldr	r3, [r7, #24]
 8018610:	68fa      	ldr	r2, [r7, #12]
 8018612:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018614:	69bb      	ldr	r3, [r7, #24]
 8018616:	4a3e      	ldr	r2, [pc, #248]	; (8018710 <ip4_frag+0x284>)
 8018618:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801861a:	6979      	ldr	r1, [r7, #20]
 801861c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801861e:	f001 fca1 	bl	8019f64 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018622:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018626:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801862a:	1ad3      	subs	r3, r2, r3
 801862c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018630:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018634:	2b00      	cmp	r3, #0
 8018636:	d004      	beq.n	8018642 <ip4_frag+0x1b6>
        poff = 0;
 8018638:	2300      	movs	r3, #0
 801863a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801863c:	68fb      	ldr	r3, [r7, #12]
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018642:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018646:	2b00      	cmp	r3, #0
 8018648:	d196      	bne.n	8018578 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801864a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801864c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018650:	4413      	add	r3, r2
 8018652:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018654:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018658:	68bb      	ldr	r3, [r7, #8]
 801865a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801865c:	3b14      	subs	r3, #20
 801865e:	429a      	cmp	r2, r3
 8018660:	bfd4      	ite	le
 8018662:	2301      	movle	r3, #1
 8018664:	2300      	movgt	r3, #0
 8018666:	b2db      	uxtb	r3, r3
 8018668:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801866a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801866e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018672:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018674:	6a3b      	ldr	r3, [r7, #32]
 8018676:	2b00      	cmp	r3, #0
 8018678:	d002      	beq.n	8018680 <ip4_frag+0x1f4>
 801867a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801867c:	2b00      	cmp	r3, #0
 801867e:	d003      	beq.n	8018688 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018680:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018682:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018686:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018688:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801868a:	4618      	mov	r0, r3
 801868c:	f7fb fb8a 	bl	8013da4 <lwip_htons>
 8018690:	4603      	mov	r3, r0
 8018692:	461a      	mov	r2, r3
 8018694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018696:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018698:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801869a:	3314      	adds	r3, #20
 801869c:	b29b      	uxth	r3, r3
 801869e:	4618      	mov	r0, r3
 80186a0:	f7fb fb80 	bl	8013da4 <lwip_htons>
 80186a4:	4603      	mov	r3, r0
 80186a6:	461a      	mov	r2, r3
 80186a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186aa:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80186ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186ae:	2200      	movs	r2, #0
 80186b0:	729a      	strb	r2, [r3, #10]
 80186b2:	2200      	movs	r2, #0
 80186b4:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80186b6:	68bb      	ldr	r3, [r7, #8]
 80186b8:	695b      	ldr	r3, [r3, #20]
 80186ba:	687a      	ldr	r2, [r7, #4]
 80186bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80186be:	68b8      	ldr	r0, [r7, #8]
 80186c0:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80186c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80186c4:	f001 fb80 	bl	8019dc8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80186c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80186cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80186ce:	1ad3      	subs	r3, r2, r3
 80186d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80186d4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80186d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80186da:	4413      	add	r3, r2
 80186dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80186e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	f47f af1a 	bne.w	801851e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80186ea:	2300      	movs	r3, #0
 80186ec:	e002      	b.n	80186f4 <ip4_frag+0x268>
      goto memerr;
 80186ee:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80186f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80186f4:	4618      	mov	r0, r3
 80186f6:	3748      	adds	r7, #72	; 0x48
 80186f8:	46bd      	mov	sp, r7
 80186fa:	bd80      	pop	{r7, pc}
 80186fc:	080260d8 	.word	0x080260d8
 8018700:	080262d0 	.word	0x080262d0
 8018704:	0802613c 	.word	0x0802613c
 8018708:	080262ec 	.word	0x080262ec
 801870c:	0802630c 	.word	0x0802630c
 8018710:	08018425 	.word	0x08018425

08018714 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8018714:	b480      	push	{r7}
 8018716:	b083      	sub	sp, #12
 8018718:	af00      	add	r7, sp, #0
 801871a:	4603      	mov	r3, r0
 801871c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801871e:	4b05      	ldr	r3, [pc, #20]	; (8018734 <ptr_to_mem+0x20>)
 8018720:	681a      	ldr	r2, [r3, #0]
 8018722:	88fb      	ldrh	r3, [r7, #6]
 8018724:	4413      	add	r3, r2
}
 8018726:	4618      	mov	r0, r3
 8018728:	370c      	adds	r7, #12
 801872a:	46bd      	mov	sp, r7
 801872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018730:	4770      	bx	lr
 8018732:	bf00      	nop
 8018734:	20008a20 	.word	0x20008a20

08018738 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8018738:	b480      	push	{r7}
 801873a:	b083      	sub	sp, #12
 801873c:	af00      	add	r7, sp, #0
 801873e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8018740:	687b      	ldr	r3, [r7, #4]
 8018742:	4a05      	ldr	r2, [pc, #20]	; (8018758 <mem_to_ptr+0x20>)
 8018744:	6812      	ldr	r2, [r2, #0]
 8018746:	1a9b      	subs	r3, r3, r2
 8018748:	b29b      	uxth	r3, r3
}
 801874a:	4618      	mov	r0, r3
 801874c:	370c      	adds	r7, #12
 801874e:	46bd      	mov	sp, r7
 8018750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018754:	4770      	bx	lr
 8018756:	bf00      	nop
 8018758:	20008a20 	.word	0x20008a20

0801875c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801875c:	b590      	push	{r4, r7, lr}
 801875e:	b085      	sub	sp, #20
 8018760:	af00      	add	r7, sp, #0
 8018762:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8018764:	4b45      	ldr	r3, [pc, #276]	; (801887c <plug_holes+0x120>)
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	687a      	ldr	r2, [r7, #4]
 801876a:	429a      	cmp	r2, r3
 801876c:	d206      	bcs.n	801877c <plug_holes+0x20>
 801876e:	4b44      	ldr	r3, [pc, #272]	; (8018880 <plug_holes+0x124>)
 8018770:	f240 12df 	movw	r2, #479	; 0x1df
 8018774:	4943      	ldr	r1, [pc, #268]	; (8018884 <plug_holes+0x128>)
 8018776:	4844      	ldr	r0, [pc, #272]	; (8018888 <plug_holes+0x12c>)
 8018778:	f00b fc36 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801877c:	4b43      	ldr	r3, [pc, #268]	; (801888c <plug_holes+0x130>)
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	687a      	ldr	r2, [r7, #4]
 8018782:	429a      	cmp	r2, r3
 8018784:	d306      	bcc.n	8018794 <plug_holes+0x38>
 8018786:	4b3e      	ldr	r3, [pc, #248]	; (8018880 <plug_holes+0x124>)
 8018788:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801878c:	4940      	ldr	r1, [pc, #256]	; (8018890 <plug_holes+0x134>)
 801878e:	483e      	ldr	r0, [pc, #248]	; (8018888 <plug_holes+0x12c>)
 8018790:	f00b fc2a 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	791b      	ldrb	r3, [r3, #4]
 8018798:	2b00      	cmp	r3, #0
 801879a:	d006      	beq.n	80187aa <plug_holes+0x4e>
 801879c:	4b38      	ldr	r3, [pc, #224]	; (8018880 <plug_holes+0x124>)
 801879e:	f240 12e1 	movw	r2, #481	; 0x1e1
 80187a2:	493c      	ldr	r1, [pc, #240]	; (8018894 <plug_holes+0x138>)
 80187a4:	4838      	ldr	r0, [pc, #224]	; (8018888 <plug_holes+0x12c>)
 80187a6:	f00b fc1f 	bl	8023fe8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	881b      	ldrh	r3, [r3, #0]
 80187ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80187b2:	d906      	bls.n	80187c2 <plug_holes+0x66>
 80187b4:	4b32      	ldr	r3, [pc, #200]	; (8018880 <plug_holes+0x124>)
 80187b6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80187ba:	4937      	ldr	r1, [pc, #220]	; (8018898 <plug_holes+0x13c>)
 80187bc:	4832      	ldr	r0, [pc, #200]	; (8018888 <plug_holes+0x12c>)
 80187be:	f00b fc13 	bl	8023fe8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	881b      	ldrh	r3, [r3, #0]
 80187c6:	4618      	mov	r0, r3
 80187c8:	f7ff ffa4 	bl	8018714 <ptr_to_mem>
 80187cc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80187ce:	687a      	ldr	r2, [r7, #4]
 80187d0:	68fb      	ldr	r3, [r7, #12]
 80187d2:	429a      	cmp	r2, r3
 80187d4:	d024      	beq.n	8018820 <plug_holes+0xc4>
 80187d6:	68fb      	ldr	r3, [r7, #12]
 80187d8:	791b      	ldrb	r3, [r3, #4]
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d120      	bne.n	8018820 <plug_holes+0xc4>
 80187de:	4b2b      	ldr	r3, [pc, #172]	; (801888c <plug_holes+0x130>)
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	68fa      	ldr	r2, [r7, #12]
 80187e4:	429a      	cmp	r2, r3
 80187e6:	d01b      	beq.n	8018820 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80187e8:	4b2c      	ldr	r3, [pc, #176]	; (801889c <plug_holes+0x140>)
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	68fa      	ldr	r2, [r7, #12]
 80187ee:	429a      	cmp	r2, r3
 80187f0:	d102      	bne.n	80187f8 <plug_holes+0x9c>
      lfree = mem;
 80187f2:	4a2a      	ldr	r2, [pc, #168]	; (801889c <plug_holes+0x140>)
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	881a      	ldrh	r2, [r3, #0]
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8018800:	68fb      	ldr	r3, [r7, #12]
 8018802:	881b      	ldrh	r3, [r3, #0]
 8018804:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8018808:	d00a      	beq.n	8018820 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801880a:	68fb      	ldr	r3, [r7, #12]
 801880c:	881b      	ldrh	r3, [r3, #0]
 801880e:	4618      	mov	r0, r3
 8018810:	f7ff ff80 	bl	8018714 <ptr_to_mem>
 8018814:	4604      	mov	r4, r0
 8018816:	6878      	ldr	r0, [r7, #4]
 8018818:	f7ff ff8e 	bl	8018738 <mem_to_ptr>
 801881c:	4603      	mov	r3, r0
 801881e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	885b      	ldrh	r3, [r3, #2]
 8018824:	4618      	mov	r0, r3
 8018826:	f7ff ff75 	bl	8018714 <ptr_to_mem>
 801882a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801882c:	68ba      	ldr	r2, [r7, #8]
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	429a      	cmp	r2, r3
 8018832:	d01f      	beq.n	8018874 <plug_holes+0x118>
 8018834:	68bb      	ldr	r3, [r7, #8]
 8018836:	791b      	ldrb	r3, [r3, #4]
 8018838:	2b00      	cmp	r3, #0
 801883a:	d11b      	bne.n	8018874 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801883c:	4b17      	ldr	r3, [pc, #92]	; (801889c <plug_holes+0x140>)
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	687a      	ldr	r2, [r7, #4]
 8018842:	429a      	cmp	r2, r3
 8018844:	d102      	bne.n	801884c <plug_holes+0xf0>
      lfree = pmem;
 8018846:	4a15      	ldr	r2, [pc, #84]	; (801889c <plug_holes+0x140>)
 8018848:	68bb      	ldr	r3, [r7, #8]
 801884a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	881a      	ldrh	r2, [r3, #0]
 8018850:	68bb      	ldr	r3, [r7, #8]
 8018852:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	881b      	ldrh	r3, [r3, #0]
 8018858:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801885c:	d00a      	beq.n	8018874 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	881b      	ldrh	r3, [r3, #0]
 8018862:	4618      	mov	r0, r3
 8018864:	f7ff ff56 	bl	8018714 <ptr_to_mem>
 8018868:	4604      	mov	r4, r0
 801886a:	68b8      	ldr	r0, [r7, #8]
 801886c:	f7ff ff64 	bl	8018738 <mem_to_ptr>
 8018870:	4603      	mov	r3, r0
 8018872:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8018874:	bf00      	nop
 8018876:	3714      	adds	r7, #20
 8018878:	46bd      	mov	sp, r7
 801887a:	bd90      	pop	{r4, r7, pc}
 801887c:	20008a20 	.word	0x20008a20
 8018880:	0802631c 	.word	0x0802631c
 8018884:	08026368 	.word	0x08026368
 8018888:	08026380 	.word	0x08026380
 801888c:	20008a24 	.word	0x20008a24
 8018890:	080263a8 	.word	0x080263a8
 8018894:	080263c4 	.word	0x080263c4
 8018898:	080263e0 	.word	0x080263e0
 801889c:	20008a2c 	.word	0x20008a2c

080188a0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80188a0:	b580      	push	{r7, lr}
 80188a2:	b082      	sub	sp, #8
 80188a4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80188a6:	4b1f      	ldr	r3, [pc, #124]	; (8018924 <mem_init+0x84>)
 80188a8:	3303      	adds	r3, #3
 80188aa:	f023 0303 	bic.w	r3, r3, #3
 80188ae:	461a      	mov	r2, r3
 80188b0:	4b1d      	ldr	r3, [pc, #116]	; (8018928 <mem_init+0x88>)
 80188b2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80188b4:	4b1c      	ldr	r3, [pc, #112]	; (8018928 <mem_init+0x88>)
 80188b6:	681b      	ldr	r3, [r3, #0]
 80188b8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80188ba:	687b      	ldr	r3, [r7, #4]
 80188bc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80188c0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	2200      	movs	r2, #0
 80188c6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	2200      	movs	r2, #0
 80188cc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80188ce:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80188d2:	f7ff ff1f 	bl	8018714 <ptr_to_mem>
 80188d6:	4602      	mov	r2, r0
 80188d8:	4b14      	ldr	r3, [pc, #80]	; (801892c <mem_init+0x8c>)
 80188da:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 80188dc:	4b13      	ldr	r3, [pc, #76]	; (801892c <mem_init+0x8c>)
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	2201      	movs	r2, #1
 80188e2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80188e4:	4b11      	ldr	r3, [pc, #68]	; (801892c <mem_init+0x8c>)
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80188ec:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80188ee:	4b0f      	ldr	r3, [pc, #60]	; (801892c <mem_init+0x8c>)
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80188f6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80188f8:	4b0b      	ldr	r3, [pc, #44]	; (8018928 <mem_init+0x88>)
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	4a0c      	ldr	r2, [pc, #48]	; (8018930 <mem_init+0x90>)
 80188fe:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8018900:	480c      	ldr	r0, [pc, #48]	; (8018934 <mem_init+0x94>)
 8018902:	f001 ffcb 	bl	801a89c <sys_mutex_new>
 8018906:	4603      	mov	r3, r0
 8018908:	2b00      	cmp	r3, #0
 801890a:	d006      	beq.n	801891a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801890c:	4b0a      	ldr	r3, [pc, #40]	; (8018938 <mem_init+0x98>)
 801890e:	f240 221f 	movw	r2, #543	; 0x21f
 8018912:	490a      	ldr	r1, [pc, #40]	; (801893c <mem_init+0x9c>)
 8018914:	480a      	ldr	r0, [pc, #40]	; (8018940 <mem_init+0xa0>)
 8018916:	f00b fb67 	bl	8023fe8 <iprintf>
  }
}
 801891a:	bf00      	nop
 801891c:	3708      	adds	r7, #8
 801891e:	46bd      	mov	sp, r7
 8018920:	bd80      	pop	{r7, pc}
 8018922:	bf00      	nop
 8018924:	2000dfb0 	.word	0x2000dfb0
 8018928:	20008a20 	.word	0x20008a20
 801892c:	20008a24 	.word	0x20008a24
 8018930:	20008a2c 	.word	0x20008a2c
 8018934:	20008a28 	.word	0x20008a28
 8018938:	0802631c 	.word	0x0802631c
 801893c:	0802640c 	.word	0x0802640c
 8018940:	08026380 	.word	0x08026380

08018944 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8018944:	b580      	push	{r7, lr}
 8018946:	b086      	sub	sp, #24
 8018948:	af00      	add	r7, sp, #0
 801894a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801894c:	6878      	ldr	r0, [r7, #4]
 801894e:	f7ff fef3 	bl	8018738 <mem_to_ptr>
 8018952:	4603      	mov	r3, r0
 8018954:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	881b      	ldrh	r3, [r3, #0]
 801895a:	4618      	mov	r0, r3
 801895c:	f7ff feda 	bl	8018714 <ptr_to_mem>
 8018960:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	885b      	ldrh	r3, [r3, #2]
 8018966:	4618      	mov	r0, r3
 8018968:	f7ff fed4 	bl	8018714 <ptr_to_mem>
 801896c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	881b      	ldrh	r3, [r3, #0]
 8018972:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8018976:	d818      	bhi.n	80189aa <mem_link_valid+0x66>
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	885b      	ldrh	r3, [r3, #2]
 801897c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8018980:	d813      	bhi.n	80189aa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8018986:	8afa      	ldrh	r2, [r7, #22]
 8018988:	429a      	cmp	r2, r3
 801898a:	d004      	beq.n	8018996 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	881b      	ldrh	r3, [r3, #0]
 8018990:	8afa      	ldrh	r2, [r7, #22]
 8018992:	429a      	cmp	r2, r3
 8018994:	d109      	bne.n	80189aa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8018996:	4b08      	ldr	r3, [pc, #32]	; (80189b8 <mem_link_valid+0x74>)
 8018998:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801899a:	693a      	ldr	r2, [r7, #16]
 801899c:	429a      	cmp	r2, r3
 801899e:	d006      	beq.n	80189ae <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80189a0:	693b      	ldr	r3, [r7, #16]
 80189a2:	885b      	ldrh	r3, [r3, #2]
 80189a4:	8afa      	ldrh	r2, [r7, #22]
 80189a6:	429a      	cmp	r2, r3
 80189a8:	d001      	beq.n	80189ae <mem_link_valid+0x6a>
    return 0;
 80189aa:	2300      	movs	r3, #0
 80189ac:	e000      	b.n	80189b0 <mem_link_valid+0x6c>
  }
  return 1;
 80189ae:	2301      	movs	r3, #1
}
 80189b0:	4618      	mov	r0, r3
 80189b2:	3718      	adds	r7, #24
 80189b4:	46bd      	mov	sp, r7
 80189b6:	bd80      	pop	{r7, pc}
 80189b8:	20008a24 	.word	0x20008a24

080189bc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80189bc:	b580      	push	{r7, lr}
 80189be:	b088      	sub	sp, #32
 80189c0:	af00      	add	r7, sp, #0
 80189c2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d070      	beq.n	8018aac <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	f003 0303 	and.w	r3, r3, #3
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	d00d      	beq.n	80189f0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80189d4:	4b37      	ldr	r3, [pc, #220]	; (8018ab4 <mem_free+0xf8>)
 80189d6:	f240 2273 	movw	r2, #627	; 0x273
 80189da:	4937      	ldr	r1, [pc, #220]	; (8018ab8 <mem_free+0xfc>)
 80189dc:	4837      	ldr	r0, [pc, #220]	; (8018abc <mem_free+0x100>)
 80189de:	f00b fb03 	bl	8023fe8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80189e2:	f001 ffb9 	bl	801a958 <sys_arch_protect>
 80189e6:	60f8      	str	r0, [r7, #12]
 80189e8:	68f8      	ldr	r0, [r7, #12]
 80189ea:	f001 ffc3 	bl	801a974 <sys_arch_unprotect>
    return;
 80189ee:	e05e      	b.n	8018aae <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	3b08      	subs	r3, #8
 80189f4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80189f6:	4b32      	ldr	r3, [pc, #200]	; (8018ac0 <mem_free+0x104>)
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	69fa      	ldr	r2, [r7, #28]
 80189fc:	429a      	cmp	r2, r3
 80189fe:	d306      	bcc.n	8018a0e <mem_free+0x52>
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	f103 020c 	add.w	r2, r3, #12
 8018a06:	4b2f      	ldr	r3, [pc, #188]	; (8018ac4 <mem_free+0x108>)
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	429a      	cmp	r2, r3
 8018a0c:	d90d      	bls.n	8018a2a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8018a0e:	4b29      	ldr	r3, [pc, #164]	; (8018ab4 <mem_free+0xf8>)
 8018a10:	f240 227f 	movw	r2, #639	; 0x27f
 8018a14:	492c      	ldr	r1, [pc, #176]	; (8018ac8 <mem_free+0x10c>)
 8018a16:	4829      	ldr	r0, [pc, #164]	; (8018abc <mem_free+0x100>)
 8018a18:	f00b fae6 	bl	8023fe8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018a1c:	f001 ff9c 	bl	801a958 <sys_arch_protect>
 8018a20:	6138      	str	r0, [r7, #16]
 8018a22:	6938      	ldr	r0, [r7, #16]
 8018a24:	f001 ffa6 	bl	801a974 <sys_arch_unprotect>
    return;
 8018a28:	e041      	b.n	8018aae <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8018a2a:	4828      	ldr	r0, [pc, #160]	; (8018acc <mem_free+0x110>)
 8018a2c:	f001 ff52 	bl	801a8d4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8018a30:	69fb      	ldr	r3, [r7, #28]
 8018a32:	791b      	ldrb	r3, [r3, #4]
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d110      	bne.n	8018a5a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8018a38:	4b1e      	ldr	r3, [pc, #120]	; (8018ab4 <mem_free+0xf8>)
 8018a3a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8018a3e:	4924      	ldr	r1, [pc, #144]	; (8018ad0 <mem_free+0x114>)
 8018a40:	481e      	ldr	r0, [pc, #120]	; (8018abc <mem_free+0x100>)
 8018a42:	f00b fad1 	bl	8023fe8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8018a46:	4821      	ldr	r0, [pc, #132]	; (8018acc <mem_free+0x110>)
 8018a48:	f001 ff53 	bl	801a8f2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018a4c:	f001 ff84 	bl	801a958 <sys_arch_protect>
 8018a50:	6178      	str	r0, [r7, #20]
 8018a52:	6978      	ldr	r0, [r7, #20]
 8018a54:	f001 ff8e 	bl	801a974 <sys_arch_unprotect>
    return;
 8018a58:	e029      	b.n	8018aae <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8018a5a:	69f8      	ldr	r0, [r7, #28]
 8018a5c:	f7ff ff72 	bl	8018944 <mem_link_valid>
 8018a60:	4603      	mov	r3, r0
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d110      	bne.n	8018a88 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8018a66:	4b13      	ldr	r3, [pc, #76]	; (8018ab4 <mem_free+0xf8>)
 8018a68:	f240 2295 	movw	r2, #661	; 0x295
 8018a6c:	4919      	ldr	r1, [pc, #100]	; (8018ad4 <mem_free+0x118>)
 8018a6e:	4813      	ldr	r0, [pc, #76]	; (8018abc <mem_free+0x100>)
 8018a70:	f00b faba 	bl	8023fe8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8018a74:	4815      	ldr	r0, [pc, #84]	; (8018acc <mem_free+0x110>)
 8018a76:	f001 ff3c 	bl	801a8f2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018a7a:	f001 ff6d 	bl	801a958 <sys_arch_protect>
 8018a7e:	61b8      	str	r0, [r7, #24]
 8018a80:	69b8      	ldr	r0, [r7, #24]
 8018a82:	f001 ff77 	bl	801a974 <sys_arch_unprotect>
    return;
 8018a86:	e012      	b.n	8018aae <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8018a88:	69fb      	ldr	r3, [r7, #28]
 8018a8a:	2200      	movs	r2, #0
 8018a8c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8018a8e:	4b12      	ldr	r3, [pc, #72]	; (8018ad8 <mem_free+0x11c>)
 8018a90:	681b      	ldr	r3, [r3, #0]
 8018a92:	69fa      	ldr	r2, [r7, #28]
 8018a94:	429a      	cmp	r2, r3
 8018a96:	d202      	bcs.n	8018a9e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8018a98:	4a0f      	ldr	r2, [pc, #60]	; (8018ad8 <mem_free+0x11c>)
 8018a9a:	69fb      	ldr	r3, [r7, #28]
 8018a9c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8018a9e:	69f8      	ldr	r0, [r7, #28]
 8018aa0:	f7ff fe5c 	bl	801875c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8018aa4:	4809      	ldr	r0, [pc, #36]	; (8018acc <mem_free+0x110>)
 8018aa6:	f001 ff24 	bl	801a8f2 <sys_mutex_unlock>
 8018aaa:	e000      	b.n	8018aae <mem_free+0xf2>
    return;
 8018aac:	bf00      	nop
}
 8018aae:	3720      	adds	r7, #32
 8018ab0:	46bd      	mov	sp, r7
 8018ab2:	bd80      	pop	{r7, pc}
 8018ab4:	0802631c 	.word	0x0802631c
 8018ab8:	08026428 	.word	0x08026428
 8018abc:	08026380 	.word	0x08026380
 8018ac0:	20008a20 	.word	0x20008a20
 8018ac4:	20008a24 	.word	0x20008a24
 8018ac8:	0802644c 	.word	0x0802644c
 8018acc:	20008a28 	.word	0x20008a28
 8018ad0:	08026468 	.word	0x08026468
 8018ad4:	08026490 	.word	0x08026490
 8018ad8:	20008a2c 	.word	0x20008a2c

08018adc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8018adc:	b580      	push	{r7, lr}
 8018ade:	b088      	sub	sp, #32
 8018ae0:	af00      	add	r7, sp, #0
 8018ae2:	6078      	str	r0, [r7, #4]
 8018ae4:	460b      	mov	r3, r1
 8018ae6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8018ae8:	887b      	ldrh	r3, [r7, #2]
 8018aea:	3303      	adds	r3, #3
 8018aec:	b29b      	uxth	r3, r3
 8018aee:	f023 0303 	bic.w	r3, r3, #3
 8018af2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8018af4:	8bfb      	ldrh	r3, [r7, #30]
 8018af6:	2b0b      	cmp	r3, #11
 8018af8:	d801      	bhi.n	8018afe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8018afa:	230c      	movs	r3, #12
 8018afc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8018afe:	8bfb      	ldrh	r3, [r7, #30]
 8018b00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8018b04:	d803      	bhi.n	8018b0e <mem_trim+0x32>
 8018b06:	8bfa      	ldrh	r2, [r7, #30]
 8018b08:	887b      	ldrh	r3, [r7, #2]
 8018b0a:	429a      	cmp	r2, r3
 8018b0c:	d201      	bcs.n	8018b12 <mem_trim+0x36>
    return NULL;
 8018b0e:	2300      	movs	r3, #0
 8018b10:	e0d8      	b.n	8018cc4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8018b12:	4b6e      	ldr	r3, [pc, #440]	; (8018ccc <mem_trim+0x1f0>)
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	687a      	ldr	r2, [r7, #4]
 8018b18:	429a      	cmp	r2, r3
 8018b1a:	d304      	bcc.n	8018b26 <mem_trim+0x4a>
 8018b1c:	4b6c      	ldr	r3, [pc, #432]	; (8018cd0 <mem_trim+0x1f4>)
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	687a      	ldr	r2, [r7, #4]
 8018b22:	429a      	cmp	r2, r3
 8018b24:	d306      	bcc.n	8018b34 <mem_trim+0x58>
 8018b26:	4b6b      	ldr	r3, [pc, #428]	; (8018cd4 <mem_trim+0x1f8>)
 8018b28:	f240 22d2 	movw	r2, #722	; 0x2d2
 8018b2c:	496a      	ldr	r1, [pc, #424]	; (8018cd8 <mem_trim+0x1fc>)
 8018b2e:	486b      	ldr	r0, [pc, #428]	; (8018cdc <mem_trim+0x200>)
 8018b30:	f00b fa5a 	bl	8023fe8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8018b34:	4b65      	ldr	r3, [pc, #404]	; (8018ccc <mem_trim+0x1f0>)
 8018b36:	681b      	ldr	r3, [r3, #0]
 8018b38:	687a      	ldr	r2, [r7, #4]
 8018b3a:	429a      	cmp	r2, r3
 8018b3c:	d304      	bcc.n	8018b48 <mem_trim+0x6c>
 8018b3e:	4b64      	ldr	r3, [pc, #400]	; (8018cd0 <mem_trim+0x1f4>)
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	687a      	ldr	r2, [r7, #4]
 8018b44:	429a      	cmp	r2, r3
 8018b46:	d307      	bcc.n	8018b58 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018b48:	f001 ff06 	bl	801a958 <sys_arch_protect>
 8018b4c:	60b8      	str	r0, [r7, #8]
 8018b4e:	68b8      	ldr	r0, [r7, #8]
 8018b50:	f001 ff10 	bl	801a974 <sys_arch_unprotect>
    return rmem;
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	e0b5      	b.n	8018cc4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	3b08      	subs	r3, #8
 8018b5c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8018b5e:	69b8      	ldr	r0, [r7, #24]
 8018b60:	f7ff fdea 	bl	8018738 <mem_to_ptr>
 8018b64:	4603      	mov	r3, r0
 8018b66:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8018b68:	69bb      	ldr	r3, [r7, #24]
 8018b6a:	881a      	ldrh	r2, [r3, #0]
 8018b6c:	8afb      	ldrh	r3, [r7, #22]
 8018b6e:	1ad3      	subs	r3, r2, r3
 8018b70:	b29b      	uxth	r3, r3
 8018b72:	3b08      	subs	r3, #8
 8018b74:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8018b76:	8bfa      	ldrh	r2, [r7, #30]
 8018b78:	8abb      	ldrh	r3, [r7, #20]
 8018b7a:	429a      	cmp	r2, r3
 8018b7c:	d906      	bls.n	8018b8c <mem_trim+0xb0>
 8018b7e:	4b55      	ldr	r3, [pc, #340]	; (8018cd4 <mem_trim+0x1f8>)
 8018b80:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8018b84:	4956      	ldr	r1, [pc, #344]	; (8018ce0 <mem_trim+0x204>)
 8018b86:	4855      	ldr	r0, [pc, #340]	; (8018cdc <mem_trim+0x200>)
 8018b88:	f00b fa2e 	bl	8023fe8 <iprintf>
  if (newsize > size) {
 8018b8c:	8bfa      	ldrh	r2, [r7, #30]
 8018b8e:	8abb      	ldrh	r3, [r7, #20]
 8018b90:	429a      	cmp	r2, r3
 8018b92:	d901      	bls.n	8018b98 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8018b94:	2300      	movs	r3, #0
 8018b96:	e095      	b.n	8018cc4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8018b98:	8bfa      	ldrh	r2, [r7, #30]
 8018b9a:	8abb      	ldrh	r3, [r7, #20]
 8018b9c:	429a      	cmp	r2, r3
 8018b9e:	d101      	bne.n	8018ba4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	e08f      	b.n	8018cc4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8018ba4:	484f      	ldr	r0, [pc, #316]	; (8018ce4 <mem_trim+0x208>)
 8018ba6:	f001 fe95 	bl	801a8d4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8018baa:	69bb      	ldr	r3, [r7, #24]
 8018bac:	881b      	ldrh	r3, [r3, #0]
 8018bae:	4618      	mov	r0, r3
 8018bb0:	f7ff fdb0 	bl	8018714 <ptr_to_mem>
 8018bb4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8018bb6:	693b      	ldr	r3, [r7, #16]
 8018bb8:	791b      	ldrb	r3, [r3, #4]
 8018bba:	2b00      	cmp	r3, #0
 8018bbc:	d13f      	bne.n	8018c3e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8018bbe:	69bb      	ldr	r3, [r7, #24]
 8018bc0:	881b      	ldrh	r3, [r3, #0]
 8018bc2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8018bc6:	d106      	bne.n	8018bd6 <mem_trim+0xfa>
 8018bc8:	4b42      	ldr	r3, [pc, #264]	; (8018cd4 <mem_trim+0x1f8>)
 8018bca:	f240 22f5 	movw	r2, #757	; 0x2f5
 8018bce:	4946      	ldr	r1, [pc, #280]	; (8018ce8 <mem_trim+0x20c>)
 8018bd0:	4842      	ldr	r0, [pc, #264]	; (8018cdc <mem_trim+0x200>)
 8018bd2:	f00b fa09 	bl	8023fe8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8018bd6:	693b      	ldr	r3, [r7, #16]
 8018bd8:	881b      	ldrh	r3, [r3, #0]
 8018bda:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8018bdc:	8afa      	ldrh	r2, [r7, #22]
 8018bde:	8bfb      	ldrh	r3, [r7, #30]
 8018be0:	4413      	add	r3, r2
 8018be2:	b29b      	uxth	r3, r3
 8018be4:	3308      	adds	r3, #8
 8018be6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8018be8:	4b40      	ldr	r3, [pc, #256]	; (8018cec <mem_trim+0x210>)
 8018bea:	681b      	ldr	r3, [r3, #0]
 8018bec:	693a      	ldr	r2, [r7, #16]
 8018bee:	429a      	cmp	r2, r3
 8018bf0:	d106      	bne.n	8018c00 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8018bf2:	89fb      	ldrh	r3, [r7, #14]
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	f7ff fd8d 	bl	8018714 <ptr_to_mem>
 8018bfa:	4602      	mov	r2, r0
 8018bfc:	4b3b      	ldr	r3, [pc, #236]	; (8018cec <mem_trim+0x210>)
 8018bfe:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8018c00:	89fb      	ldrh	r3, [r7, #14]
 8018c02:	4618      	mov	r0, r3
 8018c04:	f7ff fd86 	bl	8018714 <ptr_to_mem>
 8018c08:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8018c0a:	693b      	ldr	r3, [r7, #16]
 8018c0c:	2200      	movs	r2, #0
 8018c0e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8018c10:	693b      	ldr	r3, [r7, #16]
 8018c12:	89ba      	ldrh	r2, [r7, #12]
 8018c14:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8018c16:	693b      	ldr	r3, [r7, #16]
 8018c18:	8afa      	ldrh	r2, [r7, #22]
 8018c1a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8018c1c:	69bb      	ldr	r3, [r7, #24]
 8018c1e:	89fa      	ldrh	r2, [r7, #14]
 8018c20:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8018c22:	693b      	ldr	r3, [r7, #16]
 8018c24:	881b      	ldrh	r3, [r3, #0]
 8018c26:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8018c2a:	d047      	beq.n	8018cbc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8018c2c:	693b      	ldr	r3, [r7, #16]
 8018c2e:	881b      	ldrh	r3, [r3, #0]
 8018c30:	4618      	mov	r0, r3
 8018c32:	f7ff fd6f 	bl	8018714 <ptr_to_mem>
 8018c36:	4602      	mov	r2, r0
 8018c38:	89fb      	ldrh	r3, [r7, #14]
 8018c3a:	8053      	strh	r3, [r2, #2]
 8018c3c:	e03e      	b.n	8018cbc <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8018c3e:	8bfb      	ldrh	r3, [r7, #30]
 8018c40:	f103 0214 	add.w	r2, r3, #20
 8018c44:	8abb      	ldrh	r3, [r7, #20]
 8018c46:	429a      	cmp	r2, r3
 8018c48:	d838      	bhi.n	8018cbc <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8018c4a:	8afa      	ldrh	r2, [r7, #22]
 8018c4c:	8bfb      	ldrh	r3, [r7, #30]
 8018c4e:	4413      	add	r3, r2
 8018c50:	b29b      	uxth	r3, r3
 8018c52:	3308      	adds	r3, #8
 8018c54:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8018c56:	69bb      	ldr	r3, [r7, #24]
 8018c58:	881b      	ldrh	r3, [r3, #0]
 8018c5a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8018c5e:	d106      	bne.n	8018c6e <mem_trim+0x192>
 8018c60:	4b1c      	ldr	r3, [pc, #112]	; (8018cd4 <mem_trim+0x1f8>)
 8018c62:	f240 3216 	movw	r2, #790	; 0x316
 8018c66:	4920      	ldr	r1, [pc, #128]	; (8018ce8 <mem_trim+0x20c>)
 8018c68:	481c      	ldr	r0, [pc, #112]	; (8018cdc <mem_trim+0x200>)
 8018c6a:	f00b f9bd 	bl	8023fe8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8018c6e:	89fb      	ldrh	r3, [r7, #14]
 8018c70:	4618      	mov	r0, r3
 8018c72:	f7ff fd4f 	bl	8018714 <ptr_to_mem>
 8018c76:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8018c78:	4b1c      	ldr	r3, [pc, #112]	; (8018cec <mem_trim+0x210>)
 8018c7a:	681b      	ldr	r3, [r3, #0]
 8018c7c:	693a      	ldr	r2, [r7, #16]
 8018c7e:	429a      	cmp	r2, r3
 8018c80:	d202      	bcs.n	8018c88 <mem_trim+0x1ac>
      lfree = mem2;
 8018c82:	4a1a      	ldr	r2, [pc, #104]	; (8018cec <mem_trim+0x210>)
 8018c84:	693b      	ldr	r3, [r7, #16]
 8018c86:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8018c88:	693b      	ldr	r3, [r7, #16]
 8018c8a:	2200      	movs	r2, #0
 8018c8c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8018c8e:	69bb      	ldr	r3, [r7, #24]
 8018c90:	881a      	ldrh	r2, [r3, #0]
 8018c92:	693b      	ldr	r3, [r7, #16]
 8018c94:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8018c96:	693b      	ldr	r3, [r7, #16]
 8018c98:	8afa      	ldrh	r2, [r7, #22]
 8018c9a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8018c9c:	69bb      	ldr	r3, [r7, #24]
 8018c9e:	89fa      	ldrh	r2, [r7, #14]
 8018ca0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8018ca2:	693b      	ldr	r3, [r7, #16]
 8018ca4:	881b      	ldrh	r3, [r3, #0]
 8018ca6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8018caa:	d007      	beq.n	8018cbc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8018cac:	693b      	ldr	r3, [r7, #16]
 8018cae:	881b      	ldrh	r3, [r3, #0]
 8018cb0:	4618      	mov	r0, r3
 8018cb2:	f7ff fd2f 	bl	8018714 <ptr_to_mem>
 8018cb6:	4602      	mov	r2, r0
 8018cb8:	89fb      	ldrh	r3, [r7, #14]
 8018cba:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8018cbc:	4809      	ldr	r0, [pc, #36]	; (8018ce4 <mem_trim+0x208>)
 8018cbe:	f001 fe18 	bl	801a8f2 <sys_mutex_unlock>
  return rmem;
 8018cc2:	687b      	ldr	r3, [r7, #4]
}
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	3720      	adds	r7, #32
 8018cc8:	46bd      	mov	sp, r7
 8018cca:	bd80      	pop	{r7, pc}
 8018ccc:	20008a20 	.word	0x20008a20
 8018cd0:	20008a24 	.word	0x20008a24
 8018cd4:	0802631c 	.word	0x0802631c
 8018cd8:	080264c4 	.word	0x080264c4
 8018cdc:	08026380 	.word	0x08026380
 8018ce0:	080264dc 	.word	0x080264dc
 8018ce4:	20008a28 	.word	0x20008a28
 8018ce8:	080264fc 	.word	0x080264fc
 8018cec:	20008a2c 	.word	0x20008a2c

08018cf0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8018cf0:	b580      	push	{r7, lr}
 8018cf2:	b088      	sub	sp, #32
 8018cf4:	af00      	add	r7, sp, #0
 8018cf6:	4603      	mov	r3, r0
 8018cf8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8018cfa:	88fb      	ldrh	r3, [r7, #6]
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d101      	bne.n	8018d04 <mem_malloc+0x14>
    return NULL;
 8018d00:	2300      	movs	r3, #0
 8018d02:	e0e2      	b.n	8018eca <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8018d04:	88fb      	ldrh	r3, [r7, #6]
 8018d06:	3303      	adds	r3, #3
 8018d08:	b29b      	uxth	r3, r3
 8018d0a:	f023 0303 	bic.w	r3, r3, #3
 8018d0e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8018d10:	8bbb      	ldrh	r3, [r7, #28]
 8018d12:	2b0b      	cmp	r3, #11
 8018d14:	d801      	bhi.n	8018d1a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8018d16:	230c      	movs	r3, #12
 8018d18:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8018d1a:	8bbb      	ldrh	r3, [r7, #28]
 8018d1c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8018d20:	d803      	bhi.n	8018d2a <mem_malloc+0x3a>
 8018d22:	8bba      	ldrh	r2, [r7, #28]
 8018d24:	88fb      	ldrh	r3, [r7, #6]
 8018d26:	429a      	cmp	r2, r3
 8018d28:	d201      	bcs.n	8018d2e <mem_malloc+0x3e>
    return NULL;
 8018d2a:	2300      	movs	r3, #0
 8018d2c:	e0cd      	b.n	8018eca <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8018d2e:	4869      	ldr	r0, [pc, #420]	; (8018ed4 <mem_malloc+0x1e4>)
 8018d30:	f001 fdd0 	bl	801a8d4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8018d34:	4b68      	ldr	r3, [pc, #416]	; (8018ed8 <mem_malloc+0x1e8>)
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	4618      	mov	r0, r3
 8018d3a:	f7ff fcfd 	bl	8018738 <mem_to_ptr>
 8018d3e:	4603      	mov	r3, r0
 8018d40:	83fb      	strh	r3, [r7, #30]
 8018d42:	e0b7      	b.n	8018eb4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8018d44:	8bfb      	ldrh	r3, [r7, #30]
 8018d46:	4618      	mov	r0, r3
 8018d48:	f7ff fce4 	bl	8018714 <ptr_to_mem>
 8018d4c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8018d4e:	697b      	ldr	r3, [r7, #20]
 8018d50:	791b      	ldrb	r3, [r3, #4]
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	f040 80a7 	bne.w	8018ea6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8018d58:	697b      	ldr	r3, [r7, #20]
 8018d5a:	881b      	ldrh	r3, [r3, #0]
 8018d5c:	461a      	mov	r2, r3
 8018d5e:	8bfb      	ldrh	r3, [r7, #30]
 8018d60:	1ad3      	subs	r3, r2, r3
 8018d62:	f1a3 0208 	sub.w	r2, r3, #8
 8018d66:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8018d68:	429a      	cmp	r2, r3
 8018d6a:	f0c0 809c 	bcc.w	8018ea6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8018d6e:	697b      	ldr	r3, [r7, #20]
 8018d70:	881b      	ldrh	r3, [r3, #0]
 8018d72:	461a      	mov	r2, r3
 8018d74:	8bfb      	ldrh	r3, [r7, #30]
 8018d76:	1ad3      	subs	r3, r2, r3
 8018d78:	f1a3 0208 	sub.w	r2, r3, #8
 8018d7c:	8bbb      	ldrh	r3, [r7, #28]
 8018d7e:	3314      	adds	r3, #20
 8018d80:	429a      	cmp	r2, r3
 8018d82:	d333      	bcc.n	8018dec <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8018d84:	8bfa      	ldrh	r2, [r7, #30]
 8018d86:	8bbb      	ldrh	r3, [r7, #28]
 8018d88:	4413      	add	r3, r2
 8018d8a:	b29b      	uxth	r3, r3
 8018d8c:	3308      	adds	r3, #8
 8018d8e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8018d90:	8a7b      	ldrh	r3, [r7, #18]
 8018d92:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8018d96:	d106      	bne.n	8018da6 <mem_malloc+0xb6>
 8018d98:	4b50      	ldr	r3, [pc, #320]	; (8018edc <mem_malloc+0x1ec>)
 8018d9a:	f240 3287 	movw	r2, #903	; 0x387
 8018d9e:	4950      	ldr	r1, [pc, #320]	; (8018ee0 <mem_malloc+0x1f0>)
 8018da0:	4850      	ldr	r0, [pc, #320]	; (8018ee4 <mem_malloc+0x1f4>)
 8018da2:	f00b f921 	bl	8023fe8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8018da6:	8a7b      	ldrh	r3, [r7, #18]
 8018da8:	4618      	mov	r0, r3
 8018daa:	f7ff fcb3 	bl	8018714 <ptr_to_mem>
 8018dae:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	2200      	movs	r2, #0
 8018db4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8018db6:	697b      	ldr	r3, [r7, #20]
 8018db8:	881a      	ldrh	r2, [r3, #0]
 8018dba:	68fb      	ldr	r3, [r7, #12]
 8018dbc:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8018dbe:	68fb      	ldr	r3, [r7, #12]
 8018dc0:	8bfa      	ldrh	r2, [r7, #30]
 8018dc2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8018dc4:	697b      	ldr	r3, [r7, #20]
 8018dc6:	8a7a      	ldrh	r2, [r7, #18]
 8018dc8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8018dca:	697b      	ldr	r3, [r7, #20]
 8018dcc:	2201      	movs	r2, #1
 8018dce:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	881b      	ldrh	r3, [r3, #0]
 8018dd4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8018dd8:	d00b      	beq.n	8018df2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8018dda:	68fb      	ldr	r3, [r7, #12]
 8018ddc:	881b      	ldrh	r3, [r3, #0]
 8018dde:	4618      	mov	r0, r3
 8018de0:	f7ff fc98 	bl	8018714 <ptr_to_mem>
 8018de4:	4602      	mov	r2, r0
 8018de6:	8a7b      	ldrh	r3, [r7, #18]
 8018de8:	8053      	strh	r3, [r2, #2]
 8018dea:	e002      	b.n	8018df2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8018dec:	697b      	ldr	r3, [r7, #20]
 8018dee:	2201      	movs	r2, #1
 8018df0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8018df2:	4b39      	ldr	r3, [pc, #228]	; (8018ed8 <mem_malloc+0x1e8>)
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	697a      	ldr	r2, [r7, #20]
 8018df8:	429a      	cmp	r2, r3
 8018dfa:	d127      	bne.n	8018e4c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8018dfc:	4b36      	ldr	r3, [pc, #216]	; (8018ed8 <mem_malloc+0x1e8>)
 8018dfe:	681b      	ldr	r3, [r3, #0]
 8018e00:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8018e02:	e005      	b.n	8018e10 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8018e04:	69bb      	ldr	r3, [r7, #24]
 8018e06:	881b      	ldrh	r3, [r3, #0]
 8018e08:	4618      	mov	r0, r3
 8018e0a:	f7ff fc83 	bl	8018714 <ptr_to_mem>
 8018e0e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8018e10:	69bb      	ldr	r3, [r7, #24]
 8018e12:	791b      	ldrb	r3, [r3, #4]
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d004      	beq.n	8018e22 <mem_malloc+0x132>
 8018e18:	4b33      	ldr	r3, [pc, #204]	; (8018ee8 <mem_malloc+0x1f8>)
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	69ba      	ldr	r2, [r7, #24]
 8018e1e:	429a      	cmp	r2, r3
 8018e20:	d1f0      	bne.n	8018e04 <mem_malloc+0x114>
          }
          lfree = cur;
 8018e22:	4a2d      	ldr	r2, [pc, #180]	; (8018ed8 <mem_malloc+0x1e8>)
 8018e24:	69bb      	ldr	r3, [r7, #24]
 8018e26:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8018e28:	4b2b      	ldr	r3, [pc, #172]	; (8018ed8 <mem_malloc+0x1e8>)
 8018e2a:	681a      	ldr	r2, [r3, #0]
 8018e2c:	4b2e      	ldr	r3, [pc, #184]	; (8018ee8 <mem_malloc+0x1f8>)
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	429a      	cmp	r2, r3
 8018e32:	d00b      	beq.n	8018e4c <mem_malloc+0x15c>
 8018e34:	4b28      	ldr	r3, [pc, #160]	; (8018ed8 <mem_malloc+0x1e8>)
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	791b      	ldrb	r3, [r3, #4]
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d006      	beq.n	8018e4c <mem_malloc+0x15c>
 8018e3e:	4b27      	ldr	r3, [pc, #156]	; (8018edc <mem_malloc+0x1ec>)
 8018e40:	f240 32b5 	movw	r2, #949	; 0x3b5
 8018e44:	4929      	ldr	r1, [pc, #164]	; (8018eec <mem_malloc+0x1fc>)
 8018e46:	4827      	ldr	r0, [pc, #156]	; (8018ee4 <mem_malloc+0x1f4>)
 8018e48:	f00b f8ce 	bl	8023fe8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8018e4c:	4821      	ldr	r0, [pc, #132]	; (8018ed4 <mem_malloc+0x1e4>)
 8018e4e:	f001 fd50 	bl	801a8f2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8018e52:	8bba      	ldrh	r2, [r7, #28]
 8018e54:	697b      	ldr	r3, [r7, #20]
 8018e56:	4413      	add	r3, r2
 8018e58:	3308      	adds	r3, #8
 8018e5a:	4a23      	ldr	r2, [pc, #140]	; (8018ee8 <mem_malloc+0x1f8>)
 8018e5c:	6812      	ldr	r2, [r2, #0]
 8018e5e:	4293      	cmp	r3, r2
 8018e60:	d906      	bls.n	8018e70 <mem_malloc+0x180>
 8018e62:	4b1e      	ldr	r3, [pc, #120]	; (8018edc <mem_malloc+0x1ec>)
 8018e64:	f240 32ba 	movw	r2, #954	; 0x3ba
 8018e68:	4921      	ldr	r1, [pc, #132]	; (8018ef0 <mem_malloc+0x200>)
 8018e6a:	481e      	ldr	r0, [pc, #120]	; (8018ee4 <mem_malloc+0x1f4>)
 8018e6c:	f00b f8bc 	bl	8023fe8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8018e70:	697b      	ldr	r3, [r7, #20]
 8018e72:	f003 0303 	and.w	r3, r3, #3
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d006      	beq.n	8018e88 <mem_malloc+0x198>
 8018e7a:	4b18      	ldr	r3, [pc, #96]	; (8018edc <mem_malloc+0x1ec>)
 8018e7c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8018e80:	491c      	ldr	r1, [pc, #112]	; (8018ef4 <mem_malloc+0x204>)
 8018e82:	4818      	ldr	r0, [pc, #96]	; (8018ee4 <mem_malloc+0x1f4>)
 8018e84:	f00b f8b0 	bl	8023fe8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8018e88:	697b      	ldr	r3, [r7, #20]
 8018e8a:	f003 0303 	and.w	r3, r3, #3
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d006      	beq.n	8018ea0 <mem_malloc+0x1b0>
 8018e92:	4b12      	ldr	r3, [pc, #72]	; (8018edc <mem_malloc+0x1ec>)
 8018e94:	f240 32be 	movw	r2, #958	; 0x3be
 8018e98:	4917      	ldr	r1, [pc, #92]	; (8018ef8 <mem_malloc+0x208>)
 8018e9a:	4812      	ldr	r0, [pc, #72]	; (8018ee4 <mem_malloc+0x1f4>)
 8018e9c:	f00b f8a4 	bl	8023fe8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8018ea0:	697b      	ldr	r3, [r7, #20]
 8018ea2:	3308      	adds	r3, #8
 8018ea4:	e011      	b.n	8018eca <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8018ea6:	8bfb      	ldrh	r3, [r7, #30]
 8018ea8:	4618      	mov	r0, r3
 8018eaa:	f7ff fc33 	bl	8018714 <ptr_to_mem>
 8018eae:	4603      	mov	r3, r0
 8018eb0:	881b      	ldrh	r3, [r3, #0]
 8018eb2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8018eb4:	8bfa      	ldrh	r2, [r7, #30]
 8018eb6:	8bbb      	ldrh	r3, [r7, #28]
 8018eb8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8018ebc:	429a      	cmp	r2, r3
 8018ebe:	f4ff af41 	bcc.w	8018d44 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8018ec2:	4804      	ldr	r0, [pc, #16]	; (8018ed4 <mem_malloc+0x1e4>)
 8018ec4:	f001 fd15 	bl	801a8f2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8018ec8:	2300      	movs	r3, #0
}
 8018eca:	4618      	mov	r0, r3
 8018ecc:	3720      	adds	r7, #32
 8018ece:	46bd      	mov	sp, r7
 8018ed0:	bd80      	pop	{r7, pc}
 8018ed2:	bf00      	nop
 8018ed4:	20008a28 	.word	0x20008a28
 8018ed8:	20008a2c 	.word	0x20008a2c
 8018edc:	0802631c 	.word	0x0802631c
 8018ee0:	080264fc 	.word	0x080264fc
 8018ee4:	08026380 	.word	0x08026380
 8018ee8:	20008a24 	.word	0x20008a24
 8018eec:	08026510 	.word	0x08026510
 8018ef0:	0802652c 	.word	0x0802652c
 8018ef4:	0802655c 	.word	0x0802655c
 8018ef8:	0802658c 	.word	0x0802658c

08018efc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8018efc:	b480      	push	{r7}
 8018efe:	b085      	sub	sp, #20
 8018f00:	af00      	add	r7, sp, #0
 8018f02:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	689b      	ldr	r3, [r3, #8]
 8018f08:	2200      	movs	r2, #0
 8018f0a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	685b      	ldr	r3, [r3, #4]
 8018f10:	3303      	adds	r3, #3
 8018f12:	f023 0303 	bic.w	r3, r3, #3
 8018f16:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8018f18:	2300      	movs	r3, #0
 8018f1a:	60fb      	str	r3, [r7, #12]
 8018f1c:	e011      	b.n	8018f42 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	689b      	ldr	r3, [r3, #8]
 8018f22:	681a      	ldr	r2, [r3, #0]
 8018f24:	68bb      	ldr	r3, [r7, #8]
 8018f26:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	689b      	ldr	r3, [r3, #8]
 8018f2c:	68ba      	ldr	r2, [r7, #8]
 8018f2e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	881b      	ldrh	r3, [r3, #0]
 8018f34:	461a      	mov	r2, r3
 8018f36:	68bb      	ldr	r3, [r7, #8]
 8018f38:	4413      	add	r3, r2
 8018f3a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8018f3c:	68fb      	ldr	r3, [r7, #12]
 8018f3e:	3301      	adds	r3, #1
 8018f40:	60fb      	str	r3, [r7, #12]
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	885b      	ldrh	r3, [r3, #2]
 8018f46:	461a      	mov	r2, r3
 8018f48:	68fb      	ldr	r3, [r7, #12]
 8018f4a:	4293      	cmp	r3, r2
 8018f4c:	dbe7      	blt.n	8018f1e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8018f4e:	bf00      	nop
 8018f50:	3714      	adds	r7, #20
 8018f52:	46bd      	mov	sp, r7
 8018f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f58:	4770      	bx	lr
	...

08018f5c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8018f5c:	b580      	push	{r7, lr}
 8018f5e:	b082      	sub	sp, #8
 8018f60:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8018f62:	2300      	movs	r3, #0
 8018f64:	80fb      	strh	r3, [r7, #6]
 8018f66:	e009      	b.n	8018f7c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8018f68:	88fb      	ldrh	r3, [r7, #6]
 8018f6a:	4a08      	ldr	r2, [pc, #32]	; (8018f8c <memp_init+0x30>)
 8018f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018f70:	4618      	mov	r0, r3
 8018f72:	f7ff ffc3 	bl	8018efc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8018f76:	88fb      	ldrh	r3, [r7, #6]
 8018f78:	3301      	adds	r3, #1
 8018f7a:	80fb      	strh	r3, [r7, #6]
 8018f7c:	88fb      	ldrh	r3, [r7, #6]
 8018f7e:	2b0d      	cmp	r3, #13
 8018f80:	d9f2      	bls.n	8018f68 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8018f82:	bf00      	nop
 8018f84:	3708      	adds	r7, #8
 8018f86:	46bd      	mov	sp, r7
 8018f88:	bd80      	pop	{r7, pc}
 8018f8a:	bf00      	nop
 8018f8c:	08028ad8 	.word	0x08028ad8

08018f90 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8018f90:	b580      	push	{r7, lr}
 8018f92:	b084      	sub	sp, #16
 8018f94:	af00      	add	r7, sp, #0
 8018f96:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8018f98:	f001 fcde 	bl	801a958 <sys_arch_protect>
 8018f9c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	689b      	ldr	r3, [r3, #8]
 8018fa2:	681b      	ldr	r3, [r3, #0]
 8018fa4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8018fa6:	68bb      	ldr	r3, [r7, #8]
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d015      	beq.n	8018fd8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	689b      	ldr	r3, [r3, #8]
 8018fb0:	68ba      	ldr	r2, [r7, #8]
 8018fb2:	6812      	ldr	r2, [r2, #0]
 8018fb4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8018fb6:	68bb      	ldr	r3, [r7, #8]
 8018fb8:	f003 0303 	and.w	r3, r3, #3
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d006      	beq.n	8018fce <do_memp_malloc_pool+0x3e>
 8018fc0:	4b09      	ldr	r3, [pc, #36]	; (8018fe8 <do_memp_malloc_pool+0x58>)
 8018fc2:	f240 1219 	movw	r2, #281	; 0x119
 8018fc6:	4909      	ldr	r1, [pc, #36]	; (8018fec <do_memp_malloc_pool+0x5c>)
 8018fc8:	4809      	ldr	r0, [pc, #36]	; (8018ff0 <do_memp_malloc_pool+0x60>)
 8018fca:	f00b f80d 	bl	8023fe8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8018fce:	68f8      	ldr	r0, [r7, #12]
 8018fd0:	f001 fcd0 	bl	801a974 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8018fd4:	68bb      	ldr	r3, [r7, #8]
 8018fd6:	e003      	b.n	8018fe0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8018fd8:	68f8      	ldr	r0, [r7, #12]
 8018fda:	f001 fccb 	bl	801a974 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8018fde:	2300      	movs	r3, #0
}
 8018fe0:	4618      	mov	r0, r3
 8018fe2:	3710      	adds	r7, #16
 8018fe4:	46bd      	mov	sp, r7
 8018fe6:	bd80      	pop	{r7, pc}
 8018fe8:	080265b0 	.word	0x080265b0
 8018fec:	080265fc 	.word	0x080265fc
 8018ff0:	08026620 	.word	0x08026620

08018ff4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8018ff4:	b580      	push	{r7, lr}
 8018ff6:	b084      	sub	sp, #16
 8018ff8:	af00      	add	r7, sp, #0
 8018ffa:	4603      	mov	r3, r0
 8018ffc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8018ffe:	79fb      	ldrb	r3, [r7, #7]
 8019000:	2b0d      	cmp	r3, #13
 8019002:	d908      	bls.n	8019016 <memp_malloc+0x22>
 8019004:	4b0a      	ldr	r3, [pc, #40]	; (8019030 <memp_malloc+0x3c>)
 8019006:	f240 1257 	movw	r2, #343	; 0x157
 801900a:	490a      	ldr	r1, [pc, #40]	; (8019034 <memp_malloc+0x40>)
 801900c:	480a      	ldr	r0, [pc, #40]	; (8019038 <memp_malloc+0x44>)
 801900e:	f00a ffeb 	bl	8023fe8 <iprintf>
 8019012:	2300      	movs	r3, #0
 8019014:	e008      	b.n	8019028 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8019016:	79fb      	ldrb	r3, [r7, #7]
 8019018:	4a08      	ldr	r2, [pc, #32]	; (801903c <memp_malloc+0x48>)
 801901a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801901e:	4618      	mov	r0, r3
 8019020:	f7ff ffb6 	bl	8018f90 <do_memp_malloc_pool>
 8019024:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8019026:	68fb      	ldr	r3, [r7, #12]
}
 8019028:	4618      	mov	r0, r3
 801902a:	3710      	adds	r7, #16
 801902c:	46bd      	mov	sp, r7
 801902e:	bd80      	pop	{r7, pc}
 8019030:	080265b0 	.word	0x080265b0
 8019034:	0802665c 	.word	0x0802665c
 8019038:	08026620 	.word	0x08026620
 801903c:	08028ad8 	.word	0x08028ad8

08019040 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8019040:	b580      	push	{r7, lr}
 8019042:	b084      	sub	sp, #16
 8019044:	af00      	add	r7, sp, #0
 8019046:	6078      	str	r0, [r7, #4]
 8019048:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801904a:	683b      	ldr	r3, [r7, #0]
 801904c:	f003 0303 	and.w	r3, r3, #3
 8019050:	2b00      	cmp	r3, #0
 8019052:	d006      	beq.n	8019062 <do_memp_free_pool+0x22>
 8019054:	4b0d      	ldr	r3, [pc, #52]	; (801908c <do_memp_free_pool+0x4c>)
 8019056:	f240 126d 	movw	r2, #365	; 0x16d
 801905a:	490d      	ldr	r1, [pc, #52]	; (8019090 <do_memp_free_pool+0x50>)
 801905c:	480d      	ldr	r0, [pc, #52]	; (8019094 <do_memp_free_pool+0x54>)
 801905e:	f00a ffc3 	bl	8023fe8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8019062:	683b      	ldr	r3, [r7, #0]
 8019064:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8019066:	f001 fc77 	bl	801a958 <sys_arch_protect>
 801906a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	689b      	ldr	r3, [r3, #8]
 8019070:	681a      	ldr	r2, [r3, #0]
 8019072:	68fb      	ldr	r3, [r7, #12]
 8019074:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	689b      	ldr	r3, [r3, #8]
 801907a:	68fa      	ldr	r2, [r7, #12]
 801907c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801907e:	68b8      	ldr	r0, [r7, #8]
 8019080:	f001 fc78 	bl	801a974 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8019084:	bf00      	nop
 8019086:	3710      	adds	r7, #16
 8019088:	46bd      	mov	sp, r7
 801908a:	bd80      	pop	{r7, pc}
 801908c:	080265b0 	.word	0x080265b0
 8019090:	0802667c 	.word	0x0802667c
 8019094:	08026620 	.word	0x08026620

08019098 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8019098:	b580      	push	{r7, lr}
 801909a:	b082      	sub	sp, #8
 801909c:	af00      	add	r7, sp, #0
 801909e:	4603      	mov	r3, r0
 80190a0:	6039      	str	r1, [r7, #0]
 80190a2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80190a4:	79fb      	ldrb	r3, [r7, #7]
 80190a6:	2b0d      	cmp	r3, #13
 80190a8:	d907      	bls.n	80190ba <memp_free+0x22>
 80190aa:	4b0c      	ldr	r3, [pc, #48]	; (80190dc <memp_free+0x44>)
 80190ac:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80190b0:	490b      	ldr	r1, [pc, #44]	; (80190e0 <memp_free+0x48>)
 80190b2:	480c      	ldr	r0, [pc, #48]	; (80190e4 <memp_free+0x4c>)
 80190b4:	f00a ff98 	bl	8023fe8 <iprintf>
 80190b8:	e00c      	b.n	80190d4 <memp_free+0x3c>

  if (mem == NULL) {
 80190ba:	683b      	ldr	r3, [r7, #0]
 80190bc:	2b00      	cmp	r3, #0
 80190be:	d008      	beq.n	80190d2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80190c0:	79fb      	ldrb	r3, [r7, #7]
 80190c2:	4a09      	ldr	r2, [pc, #36]	; (80190e8 <memp_free+0x50>)
 80190c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80190c8:	6839      	ldr	r1, [r7, #0]
 80190ca:	4618      	mov	r0, r3
 80190cc:	f7ff ffb8 	bl	8019040 <do_memp_free_pool>
 80190d0:	e000      	b.n	80190d4 <memp_free+0x3c>
    return;
 80190d2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80190d4:	3708      	adds	r7, #8
 80190d6:	46bd      	mov	sp, r7
 80190d8:	bd80      	pop	{r7, pc}
 80190da:	bf00      	nop
 80190dc:	080265b0 	.word	0x080265b0
 80190e0:	0802669c 	.word	0x0802669c
 80190e4:	08026620 	.word	0x08026620
 80190e8:	08028ad8 	.word	0x08028ad8

080190ec <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80190ec:	b580      	push	{r7, lr}
 80190ee:	b082      	sub	sp, #8
 80190f0:	af00      	add	r7, sp, #0
 80190f2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	2b00      	cmp	r3, #0
 80190f8:	d013      	beq.n	8019122 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d00b      	beq.n	801911a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	681b      	ldr	r3, [r3, #0]
 8019106:	4618      	mov	r0, r3
 8019108:	f000 fe5e 	bl	8019dc8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 801910c:	687b      	ldr	r3, [r7, #4]
 801910e:	2200      	movs	r2, #0
 8019110:	605a      	str	r2, [r3, #4]
 8019112:	687b      	ldr	r3, [r7, #4]
 8019114:	685a      	ldr	r2, [r3, #4]
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 801911a:	6879      	ldr	r1, [r7, #4]
 801911c:	2006      	movs	r0, #6
 801911e:	f7ff ffbb 	bl	8019098 <memp_free>
  }
}
 8019122:	bf00      	nop
 8019124:	3708      	adds	r7, #8
 8019126:	46bd      	mov	sp, r7
 8019128:	bd80      	pop	{r7, pc}
	...

0801912c <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 801912c:	b580      	push	{r7, lr}
 801912e:	b084      	sub	sp, #16
 8019130:	af00      	add	r7, sp, #0
 8019132:	60f8      	str	r0, [r7, #12]
 8019134:	60b9      	str	r1, [r7, #8]
 8019136:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	2b00      	cmp	r3, #0
 801913c:	d108      	bne.n	8019150 <netbuf_data+0x24>
 801913e:	4b1b      	ldr	r3, [pc, #108]	; (80191ac <netbuf_data+0x80>)
 8019140:	22c6      	movs	r2, #198	; 0xc6
 8019142:	491b      	ldr	r1, [pc, #108]	; (80191b0 <netbuf_data+0x84>)
 8019144:	481b      	ldr	r0, [pc, #108]	; (80191b4 <netbuf_data+0x88>)
 8019146:	f00a ff4f 	bl	8023fe8 <iprintf>
 801914a:	f06f 030f 	mvn.w	r3, #15
 801914e:	e029      	b.n	80191a4 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8019150:	68bb      	ldr	r3, [r7, #8]
 8019152:	2b00      	cmp	r3, #0
 8019154:	d108      	bne.n	8019168 <netbuf_data+0x3c>
 8019156:	4b15      	ldr	r3, [pc, #84]	; (80191ac <netbuf_data+0x80>)
 8019158:	22c7      	movs	r2, #199	; 0xc7
 801915a:	4917      	ldr	r1, [pc, #92]	; (80191b8 <netbuf_data+0x8c>)
 801915c:	4815      	ldr	r0, [pc, #84]	; (80191b4 <netbuf_data+0x88>)
 801915e:	f00a ff43 	bl	8023fe8 <iprintf>
 8019162:	f06f 030f 	mvn.w	r3, #15
 8019166:	e01d      	b.n	80191a4 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	2b00      	cmp	r3, #0
 801916c:	d108      	bne.n	8019180 <netbuf_data+0x54>
 801916e:	4b0f      	ldr	r3, [pc, #60]	; (80191ac <netbuf_data+0x80>)
 8019170:	22c8      	movs	r2, #200	; 0xc8
 8019172:	4912      	ldr	r1, [pc, #72]	; (80191bc <netbuf_data+0x90>)
 8019174:	480f      	ldr	r0, [pc, #60]	; (80191b4 <netbuf_data+0x88>)
 8019176:	f00a ff37 	bl	8023fe8 <iprintf>
 801917a:	f06f 030f 	mvn.w	r3, #15
 801917e:	e011      	b.n	80191a4 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8019180:	68fb      	ldr	r3, [r7, #12]
 8019182:	685b      	ldr	r3, [r3, #4]
 8019184:	2b00      	cmp	r3, #0
 8019186:	d102      	bne.n	801918e <netbuf_data+0x62>
    return ERR_BUF;
 8019188:	f06f 0301 	mvn.w	r3, #1
 801918c:	e00a      	b.n	80191a4 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	685b      	ldr	r3, [r3, #4]
 8019192:	685a      	ldr	r2, [r3, #4]
 8019194:	68bb      	ldr	r3, [r7, #8]
 8019196:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8019198:	68fb      	ldr	r3, [r7, #12]
 801919a:	685b      	ldr	r3, [r3, #4]
 801919c:	895a      	ldrh	r2, [r3, #10]
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 80191a2:	2300      	movs	r3, #0
}
 80191a4:	4618      	mov	r0, r3
 80191a6:	3710      	adds	r7, #16
 80191a8:	46bd      	mov	sp, r7
 80191aa:	bd80      	pop	{r7, pc}
 80191ac:	080266b8 	.word	0x080266b8
 80191b0:	080267dc 	.word	0x080267dc
 80191b4:	08026724 	.word	0x08026724
 80191b8:	080267f8 	.word	0x080267f8
 80191bc:	08026818 	.word	0x08026818

080191c0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80191c0:	b480      	push	{r7}
 80191c2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80191c4:	bf00      	nop
 80191c6:	46bd      	mov	sp, r7
 80191c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191cc:	4770      	bx	lr
	...

080191d0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80191d0:	b580      	push	{r7, lr}
 80191d2:	b086      	sub	sp, #24
 80191d4:	af00      	add	r7, sp, #0
 80191d6:	60f8      	str	r0, [r7, #12]
 80191d8:	60b9      	str	r1, [r7, #8]
 80191da:	607a      	str	r2, [r7, #4]
 80191dc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80191de:	68fb      	ldr	r3, [r7, #12]
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	d108      	bne.n	80191f6 <netif_add+0x26>
 80191e4:	4b59      	ldr	r3, [pc, #356]	; (801934c <netif_add+0x17c>)
 80191e6:	f240 1227 	movw	r2, #295	; 0x127
 80191ea:	4959      	ldr	r1, [pc, #356]	; (8019350 <netif_add+0x180>)
 80191ec:	4859      	ldr	r0, [pc, #356]	; (8019354 <netif_add+0x184>)
 80191ee:	f00a fefb 	bl	8023fe8 <iprintf>
 80191f2:	2300      	movs	r3, #0
 80191f4:	e0a6      	b.n	8019344 <netif_add+0x174>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80191f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d108      	bne.n	801920e <netif_add+0x3e>
 80191fc:	4b53      	ldr	r3, [pc, #332]	; (801934c <netif_add+0x17c>)
 80191fe:	f44f 7294 	mov.w	r2, #296	; 0x128
 8019202:	4955      	ldr	r1, [pc, #340]	; (8019358 <netif_add+0x188>)
 8019204:	4853      	ldr	r0, [pc, #332]	; (8019354 <netif_add+0x184>)
 8019206:	f00a feef 	bl	8023fe8 <iprintf>
 801920a:	2300      	movs	r3, #0
 801920c:	e09a      	b.n	8019344 <netif_add+0x174>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801920e:	68bb      	ldr	r3, [r7, #8]
 8019210:	2b00      	cmp	r3, #0
 8019212:	d101      	bne.n	8019218 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8019214:	4b51      	ldr	r3, [pc, #324]	; (801935c <netif_add+0x18c>)
 8019216:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	2b00      	cmp	r3, #0
 801921c:	d101      	bne.n	8019222 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801921e:	4b4f      	ldr	r3, [pc, #316]	; (801935c <netif_add+0x18c>)
 8019220:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8019222:	683b      	ldr	r3, [r7, #0]
 8019224:	2b00      	cmp	r3, #0
 8019226:	d101      	bne.n	801922c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8019228:	4b4c      	ldr	r3, [pc, #304]	; (801935c <netif_add+0x18c>)
 801922a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801922c:	68fb      	ldr	r3, [r7, #12]
 801922e:	2200      	movs	r2, #0
 8019230:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8019232:	68fb      	ldr	r3, [r7, #12]
 8019234:	2200      	movs	r2, #0
 8019236:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8019238:	68fb      	ldr	r3, [r7, #12]
 801923a:	2200      	movs	r2, #0
 801923c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801923e:	68fb      	ldr	r3, [r7, #12]
 8019240:	4a47      	ldr	r2, [pc, #284]	; (8019360 <netif_add+0x190>)
 8019242:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8019244:	68fb      	ldr	r3, [r7, #12]
 8019246:	2200      	movs	r2, #0
 8019248:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	2200      	movs	r2, #0
 801924e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	3320      	adds	r3, #32
 8019256:	2204      	movs	r2, #4
 8019258:	2100      	movs	r1, #0
 801925a:	4618      	mov	r0, r3
 801925c:	f00a fe14 	bl	8023e88 <memset>
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8019260:	68fb      	ldr	r3, [r7, #12]
 8019262:	6a3a      	ldr	r2, [r7, #32]
 8019264:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 8019266:	4b3f      	ldr	r3, [pc, #252]	; (8019364 <netif_add+0x194>)
 8019268:	781a      	ldrb	r2, [r3, #0]
 801926a:	68fb      	ldr	r3, [r7, #12]
 801926c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8019270:	68fb      	ldr	r3, [r7, #12]
 8019272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019274:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8019276:	683b      	ldr	r3, [r7, #0]
 8019278:	687a      	ldr	r2, [r7, #4]
 801927a:	68b9      	ldr	r1, [r7, #8]
 801927c:	68f8      	ldr	r0, [r7, #12]
 801927e:	f000 f913 	bl	80194a8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8019282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019284:	68f8      	ldr	r0, [r7, #12]
 8019286:	4798      	blx	r3
 8019288:	4603      	mov	r3, r0
 801928a:	2b00      	cmp	r3, #0
 801928c:	d001      	beq.n	8019292 <netif_add+0xc2>
    return NULL;
 801928e:	2300      	movs	r3, #0
 8019290:	e058      	b.n	8019344 <netif_add+0x174>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8019292:	68fb      	ldr	r3, [r7, #12]
 8019294:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019298:	2bff      	cmp	r3, #255	; 0xff
 801929a:	d103      	bne.n	80192a4 <netif_add+0xd4>
        netif->num = 0;
 801929c:	68fb      	ldr	r3, [r7, #12]
 801929e:	2200      	movs	r2, #0
 80192a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80192a4:	2300      	movs	r3, #0
 80192a6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80192a8:	4b2f      	ldr	r3, [pc, #188]	; (8019368 <netif_add+0x198>)
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	617b      	str	r3, [r7, #20]
 80192ae:	e02b      	b.n	8019308 <netif_add+0x138>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80192b0:	697a      	ldr	r2, [r7, #20]
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	429a      	cmp	r2, r3
 80192b6:	d106      	bne.n	80192c6 <netif_add+0xf6>
 80192b8:	4b24      	ldr	r3, [pc, #144]	; (801934c <netif_add+0x17c>)
 80192ba:	f240 128b 	movw	r2, #395	; 0x18b
 80192be:	492b      	ldr	r1, [pc, #172]	; (801936c <netif_add+0x19c>)
 80192c0:	4824      	ldr	r0, [pc, #144]	; (8019354 <netif_add+0x184>)
 80192c2:	f00a fe91 	bl	8023fe8 <iprintf>
        num_netifs++;
 80192c6:	693b      	ldr	r3, [r7, #16]
 80192c8:	3301      	adds	r3, #1
 80192ca:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80192cc:	693b      	ldr	r3, [r7, #16]
 80192ce:	2bff      	cmp	r3, #255	; 0xff
 80192d0:	dd06      	ble.n	80192e0 <netif_add+0x110>
 80192d2:	4b1e      	ldr	r3, [pc, #120]	; (801934c <netif_add+0x17c>)
 80192d4:	f240 128d 	movw	r2, #397	; 0x18d
 80192d8:	4925      	ldr	r1, [pc, #148]	; (8019370 <netif_add+0x1a0>)
 80192da:	481e      	ldr	r0, [pc, #120]	; (8019354 <netif_add+0x184>)
 80192dc:	f00a fe84 	bl	8023fe8 <iprintf>
        if (netif2->num == netif->num) {
 80192e0:	697b      	ldr	r3, [r7, #20]
 80192e2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80192e6:	68fb      	ldr	r3, [r7, #12]
 80192e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80192ec:	429a      	cmp	r2, r3
 80192ee:	d108      	bne.n	8019302 <netif_add+0x132>
          netif->num++;
 80192f0:	68fb      	ldr	r3, [r7, #12]
 80192f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80192f6:	3301      	adds	r3, #1
 80192f8:	b2da      	uxtb	r2, r3
 80192fa:	68fb      	ldr	r3, [r7, #12]
 80192fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8019300:	e005      	b.n	801930e <netif_add+0x13e>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8019302:	697b      	ldr	r3, [r7, #20]
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	617b      	str	r3, [r7, #20]
 8019308:	697b      	ldr	r3, [r7, #20]
 801930a:	2b00      	cmp	r3, #0
 801930c:	d1d0      	bne.n	80192b0 <netif_add+0xe0>
        }
      }
    } while (netif2 != NULL);
 801930e:	697b      	ldr	r3, [r7, #20]
 8019310:	2b00      	cmp	r3, #0
 8019312:	d1be      	bne.n	8019292 <netif_add+0xc2>
  }
  if (netif->num == 254) {
 8019314:	68fb      	ldr	r3, [r7, #12]
 8019316:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801931a:	2bfe      	cmp	r3, #254	; 0xfe
 801931c:	d103      	bne.n	8019326 <netif_add+0x156>
    netif_num = 0;
 801931e:	4b11      	ldr	r3, [pc, #68]	; (8019364 <netif_add+0x194>)
 8019320:	2200      	movs	r2, #0
 8019322:	701a      	strb	r2, [r3, #0]
 8019324:	e006      	b.n	8019334 <netif_add+0x164>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8019326:	68fb      	ldr	r3, [r7, #12]
 8019328:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801932c:	3301      	adds	r3, #1
 801932e:	b2da      	uxtb	r2, r3
 8019330:	4b0c      	ldr	r3, [pc, #48]	; (8019364 <netif_add+0x194>)
 8019332:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8019334:	4b0c      	ldr	r3, [pc, #48]	; (8019368 <netif_add+0x198>)
 8019336:	681a      	ldr	r2, [r3, #0]
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801933c:	4a0a      	ldr	r2, [pc, #40]	; (8019368 <netif_add+0x198>)
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8019342:	68fb      	ldr	r3, [r7, #12]
}
 8019344:	4618      	mov	r0, r3
 8019346:	3718      	adds	r7, #24
 8019348:	46bd      	mov	sp, r7
 801934a:	bd80      	pop	{r7, pc}
 801934c:	0802686c 	.word	0x0802686c
 8019350:	0802691c 	.word	0x0802691c
 8019354:	080268d8 	.word	0x080268d8
 8019358:	08026938 	.word	0x08026938
 801935c:	08028a28 	.word	0x08028a28
 8019360:	08019699 	.word	0x08019699
 8019364:	20008a68 	.word	0x20008a68
 8019368:	20011804 	.word	0x20011804
 801936c:	0802695c 	.word	0x0802695c
 8019370:	08026970 	.word	0x08026970

08019374 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019374:	b580      	push	{r7, lr}
 8019376:	b082      	sub	sp, #8
 8019378:	af00      	add	r7, sp, #0
 801937a:	6078      	str	r0, [r7, #4]
 801937c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801937e:	6839      	ldr	r1, [r7, #0]
 8019380:	6878      	ldr	r0, [r7, #4]
 8019382:	f003 f913 	bl	801c5ac <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8019386:	6839      	ldr	r1, [r7, #0]
 8019388:	6878      	ldr	r0, [r7, #4]
 801938a:	f008 fba9 	bl	8021ae0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801938e:	bf00      	nop
 8019390:	3708      	adds	r7, #8
 8019392:	46bd      	mov	sp, r7
 8019394:	bd80      	pop	{r7, pc}
	...

08019398 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8019398:	b580      	push	{r7, lr}
 801939a:	b086      	sub	sp, #24
 801939c:	af00      	add	r7, sp, #0
 801939e:	60f8      	str	r0, [r7, #12]
 80193a0:	60b9      	str	r1, [r7, #8]
 80193a2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80193a4:	68bb      	ldr	r3, [r7, #8]
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d106      	bne.n	80193b8 <netif_do_set_ipaddr+0x20>
 80193aa:	4b1d      	ldr	r3, [pc, #116]	; (8019420 <netif_do_set_ipaddr+0x88>)
 80193ac:	f240 12cb 	movw	r2, #459	; 0x1cb
 80193b0:	491c      	ldr	r1, [pc, #112]	; (8019424 <netif_do_set_ipaddr+0x8c>)
 80193b2:	481d      	ldr	r0, [pc, #116]	; (8019428 <netif_do_set_ipaddr+0x90>)
 80193b4:	f00a fe18 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	2b00      	cmp	r3, #0
 80193bc:	d106      	bne.n	80193cc <netif_do_set_ipaddr+0x34>
 80193be:	4b18      	ldr	r3, [pc, #96]	; (8019420 <netif_do_set_ipaddr+0x88>)
 80193c0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80193c4:	4917      	ldr	r1, [pc, #92]	; (8019424 <netif_do_set_ipaddr+0x8c>)
 80193c6:	4818      	ldr	r0, [pc, #96]	; (8019428 <netif_do_set_ipaddr+0x90>)
 80193c8:	f00a fe0e 	bl	8023fe8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80193cc:	68bb      	ldr	r3, [r7, #8]
 80193ce:	681a      	ldr	r2, [r3, #0]
 80193d0:	68fb      	ldr	r3, [r7, #12]
 80193d2:	3304      	adds	r3, #4
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	429a      	cmp	r2, r3
 80193d8:	d01c      	beq.n	8019414 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80193da:	68bb      	ldr	r3, [r7, #8]
 80193dc:	681b      	ldr	r3, [r3, #0]
 80193de:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80193e0:	68fb      	ldr	r3, [r7, #12]
 80193e2:	3304      	adds	r3, #4
 80193e4:	681a      	ldr	r2, [r3, #0]
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80193ea:	f107 0314 	add.w	r3, r7, #20
 80193ee:	4619      	mov	r1, r3
 80193f0:	6878      	ldr	r0, [r7, #4]
 80193f2:	f7ff ffbf 	bl	8019374 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80193f6:	68bb      	ldr	r3, [r7, #8]
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d002      	beq.n	8019402 <netif_do_set_ipaddr+0x6a>
 80193fc:	68bb      	ldr	r3, [r7, #8]
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	e000      	b.n	8019404 <netif_do_set_ipaddr+0x6c>
 8019402:	2300      	movs	r3, #0
 8019404:	68fa      	ldr	r2, [r7, #12]
 8019406:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8019408:	2101      	movs	r1, #1
 801940a:	68f8      	ldr	r0, [r7, #12]
 801940c:	f000 f8d2 	bl	80195b4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8019410:	2301      	movs	r3, #1
 8019412:	e000      	b.n	8019416 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8019414:	2300      	movs	r3, #0
}
 8019416:	4618      	mov	r0, r3
 8019418:	3718      	adds	r7, #24
 801941a:	46bd      	mov	sp, r7
 801941c:	bd80      	pop	{r7, pc}
 801941e:	bf00      	nop
 8019420:	0802686c 	.word	0x0802686c
 8019424:	080269a0 	.word	0x080269a0
 8019428:	080268d8 	.word	0x080268d8

0801942c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801942c:	b480      	push	{r7}
 801942e:	b085      	sub	sp, #20
 8019430:	af00      	add	r7, sp, #0
 8019432:	60f8      	str	r0, [r7, #12]
 8019434:	60b9      	str	r1, [r7, #8]
 8019436:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8019438:	68bb      	ldr	r3, [r7, #8]
 801943a:	681a      	ldr	r2, [r3, #0]
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	3308      	adds	r3, #8
 8019440:	681b      	ldr	r3, [r3, #0]
 8019442:	429a      	cmp	r2, r3
 8019444:	d00a      	beq.n	801945c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8019446:	68bb      	ldr	r3, [r7, #8]
 8019448:	2b00      	cmp	r3, #0
 801944a:	d002      	beq.n	8019452 <netif_do_set_netmask+0x26>
 801944c:	68bb      	ldr	r3, [r7, #8]
 801944e:	681b      	ldr	r3, [r3, #0]
 8019450:	e000      	b.n	8019454 <netif_do_set_netmask+0x28>
 8019452:	2300      	movs	r3, #0
 8019454:	68fa      	ldr	r2, [r7, #12]
 8019456:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8019458:	2301      	movs	r3, #1
 801945a:	e000      	b.n	801945e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801945c:	2300      	movs	r3, #0
}
 801945e:	4618      	mov	r0, r3
 8019460:	3714      	adds	r7, #20
 8019462:	46bd      	mov	sp, r7
 8019464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019468:	4770      	bx	lr

0801946a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801946a:	b480      	push	{r7}
 801946c:	b085      	sub	sp, #20
 801946e:	af00      	add	r7, sp, #0
 8019470:	60f8      	str	r0, [r7, #12]
 8019472:	60b9      	str	r1, [r7, #8]
 8019474:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8019476:	68bb      	ldr	r3, [r7, #8]
 8019478:	681a      	ldr	r2, [r3, #0]
 801947a:	68fb      	ldr	r3, [r7, #12]
 801947c:	330c      	adds	r3, #12
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	429a      	cmp	r2, r3
 8019482:	d00a      	beq.n	801949a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8019484:	68bb      	ldr	r3, [r7, #8]
 8019486:	2b00      	cmp	r3, #0
 8019488:	d002      	beq.n	8019490 <netif_do_set_gw+0x26>
 801948a:	68bb      	ldr	r3, [r7, #8]
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	e000      	b.n	8019492 <netif_do_set_gw+0x28>
 8019490:	2300      	movs	r3, #0
 8019492:	68fa      	ldr	r2, [r7, #12]
 8019494:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8019496:	2301      	movs	r3, #1
 8019498:	e000      	b.n	801949c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801949a:	2300      	movs	r3, #0
}
 801949c:	4618      	mov	r0, r3
 801949e:	3714      	adds	r7, #20
 80194a0:	46bd      	mov	sp, r7
 80194a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194a6:	4770      	bx	lr

080194a8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80194a8:	b580      	push	{r7, lr}
 80194aa:	b088      	sub	sp, #32
 80194ac:	af00      	add	r7, sp, #0
 80194ae:	60f8      	str	r0, [r7, #12]
 80194b0:	60b9      	str	r1, [r7, #8]
 80194b2:	607a      	str	r2, [r7, #4]
 80194b4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80194b6:	2300      	movs	r3, #0
 80194b8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80194ba:	2300      	movs	r3, #0
 80194bc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80194be:	68bb      	ldr	r3, [r7, #8]
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d101      	bne.n	80194c8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80194c4:	4b1c      	ldr	r3, [pc, #112]	; (8019538 <netif_set_addr+0x90>)
 80194c6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	d101      	bne.n	80194d2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80194ce:	4b1a      	ldr	r3, [pc, #104]	; (8019538 <netif_set_addr+0x90>)
 80194d0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80194d2:	683b      	ldr	r3, [r7, #0]
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d101      	bne.n	80194dc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80194d8:	4b17      	ldr	r3, [pc, #92]	; (8019538 <netif_set_addr+0x90>)
 80194da:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80194dc:	68bb      	ldr	r3, [r7, #8]
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d003      	beq.n	80194ea <netif_set_addr+0x42>
 80194e2:	68bb      	ldr	r3, [r7, #8]
 80194e4:	681b      	ldr	r3, [r3, #0]
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	d101      	bne.n	80194ee <netif_set_addr+0x46>
 80194ea:	2301      	movs	r3, #1
 80194ec:	e000      	b.n	80194f0 <netif_set_addr+0x48>
 80194ee:	2300      	movs	r3, #0
 80194f0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80194f2:	697b      	ldr	r3, [r7, #20]
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d006      	beq.n	8019506 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80194f8:	f107 0310 	add.w	r3, r7, #16
 80194fc:	461a      	mov	r2, r3
 80194fe:	68b9      	ldr	r1, [r7, #8]
 8019500:	68f8      	ldr	r0, [r7, #12]
 8019502:	f7ff ff49 	bl	8019398 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8019506:	69fa      	ldr	r2, [r7, #28]
 8019508:	6879      	ldr	r1, [r7, #4]
 801950a:	68f8      	ldr	r0, [r7, #12]
 801950c:	f7ff ff8e 	bl	801942c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8019510:	69ba      	ldr	r2, [r7, #24]
 8019512:	6839      	ldr	r1, [r7, #0]
 8019514:	68f8      	ldr	r0, [r7, #12]
 8019516:	f7ff ffa8 	bl	801946a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801951a:	697b      	ldr	r3, [r7, #20]
 801951c:	2b00      	cmp	r3, #0
 801951e:	d106      	bne.n	801952e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8019520:	f107 0310 	add.w	r3, r7, #16
 8019524:	461a      	mov	r2, r3
 8019526:	68b9      	ldr	r1, [r7, #8]
 8019528:	68f8      	ldr	r0, [r7, #12]
 801952a:	f7ff ff35 	bl	8019398 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801952e:	bf00      	nop
 8019530:	3720      	adds	r7, #32
 8019532:	46bd      	mov	sp, r7
 8019534:	bd80      	pop	{r7, pc}
 8019536:	bf00      	nop
 8019538:	08028a28 	.word	0x08028a28

0801953c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801953c:	b480      	push	{r7}
 801953e:	b083      	sub	sp, #12
 8019540:	af00      	add	r7, sp, #0
 8019542:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8019544:	4a04      	ldr	r2, [pc, #16]	; (8019558 <netif_set_default+0x1c>)
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801954a:	bf00      	nop
 801954c:	370c      	adds	r7, #12
 801954e:	46bd      	mov	sp, r7
 8019550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019554:	4770      	bx	lr
 8019556:	bf00      	nop
 8019558:	20011808 	.word	0x20011808

0801955c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801955c:	b580      	push	{r7, lr}
 801955e:	b082      	sub	sp, #8
 8019560:	af00      	add	r7, sp, #0
 8019562:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	2b00      	cmp	r3, #0
 8019568:	d107      	bne.n	801957a <netif_set_up+0x1e>
 801956a:	4b0f      	ldr	r3, [pc, #60]	; (80195a8 <netif_set_up+0x4c>)
 801956c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8019570:	490e      	ldr	r1, [pc, #56]	; (80195ac <netif_set_up+0x50>)
 8019572:	480f      	ldr	r0, [pc, #60]	; (80195b0 <netif_set_up+0x54>)
 8019574:	f00a fd38 	bl	8023fe8 <iprintf>
 8019578:	e013      	b.n	80195a2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019580:	f003 0301 	and.w	r3, r3, #1
 8019584:	2b00      	cmp	r3, #0
 8019586:	d10c      	bne.n	80195a2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801958e:	f043 0301 	orr.w	r3, r3, #1
 8019592:	b2da      	uxtb	r2, r3
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801959a:	2103      	movs	r1, #3
 801959c:	6878      	ldr	r0, [r7, #4]
 801959e:	f000 f809 	bl	80195b4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80195a2:	3708      	adds	r7, #8
 80195a4:	46bd      	mov	sp, r7
 80195a6:	bd80      	pop	{r7, pc}
 80195a8:	0802686c 	.word	0x0802686c
 80195ac:	08026a10 	.word	0x08026a10
 80195b0:	080268d8 	.word	0x080268d8

080195b4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80195b4:	b580      	push	{r7, lr}
 80195b6:	b082      	sub	sp, #8
 80195b8:	af00      	add	r7, sp, #0
 80195ba:	6078      	str	r0, [r7, #4]
 80195bc:	460b      	mov	r3, r1
 80195be:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d106      	bne.n	80195d4 <netif_issue_reports+0x20>
 80195c6:	4b18      	ldr	r3, [pc, #96]	; (8019628 <netif_issue_reports+0x74>)
 80195c8:	f240 326d 	movw	r2, #877	; 0x36d
 80195cc:	4917      	ldr	r1, [pc, #92]	; (801962c <netif_issue_reports+0x78>)
 80195ce:	4818      	ldr	r0, [pc, #96]	; (8019630 <netif_issue_reports+0x7c>)
 80195d0:	f00a fd0a 	bl	8023fe8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80195da:	f003 0304 	and.w	r3, r3, #4
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d01e      	beq.n	8019620 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80195e8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d017      	beq.n	8019620 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80195f0:	78fb      	ldrb	r3, [r7, #3]
 80195f2:	f003 0301 	and.w	r3, r3, #1
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	d013      	beq.n	8019622 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	3304      	adds	r3, #4
 80195fe:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8019600:	2b00      	cmp	r3, #0
 8019602:	d00e      	beq.n	8019622 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801960a:	f003 0308 	and.w	r3, r3, #8
 801960e:	2b00      	cmp	r3, #0
 8019610:	d007      	beq.n	8019622 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	3304      	adds	r3, #4
 8019616:	4619      	mov	r1, r3
 8019618:	6878      	ldr	r0, [r7, #4]
 801961a:	f7fd fcc3 	bl	8016fa4 <etharp_request>
 801961e:	e000      	b.n	8019622 <netif_issue_reports+0x6e>
    return;
 8019620:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8019622:	3708      	adds	r7, #8
 8019624:	46bd      	mov	sp, r7
 8019626:	bd80      	pop	{r7, pc}
 8019628:	0802686c 	.word	0x0802686c
 801962c:	08026a2c 	.word	0x08026a2c
 8019630:	080268d8 	.word	0x080268d8

08019634 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8019634:	b580      	push	{r7, lr}
 8019636:	b082      	sub	sp, #8
 8019638:	af00      	add	r7, sp, #0
 801963a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	2b00      	cmp	r3, #0
 8019640:	d107      	bne.n	8019652 <netif_set_down+0x1e>
 8019642:	4b12      	ldr	r3, [pc, #72]	; (801968c <netif_set_down+0x58>)
 8019644:	f240 329b 	movw	r2, #923	; 0x39b
 8019648:	4911      	ldr	r1, [pc, #68]	; (8019690 <netif_set_down+0x5c>)
 801964a:	4812      	ldr	r0, [pc, #72]	; (8019694 <netif_set_down+0x60>)
 801964c:	f00a fccc 	bl	8023fe8 <iprintf>
 8019650:	e019      	b.n	8019686 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8019652:	687b      	ldr	r3, [r7, #4]
 8019654:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019658:	f003 0301 	and.w	r3, r3, #1
 801965c:	2b00      	cmp	r3, #0
 801965e:	d012      	beq.n	8019686 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019666:	f023 0301 	bic.w	r3, r3, #1
 801966a:	b2da      	uxtb	r2, r3
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019678:	f003 0308 	and.w	r3, r3, #8
 801967c:	2b00      	cmp	r3, #0
 801967e:	d002      	beq.n	8019686 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8019680:	6878      	ldr	r0, [r7, #4]
 8019682:	f7fd f849 	bl	8016718 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8019686:	3708      	adds	r7, #8
 8019688:	46bd      	mov	sp, r7
 801968a:	bd80      	pop	{r7, pc}
 801968c:	0802686c 	.word	0x0802686c
 8019690:	08026a50 	.word	0x08026a50
 8019694:	080268d8 	.word	0x080268d8

08019698 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8019698:	b480      	push	{r7}
 801969a:	b085      	sub	sp, #20
 801969c:	af00      	add	r7, sp, #0
 801969e:	60f8      	str	r0, [r7, #12]
 80196a0:	60b9      	str	r1, [r7, #8]
 80196a2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80196a4:	f06f 030b 	mvn.w	r3, #11
}
 80196a8:	4618      	mov	r0, r3
 80196aa:	3714      	adds	r7, #20
 80196ac:	46bd      	mov	sp, r7
 80196ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196b2:	4770      	bx	lr

080196b4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80196b4:	b480      	push	{r7}
 80196b6:	b085      	sub	sp, #20
 80196b8:	af00      	add	r7, sp, #0
 80196ba:	4603      	mov	r3, r0
 80196bc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80196be:	79fb      	ldrb	r3, [r7, #7]
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d013      	beq.n	80196ec <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80196c4:	4b0d      	ldr	r3, [pc, #52]	; (80196fc <netif_get_by_index+0x48>)
 80196c6:	681b      	ldr	r3, [r3, #0]
 80196c8:	60fb      	str	r3, [r7, #12]
 80196ca:	e00c      	b.n	80196e6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80196cc:	68fb      	ldr	r3, [r7, #12]
 80196ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80196d2:	3301      	adds	r3, #1
 80196d4:	b2db      	uxtb	r3, r3
 80196d6:	79fa      	ldrb	r2, [r7, #7]
 80196d8:	429a      	cmp	r2, r3
 80196da:	d101      	bne.n	80196e0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	e006      	b.n	80196ee <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80196e0:	68fb      	ldr	r3, [r7, #12]
 80196e2:	681b      	ldr	r3, [r3, #0]
 80196e4:	60fb      	str	r3, [r7, #12]
 80196e6:	68fb      	ldr	r3, [r7, #12]
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	d1ef      	bne.n	80196cc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80196ec:	2300      	movs	r3, #0
}
 80196ee:	4618      	mov	r0, r3
 80196f0:	3714      	adds	r7, #20
 80196f2:	46bd      	mov	sp, r7
 80196f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196f8:	4770      	bx	lr
 80196fa:	bf00      	nop
 80196fc:	20011804 	.word	0x20011804

08019700 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8019700:	b580      	push	{r7, lr}
 8019702:	b082      	sub	sp, #8
 8019704:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8019706:	f001 f927 	bl	801a958 <sys_arch_protect>
 801970a:	6038      	str	r0, [r7, #0]
 801970c:	4b0d      	ldr	r3, [pc, #52]	; (8019744 <pbuf_free_ooseq+0x44>)
 801970e:	2200      	movs	r2, #0
 8019710:	701a      	strb	r2, [r3, #0]
 8019712:	6838      	ldr	r0, [r7, #0]
 8019714:	f001 f92e 	bl	801a974 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8019718:	4b0b      	ldr	r3, [pc, #44]	; (8019748 <pbuf_free_ooseq+0x48>)
 801971a:	681b      	ldr	r3, [r3, #0]
 801971c:	607b      	str	r3, [r7, #4]
 801971e:	e00a      	b.n	8019736 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019724:	2b00      	cmp	r3, #0
 8019726:	d003      	beq.n	8019730 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8019728:	6878      	ldr	r0, [r7, #4]
 801972a:	f002 ff7d 	bl	801c628 <tcp_free_ooseq>
      return;
 801972e:	e005      	b.n	801973c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	68db      	ldr	r3, [r3, #12]
 8019734:	607b      	str	r3, [r7, #4]
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	2b00      	cmp	r3, #0
 801973a:	d1f1      	bne.n	8019720 <pbuf_free_ooseq+0x20>
    }
  }
}
 801973c:	3708      	adds	r7, #8
 801973e:	46bd      	mov	sp, r7
 8019740:	bd80      	pop	{r7, pc}
 8019742:	bf00      	nop
 8019744:	2001180c 	.word	0x2001180c
 8019748:	2001181c 	.word	0x2001181c

0801974c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801974c:	b580      	push	{r7, lr}
 801974e:	b082      	sub	sp, #8
 8019750:	af00      	add	r7, sp, #0
 8019752:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8019754:	f7ff ffd4 	bl	8019700 <pbuf_free_ooseq>
}
 8019758:	bf00      	nop
 801975a:	3708      	adds	r7, #8
 801975c:	46bd      	mov	sp, r7
 801975e:	bd80      	pop	{r7, pc}

08019760 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8019760:	b580      	push	{r7, lr}
 8019762:	b082      	sub	sp, #8
 8019764:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8019766:	f001 f8f7 	bl	801a958 <sys_arch_protect>
 801976a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801976c:	4b0f      	ldr	r3, [pc, #60]	; (80197ac <pbuf_pool_is_empty+0x4c>)
 801976e:	781b      	ldrb	r3, [r3, #0]
 8019770:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8019772:	4b0e      	ldr	r3, [pc, #56]	; (80197ac <pbuf_pool_is_empty+0x4c>)
 8019774:	2201      	movs	r2, #1
 8019776:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8019778:	6878      	ldr	r0, [r7, #4]
 801977a:	f001 f8fb 	bl	801a974 <sys_arch_unprotect>

  if (!queued) {
 801977e:	78fb      	ldrb	r3, [r7, #3]
 8019780:	2b00      	cmp	r3, #0
 8019782:	d10f      	bne.n	80197a4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8019784:	2100      	movs	r1, #0
 8019786:	480a      	ldr	r0, [pc, #40]	; (80197b0 <pbuf_pool_is_empty+0x50>)
 8019788:	f007 fa7a 	bl	8020c80 <tcpip_try_callback>
 801978c:	4603      	mov	r3, r0
 801978e:	2b00      	cmp	r3, #0
 8019790:	d008      	beq.n	80197a4 <pbuf_pool_is_empty+0x44>
 8019792:	f001 f8e1 	bl	801a958 <sys_arch_protect>
 8019796:	6078      	str	r0, [r7, #4]
 8019798:	4b04      	ldr	r3, [pc, #16]	; (80197ac <pbuf_pool_is_empty+0x4c>)
 801979a:	2200      	movs	r2, #0
 801979c:	701a      	strb	r2, [r3, #0]
 801979e:	6878      	ldr	r0, [r7, #4]
 80197a0:	f001 f8e8 	bl	801a974 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80197a4:	bf00      	nop
 80197a6:	3708      	adds	r7, #8
 80197a8:	46bd      	mov	sp, r7
 80197aa:	bd80      	pop	{r7, pc}
 80197ac:	2001180c 	.word	0x2001180c
 80197b0:	0801974d 	.word	0x0801974d

080197b4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80197b4:	b480      	push	{r7}
 80197b6:	b085      	sub	sp, #20
 80197b8:	af00      	add	r7, sp, #0
 80197ba:	60f8      	str	r0, [r7, #12]
 80197bc:	60b9      	str	r1, [r7, #8]
 80197be:	4611      	mov	r1, r2
 80197c0:	461a      	mov	r2, r3
 80197c2:	460b      	mov	r3, r1
 80197c4:	80fb      	strh	r3, [r7, #6]
 80197c6:	4613      	mov	r3, r2
 80197c8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80197ca:	68fb      	ldr	r3, [r7, #12]
 80197cc:	2200      	movs	r2, #0
 80197ce:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80197d0:	68fb      	ldr	r3, [r7, #12]
 80197d2:	68ba      	ldr	r2, [r7, #8]
 80197d4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80197d6:	68fb      	ldr	r3, [r7, #12]
 80197d8:	88fa      	ldrh	r2, [r7, #6]
 80197da:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80197dc:	68fb      	ldr	r3, [r7, #12]
 80197de:	88ba      	ldrh	r2, [r7, #4]
 80197e0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80197e2:	8b3b      	ldrh	r3, [r7, #24]
 80197e4:	b2da      	uxtb	r2, r3
 80197e6:	68fb      	ldr	r3, [r7, #12]
 80197e8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80197ea:	68fb      	ldr	r3, [r7, #12]
 80197ec:	7f3a      	ldrb	r2, [r7, #28]
 80197ee:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	2201      	movs	r2, #1
 80197f4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80197f6:	68fb      	ldr	r3, [r7, #12]
 80197f8:	2200      	movs	r2, #0
 80197fa:	73da      	strb	r2, [r3, #15]
}
 80197fc:	bf00      	nop
 80197fe:	3714      	adds	r7, #20
 8019800:	46bd      	mov	sp, r7
 8019802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019806:	4770      	bx	lr

08019808 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8019808:	b580      	push	{r7, lr}
 801980a:	b08c      	sub	sp, #48	; 0x30
 801980c:	af02      	add	r7, sp, #8
 801980e:	4603      	mov	r3, r0
 8019810:	71fb      	strb	r3, [r7, #7]
 8019812:	460b      	mov	r3, r1
 8019814:	80bb      	strh	r3, [r7, #4]
 8019816:	4613      	mov	r3, r2
 8019818:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801981a:	79fb      	ldrb	r3, [r7, #7]
 801981c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801981e:	887b      	ldrh	r3, [r7, #2]
 8019820:	2b41      	cmp	r3, #65	; 0x41
 8019822:	d00b      	beq.n	801983c <pbuf_alloc+0x34>
 8019824:	2b41      	cmp	r3, #65	; 0x41
 8019826:	dc02      	bgt.n	801982e <pbuf_alloc+0x26>
 8019828:	2b01      	cmp	r3, #1
 801982a:	d007      	beq.n	801983c <pbuf_alloc+0x34>
 801982c:	e0c2      	b.n	80199b4 <pbuf_alloc+0x1ac>
 801982e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8019832:	d00b      	beq.n	801984c <pbuf_alloc+0x44>
 8019834:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8019838:	d070      	beq.n	801991c <pbuf_alloc+0x114>
 801983a:	e0bb      	b.n	80199b4 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801983c:	887a      	ldrh	r2, [r7, #2]
 801983e:	88bb      	ldrh	r3, [r7, #4]
 8019840:	4619      	mov	r1, r3
 8019842:	2000      	movs	r0, #0
 8019844:	f000 f8d2 	bl	80199ec <pbuf_alloc_reference>
 8019848:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801984a:	e0bd      	b.n	80199c8 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801984c:	2300      	movs	r3, #0
 801984e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8019850:	2300      	movs	r3, #0
 8019852:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8019854:	88bb      	ldrh	r3, [r7, #4]
 8019856:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8019858:	200d      	movs	r0, #13
 801985a:	f7ff fbcb 	bl	8018ff4 <memp_malloc>
 801985e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8019860:	693b      	ldr	r3, [r7, #16]
 8019862:	2b00      	cmp	r3, #0
 8019864:	d109      	bne.n	801987a <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8019866:	f7ff ff7b 	bl	8019760 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801986a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801986c:	2b00      	cmp	r3, #0
 801986e:	d002      	beq.n	8019876 <pbuf_alloc+0x6e>
            pbuf_free(p);
 8019870:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019872:	f000 faa9 	bl	8019dc8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8019876:	2300      	movs	r3, #0
 8019878:	e0a7      	b.n	80199ca <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801987a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801987c:	3303      	adds	r3, #3
 801987e:	b29b      	uxth	r3, r3
 8019880:	f023 0303 	bic.w	r3, r3, #3
 8019884:	b29b      	uxth	r3, r3
 8019886:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801988a:	b29b      	uxth	r3, r3
 801988c:	8b7a      	ldrh	r2, [r7, #26]
 801988e:	4293      	cmp	r3, r2
 8019890:	bf28      	it	cs
 8019892:	4613      	movcs	r3, r2
 8019894:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8019896:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019898:	3310      	adds	r3, #16
 801989a:	693a      	ldr	r2, [r7, #16]
 801989c:	4413      	add	r3, r2
 801989e:	3303      	adds	r3, #3
 80198a0:	f023 0303 	bic.w	r3, r3, #3
 80198a4:	4618      	mov	r0, r3
 80198a6:	89f9      	ldrh	r1, [r7, #14]
 80198a8:	8b7a      	ldrh	r2, [r7, #26]
 80198aa:	2300      	movs	r3, #0
 80198ac:	9301      	str	r3, [sp, #4]
 80198ae:	887b      	ldrh	r3, [r7, #2]
 80198b0:	9300      	str	r3, [sp, #0]
 80198b2:	460b      	mov	r3, r1
 80198b4:	4601      	mov	r1, r0
 80198b6:	6938      	ldr	r0, [r7, #16]
 80198b8:	f7ff ff7c 	bl	80197b4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80198bc:	693b      	ldr	r3, [r7, #16]
 80198be:	685b      	ldr	r3, [r3, #4]
 80198c0:	f003 0303 	and.w	r3, r3, #3
 80198c4:	2b00      	cmp	r3, #0
 80198c6:	d006      	beq.n	80198d6 <pbuf_alloc+0xce>
 80198c8:	4b42      	ldr	r3, [pc, #264]	; (80199d4 <pbuf_alloc+0x1cc>)
 80198ca:	f240 1201 	movw	r2, #257	; 0x101
 80198ce:	4942      	ldr	r1, [pc, #264]	; (80199d8 <pbuf_alloc+0x1d0>)
 80198d0:	4842      	ldr	r0, [pc, #264]	; (80199dc <pbuf_alloc+0x1d4>)
 80198d2:	f00a fb89 	bl	8023fe8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80198d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80198d8:	3303      	adds	r3, #3
 80198da:	f023 0303 	bic.w	r3, r3, #3
 80198de:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80198e2:	d106      	bne.n	80198f2 <pbuf_alloc+0xea>
 80198e4:	4b3b      	ldr	r3, [pc, #236]	; (80199d4 <pbuf_alloc+0x1cc>)
 80198e6:	f240 1203 	movw	r2, #259	; 0x103
 80198ea:	493d      	ldr	r1, [pc, #244]	; (80199e0 <pbuf_alloc+0x1d8>)
 80198ec:	483b      	ldr	r0, [pc, #236]	; (80199dc <pbuf_alloc+0x1d4>)
 80198ee:	f00a fb7b 	bl	8023fe8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80198f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198f4:	2b00      	cmp	r3, #0
 80198f6:	d102      	bne.n	80198fe <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80198f8:	693b      	ldr	r3, [r7, #16]
 80198fa:	627b      	str	r3, [r7, #36]	; 0x24
 80198fc:	e002      	b.n	8019904 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80198fe:	69fb      	ldr	r3, [r7, #28]
 8019900:	693a      	ldr	r2, [r7, #16]
 8019902:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8019904:	693b      	ldr	r3, [r7, #16]
 8019906:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8019908:	8b7a      	ldrh	r2, [r7, #26]
 801990a:	89fb      	ldrh	r3, [r7, #14]
 801990c:	1ad3      	subs	r3, r2, r3
 801990e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8019910:	2300      	movs	r3, #0
 8019912:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8019914:	8b7b      	ldrh	r3, [r7, #26]
 8019916:	2b00      	cmp	r3, #0
 8019918:	d19e      	bne.n	8019858 <pbuf_alloc+0x50>
      break;
 801991a:	e055      	b.n	80199c8 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801991c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801991e:	3303      	adds	r3, #3
 8019920:	b29b      	uxth	r3, r3
 8019922:	f023 0303 	bic.w	r3, r3, #3
 8019926:	b29a      	uxth	r2, r3
 8019928:	88bb      	ldrh	r3, [r7, #4]
 801992a:	3303      	adds	r3, #3
 801992c:	b29b      	uxth	r3, r3
 801992e:	f023 0303 	bic.w	r3, r3, #3
 8019932:	b29b      	uxth	r3, r3
 8019934:	4413      	add	r3, r2
 8019936:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8019938:	8b3b      	ldrh	r3, [r7, #24]
 801993a:	3310      	adds	r3, #16
 801993c:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801993e:	8b3a      	ldrh	r2, [r7, #24]
 8019940:	88bb      	ldrh	r3, [r7, #4]
 8019942:	3303      	adds	r3, #3
 8019944:	f023 0303 	bic.w	r3, r3, #3
 8019948:	429a      	cmp	r2, r3
 801994a:	d306      	bcc.n	801995a <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801994c:	8afa      	ldrh	r2, [r7, #22]
 801994e:	88bb      	ldrh	r3, [r7, #4]
 8019950:	3303      	adds	r3, #3
 8019952:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8019956:	429a      	cmp	r2, r3
 8019958:	d201      	bcs.n	801995e <pbuf_alloc+0x156>
        return NULL;
 801995a:	2300      	movs	r3, #0
 801995c:	e035      	b.n	80199ca <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801995e:	8afb      	ldrh	r3, [r7, #22]
 8019960:	4618      	mov	r0, r3
 8019962:	f7ff f9c5 	bl	8018cf0 <mem_malloc>
 8019966:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8019968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801996a:	2b00      	cmp	r3, #0
 801996c:	d101      	bne.n	8019972 <pbuf_alloc+0x16a>
        return NULL;
 801996e:	2300      	movs	r3, #0
 8019970:	e02b      	b.n	80199ca <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8019972:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019974:	3310      	adds	r3, #16
 8019976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019978:	4413      	add	r3, r2
 801997a:	3303      	adds	r3, #3
 801997c:	f023 0303 	bic.w	r3, r3, #3
 8019980:	4618      	mov	r0, r3
 8019982:	88b9      	ldrh	r1, [r7, #4]
 8019984:	88ba      	ldrh	r2, [r7, #4]
 8019986:	2300      	movs	r3, #0
 8019988:	9301      	str	r3, [sp, #4]
 801998a:	887b      	ldrh	r3, [r7, #2]
 801998c:	9300      	str	r3, [sp, #0]
 801998e:	460b      	mov	r3, r1
 8019990:	4601      	mov	r1, r0
 8019992:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019994:	f7ff ff0e 	bl	80197b4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8019998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801999a:	685b      	ldr	r3, [r3, #4]
 801999c:	f003 0303 	and.w	r3, r3, #3
 80199a0:	2b00      	cmp	r3, #0
 80199a2:	d010      	beq.n	80199c6 <pbuf_alloc+0x1be>
 80199a4:	4b0b      	ldr	r3, [pc, #44]	; (80199d4 <pbuf_alloc+0x1cc>)
 80199a6:	f240 1223 	movw	r2, #291	; 0x123
 80199aa:	490e      	ldr	r1, [pc, #56]	; (80199e4 <pbuf_alloc+0x1dc>)
 80199ac:	480b      	ldr	r0, [pc, #44]	; (80199dc <pbuf_alloc+0x1d4>)
 80199ae:	f00a fb1b 	bl	8023fe8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80199b2:	e008      	b.n	80199c6 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80199b4:	4b07      	ldr	r3, [pc, #28]	; (80199d4 <pbuf_alloc+0x1cc>)
 80199b6:	f240 1227 	movw	r2, #295	; 0x127
 80199ba:	490b      	ldr	r1, [pc, #44]	; (80199e8 <pbuf_alloc+0x1e0>)
 80199bc:	4807      	ldr	r0, [pc, #28]	; (80199dc <pbuf_alloc+0x1d4>)
 80199be:	f00a fb13 	bl	8023fe8 <iprintf>
      return NULL;
 80199c2:	2300      	movs	r3, #0
 80199c4:	e001      	b.n	80199ca <pbuf_alloc+0x1c2>
      break;
 80199c6:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80199c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80199ca:	4618      	mov	r0, r3
 80199cc:	3728      	adds	r7, #40	; 0x28
 80199ce:	46bd      	mov	sp, r7
 80199d0:	bd80      	pop	{r7, pc}
 80199d2:	bf00      	nop
 80199d4:	08026ab8 	.word	0x08026ab8
 80199d8:	08026b04 	.word	0x08026b04
 80199dc:	08026b34 	.word	0x08026b34
 80199e0:	08026b5c 	.word	0x08026b5c
 80199e4:	08026b90 	.word	0x08026b90
 80199e8:	08026bbc 	.word	0x08026bbc

080199ec <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80199ec:	b580      	push	{r7, lr}
 80199ee:	b086      	sub	sp, #24
 80199f0:	af02      	add	r7, sp, #8
 80199f2:	6078      	str	r0, [r7, #4]
 80199f4:	460b      	mov	r3, r1
 80199f6:	807b      	strh	r3, [r7, #2]
 80199f8:	4613      	mov	r3, r2
 80199fa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80199fc:	883b      	ldrh	r3, [r7, #0]
 80199fe:	2b41      	cmp	r3, #65	; 0x41
 8019a00:	d009      	beq.n	8019a16 <pbuf_alloc_reference+0x2a>
 8019a02:	883b      	ldrh	r3, [r7, #0]
 8019a04:	2b01      	cmp	r3, #1
 8019a06:	d006      	beq.n	8019a16 <pbuf_alloc_reference+0x2a>
 8019a08:	4b0f      	ldr	r3, [pc, #60]	; (8019a48 <pbuf_alloc_reference+0x5c>)
 8019a0a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8019a0e:	490f      	ldr	r1, [pc, #60]	; (8019a4c <pbuf_alloc_reference+0x60>)
 8019a10:	480f      	ldr	r0, [pc, #60]	; (8019a50 <pbuf_alloc_reference+0x64>)
 8019a12:	f00a fae9 	bl	8023fe8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8019a16:	200c      	movs	r0, #12
 8019a18:	f7ff faec 	bl	8018ff4 <memp_malloc>
 8019a1c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8019a1e:	68fb      	ldr	r3, [r7, #12]
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	d101      	bne.n	8019a28 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8019a24:	2300      	movs	r3, #0
 8019a26:	e00b      	b.n	8019a40 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8019a28:	8879      	ldrh	r1, [r7, #2]
 8019a2a:	887a      	ldrh	r2, [r7, #2]
 8019a2c:	2300      	movs	r3, #0
 8019a2e:	9301      	str	r3, [sp, #4]
 8019a30:	883b      	ldrh	r3, [r7, #0]
 8019a32:	9300      	str	r3, [sp, #0]
 8019a34:	460b      	mov	r3, r1
 8019a36:	6879      	ldr	r1, [r7, #4]
 8019a38:	68f8      	ldr	r0, [r7, #12]
 8019a3a:	f7ff febb 	bl	80197b4 <pbuf_init_alloced_pbuf>
  return p;
 8019a3e:	68fb      	ldr	r3, [r7, #12]
}
 8019a40:	4618      	mov	r0, r3
 8019a42:	3710      	adds	r7, #16
 8019a44:	46bd      	mov	sp, r7
 8019a46:	bd80      	pop	{r7, pc}
 8019a48:	08026ab8 	.word	0x08026ab8
 8019a4c:	08026bd8 	.word	0x08026bd8
 8019a50:	08026b34 	.word	0x08026b34

08019a54 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8019a54:	b580      	push	{r7, lr}
 8019a56:	b088      	sub	sp, #32
 8019a58:	af02      	add	r7, sp, #8
 8019a5a:	607b      	str	r3, [r7, #4]
 8019a5c:	4603      	mov	r3, r0
 8019a5e:	73fb      	strb	r3, [r7, #15]
 8019a60:	460b      	mov	r3, r1
 8019a62:	81bb      	strh	r3, [r7, #12]
 8019a64:	4613      	mov	r3, r2
 8019a66:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8019a68:	7bfb      	ldrb	r3, [r7, #15]
 8019a6a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8019a6c:	8a7b      	ldrh	r3, [r7, #18]
 8019a6e:	3303      	adds	r3, #3
 8019a70:	f023 0203 	bic.w	r2, r3, #3
 8019a74:	89bb      	ldrh	r3, [r7, #12]
 8019a76:	441a      	add	r2, r3
 8019a78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019a7a:	429a      	cmp	r2, r3
 8019a7c:	d901      	bls.n	8019a82 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8019a7e:	2300      	movs	r3, #0
 8019a80:	e018      	b.n	8019ab4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8019a82:	6a3b      	ldr	r3, [r7, #32]
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d007      	beq.n	8019a98 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8019a88:	8a7b      	ldrh	r3, [r7, #18]
 8019a8a:	3303      	adds	r3, #3
 8019a8c:	f023 0303 	bic.w	r3, r3, #3
 8019a90:	6a3a      	ldr	r2, [r7, #32]
 8019a92:	4413      	add	r3, r2
 8019a94:	617b      	str	r3, [r7, #20]
 8019a96:	e001      	b.n	8019a9c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8019a98:	2300      	movs	r3, #0
 8019a9a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8019a9c:	6878      	ldr	r0, [r7, #4]
 8019a9e:	89b9      	ldrh	r1, [r7, #12]
 8019aa0:	89ba      	ldrh	r2, [r7, #12]
 8019aa2:	2302      	movs	r3, #2
 8019aa4:	9301      	str	r3, [sp, #4]
 8019aa6:	897b      	ldrh	r3, [r7, #10]
 8019aa8:	9300      	str	r3, [sp, #0]
 8019aaa:	460b      	mov	r3, r1
 8019aac:	6979      	ldr	r1, [r7, #20]
 8019aae:	f7ff fe81 	bl	80197b4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8019ab2:	687b      	ldr	r3, [r7, #4]
}
 8019ab4:	4618      	mov	r0, r3
 8019ab6:	3718      	adds	r7, #24
 8019ab8:	46bd      	mov	sp, r7
 8019aba:	bd80      	pop	{r7, pc}

08019abc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8019abc:	b580      	push	{r7, lr}
 8019abe:	b084      	sub	sp, #16
 8019ac0:	af00      	add	r7, sp, #0
 8019ac2:	6078      	str	r0, [r7, #4]
 8019ac4:	460b      	mov	r3, r1
 8019ac6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	2b00      	cmp	r3, #0
 8019acc:	d106      	bne.n	8019adc <pbuf_realloc+0x20>
 8019ace:	4b3a      	ldr	r3, [pc, #232]	; (8019bb8 <pbuf_realloc+0xfc>)
 8019ad0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8019ad4:	4939      	ldr	r1, [pc, #228]	; (8019bbc <pbuf_realloc+0x100>)
 8019ad6:	483a      	ldr	r0, [pc, #232]	; (8019bc0 <pbuf_realloc+0x104>)
 8019ad8:	f00a fa86 	bl	8023fe8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	891b      	ldrh	r3, [r3, #8]
 8019ae0:	887a      	ldrh	r2, [r7, #2]
 8019ae2:	429a      	cmp	r2, r3
 8019ae4:	d264      	bcs.n	8019bb0 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	891a      	ldrh	r2, [r3, #8]
 8019aea:	887b      	ldrh	r3, [r7, #2]
 8019aec:	1ad3      	subs	r3, r2, r3
 8019aee:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8019af0:	887b      	ldrh	r3, [r7, #2]
 8019af2:	817b      	strh	r3, [r7, #10]
  q = p;
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8019af8:	e018      	b.n	8019b2c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8019afa:	68fb      	ldr	r3, [r7, #12]
 8019afc:	895b      	ldrh	r3, [r3, #10]
 8019afe:	897a      	ldrh	r2, [r7, #10]
 8019b00:	1ad3      	subs	r3, r2, r3
 8019b02:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8019b04:	68fb      	ldr	r3, [r7, #12]
 8019b06:	891a      	ldrh	r2, [r3, #8]
 8019b08:	893b      	ldrh	r3, [r7, #8]
 8019b0a:	1ad3      	subs	r3, r2, r3
 8019b0c:	b29a      	uxth	r2, r3
 8019b0e:	68fb      	ldr	r3, [r7, #12]
 8019b10:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	681b      	ldr	r3, [r3, #0]
 8019b16:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8019b18:	68fb      	ldr	r3, [r7, #12]
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d106      	bne.n	8019b2c <pbuf_realloc+0x70>
 8019b1e:	4b26      	ldr	r3, [pc, #152]	; (8019bb8 <pbuf_realloc+0xfc>)
 8019b20:	f240 12af 	movw	r2, #431	; 0x1af
 8019b24:	4927      	ldr	r1, [pc, #156]	; (8019bc4 <pbuf_realloc+0x108>)
 8019b26:	4826      	ldr	r0, [pc, #152]	; (8019bc0 <pbuf_realloc+0x104>)
 8019b28:	f00a fa5e 	bl	8023fe8 <iprintf>
  while (rem_len > q->len) {
 8019b2c:	68fb      	ldr	r3, [r7, #12]
 8019b2e:	895b      	ldrh	r3, [r3, #10]
 8019b30:	897a      	ldrh	r2, [r7, #10]
 8019b32:	429a      	cmp	r2, r3
 8019b34:	d8e1      	bhi.n	8019afa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8019b36:	68fb      	ldr	r3, [r7, #12]
 8019b38:	7b1b      	ldrb	r3, [r3, #12]
 8019b3a:	f003 030f 	and.w	r3, r3, #15
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	d122      	bne.n	8019b88 <pbuf_realloc+0xcc>
 8019b42:	68fb      	ldr	r3, [r7, #12]
 8019b44:	895b      	ldrh	r3, [r3, #10]
 8019b46:	897a      	ldrh	r2, [r7, #10]
 8019b48:	429a      	cmp	r2, r3
 8019b4a:	d01d      	beq.n	8019b88 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	7b5b      	ldrb	r3, [r3, #13]
 8019b50:	f003 0302 	and.w	r3, r3, #2
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	d117      	bne.n	8019b88 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8019b58:	68fb      	ldr	r3, [r7, #12]
 8019b5a:	685b      	ldr	r3, [r3, #4]
 8019b5c:	461a      	mov	r2, r3
 8019b5e:	68fb      	ldr	r3, [r7, #12]
 8019b60:	1ad3      	subs	r3, r2, r3
 8019b62:	b29a      	uxth	r2, r3
 8019b64:	897b      	ldrh	r3, [r7, #10]
 8019b66:	4413      	add	r3, r2
 8019b68:	b29b      	uxth	r3, r3
 8019b6a:	4619      	mov	r1, r3
 8019b6c:	68f8      	ldr	r0, [r7, #12]
 8019b6e:	f7fe ffb5 	bl	8018adc <mem_trim>
 8019b72:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8019b74:	68fb      	ldr	r3, [r7, #12]
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	d106      	bne.n	8019b88 <pbuf_realloc+0xcc>
 8019b7a:	4b0f      	ldr	r3, [pc, #60]	; (8019bb8 <pbuf_realloc+0xfc>)
 8019b7c:	f240 12bd 	movw	r2, #445	; 0x1bd
 8019b80:	4911      	ldr	r1, [pc, #68]	; (8019bc8 <pbuf_realloc+0x10c>)
 8019b82:	480f      	ldr	r0, [pc, #60]	; (8019bc0 <pbuf_realloc+0x104>)
 8019b84:	f00a fa30 	bl	8023fe8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8019b88:	68fb      	ldr	r3, [r7, #12]
 8019b8a:	897a      	ldrh	r2, [r7, #10]
 8019b8c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8019b8e:	68fb      	ldr	r3, [r7, #12]
 8019b90:	895a      	ldrh	r2, [r3, #10]
 8019b92:	68fb      	ldr	r3, [r7, #12]
 8019b94:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8019b96:	68fb      	ldr	r3, [r7, #12]
 8019b98:	681b      	ldr	r3, [r3, #0]
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	d004      	beq.n	8019ba8 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8019b9e:	68fb      	ldr	r3, [r7, #12]
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	4618      	mov	r0, r3
 8019ba4:	f000 f910 	bl	8019dc8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8019ba8:	68fb      	ldr	r3, [r7, #12]
 8019baa:	2200      	movs	r2, #0
 8019bac:	601a      	str	r2, [r3, #0]
 8019bae:	e000      	b.n	8019bb2 <pbuf_realloc+0xf6>
    return;
 8019bb0:	bf00      	nop

}
 8019bb2:	3710      	adds	r7, #16
 8019bb4:	46bd      	mov	sp, r7
 8019bb6:	bd80      	pop	{r7, pc}
 8019bb8:	08026ab8 	.word	0x08026ab8
 8019bbc:	08026bec 	.word	0x08026bec
 8019bc0:	08026b34 	.word	0x08026b34
 8019bc4:	08026c04 	.word	0x08026c04
 8019bc8:	08026c1c 	.word	0x08026c1c

08019bcc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8019bcc:	b580      	push	{r7, lr}
 8019bce:	b086      	sub	sp, #24
 8019bd0:	af00      	add	r7, sp, #0
 8019bd2:	60f8      	str	r0, [r7, #12]
 8019bd4:	60b9      	str	r1, [r7, #8]
 8019bd6:	4613      	mov	r3, r2
 8019bd8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8019bda:	68fb      	ldr	r3, [r7, #12]
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	d106      	bne.n	8019bee <pbuf_add_header_impl+0x22>
 8019be0:	4b2b      	ldr	r3, [pc, #172]	; (8019c90 <pbuf_add_header_impl+0xc4>)
 8019be2:	f240 12df 	movw	r2, #479	; 0x1df
 8019be6:	492b      	ldr	r1, [pc, #172]	; (8019c94 <pbuf_add_header_impl+0xc8>)
 8019be8:	482b      	ldr	r0, [pc, #172]	; (8019c98 <pbuf_add_header_impl+0xcc>)
 8019bea:	f00a f9fd 	bl	8023fe8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8019bee:	68fb      	ldr	r3, [r7, #12]
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d003      	beq.n	8019bfc <pbuf_add_header_impl+0x30>
 8019bf4:	68bb      	ldr	r3, [r7, #8]
 8019bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019bfa:	d301      	bcc.n	8019c00 <pbuf_add_header_impl+0x34>
    return 1;
 8019bfc:	2301      	movs	r3, #1
 8019bfe:	e043      	b.n	8019c88 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8019c00:	68bb      	ldr	r3, [r7, #8]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d101      	bne.n	8019c0a <pbuf_add_header_impl+0x3e>
    return 0;
 8019c06:	2300      	movs	r3, #0
 8019c08:	e03e      	b.n	8019c88 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8019c0a:	68bb      	ldr	r3, [r7, #8]
 8019c0c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8019c0e:	68fb      	ldr	r3, [r7, #12]
 8019c10:	891a      	ldrh	r2, [r3, #8]
 8019c12:	8a7b      	ldrh	r3, [r7, #18]
 8019c14:	4413      	add	r3, r2
 8019c16:	b29b      	uxth	r3, r3
 8019c18:	8a7a      	ldrh	r2, [r7, #18]
 8019c1a:	429a      	cmp	r2, r3
 8019c1c:	d901      	bls.n	8019c22 <pbuf_add_header_impl+0x56>
    return 1;
 8019c1e:	2301      	movs	r3, #1
 8019c20:	e032      	b.n	8019c88 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8019c22:	68fb      	ldr	r3, [r7, #12]
 8019c24:	7b1b      	ldrb	r3, [r3, #12]
 8019c26:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8019c28:	8a3b      	ldrh	r3, [r7, #16]
 8019c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d00c      	beq.n	8019c4c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8019c32:	68fb      	ldr	r3, [r7, #12]
 8019c34:	685a      	ldr	r2, [r3, #4]
 8019c36:	68bb      	ldr	r3, [r7, #8]
 8019c38:	425b      	negs	r3, r3
 8019c3a:	4413      	add	r3, r2
 8019c3c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	3310      	adds	r3, #16
 8019c42:	697a      	ldr	r2, [r7, #20]
 8019c44:	429a      	cmp	r2, r3
 8019c46:	d20d      	bcs.n	8019c64 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8019c48:	2301      	movs	r3, #1
 8019c4a:	e01d      	b.n	8019c88 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8019c4c:	79fb      	ldrb	r3, [r7, #7]
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d006      	beq.n	8019c60 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8019c52:	68fb      	ldr	r3, [r7, #12]
 8019c54:	685a      	ldr	r2, [r3, #4]
 8019c56:	68bb      	ldr	r3, [r7, #8]
 8019c58:	425b      	negs	r3, r3
 8019c5a:	4413      	add	r3, r2
 8019c5c:	617b      	str	r3, [r7, #20]
 8019c5e:	e001      	b.n	8019c64 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8019c60:	2301      	movs	r3, #1
 8019c62:	e011      	b.n	8019c88 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8019c64:	68fb      	ldr	r3, [r7, #12]
 8019c66:	697a      	ldr	r2, [r7, #20]
 8019c68:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8019c6a:	68fb      	ldr	r3, [r7, #12]
 8019c6c:	895a      	ldrh	r2, [r3, #10]
 8019c6e:	8a7b      	ldrh	r3, [r7, #18]
 8019c70:	4413      	add	r3, r2
 8019c72:	b29a      	uxth	r2, r3
 8019c74:	68fb      	ldr	r3, [r7, #12]
 8019c76:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8019c78:	68fb      	ldr	r3, [r7, #12]
 8019c7a:	891a      	ldrh	r2, [r3, #8]
 8019c7c:	8a7b      	ldrh	r3, [r7, #18]
 8019c7e:	4413      	add	r3, r2
 8019c80:	b29a      	uxth	r2, r3
 8019c82:	68fb      	ldr	r3, [r7, #12]
 8019c84:	811a      	strh	r2, [r3, #8]


  return 0;
 8019c86:	2300      	movs	r3, #0
}
 8019c88:	4618      	mov	r0, r3
 8019c8a:	3718      	adds	r7, #24
 8019c8c:	46bd      	mov	sp, r7
 8019c8e:	bd80      	pop	{r7, pc}
 8019c90:	08026ab8 	.word	0x08026ab8
 8019c94:	08026c38 	.word	0x08026c38
 8019c98:	08026b34 	.word	0x08026b34

08019c9c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8019c9c:	b580      	push	{r7, lr}
 8019c9e:	b082      	sub	sp, #8
 8019ca0:	af00      	add	r7, sp, #0
 8019ca2:	6078      	str	r0, [r7, #4]
 8019ca4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8019ca6:	2200      	movs	r2, #0
 8019ca8:	6839      	ldr	r1, [r7, #0]
 8019caa:	6878      	ldr	r0, [r7, #4]
 8019cac:	f7ff ff8e 	bl	8019bcc <pbuf_add_header_impl>
 8019cb0:	4603      	mov	r3, r0
}
 8019cb2:	4618      	mov	r0, r3
 8019cb4:	3708      	adds	r7, #8
 8019cb6:	46bd      	mov	sp, r7
 8019cb8:	bd80      	pop	{r7, pc}
	...

08019cbc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8019cbc:	b580      	push	{r7, lr}
 8019cbe:	b084      	sub	sp, #16
 8019cc0:	af00      	add	r7, sp, #0
 8019cc2:	6078      	str	r0, [r7, #4]
 8019cc4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	d106      	bne.n	8019cda <pbuf_remove_header+0x1e>
 8019ccc:	4b20      	ldr	r3, [pc, #128]	; (8019d50 <pbuf_remove_header+0x94>)
 8019cce:	f240 224b 	movw	r2, #587	; 0x24b
 8019cd2:	4920      	ldr	r1, [pc, #128]	; (8019d54 <pbuf_remove_header+0x98>)
 8019cd4:	4820      	ldr	r0, [pc, #128]	; (8019d58 <pbuf_remove_header+0x9c>)
 8019cd6:	f00a f987 	bl	8023fe8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d003      	beq.n	8019ce8 <pbuf_remove_header+0x2c>
 8019ce0:	683b      	ldr	r3, [r7, #0]
 8019ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019ce6:	d301      	bcc.n	8019cec <pbuf_remove_header+0x30>
    return 1;
 8019ce8:	2301      	movs	r3, #1
 8019cea:	e02c      	b.n	8019d46 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8019cec:	683b      	ldr	r3, [r7, #0]
 8019cee:	2b00      	cmp	r3, #0
 8019cf0:	d101      	bne.n	8019cf6 <pbuf_remove_header+0x3a>
    return 0;
 8019cf2:	2300      	movs	r3, #0
 8019cf4:	e027      	b.n	8019d46 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8019cf6:	683b      	ldr	r3, [r7, #0]
 8019cf8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	895b      	ldrh	r3, [r3, #10]
 8019cfe:	89fa      	ldrh	r2, [r7, #14]
 8019d00:	429a      	cmp	r2, r3
 8019d02:	d908      	bls.n	8019d16 <pbuf_remove_header+0x5a>
 8019d04:	4b12      	ldr	r3, [pc, #72]	; (8019d50 <pbuf_remove_header+0x94>)
 8019d06:	f240 2255 	movw	r2, #597	; 0x255
 8019d0a:	4914      	ldr	r1, [pc, #80]	; (8019d5c <pbuf_remove_header+0xa0>)
 8019d0c:	4812      	ldr	r0, [pc, #72]	; (8019d58 <pbuf_remove_header+0x9c>)
 8019d0e:	f00a f96b 	bl	8023fe8 <iprintf>
 8019d12:	2301      	movs	r3, #1
 8019d14:	e017      	b.n	8019d46 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	685b      	ldr	r3, [r3, #4]
 8019d1a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8019d1c:	687b      	ldr	r3, [r7, #4]
 8019d1e:	685a      	ldr	r2, [r3, #4]
 8019d20:	683b      	ldr	r3, [r7, #0]
 8019d22:	441a      	add	r2, r3
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	895a      	ldrh	r2, [r3, #10]
 8019d2c:	89fb      	ldrh	r3, [r7, #14]
 8019d2e:	1ad3      	subs	r3, r2, r3
 8019d30:	b29a      	uxth	r2, r3
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	891a      	ldrh	r2, [r3, #8]
 8019d3a:	89fb      	ldrh	r3, [r7, #14]
 8019d3c:	1ad3      	subs	r3, r2, r3
 8019d3e:	b29a      	uxth	r2, r3
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8019d44:	2300      	movs	r3, #0
}
 8019d46:	4618      	mov	r0, r3
 8019d48:	3710      	adds	r7, #16
 8019d4a:	46bd      	mov	sp, r7
 8019d4c:	bd80      	pop	{r7, pc}
 8019d4e:	bf00      	nop
 8019d50:	08026ab8 	.word	0x08026ab8
 8019d54:	08026c38 	.word	0x08026c38
 8019d58:	08026b34 	.word	0x08026b34
 8019d5c:	08026c44 	.word	0x08026c44

08019d60 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8019d60:	b580      	push	{r7, lr}
 8019d62:	b082      	sub	sp, #8
 8019d64:	af00      	add	r7, sp, #0
 8019d66:	6078      	str	r0, [r7, #4]
 8019d68:	460b      	mov	r3, r1
 8019d6a:	807b      	strh	r3, [r7, #2]
 8019d6c:	4613      	mov	r3, r2
 8019d6e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8019d70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	da08      	bge.n	8019d8a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8019d78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019d7c:	425b      	negs	r3, r3
 8019d7e:	4619      	mov	r1, r3
 8019d80:	6878      	ldr	r0, [r7, #4]
 8019d82:	f7ff ff9b 	bl	8019cbc <pbuf_remove_header>
 8019d86:	4603      	mov	r3, r0
 8019d88:	e007      	b.n	8019d9a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8019d8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019d8e:	787a      	ldrb	r2, [r7, #1]
 8019d90:	4619      	mov	r1, r3
 8019d92:	6878      	ldr	r0, [r7, #4]
 8019d94:	f7ff ff1a 	bl	8019bcc <pbuf_add_header_impl>
 8019d98:	4603      	mov	r3, r0
  }
}
 8019d9a:	4618      	mov	r0, r3
 8019d9c:	3708      	adds	r7, #8
 8019d9e:	46bd      	mov	sp, r7
 8019da0:	bd80      	pop	{r7, pc}

08019da2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8019da2:	b580      	push	{r7, lr}
 8019da4:	b082      	sub	sp, #8
 8019da6:	af00      	add	r7, sp, #0
 8019da8:	6078      	str	r0, [r7, #4]
 8019daa:	460b      	mov	r3, r1
 8019dac:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8019dae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8019db2:	2201      	movs	r2, #1
 8019db4:	4619      	mov	r1, r3
 8019db6:	6878      	ldr	r0, [r7, #4]
 8019db8:	f7ff ffd2 	bl	8019d60 <pbuf_header_impl>
 8019dbc:	4603      	mov	r3, r0
}
 8019dbe:	4618      	mov	r0, r3
 8019dc0:	3708      	adds	r7, #8
 8019dc2:	46bd      	mov	sp, r7
 8019dc4:	bd80      	pop	{r7, pc}
	...

08019dc8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8019dc8:	b580      	push	{r7, lr}
 8019dca:	b088      	sub	sp, #32
 8019dcc:	af00      	add	r7, sp, #0
 8019dce:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	2b00      	cmp	r3, #0
 8019dd4:	d10b      	bne.n	8019dee <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	d106      	bne.n	8019dea <pbuf_free+0x22>
 8019ddc:	4b3b      	ldr	r3, [pc, #236]	; (8019ecc <pbuf_free+0x104>)
 8019dde:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8019de2:	493b      	ldr	r1, [pc, #236]	; (8019ed0 <pbuf_free+0x108>)
 8019de4:	483b      	ldr	r0, [pc, #236]	; (8019ed4 <pbuf_free+0x10c>)
 8019de6:	f00a f8ff 	bl	8023fe8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8019dea:	2300      	movs	r3, #0
 8019dec:	e069      	b.n	8019ec2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8019dee:	2300      	movs	r3, #0
 8019df0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8019df2:	e062      	b.n	8019eba <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8019df4:	f000 fdb0 	bl	801a958 <sys_arch_protect>
 8019df8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	7b9b      	ldrb	r3, [r3, #14]
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	d106      	bne.n	8019e10 <pbuf_free+0x48>
 8019e02:	4b32      	ldr	r3, [pc, #200]	; (8019ecc <pbuf_free+0x104>)
 8019e04:	f240 22f1 	movw	r2, #753	; 0x2f1
 8019e08:	4933      	ldr	r1, [pc, #204]	; (8019ed8 <pbuf_free+0x110>)
 8019e0a:	4832      	ldr	r0, [pc, #200]	; (8019ed4 <pbuf_free+0x10c>)
 8019e0c:	f00a f8ec 	bl	8023fe8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	7b9b      	ldrb	r3, [r3, #14]
 8019e14:	3b01      	subs	r3, #1
 8019e16:	b2da      	uxtb	r2, r3
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	739a      	strb	r2, [r3, #14]
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	7b9b      	ldrb	r3, [r3, #14]
 8019e20:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8019e22:	69b8      	ldr	r0, [r7, #24]
 8019e24:	f000 fda6 	bl	801a974 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8019e28:	7dfb      	ldrb	r3, [r7, #23]
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d143      	bne.n	8019eb6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	681b      	ldr	r3, [r3, #0]
 8019e32:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	7b1b      	ldrb	r3, [r3, #12]
 8019e38:	f003 030f 	and.w	r3, r3, #15
 8019e3c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	7b5b      	ldrb	r3, [r3, #13]
 8019e42:	f003 0302 	and.w	r3, r3, #2
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	d011      	beq.n	8019e6e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8019e4e:	68bb      	ldr	r3, [r7, #8]
 8019e50:	691b      	ldr	r3, [r3, #16]
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	d106      	bne.n	8019e64 <pbuf_free+0x9c>
 8019e56:	4b1d      	ldr	r3, [pc, #116]	; (8019ecc <pbuf_free+0x104>)
 8019e58:	f240 22ff 	movw	r2, #767	; 0x2ff
 8019e5c:	491f      	ldr	r1, [pc, #124]	; (8019edc <pbuf_free+0x114>)
 8019e5e:	481d      	ldr	r0, [pc, #116]	; (8019ed4 <pbuf_free+0x10c>)
 8019e60:	f00a f8c2 	bl	8023fe8 <iprintf>
        pc->custom_free_function(p);
 8019e64:	68bb      	ldr	r3, [r7, #8]
 8019e66:	691b      	ldr	r3, [r3, #16]
 8019e68:	6878      	ldr	r0, [r7, #4]
 8019e6a:	4798      	blx	r3
 8019e6c:	e01d      	b.n	8019eaa <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8019e6e:	7bfb      	ldrb	r3, [r7, #15]
 8019e70:	2b02      	cmp	r3, #2
 8019e72:	d104      	bne.n	8019e7e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8019e74:	6879      	ldr	r1, [r7, #4]
 8019e76:	200d      	movs	r0, #13
 8019e78:	f7ff f90e 	bl	8019098 <memp_free>
 8019e7c:	e015      	b.n	8019eaa <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8019e7e:	7bfb      	ldrb	r3, [r7, #15]
 8019e80:	2b01      	cmp	r3, #1
 8019e82:	d104      	bne.n	8019e8e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8019e84:	6879      	ldr	r1, [r7, #4]
 8019e86:	200c      	movs	r0, #12
 8019e88:	f7ff f906 	bl	8019098 <memp_free>
 8019e8c:	e00d      	b.n	8019eaa <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8019e8e:	7bfb      	ldrb	r3, [r7, #15]
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d103      	bne.n	8019e9c <pbuf_free+0xd4>
          mem_free(p);
 8019e94:	6878      	ldr	r0, [r7, #4]
 8019e96:	f7fe fd91 	bl	80189bc <mem_free>
 8019e9a:	e006      	b.n	8019eaa <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8019e9c:	4b0b      	ldr	r3, [pc, #44]	; (8019ecc <pbuf_free+0x104>)
 8019e9e:	f240 320f 	movw	r2, #783	; 0x30f
 8019ea2:	490f      	ldr	r1, [pc, #60]	; (8019ee0 <pbuf_free+0x118>)
 8019ea4:	480b      	ldr	r0, [pc, #44]	; (8019ed4 <pbuf_free+0x10c>)
 8019ea6:	f00a f89f 	bl	8023fe8 <iprintf>
        }
      }
      count++;
 8019eaa:	7ffb      	ldrb	r3, [r7, #31]
 8019eac:	3301      	adds	r3, #1
 8019eae:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8019eb0:	693b      	ldr	r3, [r7, #16]
 8019eb2:	607b      	str	r3, [r7, #4]
 8019eb4:	e001      	b.n	8019eba <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8019eb6:	2300      	movs	r3, #0
 8019eb8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d199      	bne.n	8019df4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8019ec0:	7ffb      	ldrb	r3, [r7, #31]
}
 8019ec2:	4618      	mov	r0, r3
 8019ec4:	3720      	adds	r7, #32
 8019ec6:	46bd      	mov	sp, r7
 8019ec8:	bd80      	pop	{r7, pc}
 8019eca:	bf00      	nop
 8019ecc:	08026ab8 	.word	0x08026ab8
 8019ed0:	08026c38 	.word	0x08026c38
 8019ed4:	08026b34 	.word	0x08026b34
 8019ed8:	08026c64 	.word	0x08026c64
 8019edc:	08026c7c 	.word	0x08026c7c
 8019ee0:	08026ca0 	.word	0x08026ca0

08019ee4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8019ee4:	b480      	push	{r7}
 8019ee6:	b085      	sub	sp, #20
 8019ee8:	af00      	add	r7, sp, #0
 8019eea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8019eec:	2300      	movs	r3, #0
 8019eee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8019ef0:	e005      	b.n	8019efe <pbuf_clen+0x1a>
    ++len;
 8019ef2:	89fb      	ldrh	r3, [r7, #14]
 8019ef4:	3301      	adds	r3, #1
 8019ef6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	2b00      	cmp	r3, #0
 8019f02:	d1f6      	bne.n	8019ef2 <pbuf_clen+0xe>
  }
  return len;
 8019f04:	89fb      	ldrh	r3, [r7, #14]
}
 8019f06:	4618      	mov	r0, r3
 8019f08:	3714      	adds	r7, #20
 8019f0a:	46bd      	mov	sp, r7
 8019f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f10:	4770      	bx	lr
	...

08019f14 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8019f14:	b580      	push	{r7, lr}
 8019f16:	b084      	sub	sp, #16
 8019f18:	af00      	add	r7, sp, #0
 8019f1a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	d016      	beq.n	8019f50 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8019f22:	f000 fd19 	bl	801a958 <sys_arch_protect>
 8019f26:	60f8      	str	r0, [r7, #12]
 8019f28:	687b      	ldr	r3, [r7, #4]
 8019f2a:	7b9b      	ldrb	r3, [r3, #14]
 8019f2c:	3301      	adds	r3, #1
 8019f2e:	b2da      	uxtb	r2, r3
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	739a      	strb	r2, [r3, #14]
 8019f34:	68f8      	ldr	r0, [r7, #12]
 8019f36:	f000 fd1d 	bl	801a974 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	7b9b      	ldrb	r3, [r3, #14]
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d106      	bne.n	8019f50 <pbuf_ref+0x3c>
 8019f42:	4b05      	ldr	r3, [pc, #20]	; (8019f58 <pbuf_ref+0x44>)
 8019f44:	f240 3242 	movw	r2, #834	; 0x342
 8019f48:	4904      	ldr	r1, [pc, #16]	; (8019f5c <pbuf_ref+0x48>)
 8019f4a:	4805      	ldr	r0, [pc, #20]	; (8019f60 <pbuf_ref+0x4c>)
 8019f4c:	f00a f84c 	bl	8023fe8 <iprintf>
  }
}
 8019f50:	bf00      	nop
 8019f52:	3710      	adds	r7, #16
 8019f54:	46bd      	mov	sp, r7
 8019f56:	bd80      	pop	{r7, pc}
 8019f58:	08026ab8 	.word	0x08026ab8
 8019f5c:	08026cb4 	.word	0x08026cb4
 8019f60:	08026b34 	.word	0x08026b34

08019f64 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8019f64:	b580      	push	{r7, lr}
 8019f66:	b084      	sub	sp, #16
 8019f68:	af00      	add	r7, sp, #0
 8019f6a:	6078      	str	r0, [r7, #4]
 8019f6c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	d002      	beq.n	8019f7a <pbuf_cat+0x16>
 8019f74:	683b      	ldr	r3, [r7, #0]
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	d107      	bne.n	8019f8a <pbuf_cat+0x26>
 8019f7a:	4b20      	ldr	r3, [pc, #128]	; (8019ffc <pbuf_cat+0x98>)
 8019f7c:	f240 325a 	movw	r2, #858	; 0x35a
 8019f80:	491f      	ldr	r1, [pc, #124]	; (801a000 <pbuf_cat+0x9c>)
 8019f82:	4820      	ldr	r0, [pc, #128]	; (801a004 <pbuf_cat+0xa0>)
 8019f84:	f00a f830 	bl	8023fe8 <iprintf>
 8019f88:	e034      	b.n	8019ff4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	60fb      	str	r3, [r7, #12]
 8019f8e:	e00a      	b.n	8019fa6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8019f90:	68fb      	ldr	r3, [r7, #12]
 8019f92:	891a      	ldrh	r2, [r3, #8]
 8019f94:	683b      	ldr	r3, [r7, #0]
 8019f96:	891b      	ldrh	r3, [r3, #8]
 8019f98:	4413      	add	r3, r2
 8019f9a:	b29a      	uxth	r2, r3
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8019fa0:	68fb      	ldr	r3, [r7, #12]
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	60fb      	str	r3, [r7, #12]
 8019fa6:	68fb      	ldr	r3, [r7, #12]
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	d1f0      	bne.n	8019f90 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8019fae:	68fb      	ldr	r3, [r7, #12]
 8019fb0:	891a      	ldrh	r2, [r3, #8]
 8019fb2:	68fb      	ldr	r3, [r7, #12]
 8019fb4:	895b      	ldrh	r3, [r3, #10]
 8019fb6:	429a      	cmp	r2, r3
 8019fb8:	d006      	beq.n	8019fc8 <pbuf_cat+0x64>
 8019fba:	4b10      	ldr	r3, [pc, #64]	; (8019ffc <pbuf_cat+0x98>)
 8019fbc:	f240 3262 	movw	r2, #866	; 0x362
 8019fc0:	4911      	ldr	r1, [pc, #68]	; (801a008 <pbuf_cat+0xa4>)
 8019fc2:	4810      	ldr	r0, [pc, #64]	; (801a004 <pbuf_cat+0xa0>)
 8019fc4:	f00a f810 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8019fc8:	68fb      	ldr	r3, [r7, #12]
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d006      	beq.n	8019fde <pbuf_cat+0x7a>
 8019fd0:	4b0a      	ldr	r3, [pc, #40]	; (8019ffc <pbuf_cat+0x98>)
 8019fd2:	f240 3263 	movw	r2, #867	; 0x363
 8019fd6:	490d      	ldr	r1, [pc, #52]	; (801a00c <pbuf_cat+0xa8>)
 8019fd8:	480a      	ldr	r0, [pc, #40]	; (801a004 <pbuf_cat+0xa0>)
 8019fda:	f00a f805 	bl	8023fe8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8019fde:	68fb      	ldr	r3, [r7, #12]
 8019fe0:	891a      	ldrh	r2, [r3, #8]
 8019fe2:	683b      	ldr	r3, [r7, #0]
 8019fe4:	891b      	ldrh	r3, [r3, #8]
 8019fe6:	4413      	add	r3, r2
 8019fe8:	b29a      	uxth	r2, r3
 8019fea:	68fb      	ldr	r3, [r7, #12]
 8019fec:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8019fee:	68fb      	ldr	r3, [r7, #12]
 8019ff0:	683a      	ldr	r2, [r7, #0]
 8019ff2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8019ff4:	3710      	adds	r7, #16
 8019ff6:	46bd      	mov	sp, r7
 8019ff8:	bd80      	pop	{r7, pc}
 8019ffa:	bf00      	nop
 8019ffc:	08026ab8 	.word	0x08026ab8
 801a000:	08026cc8 	.word	0x08026cc8
 801a004:	08026b34 	.word	0x08026b34
 801a008:	08026d00 	.word	0x08026d00
 801a00c:	08026d30 	.word	0x08026d30

0801a010 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801a010:	b580      	push	{r7, lr}
 801a012:	b082      	sub	sp, #8
 801a014:	af00      	add	r7, sp, #0
 801a016:	6078      	str	r0, [r7, #4]
 801a018:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801a01a:	6839      	ldr	r1, [r7, #0]
 801a01c:	6878      	ldr	r0, [r7, #4]
 801a01e:	f7ff ffa1 	bl	8019f64 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801a022:	6838      	ldr	r0, [r7, #0]
 801a024:	f7ff ff76 	bl	8019f14 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801a028:	bf00      	nop
 801a02a:	3708      	adds	r7, #8
 801a02c:	46bd      	mov	sp, r7
 801a02e:	bd80      	pop	{r7, pc}

0801a030 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801a030:	b580      	push	{r7, lr}
 801a032:	b086      	sub	sp, #24
 801a034:	af00      	add	r7, sp, #0
 801a036:	6078      	str	r0, [r7, #4]
 801a038:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801a03a:	2300      	movs	r3, #0
 801a03c:	617b      	str	r3, [r7, #20]
 801a03e:	2300      	movs	r3, #0
 801a040:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	2b00      	cmp	r3, #0
 801a046:	d008      	beq.n	801a05a <pbuf_copy+0x2a>
 801a048:	683b      	ldr	r3, [r7, #0]
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	d005      	beq.n	801a05a <pbuf_copy+0x2a>
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	891a      	ldrh	r2, [r3, #8]
 801a052:	683b      	ldr	r3, [r7, #0]
 801a054:	891b      	ldrh	r3, [r3, #8]
 801a056:	429a      	cmp	r2, r3
 801a058:	d209      	bcs.n	801a06e <pbuf_copy+0x3e>
 801a05a:	4b57      	ldr	r3, [pc, #348]	; (801a1b8 <pbuf_copy+0x188>)
 801a05c:	f240 32ca 	movw	r2, #970	; 0x3ca
 801a060:	4956      	ldr	r1, [pc, #344]	; (801a1bc <pbuf_copy+0x18c>)
 801a062:	4857      	ldr	r0, [pc, #348]	; (801a1c0 <pbuf_copy+0x190>)
 801a064:	f009 ffc0 	bl	8023fe8 <iprintf>
 801a068:	f06f 030f 	mvn.w	r3, #15
 801a06c:	e09f      	b.n	801a1ae <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	895b      	ldrh	r3, [r3, #10]
 801a072:	461a      	mov	r2, r3
 801a074:	697b      	ldr	r3, [r7, #20]
 801a076:	1ad2      	subs	r2, r2, r3
 801a078:	683b      	ldr	r3, [r7, #0]
 801a07a:	895b      	ldrh	r3, [r3, #10]
 801a07c:	4619      	mov	r1, r3
 801a07e:	693b      	ldr	r3, [r7, #16]
 801a080:	1acb      	subs	r3, r1, r3
 801a082:	429a      	cmp	r2, r3
 801a084:	d306      	bcc.n	801a094 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801a086:	683b      	ldr	r3, [r7, #0]
 801a088:	895b      	ldrh	r3, [r3, #10]
 801a08a:	461a      	mov	r2, r3
 801a08c:	693b      	ldr	r3, [r7, #16]
 801a08e:	1ad3      	subs	r3, r2, r3
 801a090:	60fb      	str	r3, [r7, #12]
 801a092:	e005      	b.n	801a0a0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	895b      	ldrh	r3, [r3, #10]
 801a098:	461a      	mov	r2, r3
 801a09a:	697b      	ldr	r3, [r7, #20]
 801a09c:	1ad3      	subs	r3, r2, r3
 801a09e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	685a      	ldr	r2, [r3, #4]
 801a0a4:	697b      	ldr	r3, [r7, #20]
 801a0a6:	18d0      	adds	r0, r2, r3
 801a0a8:	683b      	ldr	r3, [r7, #0]
 801a0aa:	685a      	ldr	r2, [r3, #4]
 801a0ac:	693b      	ldr	r3, [r7, #16]
 801a0ae:	4413      	add	r3, r2
 801a0b0:	68fa      	ldr	r2, [r7, #12]
 801a0b2:	4619      	mov	r1, r3
 801a0b4:	f009 fedd 	bl	8023e72 <memcpy>
    offset_to += len;
 801a0b8:	697a      	ldr	r2, [r7, #20]
 801a0ba:	68fb      	ldr	r3, [r7, #12]
 801a0bc:	4413      	add	r3, r2
 801a0be:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801a0c0:	693a      	ldr	r2, [r7, #16]
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	4413      	add	r3, r2
 801a0c6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	895b      	ldrh	r3, [r3, #10]
 801a0cc:	461a      	mov	r2, r3
 801a0ce:	697b      	ldr	r3, [r7, #20]
 801a0d0:	4293      	cmp	r3, r2
 801a0d2:	d906      	bls.n	801a0e2 <pbuf_copy+0xb2>
 801a0d4:	4b38      	ldr	r3, [pc, #224]	; (801a1b8 <pbuf_copy+0x188>)
 801a0d6:	f240 32d9 	movw	r2, #985	; 0x3d9
 801a0da:	493a      	ldr	r1, [pc, #232]	; (801a1c4 <pbuf_copy+0x194>)
 801a0dc:	4838      	ldr	r0, [pc, #224]	; (801a1c0 <pbuf_copy+0x190>)
 801a0de:	f009 ff83 	bl	8023fe8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801a0e2:	683b      	ldr	r3, [r7, #0]
 801a0e4:	895b      	ldrh	r3, [r3, #10]
 801a0e6:	461a      	mov	r2, r3
 801a0e8:	693b      	ldr	r3, [r7, #16]
 801a0ea:	4293      	cmp	r3, r2
 801a0ec:	d906      	bls.n	801a0fc <pbuf_copy+0xcc>
 801a0ee:	4b32      	ldr	r3, [pc, #200]	; (801a1b8 <pbuf_copy+0x188>)
 801a0f0:	f240 32da 	movw	r2, #986	; 0x3da
 801a0f4:	4934      	ldr	r1, [pc, #208]	; (801a1c8 <pbuf_copy+0x198>)
 801a0f6:	4832      	ldr	r0, [pc, #200]	; (801a1c0 <pbuf_copy+0x190>)
 801a0f8:	f009 ff76 	bl	8023fe8 <iprintf>
    if (offset_from >= p_from->len) {
 801a0fc:	683b      	ldr	r3, [r7, #0]
 801a0fe:	895b      	ldrh	r3, [r3, #10]
 801a100:	461a      	mov	r2, r3
 801a102:	693b      	ldr	r3, [r7, #16]
 801a104:	4293      	cmp	r3, r2
 801a106:	d304      	bcc.n	801a112 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801a108:	2300      	movs	r3, #0
 801a10a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801a10c:	683b      	ldr	r3, [r7, #0]
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	895b      	ldrh	r3, [r3, #10]
 801a116:	461a      	mov	r2, r3
 801a118:	697b      	ldr	r3, [r7, #20]
 801a11a:	4293      	cmp	r3, r2
 801a11c:	d114      	bne.n	801a148 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801a11e:	2300      	movs	r3, #0
 801a120:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	d10c      	bne.n	801a148 <pbuf_copy+0x118>
 801a12e:	683b      	ldr	r3, [r7, #0]
 801a130:	2b00      	cmp	r3, #0
 801a132:	d009      	beq.n	801a148 <pbuf_copy+0x118>
 801a134:	4b20      	ldr	r3, [pc, #128]	; (801a1b8 <pbuf_copy+0x188>)
 801a136:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801a13a:	4924      	ldr	r1, [pc, #144]	; (801a1cc <pbuf_copy+0x19c>)
 801a13c:	4820      	ldr	r0, [pc, #128]	; (801a1c0 <pbuf_copy+0x190>)
 801a13e:	f009 ff53 	bl	8023fe8 <iprintf>
 801a142:	f06f 030f 	mvn.w	r3, #15
 801a146:	e032      	b.n	801a1ae <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801a148:	683b      	ldr	r3, [r7, #0]
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	d013      	beq.n	801a176 <pbuf_copy+0x146>
 801a14e:	683b      	ldr	r3, [r7, #0]
 801a150:	895a      	ldrh	r2, [r3, #10]
 801a152:	683b      	ldr	r3, [r7, #0]
 801a154:	891b      	ldrh	r3, [r3, #8]
 801a156:	429a      	cmp	r2, r3
 801a158:	d10d      	bne.n	801a176 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801a15a:	683b      	ldr	r3, [r7, #0]
 801a15c:	681b      	ldr	r3, [r3, #0]
 801a15e:	2b00      	cmp	r3, #0
 801a160:	d009      	beq.n	801a176 <pbuf_copy+0x146>
 801a162:	4b15      	ldr	r3, [pc, #84]	; (801a1b8 <pbuf_copy+0x188>)
 801a164:	f240 32ea 	movw	r2, #1002	; 0x3ea
 801a168:	4919      	ldr	r1, [pc, #100]	; (801a1d0 <pbuf_copy+0x1a0>)
 801a16a:	4815      	ldr	r0, [pc, #84]	; (801a1c0 <pbuf_copy+0x190>)
 801a16c:	f009 ff3c 	bl	8023fe8 <iprintf>
 801a170:	f06f 0305 	mvn.w	r3, #5
 801a174:	e01b      	b.n	801a1ae <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801a176:	687b      	ldr	r3, [r7, #4]
 801a178:	2b00      	cmp	r3, #0
 801a17a:	d013      	beq.n	801a1a4 <pbuf_copy+0x174>
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	895a      	ldrh	r2, [r3, #10]
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	891b      	ldrh	r3, [r3, #8]
 801a184:	429a      	cmp	r2, r3
 801a186:	d10d      	bne.n	801a1a4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d009      	beq.n	801a1a4 <pbuf_copy+0x174>
 801a190:	4b09      	ldr	r3, [pc, #36]	; (801a1b8 <pbuf_copy+0x188>)
 801a192:	f240 32ef 	movw	r2, #1007	; 0x3ef
 801a196:	490e      	ldr	r1, [pc, #56]	; (801a1d0 <pbuf_copy+0x1a0>)
 801a198:	4809      	ldr	r0, [pc, #36]	; (801a1c0 <pbuf_copy+0x190>)
 801a19a:	f009 ff25 	bl	8023fe8 <iprintf>
 801a19e:	f06f 0305 	mvn.w	r3, #5
 801a1a2:	e004      	b.n	801a1ae <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801a1a4:	683b      	ldr	r3, [r7, #0]
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	f47f af61 	bne.w	801a06e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801a1ac:	2300      	movs	r3, #0
}
 801a1ae:	4618      	mov	r0, r3
 801a1b0:	3718      	adds	r7, #24
 801a1b2:	46bd      	mov	sp, r7
 801a1b4:	bd80      	pop	{r7, pc}
 801a1b6:	bf00      	nop
 801a1b8:	08026ab8 	.word	0x08026ab8
 801a1bc:	08026d7c 	.word	0x08026d7c
 801a1c0:	08026b34 	.word	0x08026b34
 801a1c4:	08026dac 	.word	0x08026dac
 801a1c8:	08026dc4 	.word	0x08026dc4
 801a1cc:	08026de0 	.word	0x08026de0
 801a1d0:	08026df0 	.word	0x08026df0

0801a1d4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801a1d4:	b580      	push	{r7, lr}
 801a1d6:	b088      	sub	sp, #32
 801a1d8:	af00      	add	r7, sp, #0
 801a1da:	60f8      	str	r0, [r7, #12]
 801a1dc:	60b9      	str	r1, [r7, #8]
 801a1de:	4611      	mov	r1, r2
 801a1e0:	461a      	mov	r2, r3
 801a1e2:	460b      	mov	r3, r1
 801a1e4:	80fb      	strh	r3, [r7, #6]
 801a1e6:	4613      	mov	r3, r2
 801a1e8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801a1ea:	2300      	movs	r3, #0
 801a1ec:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801a1ee:	2300      	movs	r3, #0
 801a1f0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801a1f2:	68fb      	ldr	r3, [r7, #12]
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d108      	bne.n	801a20a <pbuf_copy_partial+0x36>
 801a1f8:	4b2b      	ldr	r3, [pc, #172]	; (801a2a8 <pbuf_copy_partial+0xd4>)
 801a1fa:	f240 420a 	movw	r2, #1034	; 0x40a
 801a1fe:	492b      	ldr	r1, [pc, #172]	; (801a2ac <pbuf_copy_partial+0xd8>)
 801a200:	482b      	ldr	r0, [pc, #172]	; (801a2b0 <pbuf_copy_partial+0xdc>)
 801a202:	f009 fef1 	bl	8023fe8 <iprintf>
 801a206:	2300      	movs	r3, #0
 801a208:	e04a      	b.n	801a2a0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801a20a:	68bb      	ldr	r3, [r7, #8]
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	d108      	bne.n	801a222 <pbuf_copy_partial+0x4e>
 801a210:	4b25      	ldr	r3, [pc, #148]	; (801a2a8 <pbuf_copy_partial+0xd4>)
 801a212:	f240 420b 	movw	r2, #1035	; 0x40b
 801a216:	4927      	ldr	r1, [pc, #156]	; (801a2b4 <pbuf_copy_partial+0xe0>)
 801a218:	4825      	ldr	r0, [pc, #148]	; (801a2b0 <pbuf_copy_partial+0xdc>)
 801a21a:	f009 fee5 	bl	8023fe8 <iprintf>
 801a21e:	2300      	movs	r3, #0
 801a220:	e03e      	b.n	801a2a0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801a222:	68fb      	ldr	r3, [r7, #12]
 801a224:	61fb      	str	r3, [r7, #28]
 801a226:	e034      	b.n	801a292 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801a228:	88bb      	ldrh	r3, [r7, #4]
 801a22a:	2b00      	cmp	r3, #0
 801a22c:	d00a      	beq.n	801a244 <pbuf_copy_partial+0x70>
 801a22e:	69fb      	ldr	r3, [r7, #28]
 801a230:	895b      	ldrh	r3, [r3, #10]
 801a232:	88ba      	ldrh	r2, [r7, #4]
 801a234:	429a      	cmp	r2, r3
 801a236:	d305      	bcc.n	801a244 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801a238:	69fb      	ldr	r3, [r7, #28]
 801a23a:	895b      	ldrh	r3, [r3, #10]
 801a23c:	88ba      	ldrh	r2, [r7, #4]
 801a23e:	1ad3      	subs	r3, r2, r3
 801a240:	80bb      	strh	r3, [r7, #4]
 801a242:	e023      	b.n	801a28c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801a244:	69fb      	ldr	r3, [r7, #28]
 801a246:	895a      	ldrh	r2, [r3, #10]
 801a248:	88bb      	ldrh	r3, [r7, #4]
 801a24a:	1ad3      	subs	r3, r2, r3
 801a24c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801a24e:	8b3a      	ldrh	r2, [r7, #24]
 801a250:	88fb      	ldrh	r3, [r7, #6]
 801a252:	429a      	cmp	r2, r3
 801a254:	d901      	bls.n	801a25a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801a256:	88fb      	ldrh	r3, [r7, #6]
 801a258:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801a25a:	8b7b      	ldrh	r3, [r7, #26]
 801a25c:	68ba      	ldr	r2, [r7, #8]
 801a25e:	18d0      	adds	r0, r2, r3
 801a260:	69fb      	ldr	r3, [r7, #28]
 801a262:	685a      	ldr	r2, [r3, #4]
 801a264:	88bb      	ldrh	r3, [r7, #4]
 801a266:	4413      	add	r3, r2
 801a268:	8b3a      	ldrh	r2, [r7, #24]
 801a26a:	4619      	mov	r1, r3
 801a26c:	f009 fe01 	bl	8023e72 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801a270:	8afa      	ldrh	r2, [r7, #22]
 801a272:	8b3b      	ldrh	r3, [r7, #24]
 801a274:	4413      	add	r3, r2
 801a276:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801a278:	8b7a      	ldrh	r2, [r7, #26]
 801a27a:	8b3b      	ldrh	r3, [r7, #24]
 801a27c:	4413      	add	r3, r2
 801a27e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801a280:	88fa      	ldrh	r2, [r7, #6]
 801a282:	8b3b      	ldrh	r3, [r7, #24]
 801a284:	1ad3      	subs	r3, r2, r3
 801a286:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801a288:	2300      	movs	r3, #0
 801a28a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801a28c:	69fb      	ldr	r3, [r7, #28]
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	61fb      	str	r3, [r7, #28]
 801a292:	88fb      	ldrh	r3, [r7, #6]
 801a294:	2b00      	cmp	r3, #0
 801a296:	d002      	beq.n	801a29e <pbuf_copy_partial+0xca>
 801a298:	69fb      	ldr	r3, [r7, #28]
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d1c4      	bne.n	801a228 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801a29e:	8afb      	ldrh	r3, [r7, #22]
}
 801a2a0:	4618      	mov	r0, r3
 801a2a2:	3720      	adds	r7, #32
 801a2a4:	46bd      	mov	sp, r7
 801a2a6:	bd80      	pop	{r7, pc}
 801a2a8:	08026ab8 	.word	0x08026ab8
 801a2ac:	08026e1c 	.word	0x08026e1c
 801a2b0:	08026b34 	.word	0x08026b34
 801a2b4:	08026e3c 	.word	0x08026e3c

0801a2b8 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 801a2b8:	b480      	push	{r7}
 801a2ba:	b087      	sub	sp, #28
 801a2bc:	af00      	add	r7, sp, #0
 801a2be:	60f8      	str	r0, [r7, #12]
 801a2c0:	460b      	mov	r3, r1
 801a2c2:	607a      	str	r2, [r7, #4]
 801a2c4:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 801a2c6:	897b      	ldrh	r3, [r7, #10]
 801a2c8:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 801a2ca:	68fb      	ldr	r3, [r7, #12]
 801a2cc:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 801a2ce:	e007      	b.n	801a2e0 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 801a2d0:	693b      	ldr	r3, [r7, #16]
 801a2d2:	895b      	ldrh	r3, [r3, #10]
 801a2d4:	8afa      	ldrh	r2, [r7, #22]
 801a2d6:	1ad3      	subs	r3, r2, r3
 801a2d8:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 801a2da:	693b      	ldr	r3, [r7, #16]
 801a2dc:	681b      	ldr	r3, [r3, #0]
 801a2de:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 801a2e0:	693b      	ldr	r3, [r7, #16]
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	d004      	beq.n	801a2f0 <pbuf_skip_const+0x38>
 801a2e6:	693b      	ldr	r3, [r7, #16]
 801a2e8:	895b      	ldrh	r3, [r3, #10]
 801a2ea:	8afa      	ldrh	r2, [r7, #22]
 801a2ec:	429a      	cmp	r2, r3
 801a2ee:	d2ef      	bcs.n	801a2d0 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	d002      	beq.n	801a2fc <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	8afa      	ldrh	r2, [r7, #22]
 801a2fa:	801a      	strh	r2, [r3, #0]
  }
  return q;
 801a2fc:	693b      	ldr	r3, [r7, #16]
}
 801a2fe:	4618      	mov	r0, r3
 801a300:	371c      	adds	r7, #28
 801a302:	46bd      	mov	sp, r7
 801a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a308:	4770      	bx	lr

0801a30a <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 801a30a:	b580      	push	{r7, lr}
 801a30c:	b086      	sub	sp, #24
 801a30e:	af00      	add	r7, sp, #0
 801a310:	60f8      	str	r0, [r7, #12]
 801a312:	460b      	mov	r3, r1
 801a314:	607a      	str	r2, [r7, #4]
 801a316:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 801a318:	897b      	ldrh	r3, [r7, #10]
 801a31a:	687a      	ldr	r2, [r7, #4]
 801a31c:	4619      	mov	r1, r3
 801a31e:	68f8      	ldr	r0, [r7, #12]
 801a320:	f7ff ffca 	bl	801a2b8 <pbuf_skip_const>
 801a324:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 801a326:	697b      	ldr	r3, [r7, #20]
}
 801a328:	4618      	mov	r0, r3
 801a32a:	3718      	adds	r7, #24
 801a32c:	46bd      	mov	sp, r7
 801a32e:	bd80      	pop	{r7, pc}

0801a330 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801a330:	b580      	push	{r7, lr}
 801a332:	b088      	sub	sp, #32
 801a334:	af00      	add	r7, sp, #0
 801a336:	60f8      	str	r0, [r7, #12]
 801a338:	60b9      	str	r1, [r7, #8]
 801a33a:	4613      	mov	r3, r2
 801a33c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 801a33e:	88fb      	ldrh	r3, [r7, #6]
 801a340:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 801a342:	2300      	movs	r3, #0
 801a344:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801a346:	68fb      	ldr	r3, [r7, #12]
 801a348:	2b00      	cmp	r3, #0
 801a34a:	d109      	bne.n	801a360 <pbuf_take+0x30>
 801a34c:	4b3a      	ldr	r3, [pc, #232]	; (801a438 <pbuf_take+0x108>)
 801a34e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 801a352:	493a      	ldr	r1, [pc, #232]	; (801a43c <pbuf_take+0x10c>)
 801a354:	483a      	ldr	r0, [pc, #232]	; (801a440 <pbuf_take+0x110>)
 801a356:	f009 fe47 	bl	8023fe8 <iprintf>
 801a35a:	f06f 030f 	mvn.w	r3, #15
 801a35e:	e067      	b.n	801a430 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801a360:	68bb      	ldr	r3, [r7, #8]
 801a362:	2b00      	cmp	r3, #0
 801a364:	d109      	bne.n	801a37a <pbuf_take+0x4a>
 801a366:	4b34      	ldr	r3, [pc, #208]	; (801a438 <pbuf_take+0x108>)
 801a368:	f240 42b4 	movw	r2, #1204	; 0x4b4
 801a36c:	4935      	ldr	r1, [pc, #212]	; (801a444 <pbuf_take+0x114>)
 801a36e:	4834      	ldr	r0, [pc, #208]	; (801a440 <pbuf_take+0x110>)
 801a370:	f009 fe3a 	bl	8023fe8 <iprintf>
 801a374:	f06f 030f 	mvn.w	r3, #15
 801a378:	e05a      	b.n	801a430 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801a37a:	68fb      	ldr	r3, [r7, #12]
 801a37c:	891b      	ldrh	r3, [r3, #8]
 801a37e:	88fa      	ldrh	r2, [r7, #6]
 801a380:	429a      	cmp	r2, r3
 801a382:	d909      	bls.n	801a398 <pbuf_take+0x68>
 801a384:	4b2c      	ldr	r3, [pc, #176]	; (801a438 <pbuf_take+0x108>)
 801a386:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801a38a:	492f      	ldr	r1, [pc, #188]	; (801a448 <pbuf_take+0x118>)
 801a38c:	482c      	ldr	r0, [pc, #176]	; (801a440 <pbuf_take+0x110>)
 801a38e:	f009 fe2b 	bl	8023fe8 <iprintf>
 801a392:	f04f 33ff 	mov.w	r3, #4294967295
 801a396:	e04b      	b.n	801a430 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 801a398:	68fb      	ldr	r3, [r7, #12]
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	d007      	beq.n	801a3ae <pbuf_take+0x7e>
 801a39e:	68bb      	ldr	r3, [r7, #8]
 801a3a0:	2b00      	cmp	r3, #0
 801a3a2:	d004      	beq.n	801a3ae <pbuf_take+0x7e>
 801a3a4:	68fb      	ldr	r3, [r7, #12]
 801a3a6:	891b      	ldrh	r3, [r3, #8]
 801a3a8:	88fa      	ldrh	r2, [r7, #6]
 801a3aa:	429a      	cmp	r2, r3
 801a3ac:	d902      	bls.n	801a3b4 <pbuf_take+0x84>
    return ERR_ARG;
 801a3ae:	f06f 030f 	mvn.w	r3, #15
 801a3b2:	e03d      	b.n	801a430 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801a3b4:	68fb      	ldr	r3, [r7, #12]
 801a3b6:	61fb      	str	r3, [r7, #28]
 801a3b8:	e028      	b.n	801a40c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801a3ba:	69fb      	ldr	r3, [r7, #28]
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d106      	bne.n	801a3ce <pbuf_take+0x9e>
 801a3c0:	4b1d      	ldr	r3, [pc, #116]	; (801a438 <pbuf_take+0x108>)
 801a3c2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801a3c6:	4921      	ldr	r1, [pc, #132]	; (801a44c <pbuf_take+0x11c>)
 801a3c8:	481d      	ldr	r0, [pc, #116]	; (801a440 <pbuf_take+0x110>)
 801a3ca:	f009 fe0d 	bl	8023fe8 <iprintf>
    buf_copy_len = total_copy_len;
 801a3ce:	697b      	ldr	r3, [r7, #20]
 801a3d0:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 801a3d2:	69fb      	ldr	r3, [r7, #28]
 801a3d4:	895b      	ldrh	r3, [r3, #10]
 801a3d6:	461a      	mov	r2, r3
 801a3d8:	69bb      	ldr	r3, [r7, #24]
 801a3da:	4293      	cmp	r3, r2
 801a3dc:	d902      	bls.n	801a3e4 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 801a3de:	69fb      	ldr	r3, [r7, #28]
 801a3e0:	895b      	ldrh	r3, [r3, #10]
 801a3e2:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801a3e4:	69fb      	ldr	r3, [r7, #28]
 801a3e6:	6858      	ldr	r0, [r3, #4]
 801a3e8:	68ba      	ldr	r2, [r7, #8]
 801a3ea:	693b      	ldr	r3, [r7, #16]
 801a3ec:	4413      	add	r3, r2
 801a3ee:	69ba      	ldr	r2, [r7, #24]
 801a3f0:	4619      	mov	r1, r3
 801a3f2:	f009 fd3e 	bl	8023e72 <memcpy>
    total_copy_len -= buf_copy_len;
 801a3f6:	697a      	ldr	r2, [r7, #20]
 801a3f8:	69bb      	ldr	r3, [r7, #24]
 801a3fa:	1ad3      	subs	r3, r2, r3
 801a3fc:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 801a3fe:	693a      	ldr	r2, [r7, #16]
 801a400:	69bb      	ldr	r3, [r7, #24]
 801a402:	4413      	add	r3, r2
 801a404:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 801a406:	69fb      	ldr	r3, [r7, #28]
 801a408:	681b      	ldr	r3, [r3, #0]
 801a40a:	61fb      	str	r3, [r7, #28]
 801a40c:	697b      	ldr	r3, [r7, #20]
 801a40e:	2b00      	cmp	r3, #0
 801a410:	d1d3      	bne.n	801a3ba <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801a412:	697b      	ldr	r3, [r7, #20]
 801a414:	2b00      	cmp	r3, #0
 801a416:	d103      	bne.n	801a420 <pbuf_take+0xf0>
 801a418:	88fb      	ldrh	r3, [r7, #6]
 801a41a:	693a      	ldr	r2, [r7, #16]
 801a41c:	429a      	cmp	r2, r3
 801a41e:	d006      	beq.n	801a42e <pbuf_take+0xfe>
 801a420:	4b05      	ldr	r3, [pc, #20]	; (801a438 <pbuf_take+0x108>)
 801a422:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801a426:	490a      	ldr	r1, [pc, #40]	; (801a450 <pbuf_take+0x120>)
 801a428:	4805      	ldr	r0, [pc, #20]	; (801a440 <pbuf_take+0x110>)
 801a42a:	f009 fddd 	bl	8023fe8 <iprintf>
  return ERR_OK;
 801a42e:	2300      	movs	r3, #0
}
 801a430:	4618      	mov	r0, r3
 801a432:	3720      	adds	r7, #32
 801a434:	46bd      	mov	sp, r7
 801a436:	bd80      	pop	{r7, pc}
 801a438:	08026ab8 	.word	0x08026ab8
 801a43c:	08026eac 	.word	0x08026eac
 801a440:	08026b34 	.word	0x08026b34
 801a444:	08026ec4 	.word	0x08026ec4
 801a448:	08026ee0 	.word	0x08026ee0
 801a44c:	08026f00 	.word	0x08026f00
 801a450:	08026f18 	.word	0x08026f18

0801a454 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 801a454:	b580      	push	{r7, lr}
 801a456:	b088      	sub	sp, #32
 801a458:	af00      	add	r7, sp, #0
 801a45a:	60f8      	str	r0, [r7, #12]
 801a45c:	60b9      	str	r1, [r7, #8]
 801a45e:	4611      	mov	r1, r2
 801a460:	461a      	mov	r2, r3
 801a462:	460b      	mov	r3, r1
 801a464:	80fb      	strh	r3, [r7, #6]
 801a466:	4613      	mov	r3, r2
 801a468:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 801a46a:	f107 0210 	add.w	r2, r7, #16
 801a46e:	88bb      	ldrh	r3, [r7, #4]
 801a470:	4619      	mov	r1, r3
 801a472:	68f8      	ldr	r0, [r7, #12]
 801a474:	f7ff ff49 	bl	801a30a <pbuf_skip>
 801a478:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 801a47a:	69fb      	ldr	r3, [r7, #28]
 801a47c:	2b00      	cmp	r3, #0
 801a47e:	d047      	beq.n	801a510 <pbuf_take_at+0xbc>
 801a480:	69fb      	ldr	r3, [r7, #28]
 801a482:	891b      	ldrh	r3, [r3, #8]
 801a484:	461a      	mov	r2, r3
 801a486:	8a3b      	ldrh	r3, [r7, #16]
 801a488:	4619      	mov	r1, r3
 801a48a:	88fb      	ldrh	r3, [r7, #6]
 801a48c:	440b      	add	r3, r1
 801a48e:	429a      	cmp	r2, r3
 801a490:	db3e      	blt.n	801a510 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 801a492:	88fb      	ldrh	r3, [r7, #6]
 801a494:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 801a496:	68bb      	ldr	r3, [r7, #8]
 801a498:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 801a49a:	69fb      	ldr	r3, [r7, #28]
 801a49c:	895a      	ldrh	r2, [r3, #10]
 801a49e:	8a3b      	ldrh	r3, [r7, #16]
 801a4a0:	429a      	cmp	r2, r3
 801a4a2:	d806      	bhi.n	801a4b2 <pbuf_take_at+0x5e>
 801a4a4:	4b1d      	ldr	r3, [pc, #116]	; (801a51c <pbuf_take_at+0xc8>)
 801a4a6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801a4aa:	491d      	ldr	r1, [pc, #116]	; (801a520 <pbuf_take_at+0xcc>)
 801a4ac:	481d      	ldr	r0, [pc, #116]	; (801a524 <pbuf_take_at+0xd0>)
 801a4ae:	f009 fd9b 	bl	8023fe8 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 801a4b2:	69fb      	ldr	r3, [r7, #28]
 801a4b4:	895b      	ldrh	r3, [r3, #10]
 801a4b6:	461a      	mov	r2, r3
 801a4b8:	8a3b      	ldrh	r3, [r7, #16]
 801a4ba:	1ad2      	subs	r2, r2, r3
 801a4bc:	88fb      	ldrh	r3, [r7, #6]
 801a4be:	429a      	cmp	r2, r3
 801a4c0:	da05      	bge.n	801a4ce <pbuf_take_at+0x7a>
 801a4c2:	69fb      	ldr	r3, [r7, #28]
 801a4c4:	895a      	ldrh	r2, [r3, #10]
 801a4c6:	8a3b      	ldrh	r3, [r7, #16]
 801a4c8:	1ad3      	subs	r3, r2, r3
 801a4ca:	b29b      	uxth	r3, r3
 801a4cc:	e000      	b.n	801a4d0 <pbuf_take_at+0x7c>
 801a4ce:	88fb      	ldrh	r3, [r7, #6]
 801a4d0:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801a4d2:	69fb      	ldr	r3, [r7, #28]
 801a4d4:	685b      	ldr	r3, [r3, #4]
 801a4d6:	8a3a      	ldrh	r2, [r7, #16]
 801a4d8:	4413      	add	r3, r2
 801a4da:	8a7a      	ldrh	r2, [r7, #18]
 801a4dc:	68b9      	ldr	r1, [r7, #8]
 801a4de:	4618      	mov	r0, r3
 801a4e0:	f009 fcc7 	bl	8023e72 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 801a4e4:	8b7a      	ldrh	r2, [r7, #26]
 801a4e6:	8a7b      	ldrh	r3, [r7, #18]
 801a4e8:	1ad3      	subs	r3, r2, r3
 801a4ea:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 801a4ec:	8a7b      	ldrh	r3, [r7, #18]
 801a4ee:	697a      	ldr	r2, [r7, #20]
 801a4f0:	4413      	add	r3, r2
 801a4f2:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 801a4f4:	8b7b      	ldrh	r3, [r7, #26]
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	d008      	beq.n	801a50c <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801a4fa:	69fb      	ldr	r3, [r7, #28]
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	8b7a      	ldrh	r2, [r7, #26]
 801a500:	6979      	ldr	r1, [r7, #20]
 801a502:	4618      	mov	r0, r3
 801a504:	f7ff ff14 	bl	801a330 <pbuf_take>
 801a508:	4603      	mov	r3, r0
 801a50a:	e003      	b.n	801a514 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 801a50c:	2300      	movs	r3, #0
 801a50e:	e001      	b.n	801a514 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 801a510:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a514:	4618      	mov	r0, r3
 801a516:	3720      	adds	r7, #32
 801a518:	46bd      	mov	sp, r7
 801a51a:	bd80      	pop	{r7, pc}
 801a51c:	08026ab8 	.word	0x08026ab8
 801a520:	08026f30 	.word	0x08026f30
 801a524:	08026b34 	.word	0x08026b34

0801a528 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801a528:	b580      	push	{r7, lr}
 801a52a:	b084      	sub	sp, #16
 801a52c:	af00      	add	r7, sp, #0
 801a52e:	4603      	mov	r3, r0
 801a530:	603a      	str	r2, [r7, #0]
 801a532:	71fb      	strb	r3, [r7, #7]
 801a534:	460b      	mov	r3, r1
 801a536:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801a538:	683b      	ldr	r3, [r7, #0]
 801a53a:	8919      	ldrh	r1, [r3, #8]
 801a53c:	88ba      	ldrh	r2, [r7, #4]
 801a53e:	79fb      	ldrb	r3, [r7, #7]
 801a540:	4618      	mov	r0, r3
 801a542:	f7ff f961 	bl	8019808 <pbuf_alloc>
 801a546:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801a548:	68fb      	ldr	r3, [r7, #12]
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d101      	bne.n	801a552 <pbuf_clone+0x2a>
    return NULL;
 801a54e:	2300      	movs	r3, #0
 801a550:	e011      	b.n	801a576 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801a552:	6839      	ldr	r1, [r7, #0]
 801a554:	68f8      	ldr	r0, [r7, #12]
 801a556:	f7ff fd6b 	bl	801a030 <pbuf_copy>
 801a55a:	4603      	mov	r3, r0
 801a55c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801a55e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801a562:	2b00      	cmp	r3, #0
 801a564:	d006      	beq.n	801a574 <pbuf_clone+0x4c>
 801a566:	4b06      	ldr	r3, [pc, #24]	; (801a580 <pbuf_clone+0x58>)
 801a568:	f240 5224 	movw	r2, #1316	; 0x524
 801a56c:	4905      	ldr	r1, [pc, #20]	; (801a584 <pbuf_clone+0x5c>)
 801a56e:	4806      	ldr	r0, [pc, #24]	; (801a588 <pbuf_clone+0x60>)
 801a570:	f009 fd3a 	bl	8023fe8 <iprintf>
  return q;
 801a574:	68fb      	ldr	r3, [r7, #12]
}
 801a576:	4618      	mov	r0, r3
 801a578:	3710      	adds	r7, #16
 801a57a:	46bd      	mov	sp, r7
 801a57c:	bd80      	pop	{r7, pc}
 801a57e:	bf00      	nop
 801a580:	08026ab8 	.word	0x08026ab8
 801a584:	08026f48 	.word	0x08026f48
 801a588:	08026b34 	.word	0x08026b34

0801a58c <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 801a58c:	b580      	push	{r7, lr}
 801a58e:	b084      	sub	sp, #16
 801a590:	af00      	add	r7, sp, #0
 801a592:	6078      	str	r0, [r7, #4]
 801a594:	460b      	mov	r3, r1
 801a596:	807b      	strh	r3, [r7, #2]
 801a598:	4613      	mov	r3, r2
 801a59a:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 801a59c:	f107 020a 	add.w	r2, r7, #10
 801a5a0:	887b      	ldrh	r3, [r7, #2]
 801a5a2:	4619      	mov	r1, r3
 801a5a4:	6878      	ldr	r0, [r7, #4]
 801a5a6:	f7ff feb0 	bl	801a30a <pbuf_skip>
 801a5aa:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 801a5ac:	68fb      	ldr	r3, [r7, #12]
 801a5ae:	2b00      	cmp	r3, #0
 801a5b0:	d00a      	beq.n	801a5c8 <pbuf_put_at+0x3c>
 801a5b2:	68fb      	ldr	r3, [r7, #12]
 801a5b4:	895a      	ldrh	r2, [r3, #10]
 801a5b6:	897b      	ldrh	r3, [r7, #10]
 801a5b8:	429a      	cmp	r2, r3
 801a5ba:	d905      	bls.n	801a5c8 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 801a5bc:	68fb      	ldr	r3, [r7, #12]
 801a5be:	685b      	ldr	r3, [r3, #4]
 801a5c0:	897a      	ldrh	r2, [r7, #10]
 801a5c2:	4413      	add	r3, r2
 801a5c4:	787a      	ldrb	r2, [r7, #1]
 801a5c6:	701a      	strb	r2, [r3, #0]
  }
}
 801a5c8:	bf00      	nop
 801a5ca:	3710      	adds	r7, #16
 801a5cc:	46bd      	mov	sp, r7
 801a5ce:	bd80      	pop	{r7, pc}

0801a5d0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801a5d0:	b580      	push	{r7, lr}
 801a5d2:	b086      	sub	sp, #24
 801a5d4:	af00      	add	r7, sp, #0
 801a5d6:	6078      	str	r0, [r7, #4]
 801a5d8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801a5da:	683b      	ldr	r3, [r7, #0]
 801a5dc:	60bb      	str	r3, [r7, #8]
 801a5de:	2304      	movs	r3, #4
 801a5e0:	60fb      	str	r3, [r7, #12]
 801a5e2:	2300      	movs	r3, #0
 801a5e4:	613b      	str	r3, [r7, #16]
 801a5e6:	2300      	movs	r3, #0
 801a5e8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801a5ea:	f107 0308 	add.w	r3, r7, #8
 801a5ee:	2100      	movs	r1, #0
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	f7f4 fdf0 	bl	800f1d6 <osMessageCreate>
 801a5f6:	4602      	mov	r2, r0
 801a5f8:	687b      	ldr	r3, [r7, #4]
 801a5fa:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	2b00      	cmp	r3, #0
 801a602:	d102      	bne.n	801a60a <sys_mbox_new+0x3a>
    return ERR_MEM;
 801a604:	f04f 33ff 	mov.w	r3, #4294967295
 801a608:	e000      	b.n	801a60c <sys_mbox_new+0x3c>

  return ERR_OK;
 801a60a:	2300      	movs	r3, #0
}
 801a60c:	4618      	mov	r0, r3
 801a60e:	3718      	adds	r7, #24
 801a610:	46bd      	mov	sp, r7
 801a612:	bd80      	pop	{r7, pc}

0801a614 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801a614:	b580      	push	{r7, lr}
 801a616:	b082      	sub	sp, #8
 801a618:	af00      	add	r7, sp, #0
 801a61a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	681b      	ldr	r3, [r3, #0]
 801a620:	4618      	mov	r0, r3
 801a622:	f7f4 feb5 	bl	800f390 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	681b      	ldr	r3, [r3, #0]
 801a62a:	4618      	mov	r0, r3
 801a62c:	f7f4 fec6 	bl	800f3bc <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801a630:	bf00      	nop
 801a632:	3708      	adds	r7, #8
 801a634:	46bd      	mov	sp, r7
 801a636:	bd80      	pop	{r7, pc}

0801a638 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801a638:	b580      	push	{r7, lr}
 801a63a:	b084      	sub	sp, #16
 801a63c:	af00      	add	r7, sp, #0
 801a63e:	6078      	str	r0, [r7, #4]
 801a640:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	681b      	ldr	r3, [r3, #0]
 801a646:	6839      	ldr	r1, [r7, #0]
 801a648:	2200      	movs	r2, #0
 801a64a:	4618      	mov	r0, r3
 801a64c:	f7f4 fdec 	bl	800f228 <osMessagePut>
 801a650:	4603      	mov	r3, r0
 801a652:	2b00      	cmp	r3, #0
 801a654:	d102      	bne.n	801a65c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801a656:	2300      	movs	r3, #0
 801a658:	73fb      	strb	r3, [r7, #15]
 801a65a:	e001      	b.n	801a660 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801a65c:	23ff      	movs	r3, #255	; 0xff
 801a65e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801a660:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a664:	4618      	mov	r0, r3
 801a666:	3710      	adds	r7, #16
 801a668:	46bd      	mov	sp, r7
 801a66a:	bd80      	pop	{r7, pc}

0801a66c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801a66c:	b580      	push	{r7, lr}
 801a66e:	b08c      	sub	sp, #48	; 0x30
 801a670:	af00      	add	r7, sp, #0
 801a672:	61f8      	str	r0, [r7, #28]
 801a674:	61b9      	str	r1, [r7, #24]
 801a676:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801a678:	f7f4 fbca 	bl	800ee10 <osKernelSysTick>
 801a67c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801a67e:	697b      	ldr	r3, [r7, #20]
 801a680:	2b00      	cmp	r3, #0
 801a682:	d017      	beq.n	801a6b4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801a684:	69fb      	ldr	r3, [r7, #28]
 801a686:	6819      	ldr	r1, [r3, #0]
 801a688:	f107 0320 	add.w	r3, r7, #32
 801a68c:	697a      	ldr	r2, [r7, #20]
 801a68e:	4618      	mov	r0, r3
 801a690:	f7f4 fe0a 	bl	800f2a8 <osMessageGet>

    if(event.status == osEventMessage)
 801a694:	6a3b      	ldr	r3, [r7, #32]
 801a696:	2b10      	cmp	r3, #16
 801a698:	d109      	bne.n	801a6ae <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801a69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a69c:	461a      	mov	r2, r3
 801a69e:	69bb      	ldr	r3, [r7, #24]
 801a6a0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801a6a2:	f7f4 fbb5 	bl	800ee10 <osKernelSysTick>
 801a6a6:	4602      	mov	r2, r0
 801a6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6aa:	1ad3      	subs	r3, r2, r3
 801a6ac:	e019      	b.n	801a6e2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a6ae:	f04f 33ff 	mov.w	r3, #4294967295
 801a6b2:	e016      	b.n	801a6e2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801a6b4:	69fb      	ldr	r3, [r7, #28]
 801a6b6:	6819      	ldr	r1, [r3, #0]
 801a6b8:	463b      	mov	r3, r7
 801a6ba:	f04f 32ff 	mov.w	r2, #4294967295
 801a6be:	4618      	mov	r0, r3
 801a6c0:	f7f4 fdf2 	bl	800f2a8 <osMessageGet>
 801a6c4:	f107 0320 	add.w	r3, r7, #32
 801a6c8:	463a      	mov	r2, r7
 801a6ca:	ca07      	ldmia	r2, {r0, r1, r2}
 801a6cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6d2:	461a      	mov	r2, r3
 801a6d4:	69bb      	ldr	r3, [r7, #24]
 801a6d6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801a6d8:	f7f4 fb9a 	bl	800ee10 <osKernelSysTick>
 801a6dc:	4602      	mov	r2, r0
 801a6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6e0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801a6e2:	4618      	mov	r0, r3
 801a6e4:	3730      	adds	r7, #48	; 0x30
 801a6e6:	46bd      	mov	sp, r7
 801a6e8:	bd80      	pop	{r7, pc}

0801a6ea <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801a6ea:	b580      	push	{r7, lr}
 801a6ec:	b086      	sub	sp, #24
 801a6ee:	af00      	add	r7, sp, #0
 801a6f0:	6078      	str	r0, [r7, #4]
 801a6f2:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	6819      	ldr	r1, [r3, #0]
 801a6f8:	f107 030c 	add.w	r3, r7, #12
 801a6fc:	2200      	movs	r2, #0
 801a6fe:	4618      	mov	r0, r3
 801a700:	f7f4 fdd2 	bl	800f2a8 <osMessageGet>

  if(event.status == osEventMessage)
 801a704:	68fb      	ldr	r3, [r7, #12]
 801a706:	2b10      	cmp	r3, #16
 801a708:	d105      	bne.n	801a716 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801a70a:	693b      	ldr	r3, [r7, #16]
 801a70c:	461a      	mov	r2, r3
 801a70e:	683b      	ldr	r3, [r7, #0]
 801a710:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801a712:	2300      	movs	r3, #0
 801a714:	e001      	b.n	801a71a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801a716:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801a71a:	4618      	mov	r0, r3
 801a71c:	3718      	adds	r7, #24
 801a71e:	46bd      	mov	sp, r7
 801a720:	bd80      	pop	{r7, pc}

0801a722 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801a722:	b480      	push	{r7}
 801a724:	b083      	sub	sp, #12
 801a726:	af00      	add	r7, sp, #0
 801a728:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	681b      	ldr	r3, [r3, #0]
 801a72e:	2b00      	cmp	r3, #0
 801a730:	d101      	bne.n	801a736 <sys_mbox_valid+0x14>
    return 0;
 801a732:	2300      	movs	r3, #0
 801a734:	e000      	b.n	801a738 <sys_mbox_valid+0x16>
  else
    return 1;
 801a736:	2301      	movs	r3, #1
}
 801a738:	4618      	mov	r0, r3
 801a73a:	370c      	adds	r7, #12
 801a73c:	46bd      	mov	sp, r7
 801a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a742:	4770      	bx	lr

0801a744 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801a744:	b480      	push	{r7}
 801a746:	b083      	sub	sp, #12
 801a748:	af00      	add	r7, sp, #0
 801a74a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	2200      	movs	r2, #0
 801a750:	601a      	str	r2, [r3, #0]
}
 801a752:	bf00      	nop
 801a754:	370c      	adds	r7, #12
 801a756:	46bd      	mov	sp, r7
 801a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a75c:	4770      	bx	lr

0801a75e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801a75e:	b580      	push	{r7, lr}
 801a760:	b084      	sub	sp, #16
 801a762:	af00      	add	r7, sp, #0
 801a764:	6078      	str	r0, [r7, #4]
 801a766:	460b      	mov	r3, r1
 801a768:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801a76a:	2300      	movs	r3, #0
 801a76c:	60bb      	str	r3, [r7, #8]
 801a76e:	2300      	movs	r3, #0
 801a770:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801a772:	f107 0308 	add.w	r3, r7, #8
 801a776:	2101      	movs	r1, #1
 801a778:	4618      	mov	r0, r3
 801a77a:	f7f4 fc55 	bl	800f028 <osSemaphoreCreate>
 801a77e:	4602      	mov	r2, r0
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	681b      	ldr	r3, [r3, #0]
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d102      	bne.n	801a792 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801a78c:	f04f 33ff 	mov.w	r3, #4294967295
 801a790:	e009      	b.n	801a7a6 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801a792:	78fb      	ldrb	r3, [r7, #3]
 801a794:	2b00      	cmp	r3, #0
 801a796:	d105      	bne.n	801a7a4 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	681b      	ldr	r3, [r3, #0]
 801a79c:	2100      	movs	r1, #0
 801a79e:	4618      	mov	r0, r3
 801a7a0:	f7f4 fc82 	bl	800f0a8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801a7a4:	2300      	movs	r3, #0
}
 801a7a6:	4618      	mov	r0, r3
 801a7a8:	3710      	adds	r7, #16
 801a7aa:	46bd      	mov	sp, r7
 801a7ac:	bd80      	pop	{r7, pc}

0801a7ae <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801a7ae:	b580      	push	{r7, lr}
 801a7b0:	b084      	sub	sp, #16
 801a7b2:	af00      	add	r7, sp, #0
 801a7b4:	6078      	str	r0, [r7, #4]
 801a7b6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801a7b8:	f7f4 fb2a 	bl	800ee10 <osKernelSysTick>
 801a7bc:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801a7be:	683b      	ldr	r3, [r7, #0]
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	d011      	beq.n	801a7e8 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	681b      	ldr	r3, [r3, #0]
 801a7c8:	6839      	ldr	r1, [r7, #0]
 801a7ca:	4618      	mov	r0, r3
 801a7cc:	f7f4 fc6c 	bl	800f0a8 <osSemaphoreWait>
 801a7d0:	4603      	mov	r3, r0
 801a7d2:	2b00      	cmp	r3, #0
 801a7d4:	d105      	bne.n	801a7e2 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801a7d6:	f7f4 fb1b 	bl	800ee10 <osKernelSysTick>
 801a7da:	4602      	mov	r2, r0
 801a7dc:	68fb      	ldr	r3, [r7, #12]
 801a7de:	1ad3      	subs	r3, r2, r3
 801a7e0:	e012      	b.n	801a808 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a7e2:	f04f 33ff 	mov.w	r3, #4294967295
 801a7e6:	e00f      	b.n	801a808 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801a7e8:	bf00      	nop
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	f04f 31ff 	mov.w	r1, #4294967295
 801a7f2:	4618      	mov	r0, r3
 801a7f4:	f7f4 fc58 	bl	800f0a8 <osSemaphoreWait>
 801a7f8:	4603      	mov	r3, r0
 801a7fa:	2b00      	cmp	r3, #0
 801a7fc:	d1f5      	bne.n	801a7ea <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801a7fe:	f7f4 fb07 	bl	800ee10 <osKernelSysTick>
 801a802:	4602      	mov	r2, r0
 801a804:	68fb      	ldr	r3, [r7, #12]
 801a806:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801a808:	4618      	mov	r0, r3
 801a80a:	3710      	adds	r7, #16
 801a80c:	46bd      	mov	sp, r7
 801a80e:	bd80      	pop	{r7, pc}

0801a810 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801a810:	b580      	push	{r7, lr}
 801a812:	b082      	sub	sp, #8
 801a814:	af00      	add	r7, sp, #0
 801a816:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	4618      	mov	r0, r3
 801a81e:	f7f4 fc91 	bl	800f144 <osSemaphoreRelease>
}
 801a822:	bf00      	nop
 801a824:	3708      	adds	r7, #8
 801a826:	46bd      	mov	sp, r7
 801a828:	bd80      	pop	{r7, pc}

0801a82a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801a82a:	b580      	push	{r7, lr}
 801a82c:	b082      	sub	sp, #8
 801a82e:	af00      	add	r7, sp, #0
 801a830:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	4618      	mov	r0, r3
 801a838:	f7f4 fcba 	bl	800f1b0 <osSemaphoreDelete>
}
 801a83c:	bf00      	nop
 801a83e:	3708      	adds	r7, #8
 801a840:	46bd      	mov	sp, r7
 801a842:	bd80      	pop	{r7, pc}

0801a844 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801a844:	b480      	push	{r7}
 801a846:	b083      	sub	sp, #12
 801a848:	af00      	add	r7, sp, #0
 801a84a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	681b      	ldr	r3, [r3, #0]
 801a850:	2b00      	cmp	r3, #0
 801a852:	d101      	bne.n	801a858 <sys_sem_valid+0x14>
    return 0;
 801a854:	2300      	movs	r3, #0
 801a856:	e000      	b.n	801a85a <sys_sem_valid+0x16>
  else
    return 1;
 801a858:	2301      	movs	r3, #1
}
 801a85a:	4618      	mov	r0, r3
 801a85c:	370c      	adds	r7, #12
 801a85e:	46bd      	mov	sp, r7
 801a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a864:	4770      	bx	lr

0801a866 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801a866:	b480      	push	{r7}
 801a868:	b083      	sub	sp, #12
 801a86a:	af00      	add	r7, sp, #0
 801a86c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	2200      	movs	r2, #0
 801a872:	601a      	str	r2, [r3, #0]
}
 801a874:	bf00      	nop
 801a876:	370c      	adds	r7, #12
 801a878:	46bd      	mov	sp, r7
 801a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a87e:	4770      	bx	lr

0801a880 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801a880:	b580      	push	{r7, lr}
 801a882:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801a884:	4803      	ldr	r0, [pc, #12]	; (801a894 <sys_init+0x14>)
 801a886:	f7f4 fb33 	bl	800eef0 <osMutexCreate>
 801a88a:	4602      	mov	r2, r0
 801a88c:	4b02      	ldr	r3, [pc, #8]	; (801a898 <sys_init+0x18>)
 801a88e:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801a890:	bf00      	nop
 801a892:	bd80      	pop	{r7, pc}
 801a894:	08028b10 	.word	0x08028b10
 801a898:	20011814 	.word	0x20011814

0801a89c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801a89c:	b580      	push	{r7, lr}
 801a89e:	b084      	sub	sp, #16
 801a8a0:	af00      	add	r7, sp, #0
 801a8a2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801a8a4:	2300      	movs	r3, #0
 801a8a6:	60bb      	str	r3, [r7, #8]
 801a8a8:	2300      	movs	r3, #0
 801a8aa:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801a8ac:	f107 0308 	add.w	r3, r7, #8
 801a8b0:	4618      	mov	r0, r3
 801a8b2:	f7f4 fb1d 	bl	800eef0 <osMutexCreate>
 801a8b6:	4602      	mov	r2, r0
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d102      	bne.n	801a8ca <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801a8c4:	f04f 33ff 	mov.w	r3, #4294967295
 801a8c8:	e000      	b.n	801a8cc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801a8ca:	2300      	movs	r3, #0
}
 801a8cc:	4618      	mov	r0, r3
 801a8ce:	3710      	adds	r7, #16
 801a8d0:	46bd      	mov	sp, r7
 801a8d2:	bd80      	pop	{r7, pc}

0801a8d4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801a8d4:	b580      	push	{r7, lr}
 801a8d6:	b082      	sub	sp, #8
 801a8d8:	af00      	add	r7, sp, #0
 801a8da:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	681b      	ldr	r3, [r3, #0]
 801a8e0:	f04f 31ff 	mov.w	r1, #4294967295
 801a8e4:	4618      	mov	r0, r3
 801a8e6:	f7f4 fb1b 	bl	800ef20 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801a8ea:	bf00      	nop
 801a8ec:	3708      	adds	r7, #8
 801a8ee:	46bd      	mov	sp, r7
 801a8f0:	bd80      	pop	{r7, pc}

0801a8f2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801a8f2:	b580      	push	{r7, lr}
 801a8f4:	b082      	sub	sp, #8
 801a8f6:	af00      	add	r7, sp, #0
 801a8f8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	681b      	ldr	r3, [r3, #0]
 801a8fe:	4618      	mov	r0, r3
 801a900:	f7f4 fb5c 	bl	800efbc <osMutexRelease>
}
 801a904:	bf00      	nop
 801a906:	3708      	adds	r7, #8
 801a908:	46bd      	mov	sp, r7
 801a90a:	bd80      	pop	{r7, pc}

0801a90c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801a90c:	b580      	push	{r7, lr}
 801a90e:	b08c      	sub	sp, #48	; 0x30
 801a910:	af00      	add	r7, sp, #0
 801a912:	60f8      	str	r0, [r7, #12]
 801a914:	60b9      	str	r1, [r7, #8]
 801a916:	607a      	str	r2, [r7, #4]
 801a918:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801a91a:	f107 0314 	add.w	r3, r7, #20
 801a91e:	2200      	movs	r2, #0
 801a920:	601a      	str	r2, [r3, #0]
 801a922:	605a      	str	r2, [r3, #4]
 801a924:	609a      	str	r2, [r3, #8]
 801a926:	60da      	str	r2, [r3, #12]
 801a928:	611a      	str	r2, [r3, #16]
 801a92a:	615a      	str	r2, [r3, #20]
 801a92c:	619a      	str	r2, [r3, #24]
 801a92e:	68fb      	ldr	r3, [r7, #12]
 801a930:	617b      	str	r3, [r7, #20]
 801a932:	68bb      	ldr	r3, [r7, #8]
 801a934:	61bb      	str	r3, [r7, #24]
 801a936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a938:	b21b      	sxth	r3, r3
 801a93a:	83bb      	strh	r3, [r7, #28]
 801a93c:	683b      	ldr	r3, [r7, #0]
 801a93e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801a940:	f107 0314 	add.w	r3, r7, #20
 801a944:	6879      	ldr	r1, [r7, #4]
 801a946:	4618      	mov	r0, r3
 801a948:	f7f4 fa72 	bl	800ee30 <osThreadCreate>
 801a94c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801a94e:	4618      	mov	r0, r3
 801a950:	3730      	adds	r7, #48	; 0x30
 801a952:	46bd      	mov	sp, r7
 801a954:	bd80      	pop	{r7, pc}
	...

0801a958 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801a958:	b580      	push	{r7, lr}
 801a95a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801a95c:	4b04      	ldr	r3, [pc, #16]	; (801a970 <sys_arch_protect+0x18>)
 801a95e:	681b      	ldr	r3, [r3, #0]
 801a960:	f04f 31ff 	mov.w	r1, #4294967295
 801a964:	4618      	mov	r0, r3
 801a966:	f7f4 fadb 	bl	800ef20 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801a96a:	2301      	movs	r3, #1
}
 801a96c:	4618      	mov	r0, r3
 801a96e:	bd80      	pop	{r7, pc}
 801a970:	20011814 	.word	0x20011814

0801a974 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801a974:	b580      	push	{r7, lr}
 801a976:	b082      	sub	sp, #8
 801a978:	af00      	add	r7, sp, #0
 801a97a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801a97c:	4b04      	ldr	r3, [pc, #16]	; (801a990 <sys_arch_unprotect+0x1c>)
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	4618      	mov	r0, r3
 801a982:	f7f4 fb1b 	bl	800efbc <osMutexRelease>
}
 801a986:	bf00      	nop
 801a988:	3708      	adds	r7, #8
 801a98a:	46bd      	mov	sp, r7
 801a98c:	bd80      	pop	{r7, pc}
 801a98e:	bf00      	nop
 801a990:	20011814 	.word	0x20011814

0801a994 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801a994:	b580      	push	{r7, lr}
 801a996:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801a998:	f009 fb3e 	bl	8024018 <rand>
 801a99c:	4603      	mov	r3, r0
 801a99e:	b29b      	uxth	r3, r3
 801a9a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801a9a4:	b29b      	uxth	r3, r3
 801a9a6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801a9aa:	b29a      	uxth	r2, r3
 801a9ac:	4b01      	ldr	r3, [pc, #4]	; (801a9b4 <tcp_init+0x20>)
 801a9ae:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801a9b0:	bf00      	nop
 801a9b2:	bd80      	pop	{r7, pc}
 801a9b4:	20000018 	.word	0x20000018

0801a9b8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801a9b8:	b580      	push	{r7, lr}
 801a9ba:	b082      	sub	sp, #8
 801a9bc:	af00      	add	r7, sp, #0
 801a9be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	7d1b      	ldrb	r3, [r3, #20]
 801a9c4:	2b01      	cmp	r3, #1
 801a9c6:	d105      	bne.n	801a9d4 <tcp_free+0x1c>
 801a9c8:	4b06      	ldr	r3, [pc, #24]	; (801a9e4 <tcp_free+0x2c>)
 801a9ca:	22d4      	movs	r2, #212	; 0xd4
 801a9cc:	4906      	ldr	r1, [pc, #24]	; (801a9e8 <tcp_free+0x30>)
 801a9ce:	4807      	ldr	r0, [pc, #28]	; (801a9ec <tcp_free+0x34>)
 801a9d0:	f009 fb0a 	bl	8023fe8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801a9d4:	6879      	ldr	r1, [r7, #4]
 801a9d6:	2001      	movs	r0, #1
 801a9d8:	f7fe fb5e 	bl	8019098 <memp_free>
}
 801a9dc:	bf00      	nop
 801a9de:	3708      	adds	r7, #8
 801a9e0:	46bd      	mov	sp, r7
 801a9e2:	bd80      	pop	{r7, pc}
 801a9e4:	08026fd4 	.word	0x08026fd4
 801a9e8:	08027020 	.word	0x08027020
 801a9ec:	08027034 	.word	0x08027034

0801a9f0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801a9f0:	b580      	push	{r7, lr}
 801a9f2:	b082      	sub	sp, #8
 801a9f4:	af00      	add	r7, sp, #0
 801a9f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	7d1b      	ldrb	r3, [r3, #20]
 801a9fc:	2b01      	cmp	r3, #1
 801a9fe:	d105      	bne.n	801aa0c <tcp_free_listen+0x1c>
 801aa00:	4b06      	ldr	r3, [pc, #24]	; (801aa1c <tcp_free_listen+0x2c>)
 801aa02:	22df      	movs	r2, #223	; 0xdf
 801aa04:	4906      	ldr	r1, [pc, #24]	; (801aa20 <tcp_free_listen+0x30>)
 801aa06:	4807      	ldr	r0, [pc, #28]	; (801aa24 <tcp_free_listen+0x34>)
 801aa08:	f009 faee 	bl	8023fe8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801aa0c:	6879      	ldr	r1, [r7, #4]
 801aa0e:	2002      	movs	r0, #2
 801aa10:	f7fe fb42 	bl	8019098 <memp_free>
}
 801aa14:	bf00      	nop
 801aa16:	3708      	adds	r7, #8
 801aa18:	46bd      	mov	sp, r7
 801aa1a:	bd80      	pop	{r7, pc}
 801aa1c:	08026fd4 	.word	0x08026fd4
 801aa20:	0802705c 	.word	0x0802705c
 801aa24:	08027034 	.word	0x08027034

0801aa28 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801aa28:	b580      	push	{r7, lr}
 801aa2a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801aa2c:	f001 f89a 	bl	801bb64 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801aa30:	4b07      	ldr	r3, [pc, #28]	; (801aa50 <tcp_tmr+0x28>)
 801aa32:	781b      	ldrb	r3, [r3, #0]
 801aa34:	3301      	adds	r3, #1
 801aa36:	b2da      	uxtb	r2, r3
 801aa38:	4b05      	ldr	r3, [pc, #20]	; (801aa50 <tcp_tmr+0x28>)
 801aa3a:	701a      	strb	r2, [r3, #0]
 801aa3c:	4b04      	ldr	r3, [pc, #16]	; (801aa50 <tcp_tmr+0x28>)
 801aa3e:	781b      	ldrb	r3, [r3, #0]
 801aa40:	f003 0301 	and.w	r3, r3, #1
 801aa44:	2b00      	cmp	r3, #0
 801aa46:	d001      	beq.n	801aa4c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801aa48:	f000 fd4e 	bl	801b4e8 <tcp_slowtmr>
  }
}
 801aa4c:	bf00      	nop
 801aa4e:	bd80      	pop	{r7, pc}
 801aa50:	20008a69 	.word	0x20008a69

0801aa54 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801aa54:	b580      	push	{r7, lr}
 801aa56:	b084      	sub	sp, #16
 801aa58:	af00      	add	r7, sp, #0
 801aa5a:	6078      	str	r0, [r7, #4]
 801aa5c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801aa5e:	683b      	ldr	r3, [r7, #0]
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	d105      	bne.n	801aa70 <tcp_remove_listener+0x1c>
 801aa64:	4b0d      	ldr	r3, [pc, #52]	; (801aa9c <tcp_remove_listener+0x48>)
 801aa66:	22ff      	movs	r2, #255	; 0xff
 801aa68:	490d      	ldr	r1, [pc, #52]	; (801aaa0 <tcp_remove_listener+0x4c>)
 801aa6a:	480e      	ldr	r0, [pc, #56]	; (801aaa4 <tcp_remove_listener+0x50>)
 801aa6c:	f009 fabc 	bl	8023fe8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	60fb      	str	r3, [r7, #12]
 801aa74:	e00a      	b.n	801aa8c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801aa76:	68fb      	ldr	r3, [r7, #12]
 801aa78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801aa7a:	683a      	ldr	r2, [r7, #0]
 801aa7c:	429a      	cmp	r2, r3
 801aa7e:	d102      	bne.n	801aa86 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801aa80:	68fb      	ldr	r3, [r7, #12]
 801aa82:	2200      	movs	r2, #0
 801aa84:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801aa86:	68fb      	ldr	r3, [r7, #12]
 801aa88:	68db      	ldr	r3, [r3, #12]
 801aa8a:	60fb      	str	r3, [r7, #12]
 801aa8c:	68fb      	ldr	r3, [r7, #12]
 801aa8e:	2b00      	cmp	r3, #0
 801aa90:	d1f1      	bne.n	801aa76 <tcp_remove_listener+0x22>
    }
  }
}
 801aa92:	bf00      	nop
 801aa94:	3710      	adds	r7, #16
 801aa96:	46bd      	mov	sp, r7
 801aa98:	bd80      	pop	{r7, pc}
 801aa9a:	bf00      	nop
 801aa9c:	08026fd4 	.word	0x08026fd4
 801aaa0:	08027078 	.word	0x08027078
 801aaa4:	08027034 	.word	0x08027034

0801aaa8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801aaa8:	b580      	push	{r7, lr}
 801aaaa:	b084      	sub	sp, #16
 801aaac:	af00      	add	r7, sp, #0
 801aaae:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	2b00      	cmp	r3, #0
 801aab4:	d106      	bne.n	801aac4 <tcp_listen_closed+0x1c>
 801aab6:	4b14      	ldr	r3, [pc, #80]	; (801ab08 <tcp_listen_closed+0x60>)
 801aab8:	f240 1211 	movw	r2, #273	; 0x111
 801aabc:	4913      	ldr	r1, [pc, #76]	; (801ab0c <tcp_listen_closed+0x64>)
 801aabe:	4814      	ldr	r0, [pc, #80]	; (801ab10 <tcp_listen_closed+0x68>)
 801aac0:	f009 fa92 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	7d1b      	ldrb	r3, [r3, #20]
 801aac8:	2b01      	cmp	r3, #1
 801aaca:	d006      	beq.n	801aada <tcp_listen_closed+0x32>
 801aacc:	4b0e      	ldr	r3, [pc, #56]	; (801ab08 <tcp_listen_closed+0x60>)
 801aace:	f44f 7289 	mov.w	r2, #274	; 0x112
 801aad2:	4910      	ldr	r1, [pc, #64]	; (801ab14 <tcp_listen_closed+0x6c>)
 801aad4:	480e      	ldr	r0, [pc, #56]	; (801ab10 <tcp_listen_closed+0x68>)
 801aad6:	f009 fa87 	bl	8023fe8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801aada:	2301      	movs	r3, #1
 801aadc:	60fb      	str	r3, [r7, #12]
 801aade:	e00b      	b.n	801aaf8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801aae0:	4a0d      	ldr	r2, [pc, #52]	; (801ab18 <tcp_listen_closed+0x70>)
 801aae2:	68fb      	ldr	r3, [r7, #12]
 801aae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801aae8:	681b      	ldr	r3, [r3, #0]
 801aaea:	6879      	ldr	r1, [r7, #4]
 801aaec:	4618      	mov	r0, r3
 801aaee:	f7ff ffb1 	bl	801aa54 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801aaf2:	68fb      	ldr	r3, [r7, #12]
 801aaf4:	3301      	adds	r3, #1
 801aaf6:	60fb      	str	r3, [r7, #12]
 801aaf8:	68fb      	ldr	r3, [r7, #12]
 801aafa:	2b03      	cmp	r3, #3
 801aafc:	d9f0      	bls.n	801aae0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801aafe:	bf00      	nop
 801ab00:	3710      	adds	r7, #16
 801ab02:	46bd      	mov	sp, r7
 801ab04:	bd80      	pop	{r7, pc}
 801ab06:	bf00      	nop
 801ab08:	08026fd4 	.word	0x08026fd4
 801ab0c:	080270a0 	.word	0x080270a0
 801ab10:	08027034 	.word	0x08027034
 801ab14:	080270ac 	.word	0x080270ac
 801ab18:	08028b30 	.word	0x08028b30

0801ab1c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801ab1c:	b5b0      	push	{r4, r5, r7, lr}
 801ab1e:	b088      	sub	sp, #32
 801ab20:	af04      	add	r7, sp, #16
 801ab22:	6078      	str	r0, [r7, #4]
 801ab24:	460b      	mov	r3, r1
 801ab26:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	d106      	bne.n	801ab3c <tcp_close_shutdown+0x20>
 801ab2e:	4b61      	ldr	r3, [pc, #388]	; (801acb4 <tcp_close_shutdown+0x198>)
 801ab30:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801ab34:	4960      	ldr	r1, [pc, #384]	; (801acb8 <tcp_close_shutdown+0x19c>)
 801ab36:	4861      	ldr	r0, [pc, #388]	; (801acbc <tcp_close_shutdown+0x1a0>)
 801ab38:	f009 fa56 	bl	8023fe8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801ab3c:	78fb      	ldrb	r3, [r7, #3]
 801ab3e:	2b00      	cmp	r3, #0
 801ab40:	d066      	beq.n	801ac10 <tcp_close_shutdown+0xf4>
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	7d1b      	ldrb	r3, [r3, #20]
 801ab46:	2b04      	cmp	r3, #4
 801ab48:	d003      	beq.n	801ab52 <tcp_close_shutdown+0x36>
 801ab4a:	687b      	ldr	r3, [r7, #4]
 801ab4c:	7d1b      	ldrb	r3, [r3, #20]
 801ab4e:	2b07      	cmp	r3, #7
 801ab50:	d15e      	bne.n	801ac10 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	d104      	bne.n	801ab64 <tcp_close_shutdown+0x48>
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ab5e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801ab62:	d055      	beq.n	801ac10 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	8b5b      	ldrh	r3, [r3, #26]
 801ab68:	f003 0310 	and.w	r3, r3, #16
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d106      	bne.n	801ab7e <tcp_close_shutdown+0x62>
 801ab70:	4b50      	ldr	r3, [pc, #320]	; (801acb4 <tcp_close_shutdown+0x198>)
 801ab72:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801ab76:	4952      	ldr	r1, [pc, #328]	; (801acc0 <tcp_close_shutdown+0x1a4>)
 801ab78:	4850      	ldr	r0, [pc, #320]	; (801acbc <tcp_close_shutdown+0x1a0>)
 801ab7a:	f009 fa35 	bl	8023fe8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801ab86:	687d      	ldr	r5, [r7, #4]
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	3304      	adds	r3, #4
 801ab8c:	687a      	ldr	r2, [r7, #4]
 801ab8e:	8ad2      	ldrh	r2, [r2, #22]
 801ab90:	6879      	ldr	r1, [r7, #4]
 801ab92:	8b09      	ldrh	r1, [r1, #24]
 801ab94:	9102      	str	r1, [sp, #8]
 801ab96:	9201      	str	r2, [sp, #4]
 801ab98:	9300      	str	r3, [sp, #0]
 801ab9a:	462b      	mov	r3, r5
 801ab9c:	4622      	mov	r2, r4
 801ab9e:	4601      	mov	r1, r0
 801aba0:	6878      	ldr	r0, [r7, #4]
 801aba2:	f005 fdbb 	bl	802071c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801aba6:	6878      	ldr	r0, [r7, #4]
 801aba8:	f001 fb8a 	bl	801c2c0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801abac:	4b45      	ldr	r3, [pc, #276]	; (801acc4 <tcp_close_shutdown+0x1a8>)
 801abae:	681b      	ldr	r3, [r3, #0]
 801abb0:	687a      	ldr	r2, [r7, #4]
 801abb2:	429a      	cmp	r2, r3
 801abb4:	d105      	bne.n	801abc2 <tcp_close_shutdown+0xa6>
 801abb6:	4b43      	ldr	r3, [pc, #268]	; (801acc4 <tcp_close_shutdown+0x1a8>)
 801abb8:	681b      	ldr	r3, [r3, #0]
 801abba:	68db      	ldr	r3, [r3, #12]
 801abbc:	4a41      	ldr	r2, [pc, #260]	; (801acc4 <tcp_close_shutdown+0x1a8>)
 801abbe:	6013      	str	r3, [r2, #0]
 801abc0:	e013      	b.n	801abea <tcp_close_shutdown+0xce>
 801abc2:	4b40      	ldr	r3, [pc, #256]	; (801acc4 <tcp_close_shutdown+0x1a8>)
 801abc4:	681b      	ldr	r3, [r3, #0]
 801abc6:	60fb      	str	r3, [r7, #12]
 801abc8:	e00c      	b.n	801abe4 <tcp_close_shutdown+0xc8>
 801abca:	68fb      	ldr	r3, [r7, #12]
 801abcc:	68db      	ldr	r3, [r3, #12]
 801abce:	687a      	ldr	r2, [r7, #4]
 801abd0:	429a      	cmp	r2, r3
 801abd2:	d104      	bne.n	801abde <tcp_close_shutdown+0xc2>
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	68da      	ldr	r2, [r3, #12]
 801abd8:	68fb      	ldr	r3, [r7, #12]
 801abda:	60da      	str	r2, [r3, #12]
 801abdc:	e005      	b.n	801abea <tcp_close_shutdown+0xce>
 801abde:	68fb      	ldr	r3, [r7, #12]
 801abe0:	68db      	ldr	r3, [r3, #12]
 801abe2:	60fb      	str	r3, [r7, #12]
 801abe4:	68fb      	ldr	r3, [r7, #12]
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d1ef      	bne.n	801abca <tcp_close_shutdown+0xae>
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	2200      	movs	r2, #0
 801abee:	60da      	str	r2, [r3, #12]
 801abf0:	4b35      	ldr	r3, [pc, #212]	; (801acc8 <tcp_close_shutdown+0x1ac>)
 801abf2:	2201      	movs	r2, #1
 801abf4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801abf6:	4b35      	ldr	r3, [pc, #212]	; (801accc <tcp_close_shutdown+0x1b0>)
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	687a      	ldr	r2, [r7, #4]
 801abfc:	429a      	cmp	r2, r3
 801abfe:	d102      	bne.n	801ac06 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801ac00:	f004 f81c 	bl	801ec3c <tcp_trigger_input_pcb_close>
 801ac04:	e002      	b.n	801ac0c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801ac06:	6878      	ldr	r0, [r7, #4]
 801ac08:	f7ff fed6 	bl	801a9b8 <tcp_free>
      }
      return ERR_OK;
 801ac0c:	2300      	movs	r3, #0
 801ac0e:	e04d      	b.n	801acac <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	7d1b      	ldrb	r3, [r3, #20]
 801ac14:	2b01      	cmp	r3, #1
 801ac16:	d02d      	beq.n	801ac74 <tcp_close_shutdown+0x158>
 801ac18:	2b02      	cmp	r3, #2
 801ac1a:	d036      	beq.n	801ac8a <tcp_close_shutdown+0x16e>
 801ac1c:	2b00      	cmp	r3, #0
 801ac1e:	d13f      	bne.n	801aca0 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	8adb      	ldrh	r3, [r3, #22]
 801ac24:	2b00      	cmp	r3, #0
 801ac26:	d021      	beq.n	801ac6c <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801ac28:	4b29      	ldr	r3, [pc, #164]	; (801acd0 <tcp_close_shutdown+0x1b4>)
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	687a      	ldr	r2, [r7, #4]
 801ac2e:	429a      	cmp	r2, r3
 801ac30:	d105      	bne.n	801ac3e <tcp_close_shutdown+0x122>
 801ac32:	4b27      	ldr	r3, [pc, #156]	; (801acd0 <tcp_close_shutdown+0x1b4>)
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	68db      	ldr	r3, [r3, #12]
 801ac38:	4a25      	ldr	r2, [pc, #148]	; (801acd0 <tcp_close_shutdown+0x1b4>)
 801ac3a:	6013      	str	r3, [r2, #0]
 801ac3c:	e013      	b.n	801ac66 <tcp_close_shutdown+0x14a>
 801ac3e:	4b24      	ldr	r3, [pc, #144]	; (801acd0 <tcp_close_shutdown+0x1b4>)
 801ac40:	681b      	ldr	r3, [r3, #0]
 801ac42:	60bb      	str	r3, [r7, #8]
 801ac44:	e00c      	b.n	801ac60 <tcp_close_shutdown+0x144>
 801ac46:	68bb      	ldr	r3, [r7, #8]
 801ac48:	68db      	ldr	r3, [r3, #12]
 801ac4a:	687a      	ldr	r2, [r7, #4]
 801ac4c:	429a      	cmp	r2, r3
 801ac4e:	d104      	bne.n	801ac5a <tcp_close_shutdown+0x13e>
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	68da      	ldr	r2, [r3, #12]
 801ac54:	68bb      	ldr	r3, [r7, #8]
 801ac56:	60da      	str	r2, [r3, #12]
 801ac58:	e005      	b.n	801ac66 <tcp_close_shutdown+0x14a>
 801ac5a:	68bb      	ldr	r3, [r7, #8]
 801ac5c:	68db      	ldr	r3, [r3, #12]
 801ac5e:	60bb      	str	r3, [r7, #8]
 801ac60:	68bb      	ldr	r3, [r7, #8]
 801ac62:	2b00      	cmp	r3, #0
 801ac64:	d1ef      	bne.n	801ac46 <tcp_close_shutdown+0x12a>
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	2200      	movs	r2, #0
 801ac6a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801ac6c:	6878      	ldr	r0, [r7, #4]
 801ac6e:	f7ff fea3 	bl	801a9b8 <tcp_free>
      break;
 801ac72:	e01a      	b.n	801acaa <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 801ac74:	6878      	ldr	r0, [r7, #4]
 801ac76:	f7ff ff17 	bl	801aaa8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801ac7a:	6879      	ldr	r1, [r7, #4]
 801ac7c:	4815      	ldr	r0, [pc, #84]	; (801acd4 <tcp_close_shutdown+0x1b8>)
 801ac7e:	f001 fb6f 	bl	801c360 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801ac82:	6878      	ldr	r0, [r7, #4]
 801ac84:	f7ff feb4 	bl	801a9f0 <tcp_free_listen>
      break;
 801ac88:	e00f      	b.n	801acaa <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801ac8a:	6879      	ldr	r1, [r7, #4]
 801ac8c:	480d      	ldr	r0, [pc, #52]	; (801acc4 <tcp_close_shutdown+0x1a8>)
 801ac8e:	f001 fb67 	bl	801c360 <tcp_pcb_remove>
 801ac92:	4b0d      	ldr	r3, [pc, #52]	; (801acc8 <tcp_close_shutdown+0x1ac>)
 801ac94:	2201      	movs	r2, #1
 801ac96:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801ac98:	6878      	ldr	r0, [r7, #4]
 801ac9a:	f7ff fe8d 	bl	801a9b8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801ac9e:	e004      	b.n	801acaa <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 801aca0:	6878      	ldr	r0, [r7, #4]
 801aca2:	f000 f819 	bl	801acd8 <tcp_close_shutdown_fin>
 801aca6:	4603      	mov	r3, r0
 801aca8:	e000      	b.n	801acac <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 801acaa:	2300      	movs	r3, #0
}
 801acac:	4618      	mov	r0, r3
 801acae:	3710      	adds	r7, #16
 801acb0:	46bd      	mov	sp, r7
 801acb2:	bdb0      	pop	{r4, r5, r7, pc}
 801acb4:	08026fd4 	.word	0x08026fd4
 801acb8:	080270c4 	.word	0x080270c4
 801acbc:	08027034 	.word	0x08027034
 801acc0:	080270e4 	.word	0x080270e4
 801acc4:	2001181c 	.word	0x2001181c
 801acc8:	20011818 	.word	0x20011818
 801accc:	20011830 	.word	0x20011830
 801acd0:	20011828 	.word	0x20011828
 801acd4:	20011824 	.word	0x20011824

0801acd8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801acd8:	b580      	push	{r7, lr}
 801acda:	b084      	sub	sp, #16
 801acdc:	af00      	add	r7, sp, #0
 801acde:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	2b00      	cmp	r3, #0
 801ace4:	d106      	bne.n	801acf4 <tcp_close_shutdown_fin+0x1c>
 801ace6:	4b2c      	ldr	r3, [pc, #176]	; (801ad98 <tcp_close_shutdown_fin+0xc0>)
 801ace8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801acec:	492b      	ldr	r1, [pc, #172]	; (801ad9c <tcp_close_shutdown_fin+0xc4>)
 801acee:	482c      	ldr	r0, [pc, #176]	; (801ada0 <tcp_close_shutdown_fin+0xc8>)
 801acf0:	f009 f97a 	bl	8023fe8 <iprintf>

  switch (pcb->state) {
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	7d1b      	ldrb	r3, [r3, #20]
 801acf8:	2b04      	cmp	r3, #4
 801acfa:	d010      	beq.n	801ad1e <tcp_close_shutdown_fin+0x46>
 801acfc:	2b07      	cmp	r3, #7
 801acfe:	d01b      	beq.n	801ad38 <tcp_close_shutdown_fin+0x60>
 801ad00:	2b03      	cmp	r3, #3
 801ad02:	d126      	bne.n	801ad52 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801ad04:	6878      	ldr	r0, [r7, #4]
 801ad06:	f004 fe05 	bl	801f914 <tcp_send_fin>
 801ad0a:	4603      	mov	r3, r0
 801ad0c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801ad0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d11f      	bne.n	801ad56 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	2205      	movs	r2, #5
 801ad1a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801ad1c:	e01b      	b.n	801ad56 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801ad1e:	6878      	ldr	r0, [r7, #4]
 801ad20:	f004 fdf8 	bl	801f914 <tcp_send_fin>
 801ad24:	4603      	mov	r3, r0
 801ad26:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801ad28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	d114      	bne.n	801ad5a <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	2205      	movs	r2, #5
 801ad34:	751a      	strb	r2, [r3, #20]
      }
      break;
 801ad36:	e010      	b.n	801ad5a <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801ad38:	6878      	ldr	r0, [r7, #4]
 801ad3a:	f004 fdeb 	bl	801f914 <tcp_send_fin>
 801ad3e:	4603      	mov	r3, r0
 801ad40:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801ad42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ad46:	2b00      	cmp	r3, #0
 801ad48:	d109      	bne.n	801ad5e <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	2209      	movs	r2, #9
 801ad4e:	751a      	strb	r2, [r3, #20]
      }
      break;
 801ad50:	e005      	b.n	801ad5e <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801ad52:	2300      	movs	r3, #0
 801ad54:	e01c      	b.n	801ad90 <tcp_close_shutdown_fin+0xb8>
      break;
 801ad56:	bf00      	nop
 801ad58:	e002      	b.n	801ad60 <tcp_close_shutdown_fin+0x88>
      break;
 801ad5a:	bf00      	nop
 801ad5c:	e000      	b.n	801ad60 <tcp_close_shutdown_fin+0x88>
      break;
 801ad5e:	bf00      	nop
  }

  if (err == ERR_OK) {
 801ad60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ad64:	2b00      	cmp	r3, #0
 801ad66:	d103      	bne.n	801ad70 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801ad68:	6878      	ldr	r0, [r7, #4]
 801ad6a:	f004 ff11 	bl	801fb90 <tcp_output>
 801ad6e:	e00d      	b.n	801ad8c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 801ad70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ad74:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad78:	d108      	bne.n	801ad8c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	8b5b      	ldrh	r3, [r3, #26]
 801ad7e:	f043 0308 	orr.w	r3, r3, #8
 801ad82:	b29a      	uxth	r2, r3
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801ad88:	2300      	movs	r3, #0
 801ad8a:	e001      	b.n	801ad90 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 801ad8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ad90:	4618      	mov	r0, r3
 801ad92:	3710      	adds	r7, #16
 801ad94:	46bd      	mov	sp, r7
 801ad96:	bd80      	pop	{r7, pc}
 801ad98:	08026fd4 	.word	0x08026fd4
 801ad9c:	080270a0 	.word	0x080270a0
 801ada0:	08027034 	.word	0x08027034

0801ada4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801ada4:	b580      	push	{r7, lr}
 801ada6:	b082      	sub	sp, #8
 801ada8:	af00      	add	r7, sp, #0
 801adaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801adac:	687b      	ldr	r3, [r7, #4]
 801adae:	2b00      	cmp	r3, #0
 801adb0:	d109      	bne.n	801adc6 <tcp_close+0x22>
 801adb2:	4b0f      	ldr	r3, [pc, #60]	; (801adf0 <tcp_close+0x4c>)
 801adb4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801adb8:	490e      	ldr	r1, [pc, #56]	; (801adf4 <tcp_close+0x50>)
 801adba:	480f      	ldr	r0, [pc, #60]	; (801adf8 <tcp_close+0x54>)
 801adbc:	f009 f914 	bl	8023fe8 <iprintf>
 801adc0:	f06f 030f 	mvn.w	r3, #15
 801adc4:	e00f      	b.n	801ade6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	7d1b      	ldrb	r3, [r3, #20]
 801adca:	2b01      	cmp	r3, #1
 801adcc:	d006      	beq.n	801addc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	8b5b      	ldrh	r3, [r3, #26]
 801add2:	f043 0310 	orr.w	r3, r3, #16
 801add6:	b29a      	uxth	r2, r3
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801addc:	2101      	movs	r1, #1
 801adde:	6878      	ldr	r0, [r7, #4]
 801ade0:	f7ff fe9c 	bl	801ab1c <tcp_close_shutdown>
 801ade4:	4603      	mov	r3, r0
}
 801ade6:	4618      	mov	r0, r3
 801ade8:	3708      	adds	r7, #8
 801adea:	46bd      	mov	sp, r7
 801adec:	bd80      	pop	{r7, pc}
 801adee:	bf00      	nop
 801adf0:	08026fd4 	.word	0x08026fd4
 801adf4:	08027100 	.word	0x08027100
 801adf8:	08027034 	.word	0x08027034

0801adfc <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801adfc:	b580      	push	{r7, lr}
 801adfe:	b084      	sub	sp, #16
 801ae00:	af00      	add	r7, sp, #0
 801ae02:	60f8      	str	r0, [r7, #12]
 801ae04:	60b9      	str	r1, [r7, #8]
 801ae06:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 801ae08:	68fb      	ldr	r3, [r7, #12]
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d109      	bne.n	801ae22 <tcp_shutdown+0x26>
 801ae0e:	4b25      	ldr	r3, [pc, #148]	; (801aea4 <tcp_shutdown+0xa8>)
 801ae10:	f240 2207 	movw	r2, #519	; 0x207
 801ae14:	4924      	ldr	r1, [pc, #144]	; (801aea8 <tcp_shutdown+0xac>)
 801ae16:	4825      	ldr	r0, [pc, #148]	; (801aeac <tcp_shutdown+0xb0>)
 801ae18:	f009 f8e6 	bl	8023fe8 <iprintf>
 801ae1c:	f06f 030f 	mvn.w	r3, #15
 801ae20:	e03c      	b.n	801ae9c <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 801ae22:	68fb      	ldr	r3, [r7, #12]
 801ae24:	7d1b      	ldrb	r3, [r3, #20]
 801ae26:	2b01      	cmp	r3, #1
 801ae28:	d102      	bne.n	801ae30 <tcp_shutdown+0x34>
    return ERR_CONN;
 801ae2a:	f06f 030a 	mvn.w	r3, #10
 801ae2e:	e035      	b.n	801ae9c <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 801ae30:	68bb      	ldr	r3, [r7, #8]
 801ae32:	2b00      	cmp	r3, #0
 801ae34:	d01b      	beq.n	801ae6e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801ae36:	68fb      	ldr	r3, [r7, #12]
 801ae38:	8b5b      	ldrh	r3, [r3, #26]
 801ae3a:	f043 0310 	orr.w	r3, r3, #16
 801ae3e:	b29a      	uxth	r2, r3
 801ae40:	68fb      	ldr	r3, [r7, #12]
 801ae42:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	d005      	beq.n	801ae56 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801ae4a:	2101      	movs	r1, #1
 801ae4c:	68f8      	ldr	r0, [r7, #12]
 801ae4e:	f7ff fe65 	bl	801ab1c <tcp_close_shutdown>
 801ae52:	4603      	mov	r3, r0
 801ae54:	e022      	b.n	801ae9c <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801ae56:	68fb      	ldr	r3, [r7, #12]
 801ae58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ae5a:	2b00      	cmp	r3, #0
 801ae5c:	d007      	beq.n	801ae6e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801ae5e:	68fb      	ldr	r3, [r7, #12]
 801ae60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ae62:	4618      	mov	r0, r3
 801ae64:	f7fe ffb0 	bl	8019dc8 <pbuf_free>
      pcb->refused_data = NULL;
 801ae68:	68fb      	ldr	r3, [r7, #12]
 801ae6a:	2200      	movs	r2, #0
 801ae6c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d012      	beq.n	801ae9a <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801ae74:	68fb      	ldr	r3, [r7, #12]
 801ae76:	7d1b      	ldrb	r3, [r3, #20]
 801ae78:	2b03      	cmp	r3, #3
 801ae7a:	db0b      	blt.n	801ae94 <tcp_shutdown+0x98>
 801ae7c:	2b04      	cmp	r3, #4
 801ae7e:	dd01      	ble.n	801ae84 <tcp_shutdown+0x88>
 801ae80:	2b07      	cmp	r3, #7
 801ae82:	d107      	bne.n	801ae94 <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801ae84:	68bb      	ldr	r3, [r7, #8]
 801ae86:	b2db      	uxtb	r3, r3
 801ae88:	4619      	mov	r1, r3
 801ae8a:	68f8      	ldr	r0, [r7, #12]
 801ae8c:	f7ff fe46 	bl	801ab1c <tcp_close_shutdown>
 801ae90:	4603      	mov	r3, r0
 801ae92:	e003      	b.n	801ae9c <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801ae94:	f06f 030a 	mvn.w	r3, #10
 801ae98:	e000      	b.n	801ae9c <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 801ae9a:	2300      	movs	r3, #0
}
 801ae9c:	4618      	mov	r0, r3
 801ae9e:	3710      	adds	r7, #16
 801aea0:	46bd      	mov	sp, r7
 801aea2:	bd80      	pop	{r7, pc}
 801aea4:	08026fd4 	.word	0x08026fd4
 801aea8:	08027118 	.word	0x08027118
 801aeac:	08027034 	.word	0x08027034

0801aeb0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801aeb0:	b580      	push	{r7, lr}
 801aeb2:	b08e      	sub	sp, #56	; 0x38
 801aeb4:	af04      	add	r7, sp, #16
 801aeb6:	6078      	str	r0, [r7, #4]
 801aeb8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	2b00      	cmp	r3, #0
 801aebe:	d107      	bne.n	801aed0 <tcp_abandon+0x20>
 801aec0:	4b52      	ldr	r3, [pc, #328]	; (801b00c <tcp_abandon+0x15c>)
 801aec2:	f240 223d 	movw	r2, #573	; 0x23d
 801aec6:	4952      	ldr	r1, [pc, #328]	; (801b010 <tcp_abandon+0x160>)
 801aec8:	4852      	ldr	r0, [pc, #328]	; (801b014 <tcp_abandon+0x164>)
 801aeca:	f009 f88d 	bl	8023fe8 <iprintf>
 801aece:	e099      	b.n	801b004 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	7d1b      	ldrb	r3, [r3, #20]
 801aed4:	2b01      	cmp	r3, #1
 801aed6:	d106      	bne.n	801aee6 <tcp_abandon+0x36>
 801aed8:	4b4c      	ldr	r3, [pc, #304]	; (801b00c <tcp_abandon+0x15c>)
 801aeda:	f240 2241 	movw	r2, #577	; 0x241
 801aede:	494e      	ldr	r1, [pc, #312]	; (801b018 <tcp_abandon+0x168>)
 801aee0:	484c      	ldr	r0, [pc, #304]	; (801b014 <tcp_abandon+0x164>)
 801aee2:	f009 f881 	bl	8023fe8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801aee6:	687b      	ldr	r3, [r7, #4]
 801aee8:	7d1b      	ldrb	r3, [r3, #20]
 801aeea:	2b0a      	cmp	r3, #10
 801aeec:	d107      	bne.n	801aefe <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801aeee:	6879      	ldr	r1, [r7, #4]
 801aef0:	484a      	ldr	r0, [pc, #296]	; (801b01c <tcp_abandon+0x16c>)
 801aef2:	f001 fa35 	bl	801c360 <tcp_pcb_remove>
    tcp_free(pcb);
 801aef6:	6878      	ldr	r0, [r7, #4]
 801aef8:	f7ff fd5e 	bl	801a9b8 <tcp_free>
 801aefc:	e082      	b.n	801b004 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801aefe:	2300      	movs	r3, #0
 801af00:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801af02:	2300      	movs	r3, #0
 801af04:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801af06:	687b      	ldr	r3, [r7, #4]
 801af08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801af0a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801af10:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801af18:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801af1a:	687b      	ldr	r3, [r7, #4]
 801af1c:	691b      	ldr	r3, [r3, #16]
 801af1e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	7d1b      	ldrb	r3, [r3, #20]
 801af24:	2b00      	cmp	r3, #0
 801af26:	d126      	bne.n	801af76 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	8adb      	ldrh	r3, [r3, #22]
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d02e      	beq.n	801af8e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801af30:	4b3b      	ldr	r3, [pc, #236]	; (801b020 <tcp_abandon+0x170>)
 801af32:	681b      	ldr	r3, [r3, #0]
 801af34:	687a      	ldr	r2, [r7, #4]
 801af36:	429a      	cmp	r2, r3
 801af38:	d105      	bne.n	801af46 <tcp_abandon+0x96>
 801af3a:	4b39      	ldr	r3, [pc, #228]	; (801b020 <tcp_abandon+0x170>)
 801af3c:	681b      	ldr	r3, [r3, #0]
 801af3e:	68db      	ldr	r3, [r3, #12]
 801af40:	4a37      	ldr	r2, [pc, #220]	; (801b020 <tcp_abandon+0x170>)
 801af42:	6013      	str	r3, [r2, #0]
 801af44:	e013      	b.n	801af6e <tcp_abandon+0xbe>
 801af46:	4b36      	ldr	r3, [pc, #216]	; (801b020 <tcp_abandon+0x170>)
 801af48:	681b      	ldr	r3, [r3, #0]
 801af4a:	61fb      	str	r3, [r7, #28]
 801af4c:	e00c      	b.n	801af68 <tcp_abandon+0xb8>
 801af4e:	69fb      	ldr	r3, [r7, #28]
 801af50:	68db      	ldr	r3, [r3, #12]
 801af52:	687a      	ldr	r2, [r7, #4]
 801af54:	429a      	cmp	r2, r3
 801af56:	d104      	bne.n	801af62 <tcp_abandon+0xb2>
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	68da      	ldr	r2, [r3, #12]
 801af5c:	69fb      	ldr	r3, [r7, #28]
 801af5e:	60da      	str	r2, [r3, #12]
 801af60:	e005      	b.n	801af6e <tcp_abandon+0xbe>
 801af62:	69fb      	ldr	r3, [r7, #28]
 801af64:	68db      	ldr	r3, [r3, #12]
 801af66:	61fb      	str	r3, [r7, #28]
 801af68:	69fb      	ldr	r3, [r7, #28]
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	d1ef      	bne.n	801af4e <tcp_abandon+0x9e>
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	2200      	movs	r2, #0
 801af72:	60da      	str	r2, [r3, #12]
 801af74:	e00b      	b.n	801af8e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801af76:	683b      	ldr	r3, [r7, #0]
 801af78:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	8adb      	ldrh	r3, [r3, #22]
 801af7e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801af80:	6879      	ldr	r1, [r7, #4]
 801af82:	4828      	ldr	r0, [pc, #160]	; (801b024 <tcp_abandon+0x174>)
 801af84:	f001 f9ec 	bl	801c360 <tcp_pcb_remove>
 801af88:	4b27      	ldr	r3, [pc, #156]	; (801b028 <tcp_abandon+0x178>)
 801af8a:	2201      	movs	r2, #1
 801af8c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801af92:	2b00      	cmp	r3, #0
 801af94:	d004      	beq.n	801afa0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801af96:	687b      	ldr	r3, [r7, #4]
 801af98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801af9a:	4618      	mov	r0, r3
 801af9c:	f000 fec2 	bl	801bd24 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801afa4:	2b00      	cmp	r3, #0
 801afa6:	d004      	beq.n	801afb2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801afac:	4618      	mov	r0, r3
 801afae:	f000 feb9 	bl	801bd24 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801afb2:	687b      	ldr	r3, [r7, #4]
 801afb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801afb6:	2b00      	cmp	r3, #0
 801afb8:	d004      	beq.n	801afc4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801afba:	687b      	ldr	r3, [r7, #4]
 801afbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801afbe:	4618      	mov	r0, r3
 801afc0:	f000 feb0 	bl	801bd24 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801afc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d00e      	beq.n	801afe8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801afca:	6879      	ldr	r1, [r7, #4]
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	3304      	adds	r3, #4
 801afd0:	687a      	ldr	r2, [r7, #4]
 801afd2:	8b12      	ldrh	r2, [r2, #24]
 801afd4:	9202      	str	r2, [sp, #8]
 801afd6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801afd8:	9201      	str	r2, [sp, #4]
 801afda:	9300      	str	r3, [sp, #0]
 801afdc:	460b      	mov	r3, r1
 801afde:	697a      	ldr	r2, [r7, #20]
 801afe0:	69b9      	ldr	r1, [r7, #24]
 801afe2:	6878      	ldr	r0, [r7, #4]
 801afe4:	f005 fb9a 	bl	802071c <tcp_rst>
    }
    last_state = pcb->state;
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	7d1b      	ldrb	r3, [r3, #20]
 801afec:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801afee:	6878      	ldr	r0, [r7, #4]
 801aff0:	f7ff fce2 	bl	801a9b8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801aff4:	693b      	ldr	r3, [r7, #16]
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	d004      	beq.n	801b004 <tcp_abandon+0x154>
 801affa:	693b      	ldr	r3, [r7, #16]
 801affc:	f06f 010c 	mvn.w	r1, #12
 801b000:	68f8      	ldr	r0, [r7, #12]
 801b002:	4798      	blx	r3
  }
}
 801b004:	3728      	adds	r7, #40	; 0x28
 801b006:	46bd      	mov	sp, r7
 801b008:	bd80      	pop	{r7, pc}
 801b00a:	bf00      	nop
 801b00c:	08026fd4 	.word	0x08026fd4
 801b010:	08027134 	.word	0x08027134
 801b014:	08027034 	.word	0x08027034
 801b018:	08027150 	.word	0x08027150
 801b01c:	2001182c 	.word	0x2001182c
 801b020:	20011828 	.word	0x20011828
 801b024:	2001181c 	.word	0x2001181c
 801b028:	20011818 	.word	0x20011818

0801b02c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801b02c:	b580      	push	{r7, lr}
 801b02e:	b082      	sub	sp, #8
 801b030:	af00      	add	r7, sp, #0
 801b032:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801b034:	2101      	movs	r1, #1
 801b036:	6878      	ldr	r0, [r7, #4]
 801b038:	f7ff ff3a 	bl	801aeb0 <tcp_abandon>
}
 801b03c:	bf00      	nop
 801b03e:	3708      	adds	r7, #8
 801b040:	46bd      	mov	sp, r7
 801b042:	bd80      	pop	{r7, pc}

0801b044 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b044:	b580      	push	{r7, lr}
 801b046:	b088      	sub	sp, #32
 801b048:	af00      	add	r7, sp, #0
 801b04a:	60f8      	str	r0, [r7, #12]
 801b04c:	60b9      	str	r1, [r7, #8]
 801b04e:	4613      	mov	r3, r2
 801b050:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801b052:	2304      	movs	r3, #4
 801b054:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801b056:	68bb      	ldr	r3, [r7, #8]
 801b058:	2b00      	cmp	r3, #0
 801b05a:	d101      	bne.n	801b060 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801b05c:	4b3e      	ldr	r3, [pc, #248]	; (801b158 <tcp_bind+0x114>)
 801b05e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b060:	68fb      	ldr	r3, [r7, #12]
 801b062:	2b00      	cmp	r3, #0
 801b064:	d109      	bne.n	801b07a <tcp_bind+0x36>
 801b066:	4b3d      	ldr	r3, [pc, #244]	; (801b15c <tcp_bind+0x118>)
 801b068:	f240 22a9 	movw	r2, #681	; 0x2a9
 801b06c:	493c      	ldr	r1, [pc, #240]	; (801b160 <tcp_bind+0x11c>)
 801b06e:	483d      	ldr	r0, [pc, #244]	; (801b164 <tcp_bind+0x120>)
 801b070:	f008 ffba 	bl	8023fe8 <iprintf>
 801b074:	f06f 030f 	mvn.w	r3, #15
 801b078:	e06a      	b.n	801b150 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801b07a:	68fb      	ldr	r3, [r7, #12]
 801b07c:	7d1b      	ldrb	r3, [r3, #20]
 801b07e:	2b00      	cmp	r3, #0
 801b080:	d009      	beq.n	801b096 <tcp_bind+0x52>
 801b082:	4b36      	ldr	r3, [pc, #216]	; (801b15c <tcp_bind+0x118>)
 801b084:	f240 22ab 	movw	r2, #683	; 0x2ab
 801b088:	4937      	ldr	r1, [pc, #220]	; (801b168 <tcp_bind+0x124>)
 801b08a:	4836      	ldr	r0, [pc, #216]	; (801b164 <tcp_bind+0x120>)
 801b08c:	f008 ffac 	bl	8023fe8 <iprintf>
 801b090:	f06f 0305 	mvn.w	r3, #5
 801b094:	e05c      	b.n	801b150 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801b096:	88fb      	ldrh	r3, [r7, #6]
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d109      	bne.n	801b0b0 <tcp_bind+0x6c>
    port = tcp_new_port();
 801b09c:	f000 f9de 	bl	801b45c <tcp_new_port>
 801b0a0:	4603      	mov	r3, r0
 801b0a2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801b0a4:	88fb      	ldrh	r3, [r7, #6]
 801b0a6:	2b00      	cmp	r3, #0
 801b0a8:	d135      	bne.n	801b116 <tcp_bind+0xd2>
      return ERR_BUF;
 801b0aa:	f06f 0301 	mvn.w	r3, #1
 801b0ae:	e04f      	b.n	801b150 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 801b0b0:	2300      	movs	r3, #0
 801b0b2:	61fb      	str	r3, [r7, #28]
 801b0b4:	e02b      	b.n	801b10e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801b0b6:	4a2d      	ldr	r2, [pc, #180]	; (801b16c <tcp_bind+0x128>)
 801b0b8:	69fb      	ldr	r3, [r7, #28]
 801b0ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	61bb      	str	r3, [r7, #24]
 801b0c2:	e01e      	b.n	801b102 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 801b0c4:	69bb      	ldr	r3, [r7, #24]
 801b0c6:	8adb      	ldrh	r3, [r3, #22]
 801b0c8:	88fa      	ldrh	r2, [r7, #6]
 801b0ca:	429a      	cmp	r2, r3
 801b0cc:	d116      	bne.n	801b0fc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801b0ce:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	d010      	beq.n	801b0f6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 801b0d4:	69bb      	ldr	r3, [r7, #24]
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	d00c      	beq.n	801b0f6 <tcp_bind+0xb2>
 801b0dc:	68bb      	ldr	r3, [r7, #8]
 801b0de:	2b00      	cmp	r3, #0
 801b0e0:	d009      	beq.n	801b0f6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801b0e2:	68bb      	ldr	r3, [r7, #8]
 801b0e4:	681b      	ldr	r3, [r3, #0]
 801b0e6:	2b00      	cmp	r3, #0
 801b0e8:	d005      	beq.n	801b0f6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801b0ea:	69bb      	ldr	r3, [r7, #24]
 801b0ec:	681a      	ldr	r2, [r3, #0]
 801b0ee:	68bb      	ldr	r3, [r7, #8]
 801b0f0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801b0f2:	429a      	cmp	r2, r3
 801b0f4:	d102      	bne.n	801b0fc <tcp_bind+0xb8>
              return ERR_USE;
 801b0f6:	f06f 0307 	mvn.w	r3, #7
 801b0fa:	e029      	b.n	801b150 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801b0fc:	69bb      	ldr	r3, [r7, #24]
 801b0fe:	68db      	ldr	r3, [r3, #12]
 801b100:	61bb      	str	r3, [r7, #24]
 801b102:	69bb      	ldr	r3, [r7, #24]
 801b104:	2b00      	cmp	r3, #0
 801b106:	d1dd      	bne.n	801b0c4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801b108:	69fb      	ldr	r3, [r7, #28]
 801b10a:	3301      	adds	r3, #1
 801b10c:	61fb      	str	r3, [r7, #28]
 801b10e:	69fa      	ldr	r2, [r7, #28]
 801b110:	697b      	ldr	r3, [r7, #20]
 801b112:	429a      	cmp	r2, r3
 801b114:	dbcf      	blt.n	801b0b6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801b116:	68bb      	ldr	r3, [r7, #8]
 801b118:	2b00      	cmp	r3, #0
 801b11a:	d00c      	beq.n	801b136 <tcp_bind+0xf2>
 801b11c:	68bb      	ldr	r3, [r7, #8]
 801b11e:	681b      	ldr	r3, [r3, #0]
 801b120:	2b00      	cmp	r3, #0
 801b122:	d008      	beq.n	801b136 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801b124:	68bb      	ldr	r3, [r7, #8]
 801b126:	2b00      	cmp	r3, #0
 801b128:	d002      	beq.n	801b130 <tcp_bind+0xec>
 801b12a:	68bb      	ldr	r3, [r7, #8]
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	e000      	b.n	801b132 <tcp_bind+0xee>
 801b130:	2300      	movs	r3, #0
 801b132:	68fa      	ldr	r2, [r7, #12]
 801b134:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801b136:	68fb      	ldr	r3, [r7, #12]
 801b138:	88fa      	ldrh	r2, [r7, #6]
 801b13a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801b13c:	4b0c      	ldr	r3, [pc, #48]	; (801b170 <tcp_bind+0x12c>)
 801b13e:	681a      	ldr	r2, [r3, #0]
 801b140:	68fb      	ldr	r3, [r7, #12]
 801b142:	60da      	str	r2, [r3, #12]
 801b144:	4a0a      	ldr	r2, [pc, #40]	; (801b170 <tcp_bind+0x12c>)
 801b146:	68fb      	ldr	r3, [r7, #12]
 801b148:	6013      	str	r3, [r2, #0]
 801b14a:	f005 fe5d 	bl	8020e08 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801b14e:	2300      	movs	r3, #0
}
 801b150:	4618      	mov	r0, r3
 801b152:	3720      	adds	r7, #32
 801b154:	46bd      	mov	sp, r7
 801b156:	bd80      	pop	{r7, pc}
 801b158:	08028a28 	.word	0x08028a28
 801b15c:	08026fd4 	.word	0x08026fd4
 801b160:	08027184 	.word	0x08027184
 801b164:	08027034 	.word	0x08027034
 801b168:	0802719c 	.word	0x0802719c
 801b16c:	08028b30 	.word	0x08028b30
 801b170:	20011828 	.word	0x20011828

0801b174 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 801b174:	b580      	push	{r7, lr}
 801b176:	b084      	sub	sp, #16
 801b178:	af00      	add	r7, sp, #0
 801b17a:	60f8      	str	r0, [r7, #12]
 801b17c:	60b9      	str	r1, [r7, #8]
 801b17e:	4613      	mov	r3, r2
 801b180:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801b182:	68bb      	ldr	r3, [r7, #8]
 801b184:	2b00      	cmp	r3, #0
 801b186:	d106      	bne.n	801b196 <tcp_accept_null+0x22>
 801b188:	4b07      	ldr	r3, [pc, #28]	; (801b1a8 <tcp_accept_null+0x34>)
 801b18a:	f240 320f 	movw	r2, #783	; 0x30f
 801b18e:	4907      	ldr	r1, [pc, #28]	; (801b1ac <tcp_accept_null+0x38>)
 801b190:	4807      	ldr	r0, [pc, #28]	; (801b1b0 <tcp_accept_null+0x3c>)
 801b192:	f008 ff29 	bl	8023fe8 <iprintf>

  tcp_abort(pcb);
 801b196:	68b8      	ldr	r0, [r7, #8]
 801b198:	f7ff ff48 	bl	801b02c <tcp_abort>

  return ERR_ABRT;
 801b19c:	f06f 030c 	mvn.w	r3, #12
}
 801b1a0:	4618      	mov	r0, r3
 801b1a2:	3710      	adds	r7, #16
 801b1a4:	46bd      	mov	sp, r7
 801b1a6:	bd80      	pop	{r7, pc}
 801b1a8:	08026fd4 	.word	0x08026fd4
 801b1ac:	080271c4 	.word	0x080271c4
 801b1b0:	08027034 	.word	0x08027034

0801b1b4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 801b1b4:	b580      	push	{r7, lr}
 801b1b6:	b088      	sub	sp, #32
 801b1b8:	af00      	add	r7, sp, #0
 801b1ba:	60f8      	str	r0, [r7, #12]
 801b1bc:	460b      	mov	r3, r1
 801b1be:	607a      	str	r2, [r7, #4]
 801b1c0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801b1c2:	2300      	movs	r3, #0
 801b1c4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801b1c6:	68fb      	ldr	r3, [r7, #12]
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	d109      	bne.n	801b1e0 <tcp_listen_with_backlog_and_err+0x2c>
 801b1cc:	4b47      	ldr	r3, [pc, #284]	; (801b2ec <tcp_listen_with_backlog_and_err+0x138>)
 801b1ce:	f240 3259 	movw	r2, #857	; 0x359
 801b1d2:	4947      	ldr	r1, [pc, #284]	; (801b2f0 <tcp_listen_with_backlog_and_err+0x13c>)
 801b1d4:	4847      	ldr	r0, [pc, #284]	; (801b2f4 <tcp_listen_with_backlog_and_err+0x140>)
 801b1d6:	f008 ff07 	bl	8023fe8 <iprintf>
 801b1da:	23f0      	movs	r3, #240	; 0xf0
 801b1dc:	76fb      	strb	r3, [r7, #27]
 801b1de:	e079      	b.n	801b2d4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801b1e0:	68fb      	ldr	r3, [r7, #12]
 801b1e2:	7d1b      	ldrb	r3, [r3, #20]
 801b1e4:	2b00      	cmp	r3, #0
 801b1e6:	d009      	beq.n	801b1fc <tcp_listen_with_backlog_and_err+0x48>
 801b1e8:	4b40      	ldr	r3, [pc, #256]	; (801b2ec <tcp_listen_with_backlog_and_err+0x138>)
 801b1ea:	f240 325a 	movw	r2, #858	; 0x35a
 801b1ee:	4942      	ldr	r1, [pc, #264]	; (801b2f8 <tcp_listen_with_backlog_and_err+0x144>)
 801b1f0:	4840      	ldr	r0, [pc, #256]	; (801b2f4 <tcp_listen_with_backlog_and_err+0x140>)
 801b1f2:	f008 fef9 	bl	8023fe8 <iprintf>
 801b1f6:	23f1      	movs	r3, #241	; 0xf1
 801b1f8:	76fb      	strb	r3, [r7, #27]
 801b1fa:	e06b      	b.n	801b2d4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 801b1fc:	68fb      	ldr	r3, [r7, #12]
 801b1fe:	7d1b      	ldrb	r3, [r3, #20]
 801b200:	2b01      	cmp	r3, #1
 801b202:	d104      	bne.n	801b20e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 801b204:	68fb      	ldr	r3, [r7, #12]
 801b206:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801b208:	23f7      	movs	r3, #247	; 0xf7
 801b20a:	76fb      	strb	r3, [r7, #27]
    goto done;
 801b20c:	e062      	b.n	801b2d4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801b20e:	2002      	movs	r0, #2
 801b210:	f7fd fef0 	bl	8018ff4 <memp_malloc>
 801b214:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801b216:	69fb      	ldr	r3, [r7, #28]
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d102      	bne.n	801b222 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 801b21c:	23ff      	movs	r3, #255	; 0xff
 801b21e:	76fb      	strb	r3, [r7, #27]
    goto done;
 801b220:	e058      	b.n	801b2d4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801b222:	68fb      	ldr	r3, [r7, #12]
 801b224:	691a      	ldr	r2, [r3, #16]
 801b226:	69fb      	ldr	r3, [r7, #28]
 801b228:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801b22a:	68fb      	ldr	r3, [r7, #12]
 801b22c:	8ada      	ldrh	r2, [r3, #22]
 801b22e:	69fb      	ldr	r3, [r7, #28]
 801b230:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801b232:	69fb      	ldr	r3, [r7, #28]
 801b234:	2201      	movs	r2, #1
 801b236:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801b238:	68fb      	ldr	r3, [r7, #12]
 801b23a:	7d5a      	ldrb	r2, [r3, #21]
 801b23c:	69fb      	ldr	r3, [r7, #28]
 801b23e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 801b240:	68fb      	ldr	r3, [r7, #12]
 801b242:	7a5a      	ldrb	r2, [r3, #9]
 801b244:	69fb      	ldr	r3, [r7, #28]
 801b246:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801b248:	69fb      	ldr	r3, [r7, #28]
 801b24a:	2200      	movs	r2, #0
 801b24c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801b24e:	68fb      	ldr	r3, [r7, #12]
 801b250:	7ada      	ldrb	r2, [r3, #11]
 801b252:	69fb      	ldr	r3, [r7, #28]
 801b254:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801b256:	68fb      	ldr	r3, [r7, #12]
 801b258:	7a9a      	ldrb	r2, [r3, #10]
 801b25a:	69fb      	ldr	r3, [r7, #28]
 801b25c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801b25e:	68fb      	ldr	r3, [r7, #12]
 801b260:	681a      	ldr	r2, [r3, #0]
 801b262:	69fb      	ldr	r3, [r7, #28]
 801b264:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801b266:	68fb      	ldr	r3, [r7, #12]
 801b268:	8adb      	ldrh	r3, [r3, #22]
 801b26a:	2b00      	cmp	r3, #0
 801b26c:	d021      	beq.n	801b2b2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801b26e:	4b23      	ldr	r3, [pc, #140]	; (801b2fc <tcp_listen_with_backlog_and_err+0x148>)
 801b270:	681b      	ldr	r3, [r3, #0]
 801b272:	68fa      	ldr	r2, [r7, #12]
 801b274:	429a      	cmp	r2, r3
 801b276:	d105      	bne.n	801b284 <tcp_listen_with_backlog_and_err+0xd0>
 801b278:	4b20      	ldr	r3, [pc, #128]	; (801b2fc <tcp_listen_with_backlog_and_err+0x148>)
 801b27a:	681b      	ldr	r3, [r3, #0]
 801b27c:	68db      	ldr	r3, [r3, #12]
 801b27e:	4a1f      	ldr	r2, [pc, #124]	; (801b2fc <tcp_listen_with_backlog_and_err+0x148>)
 801b280:	6013      	str	r3, [r2, #0]
 801b282:	e013      	b.n	801b2ac <tcp_listen_with_backlog_and_err+0xf8>
 801b284:	4b1d      	ldr	r3, [pc, #116]	; (801b2fc <tcp_listen_with_backlog_and_err+0x148>)
 801b286:	681b      	ldr	r3, [r3, #0]
 801b288:	617b      	str	r3, [r7, #20]
 801b28a:	e00c      	b.n	801b2a6 <tcp_listen_with_backlog_and_err+0xf2>
 801b28c:	697b      	ldr	r3, [r7, #20]
 801b28e:	68db      	ldr	r3, [r3, #12]
 801b290:	68fa      	ldr	r2, [r7, #12]
 801b292:	429a      	cmp	r2, r3
 801b294:	d104      	bne.n	801b2a0 <tcp_listen_with_backlog_and_err+0xec>
 801b296:	68fb      	ldr	r3, [r7, #12]
 801b298:	68da      	ldr	r2, [r3, #12]
 801b29a:	697b      	ldr	r3, [r7, #20]
 801b29c:	60da      	str	r2, [r3, #12]
 801b29e:	e005      	b.n	801b2ac <tcp_listen_with_backlog_and_err+0xf8>
 801b2a0:	697b      	ldr	r3, [r7, #20]
 801b2a2:	68db      	ldr	r3, [r3, #12]
 801b2a4:	617b      	str	r3, [r7, #20]
 801b2a6:	697b      	ldr	r3, [r7, #20]
 801b2a8:	2b00      	cmp	r3, #0
 801b2aa:	d1ef      	bne.n	801b28c <tcp_listen_with_backlog_and_err+0xd8>
 801b2ac:	68fb      	ldr	r3, [r7, #12]
 801b2ae:	2200      	movs	r2, #0
 801b2b0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801b2b2:	68f8      	ldr	r0, [r7, #12]
 801b2b4:	f7ff fb80 	bl	801a9b8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801b2b8:	69fb      	ldr	r3, [r7, #28]
 801b2ba:	4a11      	ldr	r2, [pc, #68]	; (801b300 <tcp_listen_with_backlog_and_err+0x14c>)
 801b2bc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801b2be:	4b11      	ldr	r3, [pc, #68]	; (801b304 <tcp_listen_with_backlog_and_err+0x150>)
 801b2c0:	681a      	ldr	r2, [r3, #0]
 801b2c2:	69fb      	ldr	r3, [r7, #28]
 801b2c4:	60da      	str	r2, [r3, #12]
 801b2c6:	4a0f      	ldr	r2, [pc, #60]	; (801b304 <tcp_listen_with_backlog_and_err+0x150>)
 801b2c8:	69fb      	ldr	r3, [r7, #28]
 801b2ca:	6013      	str	r3, [r2, #0]
 801b2cc:	f005 fd9c 	bl	8020e08 <tcp_timer_needed>
  res = ERR_OK;
 801b2d0:	2300      	movs	r3, #0
 801b2d2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	d002      	beq.n	801b2e0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801b2da:	687b      	ldr	r3, [r7, #4]
 801b2dc:	7efa      	ldrb	r2, [r7, #27]
 801b2de:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801b2e0:	69fb      	ldr	r3, [r7, #28]
}
 801b2e2:	4618      	mov	r0, r3
 801b2e4:	3720      	adds	r7, #32
 801b2e6:	46bd      	mov	sp, r7
 801b2e8:	bd80      	pop	{r7, pc}
 801b2ea:	bf00      	nop
 801b2ec:	08026fd4 	.word	0x08026fd4
 801b2f0:	080271e4 	.word	0x080271e4
 801b2f4:	08027034 	.word	0x08027034
 801b2f8:	08027214 	.word	0x08027214
 801b2fc:	20011828 	.word	0x20011828
 801b300:	0801b175 	.word	0x0801b175
 801b304:	20011824 	.word	0x20011824

0801b308 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801b308:	b580      	push	{r7, lr}
 801b30a:	b084      	sub	sp, #16
 801b30c:	af00      	add	r7, sp, #0
 801b30e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	2b00      	cmp	r3, #0
 801b314:	d106      	bne.n	801b324 <tcp_update_rcv_ann_wnd+0x1c>
 801b316:	4b25      	ldr	r3, [pc, #148]	; (801b3ac <tcp_update_rcv_ann_wnd+0xa4>)
 801b318:	f240 32a6 	movw	r2, #934	; 0x3a6
 801b31c:	4924      	ldr	r1, [pc, #144]	; (801b3b0 <tcp_update_rcv_ann_wnd+0xa8>)
 801b31e:	4825      	ldr	r0, [pc, #148]	; (801b3b4 <tcp_update_rcv_ann_wnd+0xac>)
 801b320:	f008 fe62 	bl	8023fe8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b328:	687a      	ldr	r2, [r7, #4]
 801b32a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801b32c:	4413      	add	r3, r2
 801b32e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801b330:	687b      	ldr	r3, [r7, #4]
 801b332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b334:	687a      	ldr	r2, [r7, #4]
 801b336:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801b338:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 801b33c:	bf28      	it	cs
 801b33e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801b342:	b292      	uxth	r2, r2
 801b344:	4413      	add	r3, r2
 801b346:	68fa      	ldr	r2, [r7, #12]
 801b348:	1ad3      	subs	r3, r2, r3
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	db08      	blt.n	801b360 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b35a:	68fa      	ldr	r2, [r7, #12]
 801b35c:	1ad3      	subs	r3, r2, r3
 801b35e:	e020      	b.n	801b3a2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b368:	1ad3      	subs	r3, r2, r3
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	dd03      	ble.n	801b376 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	2200      	movs	r2, #0
 801b372:	855a      	strh	r2, [r3, #42]	; 0x2a
 801b374:	e014      	b.n	801b3a0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b37e:	1ad3      	subs	r3, r2, r3
 801b380:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801b382:	68bb      	ldr	r3, [r7, #8]
 801b384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b388:	d306      	bcc.n	801b398 <tcp_update_rcv_ann_wnd+0x90>
 801b38a:	4b08      	ldr	r3, [pc, #32]	; (801b3ac <tcp_update_rcv_ann_wnd+0xa4>)
 801b38c:	f240 32b6 	movw	r2, #950	; 0x3b6
 801b390:	4909      	ldr	r1, [pc, #36]	; (801b3b8 <tcp_update_rcv_ann_wnd+0xb0>)
 801b392:	4808      	ldr	r0, [pc, #32]	; (801b3b4 <tcp_update_rcv_ann_wnd+0xac>)
 801b394:	f008 fe28 	bl	8023fe8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801b398:	68bb      	ldr	r3, [r7, #8]
 801b39a:	b29a      	uxth	r2, r3
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801b3a0:	2300      	movs	r3, #0
  }
}
 801b3a2:	4618      	mov	r0, r3
 801b3a4:	3710      	adds	r7, #16
 801b3a6:	46bd      	mov	sp, r7
 801b3a8:	bd80      	pop	{r7, pc}
 801b3aa:	bf00      	nop
 801b3ac:	08026fd4 	.word	0x08026fd4
 801b3b0:	0802724c 	.word	0x0802724c
 801b3b4:	08027034 	.word	0x08027034
 801b3b8:	08027270 	.word	0x08027270

0801b3bc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801b3bc:	b580      	push	{r7, lr}
 801b3be:	b084      	sub	sp, #16
 801b3c0:	af00      	add	r7, sp, #0
 801b3c2:	6078      	str	r0, [r7, #4]
 801b3c4:	460b      	mov	r3, r1
 801b3c6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	2b00      	cmp	r3, #0
 801b3cc:	d107      	bne.n	801b3de <tcp_recved+0x22>
 801b3ce:	4b1f      	ldr	r3, [pc, #124]	; (801b44c <tcp_recved+0x90>)
 801b3d0:	f240 32cf 	movw	r2, #975	; 0x3cf
 801b3d4:	491e      	ldr	r1, [pc, #120]	; (801b450 <tcp_recved+0x94>)
 801b3d6:	481f      	ldr	r0, [pc, #124]	; (801b454 <tcp_recved+0x98>)
 801b3d8:	f008 fe06 	bl	8023fe8 <iprintf>
 801b3dc:	e032      	b.n	801b444 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	7d1b      	ldrb	r3, [r3, #20]
 801b3e2:	2b01      	cmp	r3, #1
 801b3e4:	d106      	bne.n	801b3f4 <tcp_recved+0x38>
 801b3e6:	4b19      	ldr	r3, [pc, #100]	; (801b44c <tcp_recved+0x90>)
 801b3e8:	f240 32d3 	movw	r2, #979	; 0x3d3
 801b3ec:	491a      	ldr	r1, [pc, #104]	; (801b458 <tcp_recved+0x9c>)
 801b3ee:	4819      	ldr	r0, [pc, #100]	; (801b454 <tcp_recved+0x98>)
 801b3f0:	f008 fdfa 	bl	8023fe8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b3f8:	887b      	ldrh	r3, [r7, #2]
 801b3fa:	4413      	add	r3, r2
 801b3fc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801b3fe:	89fb      	ldrh	r3, [r7, #14]
 801b400:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801b404:	d804      	bhi.n	801b410 <tcp_recved+0x54>
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b40a:	89fa      	ldrh	r2, [r7, #14]
 801b40c:	429a      	cmp	r2, r3
 801b40e:	d204      	bcs.n	801b41a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801b416:	851a      	strh	r2, [r3, #40]	; 0x28
 801b418:	e002      	b.n	801b420 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	89fa      	ldrh	r2, [r7, #14]
 801b41e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801b420:	6878      	ldr	r0, [r7, #4]
 801b422:	f7ff ff71 	bl	801b308 <tcp_update_rcv_ann_wnd>
 801b426:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801b428:	68bb      	ldr	r3, [r7, #8]
 801b42a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801b42e:	d309      	bcc.n	801b444 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	8b5b      	ldrh	r3, [r3, #26]
 801b434:	f043 0302 	orr.w	r3, r3, #2
 801b438:	b29a      	uxth	r2, r3
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801b43e:	6878      	ldr	r0, [r7, #4]
 801b440:	f004 fba6 	bl	801fb90 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801b444:	3710      	adds	r7, #16
 801b446:	46bd      	mov	sp, r7
 801b448:	bd80      	pop	{r7, pc}
 801b44a:	bf00      	nop
 801b44c:	08026fd4 	.word	0x08026fd4
 801b450:	0802728c 	.word	0x0802728c
 801b454:	08027034 	.word	0x08027034
 801b458:	080272a4 	.word	0x080272a4

0801b45c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801b45c:	b480      	push	{r7}
 801b45e:	b083      	sub	sp, #12
 801b460:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801b462:	2300      	movs	r3, #0
 801b464:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801b466:	4b1e      	ldr	r3, [pc, #120]	; (801b4e0 <tcp_new_port+0x84>)
 801b468:	881b      	ldrh	r3, [r3, #0]
 801b46a:	3301      	adds	r3, #1
 801b46c:	b29a      	uxth	r2, r3
 801b46e:	4b1c      	ldr	r3, [pc, #112]	; (801b4e0 <tcp_new_port+0x84>)
 801b470:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801b472:	4b1b      	ldr	r3, [pc, #108]	; (801b4e0 <tcp_new_port+0x84>)
 801b474:	881b      	ldrh	r3, [r3, #0]
 801b476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b47a:	4293      	cmp	r3, r2
 801b47c:	d103      	bne.n	801b486 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801b47e:	4b18      	ldr	r3, [pc, #96]	; (801b4e0 <tcp_new_port+0x84>)
 801b480:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801b484:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801b486:	2300      	movs	r3, #0
 801b488:	71fb      	strb	r3, [r7, #7]
 801b48a:	e01e      	b.n	801b4ca <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801b48c:	79fb      	ldrb	r3, [r7, #7]
 801b48e:	4a15      	ldr	r2, [pc, #84]	; (801b4e4 <tcp_new_port+0x88>)
 801b490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b494:	681b      	ldr	r3, [r3, #0]
 801b496:	603b      	str	r3, [r7, #0]
 801b498:	e011      	b.n	801b4be <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801b49a:	683b      	ldr	r3, [r7, #0]
 801b49c:	8ada      	ldrh	r2, [r3, #22]
 801b49e:	4b10      	ldr	r3, [pc, #64]	; (801b4e0 <tcp_new_port+0x84>)
 801b4a0:	881b      	ldrh	r3, [r3, #0]
 801b4a2:	429a      	cmp	r2, r3
 801b4a4:	d108      	bne.n	801b4b8 <tcp_new_port+0x5c>
        n++;
 801b4a6:	88bb      	ldrh	r3, [r7, #4]
 801b4a8:	3301      	adds	r3, #1
 801b4aa:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801b4ac:	88bb      	ldrh	r3, [r7, #4]
 801b4ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b4b2:	d3d8      	bcc.n	801b466 <tcp_new_port+0xa>
          return 0;
 801b4b4:	2300      	movs	r3, #0
 801b4b6:	e00d      	b.n	801b4d4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801b4b8:	683b      	ldr	r3, [r7, #0]
 801b4ba:	68db      	ldr	r3, [r3, #12]
 801b4bc:	603b      	str	r3, [r7, #0]
 801b4be:	683b      	ldr	r3, [r7, #0]
 801b4c0:	2b00      	cmp	r3, #0
 801b4c2:	d1ea      	bne.n	801b49a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801b4c4:	79fb      	ldrb	r3, [r7, #7]
 801b4c6:	3301      	adds	r3, #1
 801b4c8:	71fb      	strb	r3, [r7, #7]
 801b4ca:	79fb      	ldrb	r3, [r7, #7]
 801b4cc:	2b03      	cmp	r3, #3
 801b4ce:	d9dd      	bls.n	801b48c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801b4d0:	4b03      	ldr	r3, [pc, #12]	; (801b4e0 <tcp_new_port+0x84>)
 801b4d2:	881b      	ldrh	r3, [r3, #0]
}
 801b4d4:	4618      	mov	r0, r3
 801b4d6:	370c      	adds	r7, #12
 801b4d8:	46bd      	mov	sp, r7
 801b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4de:	4770      	bx	lr
 801b4e0:	20000018 	.word	0x20000018
 801b4e4:	08028b30 	.word	0x08028b30

0801b4e8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801b4e8:	b5b0      	push	{r4, r5, r7, lr}
 801b4ea:	b090      	sub	sp, #64	; 0x40
 801b4ec:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801b4ee:	2300      	movs	r3, #0
 801b4f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801b4f4:	4b94      	ldr	r3, [pc, #592]	; (801b748 <tcp_slowtmr+0x260>)
 801b4f6:	681b      	ldr	r3, [r3, #0]
 801b4f8:	3301      	adds	r3, #1
 801b4fa:	4a93      	ldr	r2, [pc, #588]	; (801b748 <tcp_slowtmr+0x260>)
 801b4fc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801b4fe:	4b93      	ldr	r3, [pc, #588]	; (801b74c <tcp_slowtmr+0x264>)
 801b500:	781b      	ldrb	r3, [r3, #0]
 801b502:	3301      	adds	r3, #1
 801b504:	b2da      	uxtb	r2, r3
 801b506:	4b91      	ldr	r3, [pc, #580]	; (801b74c <tcp_slowtmr+0x264>)
 801b508:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801b50a:	2300      	movs	r3, #0
 801b50c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801b50e:	4b90      	ldr	r3, [pc, #576]	; (801b750 <tcp_slowtmr+0x268>)
 801b510:	681b      	ldr	r3, [r3, #0]
 801b512:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801b514:	e29d      	b.n	801ba52 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801b516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b518:	7d1b      	ldrb	r3, [r3, #20]
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	d106      	bne.n	801b52c <tcp_slowtmr+0x44>
 801b51e:	4b8d      	ldr	r3, [pc, #564]	; (801b754 <tcp_slowtmr+0x26c>)
 801b520:	f240 42be 	movw	r2, #1214	; 0x4be
 801b524:	498c      	ldr	r1, [pc, #560]	; (801b758 <tcp_slowtmr+0x270>)
 801b526:	488d      	ldr	r0, [pc, #564]	; (801b75c <tcp_slowtmr+0x274>)
 801b528:	f008 fd5e 	bl	8023fe8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801b52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b52e:	7d1b      	ldrb	r3, [r3, #20]
 801b530:	2b01      	cmp	r3, #1
 801b532:	d106      	bne.n	801b542 <tcp_slowtmr+0x5a>
 801b534:	4b87      	ldr	r3, [pc, #540]	; (801b754 <tcp_slowtmr+0x26c>)
 801b536:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801b53a:	4989      	ldr	r1, [pc, #548]	; (801b760 <tcp_slowtmr+0x278>)
 801b53c:	4887      	ldr	r0, [pc, #540]	; (801b75c <tcp_slowtmr+0x274>)
 801b53e:	f008 fd53 	bl	8023fe8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801b542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b544:	7d1b      	ldrb	r3, [r3, #20]
 801b546:	2b0a      	cmp	r3, #10
 801b548:	d106      	bne.n	801b558 <tcp_slowtmr+0x70>
 801b54a:	4b82      	ldr	r3, [pc, #520]	; (801b754 <tcp_slowtmr+0x26c>)
 801b54c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801b550:	4984      	ldr	r1, [pc, #528]	; (801b764 <tcp_slowtmr+0x27c>)
 801b552:	4882      	ldr	r0, [pc, #520]	; (801b75c <tcp_slowtmr+0x274>)
 801b554:	f008 fd48 	bl	8023fe8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801b558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b55a:	7f9a      	ldrb	r2, [r3, #30]
 801b55c:	4b7b      	ldr	r3, [pc, #492]	; (801b74c <tcp_slowtmr+0x264>)
 801b55e:	781b      	ldrb	r3, [r3, #0]
 801b560:	429a      	cmp	r2, r3
 801b562:	d105      	bne.n	801b570 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801b564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b566:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801b568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b56a:	68db      	ldr	r3, [r3, #12]
 801b56c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801b56e:	e270      	b.n	801ba52 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 801b570:	4b76      	ldr	r3, [pc, #472]	; (801b74c <tcp_slowtmr+0x264>)
 801b572:	781a      	ldrb	r2, [r3, #0]
 801b574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b576:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801b578:	2300      	movs	r3, #0
 801b57a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801b57e:	2300      	movs	r3, #0
 801b580:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801b584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b586:	7d1b      	ldrb	r3, [r3, #20]
 801b588:	2b02      	cmp	r3, #2
 801b58a:	d10a      	bne.n	801b5a2 <tcp_slowtmr+0xba>
 801b58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b58e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b592:	2b05      	cmp	r3, #5
 801b594:	d905      	bls.n	801b5a2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 801b596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b59a:	3301      	adds	r3, #1
 801b59c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b5a0:	e11e      	b.n	801b7e0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801b5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b5a8:	2b0b      	cmp	r3, #11
 801b5aa:	d905      	bls.n	801b5b8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801b5ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b5b0:	3301      	adds	r3, #1
 801b5b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b5b6:	e113      	b.n	801b7e0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801b5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	d075      	beq.n	801b6ae <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801b5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b5c6:	2b00      	cmp	r3, #0
 801b5c8:	d006      	beq.n	801b5d8 <tcp_slowtmr+0xf0>
 801b5ca:	4b62      	ldr	r3, [pc, #392]	; (801b754 <tcp_slowtmr+0x26c>)
 801b5cc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801b5d0:	4965      	ldr	r1, [pc, #404]	; (801b768 <tcp_slowtmr+0x280>)
 801b5d2:	4862      	ldr	r0, [pc, #392]	; (801b75c <tcp_slowtmr+0x274>)
 801b5d4:	f008 fd08 	bl	8023fe8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801b5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b5dc:	2b00      	cmp	r3, #0
 801b5de:	d106      	bne.n	801b5ee <tcp_slowtmr+0x106>
 801b5e0:	4b5c      	ldr	r3, [pc, #368]	; (801b754 <tcp_slowtmr+0x26c>)
 801b5e2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801b5e6:	4961      	ldr	r1, [pc, #388]	; (801b76c <tcp_slowtmr+0x284>)
 801b5e8:	485c      	ldr	r0, [pc, #368]	; (801b75c <tcp_slowtmr+0x274>)
 801b5ea:	f008 fcfd 	bl	8023fe8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801b5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5f0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801b5f4:	2b0b      	cmp	r3, #11
 801b5f6:	d905      	bls.n	801b604 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801b5f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b5fc:	3301      	adds	r3, #1
 801b5fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b602:	e0ed      	b.n	801b7e0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801b604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b606:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801b60a:	3b01      	subs	r3, #1
 801b60c:	4a58      	ldr	r2, [pc, #352]	; (801b770 <tcp_slowtmr+0x288>)
 801b60e:	5cd3      	ldrb	r3, [r2, r3]
 801b610:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801b612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b614:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801b618:	7c7a      	ldrb	r2, [r7, #17]
 801b61a:	429a      	cmp	r2, r3
 801b61c:	d907      	bls.n	801b62e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801b61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b620:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801b624:	3301      	adds	r3, #1
 801b626:	b2da      	uxtb	r2, r3
 801b628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b62a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801b62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b630:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801b634:	7c7a      	ldrb	r2, [r7, #17]
 801b636:	429a      	cmp	r2, r3
 801b638:	f200 80d2 	bhi.w	801b7e0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801b63c:	2301      	movs	r3, #1
 801b63e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801b640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b642:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b646:	2b00      	cmp	r3, #0
 801b648:	d108      	bne.n	801b65c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801b64a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b64c:	f005 f95a 	bl	8020904 <tcp_zero_window_probe>
 801b650:	4603      	mov	r3, r0
 801b652:	2b00      	cmp	r3, #0
 801b654:	d014      	beq.n	801b680 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801b656:	2300      	movs	r3, #0
 801b658:	623b      	str	r3, [r7, #32]
 801b65a:	e011      	b.n	801b680 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801b65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b65e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b662:	4619      	mov	r1, r3
 801b664:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b666:	f004 f80d 	bl	801f684 <tcp_split_unsent_seg>
 801b66a:	4603      	mov	r3, r0
 801b66c:	2b00      	cmp	r3, #0
 801b66e:	d107      	bne.n	801b680 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 801b670:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b672:	f004 fa8d 	bl	801fb90 <tcp_output>
 801b676:	4603      	mov	r3, r0
 801b678:	2b00      	cmp	r3, #0
 801b67a:	d101      	bne.n	801b680 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801b67c:	2300      	movs	r3, #0
 801b67e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801b680:	6a3b      	ldr	r3, [r7, #32]
 801b682:	2b00      	cmp	r3, #0
 801b684:	f000 80ac 	beq.w	801b7e0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801b688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b68a:	2200      	movs	r2, #0
 801b68c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801b690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b692:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801b696:	2b06      	cmp	r3, #6
 801b698:	f200 80a2 	bhi.w	801b7e0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801b69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b69e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801b6a2:	3301      	adds	r3, #1
 801b6a4:	b2da      	uxtb	r2, r3
 801b6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6a8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801b6ac:	e098      	b.n	801b7e0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801b6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	db0f      	blt.n	801b6d8 <tcp_slowtmr+0x1f0>
 801b6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6ba:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801b6be:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b6c2:	4293      	cmp	r3, r2
 801b6c4:	d008      	beq.n	801b6d8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801b6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801b6cc:	b29b      	uxth	r3, r3
 801b6ce:	3301      	adds	r3, #1
 801b6d0:	b29b      	uxth	r3, r3
 801b6d2:	b21a      	sxth	r2, r3
 801b6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6d6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801b6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6da:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801b6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6e0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801b6e4:	429a      	cmp	r2, r3
 801b6e6:	db7b      	blt.n	801b7e0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801b6e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b6ea:	f004 fd49 	bl	8020180 <tcp_rexmit_rto_prepare>
 801b6ee:	4603      	mov	r3, r0
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d007      	beq.n	801b704 <tcp_slowtmr+0x21c>
 801b6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	d171      	bne.n	801b7e0 <tcp_slowtmr+0x2f8>
 801b6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b6fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b700:	2b00      	cmp	r3, #0
 801b702:	d06d      	beq.n	801b7e0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801b704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b706:	7d1b      	ldrb	r3, [r3, #20]
 801b708:	2b02      	cmp	r3, #2
 801b70a:	d03a      	beq.n	801b782 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801b70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b70e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801b712:	2b0c      	cmp	r3, #12
 801b714:	bf28      	it	cs
 801b716:	230c      	movcs	r3, #12
 801b718:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801b71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b71c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801b720:	10db      	asrs	r3, r3, #3
 801b722:	b21b      	sxth	r3, r3
 801b724:	461a      	mov	r2, r3
 801b726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b728:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801b72c:	4413      	add	r3, r2
 801b72e:	7efa      	ldrb	r2, [r7, #27]
 801b730:	4910      	ldr	r1, [pc, #64]	; (801b774 <tcp_slowtmr+0x28c>)
 801b732:	5c8a      	ldrb	r2, [r1, r2]
 801b734:	4093      	lsls	r3, r2
 801b736:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801b738:	697b      	ldr	r3, [r7, #20]
 801b73a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801b73e:	4293      	cmp	r3, r2
 801b740:	dc1a      	bgt.n	801b778 <tcp_slowtmr+0x290>
 801b742:	697b      	ldr	r3, [r7, #20]
 801b744:	b21a      	sxth	r2, r3
 801b746:	e019      	b.n	801b77c <tcp_slowtmr+0x294>
 801b748:	20011820 	.word	0x20011820
 801b74c:	20008a6a 	.word	0x20008a6a
 801b750:	2001181c 	.word	0x2001181c
 801b754:	08026fd4 	.word	0x08026fd4
 801b758:	08027334 	.word	0x08027334
 801b75c:	08027034 	.word	0x08027034
 801b760:	08027360 	.word	0x08027360
 801b764:	0802738c 	.word	0x0802738c
 801b768:	080273bc 	.word	0x080273bc
 801b76c:	080273f0 	.word	0x080273f0
 801b770:	08028b28 	.word	0x08028b28
 801b774:	08028b18 	.word	0x08028b18
 801b778:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801b77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b77e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801b782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b784:	2200      	movs	r2, #0
 801b786:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801b788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b78a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b790:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b794:	4293      	cmp	r3, r2
 801b796:	bf28      	it	cs
 801b798:	4613      	movcs	r3, r2
 801b79a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801b79c:	8a7b      	ldrh	r3, [r7, #18]
 801b79e:	085b      	lsrs	r3, r3, #1
 801b7a0:	b29a      	uxth	r2, r3
 801b7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7a4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801b7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7aa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801b7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b7b2:	005b      	lsls	r3, r3, #1
 801b7b4:	b29b      	uxth	r3, r3
 801b7b6:	429a      	cmp	r2, r3
 801b7b8:	d206      	bcs.n	801b7c8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801b7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b7be:	005b      	lsls	r3, r3, #1
 801b7c0:	b29a      	uxth	r2, r3
 801b7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801b7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7ca:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801b7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801b7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7d4:	2200      	movs	r2, #0
 801b7d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801b7da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b7dc:	f004 fd40 	bl	8020260 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801b7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7e2:	7d1b      	ldrb	r3, [r3, #20]
 801b7e4:	2b06      	cmp	r3, #6
 801b7e6:	d111      	bne.n	801b80c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801b7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7ea:	8b5b      	ldrh	r3, [r3, #26]
 801b7ec:	f003 0310 	and.w	r3, r3, #16
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	d00b      	beq.n	801b80c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b7f4:	4b9c      	ldr	r3, [pc, #624]	; (801ba68 <tcp_slowtmr+0x580>)
 801b7f6:	681a      	ldr	r2, [r3, #0]
 801b7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b7fa:	6a1b      	ldr	r3, [r3, #32]
 801b7fc:	1ad3      	subs	r3, r2, r3
 801b7fe:	2b28      	cmp	r3, #40	; 0x28
 801b800:	d904      	bls.n	801b80c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801b802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b806:	3301      	adds	r3, #1
 801b808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801b80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b80e:	7a5b      	ldrb	r3, [r3, #9]
 801b810:	f003 0308 	and.w	r3, r3, #8
 801b814:	2b00      	cmp	r3, #0
 801b816:	d04a      	beq.n	801b8ae <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 801b818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b81a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801b81c:	2b04      	cmp	r3, #4
 801b81e:	d003      	beq.n	801b828 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801b820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b822:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801b824:	2b07      	cmp	r3, #7
 801b826:	d142      	bne.n	801b8ae <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b828:	4b8f      	ldr	r3, [pc, #572]	; (801ba68 <tcp_slowtmr+0x580>)
 801b82a:	681a      	ldr	r2, [r3, #0]
 801b82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b82e:	6a1b      	ldr	r3, [r3, #32]
 801b830:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801b832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b834:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801b838:	4b8c      	ldr	r3, [pc, #560]	; (801ba6c <tcp_slowtmr+0x584>)
 801b83a:	440b      	add	r3, r1
 801b83c:	498c      	ldr	r1, [pc, #560]	; (801ba70 <tcp_slowtmr+0x588>)
 801b83e:	fba1 1303 	umull	r1, r3, r1, r3
 801b842:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b844:	429a      	cmp	r2, r3
 801b846:	d90a      	bls.n	801b85e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801b848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b84c:	3301      	adds	r3, #1
 801b84e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801b852:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b856:	3301      	adds	r3, #1
 801b858:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801b85c:	e027      	b.n	801b8ae <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b85e:	4b82      	ldr	r3, [pc, #520]	; (801ba68 <tcp_slowtmr+0x580>)
 801b860:	681a      	ldr	r2, [r3, #0]
 801b862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b864:	6a1b      	ldr	r3, [r3, #32]
 801b866:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801b868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b86a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801b86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b870:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801b874:	4618      	mov	r0, r3
 801b876:	4b7f      	ldr	r3, [pc, #508]	; (801ba74 <tcp_slowtmr+0x58c>)
 801b878:	fb03 f300 	mul.w	r3, r3, r0
 801b87c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801b87e:	497c      	ldr	r1, [pc, #496]	; (801ba70 <tcp_slowtmr+0x588>)
 801b880:	fba1 1303 	umull	r1, r3, r1, r3
 801b884:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b886:	429a      	cmp	r2, r3
 801b888:	d911      	bls.n	801b8ae <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801b88a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b88c:	f004 fffa 	bl	8020884 <tcp_keepalive>
 801b890:	4603      	mov	r3, r0
 801b892:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801b896:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	d107      	bne.n	801b8ae <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801b89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8a0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801b8a4:	3301      	adds	r3, #1
 801b8a6:	b2da      	uxtb	r2, r3
 801b8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8aa:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801b8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	d011      	beq.n	801b8da <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801b8b6:	4b6c      	ldr	r3, [pc, #432]	; (801ba68 <tcp_slowtmr+0x580>)
 801b8b8:	681a      	ldr	r2, [r3, #0]
 801b8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8bc:	6a1b      	ldr	r3, [r3, #32]
 801b8be:	1ad2      	subs	r2, r2, r3
 801b8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8c2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801b8c6:	4619      	mov	r1, r3
 801b8c8:	460b      	mov	r3, r1
 801b8ca:	005b      	lsls	r3, r3, #1
 801b8cc:	440b      	add	r3, r1
 801b8ce:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801b8d0:	429a      	cmp	r2, r3
 801b8d2:	d302      	bcc.n	801b8da <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801b8d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b8d6:	f000 fea7 	bl	801c628 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801b8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8dc:	7d1b      	ldrb	r3, [r3, #20]
 801b8de:	2b03      	cmp	r3, #3
 801b8e0:	d10b      	bne.n	801b8fa <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801b8e2:	4b61      	ldr	r3, [pc, #388]	; (801ba68 <tcp_slowtmr+0x580>)
 801b8e4:	681a      	ldr	r2, [r3, #0]
 801b8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8e8:	6a1b      	ldr	r3, [r3, #32]
 801b8ea:	1ad3      	subs	r3, r2, r3
 801b8ec:	2b28      	cmp	r3, #40	; 0x28
 801b8ee:	d904      	bls.n	801b8fa <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801b8f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b8f4:	3301      	adds	r3, #1
 801b8f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801b8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8fc:	7d1b      	ldrb	r3, [r3, #20]
 801b8fe:	2b09      	cmp	r3, #9
 801b900:	d10b      	bne.n	801b91a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801b902:	4b59      	ldr	r3, [pc, #356]	; (801ba68 <tcp_slowtmr+0x580>)
 801b904:	681a      	ldr	r2, [r3, #0]
 801b906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b908:	6a1b      	ldr	r3, [r3, #32]
 801b90a:	1ad3      	subs	r3, r2, r3
 801b90c:	2bf0      	cmp	r3, #240	; 0xf0
 801b90e:	d904      	bls.n	801b91a <tcp_slowtmr+0x432>
        ++pcb_remove;
 801b910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b914:	3301      	adds	r3, #1
 801b916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801b91a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d060      	beq.n	801b9e4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801b922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b928:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801b92a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b92c:	f000 fcc8 	bl	801c2c0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801b930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b932:	2b00      	cmp	r3, #0
 801b934:	d010      	beq.n	801b958 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801b936:	4b50      	ldr	r3, [pc, #320]	; (801ba78 <tcp_slowtmr+0x590>)
 801b938:	681b      	ldr	r3, [r3, #0]
 801b93a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b93c:	429a      	cmp	r2, r3
 801b93e:	d106      	bne.n	801b94e <tcp_slowtmr+0x466>
 801b940:	4b4e      	ldr	r3, [pc, #312]	; (801ba7c <tcp_slowtmr+0x594>)
 801b942:	f240 526d 	movw	r2, #1389	; 0x56d
 801b946:	494e      	ldr	r1, [pc, #312]	; (801ba80 <tcp_slowtmr+0x598>)
 801b948:	484e      	ldr	r0, [pc, #312]	; (801ba84 <tcp_slowtmr+0x59c>)
 801b94a:	f008 fb4d 	bl	8023fe8 <iprintf>
        prev->next = pcb->next;
 801b94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b950:	68da      	ldr	r2, [r3, #12]
 801b952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b954:	60da      	str	r2, [r3, #12]
 801b956:	e00f      	b.n	801b978 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801b958:	4b47      	ldr	r3, [pc, #284]	; (801ba78 <tcp_slowtmr+0x590>)
 801b95a:	681b      	ldr	r3, [r3, #0]
 801b95c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b95e:	429a      	cmp	r2, r3
 801b960:	d006      	beq.n	801b970 <tcp_slowtmr+0x488>
 801b962:	4b46      	ldr	r3, [pc, #280]	; (801ba7c <tcp_slowtmr+0x594>)
 801b964:	f240 5271 	movw	r2, #1393	; 0x571
 801b968:	4947      	ldr	r1, [pc, #284]	; (801ba88 <tcp_slowtmr+0x5a0>)
 801b96a:	4846      	ldr	r0, [pc, #280]	; (801ba84 <tcp_slowtmr+0x59c>)
 801b96c:	f008 fb3c 	bl	8023fe8 <iprintf>
        tcp_active_pcbs = pcb->next;
 801b970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b972:	68db      	ldr	r3, [r3, #12]
 801b974:	4a40      	ldr	r2, [pc, #256]	; (801ba78 <tcp_slowtmr+0x590>)
 801b976:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801b978:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b97c:	2b00      	cmp	r3, #0
 801b97e:	d013      	beq.n	801b9a8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801b980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b982:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801b984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b986:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801b988:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801b98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b98c:	3304      	adds	r3, #4
 801b98e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b990:	8ad2      	ldrh	r2, [r2, #22]
 801b992:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b994:	8b09      	ldrh	r1, [r1, #24]
 801b996:	9102      	str	r1, [sp, #8]
 801b998:	9201      	str	r2, [sp, #4]
 801b99a:	9300      	str	r3, [sp, #0]
 801b99c:	462b      	mov	r3, r5
 801b99e:	4622      	mov	r2, r4
 801b9a0:	4601      	mov	r1, r0
 801b9a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801b9a4:	f004 feba 	bl	802071c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801b9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b9aa:	691b      	ldr	r3, [r3, #16]
 801b9ac:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801b9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b9b0:	7d1b      	ldrb	r3, [r3, #20]
 801b9b2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801b9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b9b6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801b9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b9ba:	68db      	ldr	r3, [r3, #12]
 801b9bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801b9be:	6838      	ldr	r0, [r7, #0]
 801b9c0:	f7fe fffa 	bl	801a9b8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801b9c4:	4b31      	ldr	r3, [pc, #196]	; (801ba8c <tcp_slowtmr+0x5a4>)
 801b9c6:	2200      	movs	r2, #0
 801b9c8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801b9ca:	68fb      	ldr	r3, [r7, #12]
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	d004      	beq.n	801b9da <tcp_slowtmr+0x4f2>
 801b9d0:	68fb      	ldr	r3, [r7, #12]
 801b9d2:	f06f 010c 	mvn.w	r1, #12
 801b9d6:	68b8      	ldr	r0, [r7, #8]
 801b9d8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801b9da:	4b2c      	ldr	r3, [pc, #176]	; (801ba8c <tcp_slowtmr+0x5a4>)
 801b9dc:	781b      	ldrb	r3, [r3, #0]
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	d037      	beq.n	801ba52 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801b9e2:	e592      	b.n	801b50a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801b9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b9e6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801b9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b9ea:	68db      	ldr	r3, [r3, #12]
 801b9ec:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801b9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9f0:	7f1b      	ldrb	r3, [r3, #28]
 801b9f2:	3301      	adds	r3, #1
 801b9f4:	b2da      	uxtb	r2, r3
 801b9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9f8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801b9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9fc:	7f1a      	ldrb	r2, [r3, #28]
 801b9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba00:	7f5b      	ldrb	r3, [r3, #29]
 801ba02:	429a      	cmp	r2, r3
 801ba04:	d325      	bcc.n	801ba52 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801ba06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba08:	2200      	movs	r2, #0
 801ba0a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801ba0c:	4b1f      	ldr	r3, [pc, #124]	; (801ba8c <tcp_slowtmr+0x5a4>)
 801ba0e:	2200      	movs	r2, #0
 801ba10:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801ba12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	d00b      	beq.n	801ba34 <tcp_slowtmr+0x54c>
 801ba1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ba1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ba22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ba24:	6912      	ldr	r2, [r2, #16]
 801ba26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801ba28:	4610      	mov	r0, r2
 801ba2a:	4798      	blx	r3
 801ba2c:	4603      	mov	r3, r0
 801ba2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801ba32:	e002      	b.n	801ba3a <tcp_slowtmr+0x552>
 801ba34:	2300      	movs	r3, #0
 801ba36:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801ba3a:	4b14      	ldr	r3, [pc, #80]	; (801ba8c <tcp_slowtmr+0x5a4>)
 801ba3c:	781b      	ldrb	r3, [r3, #0]
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	d000      	beq.n	801ba44 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801ba42:	e562      	b.n	801b50a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801ba44:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	d102      	bne.n	801ba52 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 801ba4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ba4e:	f004 f89f 	bl	801fb90 <tcp_output>
  while (pcb != NULL) {
 801ba52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	f47f ad5e 	bne.w	801b516 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801ba5a:	2300      	movs	r3, #0
 801ba5c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801ba5e:	4b0c      	ldr	r3, [pc, #48]	; (801ba90 <tcp_slowtmr+0x5a8>)
 801ba60:	681b      	ldr	r3, [r3, #0]
 801ba62:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801ba64:	e069      	b.n	801bb3a <tcp_slowtmr+0x652>
 801ba66:	bf00      	nop
 801ba68:	20011820 	.word	0x20011820
 801ba6c:	000a4cb8 	.word	0x000a4cb8
 801ba70:	10624dd3 	.word	0x10624dd3
 801ba74:	000124f8 	.word	0x000124f8
 801ba78:	2001181c 	.word	0x2001181c
 801ba7c:	08026fd4 	.word	0x08026fd4
 801ba80:	08027428 	.word	0x08027428
 801ba84:	08027034 	.word	0x08027034
 801ba88:	08027454 	.word	0x08027454
 801ba8c:	20011818 	.word	0x20011818
 801ba90:	2001182c 	.word	0x2001182c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801ba94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ba96:	7d1b      	ldrb	r3, [r3, #20]
 801ba98:	2b0a      	cmp	r3, #10
 801ba9a:	d006      	beq.n	801baaa <tcp_slowtmr+0x5c2>
 801ba9c:	4b2a      	ldr	r3, [pc, #168]	; (801bb48 <tcp_slowtmr+0x660>)
 801ba9e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801baa2:	492a      	ldr	r1, [pc, #168]	; (801bb4c <tcp_slowtmr+0x664>)
 801baa4:	482a      	ldr	r0, [pc, #168]	; (801bb50 <tcp_slowtmr+0x668>)
 801baa6:	f008 fa9f 	bl	8023fe8 <iprintf>
    pcb_remove = 0;
 801baaa:	2300      	movs	r3, #0
 801baac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801bab0:	4b28      	ldr	r3, [pc, #160]	; (801bb54 <tcp_slowtmr+0x66c>)
 801bab2:	681a      	ldr	r2, [r3, #0]
 801bab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bab6:	6a1b      	ldr	r3, [r3, #32]
 801bab8:	1ad3      	subs	r3, r2, r3
 801baba:	2bf0      	cmp	r3, #240	; 0xf0
 801babc:	d904      	bls.n	801bac8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801babe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bac2:	3301      	adds	r3, #1
 801bac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801bac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801bacc:	2b00      	cmp	r3, #0
 801bace:	d02f      	beq.n	801bb30 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801bad0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801bad2:	f000 fbf5 	bl	801c2c0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801bad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bad8:	2b00      	cmp	r3, #0
 801bada:	d010      	beq.n	801bafe <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801badc:	4b1e      	ldr	r3, [pc, #120]	; (801bb58 <tcp_slowtmr+0x670>)
 801bade:	681b      	ldr	r3, [r3, #0]
 801bae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bae2:	429a      	cmp	r2, r3
 801bae4:	d106      	bne.n	801baf4 <tcp_slowtmr+0x60c>
 801bae6:	4b18      	ldr	r3, [pc, #96]	; (801bb48 <tcp_slowtmr+0x660>)
 801bae8:	f240 52af 	movw	r2, #1455	; 0x5af
 801baec:	491b      	ldr	r1, [pc, #108]	; (801bb5c <tcp_slowtmr+0x674>)
 801baee:	4818      	ldr	r0, [pc, #96]	; (801bb50 <tcp_slowtmr+0x668>)
 801baf0:	f008 fa7a 	bl	8023fe8 <iprintf>
        prev->next = pcb->next;
 801baf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801baf6:	68da      	ldr	r2, [r3, #12]
 801baf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bafa:	60da      	str	r2, [r3, #12]
 801bafc:	e00f      	b.n	801bb1e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801bafe:	4b16      	ldr	r3, [pc, #88]	; (801bb58 <tcp_slowtmr+0x670>)
 801bb00:	681b      	ldr	r3, [r3, #0]
 801bb02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bb04:	429a      	cmp	r2, r3
 801bb06:	d006      	beq.n	801bb16 <tcp_slowtmr+0x62e>
 801bb08:	4b0f      	ldr	r3, [pc, #60]	; (801bb48 <tcp_slowtmr+0x660>)
 801bb0a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801bb0e:	4914      	ldr	r1, [pc, #80]	; (801bb60 <tcp_slowtmr+0x678>)
 801bb10:	480f      	ldr	r0, [pc, #60]	; (801bb50 <tcp_slowtmr+0x668>)
 801bb12:	f008 fa69 	bl	8023fe8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801bb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb18:	68db      	ldr	r3, [r3, #12]
 801bb1a:	4a0f      	ldr	r2, [pc, #60]	; (801bb58 <tcp_slowtmr+0x670>)
 801bb1c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801bb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb20:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801bb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb24:	68db      	ldr	r3, [r3, #12]
 801bb26:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801bb28:	69f8      	ldr	r0, [r7, #28]
 801bb2a:	f7fe ff45 	bl	801a9b8 <tcp_free>
 801bb2e:	e004      	b.n	801bb3a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801bb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb32:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801bb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb36:	68db      	ldr	r3, [r3, #12]
 801bb38:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801bb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bb3c:	2b00      	cmp	r3, #0
 801bb3e:	d1a9      	bne.n	801ba94 <tcp_slowtmr+0x5ac>
    }
  }
}
 801bb40:	bf00      	nop
 801bb42:	3730      	adds	r7, #48	; 0x30
 801bb44:	46bd      	mov	sp, r7
 801bb46:	bdb0      	pop	{r4, r5, r7, pc}
 801bb48:	08026fd4 	.word	0x08026fd4
 801bb4c:	08027480 	.word	0x08027480
 801bb50:	08027034 	.word	0x08027034
 801bb54:	20011820 	.word	0x20011820
 801bb58:	2001182c 	.word	0x2001182c
 801bb5c:	080274b0 	.word	0x080274b0
 801bb60:	080274d8 	.word	0x080274d8

0801bb64 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801bb64:	b580      	push	{r7, lr}
 801bb66:	b082      	sub	sp, #8
 801bb68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801bb6a:	4b2d      	ldr	r3, [pc, #180]	; (801bc20 <tcp_fasttmr+0xbc>)
 801bb6c:	781b      	ldrb	r3, [r3, #0]
 801bb6e:	3301      	adds	r3, #1
 801bb70:	b2da      	uxtb	r2, r3
 801bb72:	4b2b      	ldr	r3, [pc, #172]	; (801bc20 <tcp_fasttmr+0xbc>)
 801bb74:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801bb76:	4b2b      	ldr	r3, [pc, #172]	; (801bc24 <tcp_fasttmr+0xc0>)
 801bb78:	681b      	ldr	r3, [r3, #0]
 801bb7a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801bb7c:	e048      	b.n	801bc10 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	7f9a      	ldrb	r2, [r3, #30]
 801bb82:	4b27      	ldr	r3, [pc, #156]	; (801bc20 <tcp_fasttmr+0xbc>)
 801bb84:	781b      	ldrb	r3, [r3, #0]
 801bb86:	429a      	cmp	r2, r3
 801bb88:	d03f      	beq.n	801bc0a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801bb8a:	4b25      	ldr	r3, [pc, #148]	; (801bc20 <tcp_fasttmr+0xbc>)
 801bb8c:	781a      	ldrb	r2, [r3, #0]
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801bb92:	687b      	ldr	r3, [r7, #4]
 801bb94:	8b5b      	ldrh	r3, [r3, #26]
 801bb96:	f003 0301 	and.w	r3, r3, #1
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	d010      	beq.n	801bbc0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	8b5b      	ldrh	r3, [r3, #26]
 801bba2:	f043 0302 	orr.w	r3, r3, #2
 801bba6:	b29a      	uxth	r2, r3
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801bbac:	6878      	ldr	r0, [r7, #4]
 801bbae:	f003 ffef 	bl	801fb90 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	8b5b      	ldrh	r3, [r3, #26]
 801bbb6:	f023 0303 	bic.w	r3, r3, #3
 801bbba:	b29a      	uxth	r2, r3
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801bbc0:	687b      	ldr	r3, [r7, #4]
 801bbc2:	8b5b      	ldrh	r3, [r3, #26]
 801bbc4:	f003 0308 	and.w	r3, r3, #8
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d009      	beq.n	801bbe0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	8b5b      	ldrh	r3, [r3, #26]
 801bbd0:	f023 0308 	bic.w	r3, r3, #8
 801bbd4:	b29a      	uxth	r2, r3
 801bbd6:	687b      	ldr	r3, [r7, #4]
 801bbd8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801bbda:	6878      	ldr	r0, [r7, #4]
 801bbdc:	f7ff f87c 	bl	801acd8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	68db      	ldr	r3, [r3, #12]
 801bbe4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	d00a      	beq.n	801bc04 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801bbee:	4b0e      	ldr	r3, [pc, #56]	; (801bc28 <tcp_fasttmr+0xc4>)
 801bbf0:	2200      	movs	r2, #0
 801bbf2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801bbf4:	6878      	ldr	r0, [r7, #4]
 801bbf6:	f000 f819 	bl	801bc2c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801bbfa:	4b0b      	ldr	r3, [pc, #44]	; (801bc28 <tcp_fasttmr+0xc4>)
 801bbfc:	781b      	ldrb	r3, [r3, #0]
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d000      	beq.n	801bc04 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801bc02:	e7b8      	b.n	801bb76 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801bc04:	683b      	ldr	r3, [r7, #0]
 801bc06:	607b      	str	r3, [r7, #4]
 801bc08:	e002      	b.n	801bc10 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	68db      	ldr	r3, [r3, #12]
 801bc0e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801bc10:	687b      	ldr	r3, [r7, #4]
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	d1b3      	bne.n	801bb7e <tcp_fasttmr+0x1a>
    }
  }
}
 801bc16:	bf00      	nop
 801bc18:	3708      	adds	r7, #8
 801bc1a:	46bd      	mov	sp, r7
 801bc1c:	bd80      	pop	{r7, pc}
 801bc1e:	bf00      	nop
 801bc20:	20008a6a 	.word	0x20008a6a
 801bc24:	2001181c 	.word	0x2001181c
 801bc28:	20011818 	.word	0x20011818

0801bc2c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801bc2c:	b590      	push	{r4, r7, lr}
 801bc2e:	b085      	sub	sp, #20
 801bc30:	af00      	add	r7, sp, #0
 801bc32:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801bc34:	687b      	ldr	r3, [r7, #4]
 801bc36:	2b00      	cmp	r3, #0
 801bc38:	d109      	bne.n	801bc4e <tcp_process_refused_data+0x22>
 801bc3a:	4b37      	ldr	r3, [pc, #220]	; (801bd18 <tcp_process_refused_data+0xec>)
 801bc3c:	f240 6209 	movw	r2, #1545	; 0x609
 801bc40:	4936      	ldr	r1, [pc, #216]	; (801bd1c <tcp_process_refused_data+0xf0>)
 801bc42:	4837      	ldr	r0, [pc, #220]	; (801bd20 <tcp_process_refused_data+0xf4>)
 801bc44:	f008 f9d0 	bl	8023fe8 <iprintf>
 801bc48:	f06f 030f 	mvn.w	r3, #15
 801bc4c:	e060      	b.n	801bd10 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801bc4e:	687b      	ldr	r3, [r7, #4]
 801bc50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801bc52:	7b5b      	ldrb	r3, [r3, #13]
 801bc54:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801bc5a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801bc5c:	687b      	ldr	r3, [r7, #4]
 801bc5e:	2200      	movs	r2, #0
 801bc60:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801bc68:	2b00      	cmp	r3, #0
 801bc6a:	d00b      	beq.n	801bc84 <tcp_process_refused_data+0x58>
 801bc6c:	687b      	ldr	r3, [r7, #4]
 801bc6e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	6918      	ldr	r0, [r3, #16]
 801bc76:	2300      	movs	r3, #0
 801bc78:	68ba      	ldr	r2, [r7, #8]
 801bc7a:	6879      	ldr	r1, [r7, #4]
 801bc7c:	47a0      	blx	r4
 801bc7e:	4603      	mov	r3, r0
 801bc80:	73fb      	strb	r3, [r7, #15]
 801bc82:	e007      	b.n	801bc94 <tcp_process_refused_data+0x68>
 801bc84:	2300      	movs	r3, #0
 801bc86:	68ba      	ldr	r2, [r7, #8]
 801bc88:	6879      	ldr	r1, [r7, #4]
 801bc8a:	2000      	movs	r0, #0
 801bc8c:	f000 f8a2 	bl	801bdd4 <tcp_recv_null>
 801bc90:	4603      	mov	r3, r0
 801bc92:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801bc94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	d12a      	bne.n	801bcf2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801bc9c:	7bbb      	ldrb	r3, [r7, #14]
 801bc9e:	f003 0320 	and.w	r3, r3, #32
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	d033      	beq.n	801bd0e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bcaa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801bcae:	d005      	beq.n	801bcbc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801bcb0:	687b      	ldr	r3, [r7, #4]
 801bcb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bcb4:	3301      	adds	r3, #1
 801bcb6:	b29a      	uxth	r2, r3
 801bcb8:	687b      	ldr	r3, [r7, #4]
 801bcba:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d00b      	beq.n	801bcde <tcp_process_refused_data+0xb2>
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801bccc:	687b      	ldr	r3, [r7, #4]
 801bcce:	6918      	ldr	r0, [r3, #16]
 801bcd0:	2300      	movs	r3, #0
 801bcd2:	2200      	movs	r2, #0
 801bcd4:	6879      	ldr	r1, [r7, #4]
 801bcd6:	47a0      	blx	r4
 801bcd8:	4603      	mov	r3, r0
 801bcda:	73fb      	strb	r3, [r7, #15]
 801bcdc:	e001      	b.n	801bce2 <tcp_process_refused_data+0xb6>
 801bcde:	2300      	movs	r3, #0
 801bce0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801bce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bce6:	f113 0f0d 	cmn.w	r3, #13
 801bcea:	d110      	bne.n	801bd0e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801bcec:	f06f 030c 	mvn.w	r3, #12
 801bcf0:	e00e      	b.n	801bd10 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801bcf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bcf6:	f113 0f0d 	cmn.w	r3, #13
 801bcfa:	d102      	bne.n	801bd02 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801bcfc:	f06f 030c 	mvn.w	r3, #12
 801bd00:	e006      	b.n	801bd10 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	68ba      	ldr	r2, [r7, #8]
 801bd06:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801bd08:	f06f 0304 	mvn.w	r3, #4
 801bd0c:	e000      	b.n	801bd10 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801bd0e:	2300      	movs	r3, #0
}
 801bd10:	4618      	mov	r0, r3
 801bd12:	3714      	adds	r7, #20
 801bd14:	46bd      	mov	sp, r7
 801bd16:	bd90      	pop	{r4, r7, pc}
 801bd18:	08026fd4 	.word	0x08026fd4
 801bd1c:	08027500 	.word	0x08027500
 801bd20:	08027034 	.word	0x08027034

0801bd24 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801bd24:	b580      	push	{r7, lr}
 801bd26:	b084      	sub	sp, #16
 801bd28:	af00      	add	r7, sp, #0
 801bd2a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801bd2c:	e007      	b.n	801bd3e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	681b      	ldr	r3, [r3, #0]
 801bd32:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801bd34:	6878      	ldr	r0, [r7, #4]
 801bd36:	f000 f809 	bl	801bd4c <tcp_seg_free>
    seg = next;
 801bd3a:	68fb      	ldr	r3, [r7, #12]
 801bd3c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	2b00      	cmp	r3, #0
 801bd42:	d1f4      	bne.n	801bd2e <tcp_segs_free+0xa>
  }
}
 801bd44:	bf00      	nop
 801bd46:	3710      	adds	r7, #16
 801bd48:	46bd      	mov	sp, r7
 801bd4a:	bd80      	pop	{r7, pc}

0801bd4c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801bd4c:	b580      	push	{r7, lr}
 801bd4e:	b082      	sub	sp, #8
 801bd50:	af00      	add	r7, sp, #0
 801bd52:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	d00c      	beq.n	801bd74 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801bd5a:	687b      	ldr	r3, [r7, #4]
 801bd5c:	685b      	ldr	r3, [r3, #4]
 801bd5e:	2b00      	cmp	r3, #0
 801bd60:	d004      	beq.n	801bd6c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801bd62:	687b      	ldr	r3, [r7, #4]
 801bd64:	685b      	ldr	r3, [r3, #4]
 801bd66:	4618      	mov	r0, r3
 801bd68:	f7fe f82e 	bl	8019dc8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801bd6c:	6879      	ldr	r1, [r7, #4]
 801bd6e:	2003      	movs	r0, #3
 801bd70:	f7fd f992 	bl	8019098 <memp_free>
  }
}
 801bd74:	bf00      	nop
 801bd76:	3708      	adds	r7, #8
 801bd78:	46bd      	mov	sp, r7
 801bd7a:	bd80      	pop	{r7, pc}

0801bd7c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801bd7c:	b580      	push	{r7, lr}
 801bd7e:	b084      	sub	sp, #16
 801bd80:	af00      	add	r7, sp, #0
 801bd82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801bd84:	687b      	ldr	r3, [r7, #4]
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	d106      	bne.n	801bd98 <tcp_seg_copy+0x1c>
 801bd8a:	4b0f      	ldr	r3, [pc, #60]	; (801bdc8 <tcp_seg_copy+0x4c>)
 801bd8c:	f240 6282 	movw	r2, #1666	; 0x682
 801bd90:	490e      	ldr	r1, [pc, #56]	; (801bdcc <tcp_seg_copy+0x50>)
 801bd92:	480f      	ldr	r0, [pc, #60]	; (801bdd0 <tcp_seg_copy+0x54>)
 801bd94:	f008 f928 	bl	8023fe8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801bd98:	2003      	movs	r0, #3
 801bd9a:	f7fd f92b 	bl	8018ff4 <memp_malloc>
 801bd9e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801bda0:	68fb      	ldr	r3, [r7, #12]
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	d101      	bne.n	801bdaa <tcp_seg_copy+0x2e>
    return NULL;
 801bda6:	2300      	movs	r3, #0
 801bda8:	e00a      	b.n	801bdc0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801bdaa:	2210      	movs	r2, #16
 801bdac:	6879      	ldr	r1, [r7, #4]
 801bdae:	68f8      	ldr	r0, [r7, #12]
 801bdb0:	f008 f85f 	bl	8023e72 <memcpy>
  pbuf_ref(cseg->p);
 801bdb4:	68fb      	ldr	r3, [r7, #12]
 801bdb6:	685b      	ldr	r3, [r3, #4]
 801bdb8:	4618      	mov	r0, r3
 801bdba:	f7fe f8ab 	bl	8019f14 <pbuf_ref>
  return cseg;
 801bdbe:	68fb      	ldr	r3, [r7, #12]
}
 801bdc0:	4618      	mov	r0, r3
 801bdc2:	3710      	adds	r7, #16
 801bdc4:	46bd      	mov	sp, r7
 801bdc6:	bd80      	pop	{r7, pc}
 801bdc8:	08026fd4 	.word	0x08026fd4
 801bdcc:	08027544 	.word	0x08027544
 801bdd0:	08027034 	.word	0x08027034

0801bdd4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801bdd4:	b580      	push	{r7, lr}
 801bdd6:	b084      	sub	sp, #16
 801bdd8:	af00      	add	r7, sp, #0
 801bdda:	60f8      	str	r0, [r7, #12]
 801bddc:	60b9      	str	r1, [r7, #8]
 801bdde:	607a      	str	r2, [r7, #4]
 801bde0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801bde2:	68bb      	ldr	r3, [r7, #8]
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	d109      	bne.n	801bdfc <tcp_recv_null+0x28>
 801bde8:	4b12      	ldr	r3, [pc, #72]	; (801be34 <tcp_recv_null+0x60>)
 801bdea:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801bdee:	4912      	ldr	r1, [pc, #72]	; (801be38 <tcp_recv_null+0x64>)
 801bdf0:	4812      	ldr	r0, [pc, #72]	; (801be3c <tcp_recv_null+0x68>)
 801bdf2:	f008 f8f9 	bl	8023fe8 <iprintf>
 801bdf6:	f06f 030f 	mvn.w	r3, #15
 801bdfa:	e016      	b.n	801be2a <tcp_recv_null+0x56>

  if (p != NULL) {
 801bdfc:	687b      	ldr	r3, [r7, #4]
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d009      	beq.n	801be16 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801be02:	687b      	ldr	r3, [r7, #4]
 801be04:	891b      	ldrh	r3, [r3, #8]
 801be06:	4619      	mov	r1, r3
 801be08:	68b8      	ldr	r0, [r7, #8]
 801be0a:	f7ff fad7 	bl	801b3bc <tcp_recved>
    pbuf_free(p);
 801be0e:	6878      	ldr	r0, [r7, #4]
 801be10:	f7fd ffda 	bl	8019dc8 <pbuf_free>
 801be14:	e008      	b.n	801be28 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801be16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	d104      	bne.n	801be28 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801be1e:	68b8      	ldr	r0, [r7, #8]
 801be20:	f7fe ffc0 	bl	801ada4 <tcp_close>
 801be24:	4603      	mov	r3, r0
 801be26:	e000      	b.n	801be2a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801be28:	2300      	movs	r3, #0
}
 801be2a:	4618      	mov	r0, r3
 801be2c:	3710      	adds	r7, #16
 801be2e:	46bd      	mov	sp, r7
 801be30:	bd80      	pop	{r7, pc}
 801be32:	bf00      	nop
 801be34:	08026fd4 	.word	0x08026fd4
 801be38:	08027560 	.word	0x08027560
 801be3c:	08027034 	.word	0x08027034

0801be40 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801be40:	b580      	push	{r7, lr}
 801be42:	b086      	sub	sp, #24
 801be44:	af00      	add	r7, sp, #0
 801be46:	4603      	mov	r3, r0
 801be48:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801be4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801be4e:	2b00      	cmp	r3, #0
 801be50:	db01      	blt.n	801be56 <tcp_kill_prio+0x16>
 801be52:	79fb      	ldrb	r3, [r7, #7]
 801be54:	e000      	b.n	801be58 <tcp_kill_prio+0x18>
 801be56:	237f      	movs	r3, #127	; 0x7f
 801be58:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801be5a:	7afb      	ldrb	r3, [r7, #11]
 801be5c:	2b00      	cmp	r3, #0
 801be5e:	d034      	beq.n	801beca <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801be60:	7afb      	ldrb	r3, [r7, #11]
 801be62:	3b01      	subs	r3, #1
 801be64:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801be66:	2300      	movs	r3, #0
 801be68:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801be6a:	2300      	movs	r3, #0
 801be6c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801be6e:	4b19      	ldr	r3, [pc, #100]	; (801bed4 <tcp_kill_prio+0x94>)
 801be70:	681b      	ldr	r3, [r3, #0]
 801be72:	617b      	str	r3, [r7, #20]
 801be74:	e01f      	b.n	801beb6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801be76:	697b      	ldr	r3, [r7, #20]
 801be78:	7d5b      	ldrb	r3, [r3, #21]
 801be7a:	7afa      	ldrb	r2, [r7, #11]
 801be7c:	429a      	cmp	r2, r3
 801be7e:	d80c      	bhi.n	801be9a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801be80:	697b      	ldr	r3, [r7, #20]
 801be82:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801be84:	7afa      	ldrb	r2, [r7, #11]
 801be86:	429a      	cmp	r2, r3
 801be88:	d112      	bne.n	801beb0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801be8a:	4b13      	ldr	r3, [pc, #76]	; (801bed8 <tcp_kill_prio+0x98>)
 801be8c:	681a      	ldr	r2, [r3, #0]
 801be8e:	697b      	ldr	r3, [r7, #20]
 801be90:	6a1b      	ldr	r3, [r3, #32]
 801be92:	1ad3      	subs	r3, r2, r3
 801be94:	68fa      	ldr	r2, [r7, #12]
 801be96:	429a      	cmp	r2, r3
 801be98:	d80a      	bhi.n	801beb0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801be9a:	4b0f      	ldr	r3, [pc, #60]	; (801bed8 <tcp_kill_prio+0x98>)
 801be9c:	681a      	ldr	r2, [r3, #0]
 801be9e:	697b      	ldr	r3, [r7, #20]
 801bea0:	6a1b      	ldr	r3, [r3, #32]
 801bea2:	1ad3      	subs	r3, r2, r3
 801bea4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801bea6:	697b      	ldr	r3, [r7, #20]
 801bea8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801beaa:	697b      	ldr	r3, [r7, #20]
 801beac:	7d5b      	ldrb	r3, [r3, #21]
 801beae:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801beb0:	697b      	ldr	r3, [r7, #20]
 801beb2:	68db      	ldr	r3, [r3, #12]
 801beb4:	617b      	str	r3, [r7, #20]
 801beb6:	697b      	ldr	r3, [r7, #20]
 801beb8:	2b00      	cmp	r3, #0
 801beba:	d1dc      	bne.n	801be76 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801bebc:	693b      	ldr	r3, [r7, #16]
 801bebe:	2b00      	cmp	r3, #0
 801bec0:	d004      	beq.n	801becc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801bec2:	6938      	ldr	r0, [r7, #16]
 801bec4:	f7ff f8b2 	bl	801b02c <tcp_abort>
 801bec8:	e000      	b.n	801becc <tcp_kill_prio+0x8c>
    return;
 801beca:	bf00      	nop
  }
}
 801becc:	3718      	adds	r7, #24
 801bece:	46bd      	mov	sp, r7
 801bed0:	bd80      	pop	{r7, pc}
 801bed2:	bf00      	nop
 801bed4:	2001181c 	.word	0x2001181c
 801bed8:	20011820 	.word	0x20011820

0801bedc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801bedc:	b580      	push	{r7, lr}
 801bede:	b086      	sub	sp, #24
 801bee0:	af00      	add	r7, sp, #0
 801bee2:	4603      	mov	r3, r0
 801bee4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801bee6:	79fb      	ldrb	r3, [r7, #7]
 801bee8:	2b08      	cmp	r3, #8
 801beea:	d009      	beq.n	801bf00 <tcp_kill_state+0x24>
 801beec:	79fb      	ldrb	r3, [r7, #7]
 801beee:	2b09      	cmp	r3, #9
 801bef0:	d006      	beq.n	801bf00 <tcp_kill_state+0x24>
 801bef2:	4b1a      	ldr	r3, [pc, #104]	; (801bf5c <tcp_kill_state+0x80>)
 801bef4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801bef8:	4919      	ldr	r1, [pc, #100]	; (801bf60 <tcp_kill_state+0x84>)
 801befa:	481a      	ldr	r0, [pc, #104]	; (801bf64 <tcp_kill_state+0x88>)
 801befc:	f008 f874 	bl	8023fe8 <iprintf>

  inactivity = 0;
 801bf00:	2300      	movs	r3, #0
 801bf02:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801bf04:	2300      	movs	r3, #0
 801bf06:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bf08:	4b17      	ldr	r3, [pc, #92]	; (801bf68 <tcp_kill_state+0x8c>)
 801bf0a:	681b      	ldr	r3, [r3, #0]
 801bf0c:	617b      	str	r3, [r7, #20]
 801bf0e:	e017      	b.n	801bf40 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801bf10:	697b      	ldr	r3, [r7, #20]
 801bf12:	7d1b      	ldrb	r3, [r3, #20]
 801bf14:	79fa      	ldrb	r2, [r7, #7]
 801bf16:	429a      	cmp	r2, r3
 801bf18:	d10f      	bne.n	801bf3a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801bf1a:	4b14      	ldr	r3, [pc, #80]	; (801bf6c <tcp_kill_state+0x90>)
 801bf1c:	681a      	ldr	r2, [r3, #0]
 801bf1e:	697b      	ldr	r3, [r7, #20]
 801bf20:	6a1b      	ldr	r3, [r3, #32]
 801bf22:	1ad3      	subs	r3, r2, r3
 801bf24:	68fa      	ldr	r2, [r7, #12]
 801bf26:	429a      	cmp	r2, r3
 801bf28:	d807      	bhi.n	801bf3a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801bf2a:	4b10      	ldr	r3, [pc, #64]	; (801bf6c <tcp_kill_state+0x90>)
 801bf2c:	681a      	ldr	r2, [r3, #0]
 801bf2e:	697b      	ldr	r3, [r7, #20]
 801bf30:	6a1b      	ldr	r3, [r3, #32]
 801bf32:	1ad3      	subs	r3, r2, r3
 801bf34:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801bf36:	697b      	ldr	r3, [r7, #20]
 801bf38:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bf3a:	697b      	ldr	r3, [r7, #20]
 801bf3c:	68db      	ldr	r3, [r3, #12]
 801bf3e:	617b      	str	r3, [r7, #20]
 801bf40:	697b      	ldr	r3, [r7, #20]
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d1e4      	bne.n	801bf10 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801bf46:	693b      	ldr	r3, [r7, #16]
 801bf48:	2b00      	cmp	r3, #0
 801bf4a:	d003      	beq.n	801bf54 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801bf4c:	2100      	movs	r1, #0
 801bf4e:	6938      	ldr	r0, [r7, #16]
 801bf50:	f7fe ffae 	bl	801aeb0 <tcp_abandon>
  }
}
 801bf54:	bf00      	nop
 801bf56:	3718      	adds	r7, #24
 801bf58:	46bd      	mov	sp, r7
 801bf5a:	bd80      	pop	{r7, pc}
 801bf5c:	08026fd4 	.word	0x08026fd4
 801bf60:	0802757c 	.word	0x0802757c
 801bf64:	08027034 	.word	0x08027034
 801bf68:	2001181c 	.word	0x2001181c
 801bf6c:	20011820 	.word	0x20011820

0801bf70 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801bf70:	b580      	push	{r7, lr}
 801bf72:	b084      	sub	sp, #16
 801bf74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801bf76:	2300      	movs	r3, #0
 801bf78:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801bf7a:	2300      	movs	r3, #0
 801bf7c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801bf7e:	4b12      	ldr	r3, [pc, #72]	; (801bfc8 <tcp_kill_timewait+0x58>)
 801bf80:	681b      	ldr	r3, [r3, #0]
 801bf82:	60fb      	str	r3, [r7, #12]
 801bf84:	e012      	b.n	801bfac <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801bf86:	4b11      	ldr	r3, [pc, #68]	; (801bfcc <tcp_kill_timewait+0x5c>)
 801bf88:	681a      	ldr	r2, [r3, #0]
 801bf8a:	68fb      	ldr	r3, [r7, #12]
 801bf8c:	6a1b      	ldr	r3, [r3, #32]
 801bf8e:	1ad3      	subs	r3, r2, r3
 801bf90:	687a      	ldr	r2, [r7, #4]
 801bf92:	429a      	cmp	r2, r3
 801bf94:	d807      	bhi.n	801bfa6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801bf96:	4b0d      	ldr	r3, [pc, #52]	; (801bfcc <tcp_kill_timewait+0x5c>)
 801bf98:	681a      	ldr	r2, [r3, #0]
 801bf9a:	68fb      	ldr	r3, [r7, #12]
 801bf9c:	6a1b      	ldr	r3, [r3, #32]
 801bf9e:	1ad3      	subs	r3, r2, r3
 801bfa0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801bfa2:	68fb      	ldr	r3, [r7, #12]
 801bfa4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801bfa6:	68fb      	ldr	r3, [r7, #12]
 801bfa8:	68db      	ldr	r3, [r3, #12]
 801bfaa:	60fb      	str	r3, [r7, #12]
 801bfac:	68fb      	ldr	r3, [r7, #12]
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	d1e9      	bne.n	801bf86 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801bfb2:	68bb      	ldr	r3, [r7, #8]
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	d002      	beq.n	801bfbe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801bfb8:	68b8      	ldr	r0, [r7, #8]
 801bfba:	f7ff f837 	bl	801b02c <tcp_abort>
  }
}
 801bfbe:	bf00      	nop
 801bfc0:	3710      	adds	r7, #16
 801bfc2:	46bd      	mov	sp, r7
 801bfc4:	bd80      	pop	{r7, pc}
 801bfc6:	bf00      	nop
 801bfc8:	2001182c 	.word	0x2001182c
 801bfcc:	20011820 	.word	0x20011820

0801bfd0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801bfd0:	b580      	push	{r7, lr}
 801bfd2:	b082      	sub	sp, #8
 801bfd4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801bfd6:	4b10      	ldr	r3, [pc, #64]	; (801c018 <tcp_handle_closepend+0x48>)
 801bfd8:	681b      	ldr	r3, [r3, #0]
 801bfda:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801bfdc:	e014      	b.n	801c008 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801bfde:	687b      	ldr	r3, [r7, #4]
 801bfe0:	68db      	ldr	r3, [r3, #12]
 801bfe2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	8b5b      	ldrh	r3, [r3, #26]
 801bfe8:	f003 0308 	and.w	r3, r3, #8
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	d009      	beq.n	801c004 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801bff0:	687b      	ldr	r3, [r7, #4]
 801bff2:	8b5b      	ldrh	r3, [r3, #26]
 801bff4:	f023 0308 	bic.w	r3, r3, #8
 801bff8:	b29a      	uxth	r2, r3
 801bffa:	687b      	ldr	r3, [r7, #4]
 801bffc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801bffe:	6878      	ldr	r0, [r7, #4]
 801c000:	f7fe fe6a 	bl	801acd8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801c004:	683b      	ldr	r3, [r7, #0]
 801c006:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	2b00      	cmp	r3, #0
 801c00c:	d1e7      	bne.n	801bfde <tcp_handle_closepend+0xe>
  }
}
 801c00e:	bf00      	nop
 801c010:	3708      	adds	r7, #8
 801c012:	46bd      	mov	sp, r7
 801c014:	bd80      	pop	{r7, pc}
 801c016:	bf00      	nop
 801c018:	2001181c 	.word	0x2001181c

0801c01c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801c01c:	b580      	push	{r7, lr}
 801c01e:	b084      	sub	sp, #16
 801c020:	af00      	add	r7, sp, #0
 801c022:	4603      	mov	r3, r0
 801c024:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c026:	2001      	movs	r0, #1
 801c028:	f7fc ffe4 	bl	8018ff4 <memp_malloc>
 801c02c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801c02e:	68fb      	ldr	r3, [r7, #12]
 801c030:	2b00      	cmp	r3, #0
 801c032:	d126      	bne.n	801c082 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801c034:	f7ff ffcc 	bl	801bfd0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801c038:	f7ff ff9a 	bl	801bf70 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c03c:	2001      	movs	r0, #1
 801c03e:	f7fc ffd9 	bl	8018ff4 <memp_malloc>
 801c042:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801c044:	68fb      	ldr	r3, [r7, #12]
 801c046:	2b00      	cmp	r3, #0
 801c048:	d11b      	bne.n	801c082 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801c04a:	2009      	movs	r0, #9
 801c04c:	f7ff ff46 	bl	801bedc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c050:	2001      	movs	r0, #1
 801c052:	f7fc ffcf 	bl	8018ff4 <memp_malloc>
 801c056:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801c058:	68fb      	ldr	r3, [r7, #12]
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	d111      	bne.n	801c082 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801c05e:	2008      	movs	r0, #8
 801c060:	f7ff ff3c 	bl	801bedc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c064:	2001      	movs	r0, #1
 801c066:	f7fc ffc5 	bl	8018ff4 <memp_malloc>
 801c06a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801c06c:	68fb      	ldr	r3, [r7, #12]
 801c06e:	2b00      	cmp	r3, #0
 801c070:	d107      	bne.n	801c082 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801c072:	79fb      	ldrb	r3, [r7, #7]
 801c074:	4618      	mov	r0, r3
 801c076:	f7ff fee3 	bl	801be40 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c07a:	2001      	movs	r0, #1
 801c07c:	f7fc ffba 	bl	8018ff4 <memp_malloc>
 801c080:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801c082:	68fb      	ldr	r3, [r7, #12]
 801c084:	2b00      	cmp	r3, #0
 801c086:	d03f      	beq.n	801c108 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801c088:	229c      	movs	r2, #156	; 0x9c
 801c08a:	2100      	movs	r1, #0
 801c08c:	68f8      	ldr	r0, [r7, #12]
 801c08e:	f007 fefb 	bl	8023e88 <memset>
    pcb->prio = prio;
 801c092:	68fb      	ldr	r3, [r7, #12]
 801c094:	79fa      	ldrb	r2, [r7, #7]
 801c096:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801c098:	68fb      	ldr	r3, [r7, #12]
 801c09a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801c09e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801c0a2:	68fb      	ldr	r3, [r7, #12]
 801c0a4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801c0a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 801c0aa:	68fb      	ldr	r3, [r7, #12]
 801c0ac:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801c0ae:	68fb      	ldr	r3, [r7, #12]
 801c0b0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801c0b2:	68fb      	ldr	r3, [r7, #12]
 801c0b4:	22ff      	movs	r2, #255	; 0xff
 801c0b6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801c0b8:	68fb      	ldr	r3, [r7, #12]
 801c0ba:	f44f 7206 	mov.w	r2, #536	; 0x218
 801c0be:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801c0c0:	68fb      	ldr	r3, [r7, #12]
 801c0c2:	2206      	movs	r2, #6
 801c0c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801c0c8:	68fb      	ldr	r3, [r7, #12]
 801c0ca:	2206      	movs	r2, #6
 801c0cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801c0ce:	68fb      	ldr	r3, [r7, #12]
 801c0d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c0d4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801c0d6:	68fb      	ldr	r3, [r7, #12]
 801c0d8:	2201      	movs	r2, #1
 801c0da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801c0de:	4b0d      	ldr	r3, [pc, #52]	; (801c114 <tcp_alloc+0xf8>)
 801c0e0:	681a      	ldr	r2, [r3, #0]
 801c0e2:	68fb      	ldr	r3, [r7, #12]
 801c0e4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801c0e6:	4b0c      	ldr	r3, [pc, #48]	; (801c118 <tcp_alloc+0xfc>)
 801c0e8:	781a      	ldrb	r2, [r3, #0]
 801c0ea:	68fb      	ldr	r3, [r7, #12]
 801c0ec:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801c0ee:	68fb      	ldr	r3, [r7, #12]
 801c0f0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801c0f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801c0f8:	68fb      	ldr	r3, [r7, #12]
 801c0fa:	4a08      	ldr	r2, [pc, #32]	; (801c11c <tcp_alloc+0x100>)
 801c0fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801c100:	68fb      	ldr	r3, [r7, #12]
 801c102:	4a07      	ldr	r2, [pc, #28]	; (801c120 <tcp_alloc+0x104>)
 801c104:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801c108:	68fb      	ldr	r3, [r7, #12]
}
 801c10a:	4618      	mov	r0, r3
 801c10c:	3710      	adds	r7, #16
 801c10e:	46bd      	mov	sp, r7
 801c110:	bd80      	pop	{r7, pc}
 801c112:	bf00      	nop
 801c114:	20011820 	.word	0x20011820
 801c118:	20008a6a 	.word	0x20008a6a
 801c11c:	0801bdd5 	.word	0x0801bdd5
 801c120:	006ddd00 	.word	0x006ddd00

0801c124 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801c124:	b580      	push	{r7, lr}
 801c126:	b084      	sub	sp, #16
 801c128:	af00      	add	r7, sp, #0
 801c12a:	4603      	mov	r3, r0
 801c12c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801c12e:	2040      	movs	r0, #64	; 0x40
 801c130:	f7ff ff74 	bl	801c01c <tcp_alloc>
 801c134:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801c136:	68fb      	ldr	r3, [r7, #12]
}
 801c138:	4618      	mov	r0, r3
 801c13a:	3710      	adds	r7, #16
 801c13c:	46bd      	mov	sp, r7
 801c13e:	bd80      	pop	{r7, pc}

0801c140 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801c140:	b480      	push	{r7}
 801c142:	b083      	sub	sp, #12
 801c144:	af00      	add	r7, sp, #0
 801c146:	6078      	str	r0, [r7, #4]
 801c148:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801c14a:	687b      	ldr	r3, [r7, #4]
 801c14c:	2b00      	cmp	r3, #0
 801c14e:	d002      	beq.n	801c156 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	683a      	ldr	r2, [r7, #0]
 801c154:	611a      	str	r2, [r3, #16]
  }
}
 801c156:	bf00      	nop
 801c158:	370c      	adds	r7, #12
 801c15a:	46bd      	mov	sp, r7
 801c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c160:	4770      	bx	lr
	...

0801c164 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801c164:	b580      	push	{r7, lr}
 801c166:	b082      	sub	sp, #8
 801c168:	af00      	add	r7, sp, #0
 801c16a:	6078      	str	r0, [r7, #4]
 801c16c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801c16e:	687b      	ldr	r3, [r7, #4]
 801c170:	2b00      	cmp	r3, #0
 801c172:	d00e      	beq.n	801c192 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801c174:	687b      	ldr	r3, [r7, #4]
 801c176:	7d1b      	ldrb	r3, [r3, #20]
 801c178:	2b01      	cmp	r3, #1
 801c17a:	d106      	bne.n	801c18a <tcp_recv+0x26>
 801c17c:	4b07      	ldr	r3, [pc, #28]	; (801c19c <tcp_recv+0x38>)
 801c17e:	f240 72df 	movw	r2, #2015	; 0x7df
 801c182:	4907      	ldr	r1, [pc, #28]	; (801c1a0 <tcp_recv+0x3c>)
 801c184:	4807      	ldr	r0, [pc, #28]	; (801c1a4 <tcp_recv+0x40>)
 801c186:	f007 ff2f 	bl	8023fe8 <iprintf>
    pcb->recv = recv;
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	683a      	ldr	r2, [r7, #0]
 801c18e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801c192:	bf00      	nop
 801c194:	3708      	adds	r7, #8
 801c196:	46bd      	mov	sp, r7
 801c198:	bd80      	pop	{r7, pc}
 801c19a:	bf00      	nop
 801c19c:	08026fd4 	.word	0x08026fd4
 801c1a0:	0802758c 	.word	0x0802758c
 801c1a4:	08027034 	.word	0x08027034

0801c1a8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801c1a8:	b580      	push	{r7, lr}
 801c1aa:	b082      	sub	sp, #8
 801c1ac:	af00      	add	r7, sp, #0
 801c1ae:	6078      	str	r0, [r7, #4]
 801c1b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	d00e      	beq.n	801c1d6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	7d1b      	ldrb	r3, [r3, #20]
 801c1bc:	2b01      	cmp	r3, #1
 801c1be:	d106      	bne.n	801c1ce <tcp_sent+0x26>
 801c1c0:	4b07      	ldr	r3, [pc, #28]	; (801c1e0 <tcp_sent+0x38>)
 801c1c2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801c1c6:	4907      	ldr	r1, [pc, #28]	; (801c1e4 <tcp_sent+0x3c>)
 801c1c8:	4807      	ldr	r0, [pc, #28]	; (801c1e8 <tcp_sent+0x40>)
 801c1ca:	f007 ff0d 	bl	8023fe8 <iprintf>
    pcb->sent = sent;
 801c1ce:	687b      	ldr	r3, [r7, #4]
 801c1d0:	683a      	ldr	r2, [r7, #0]
 801c1d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801c1d6:	bf00      	nop
 801c1d8:	3708      	adds	r7, #8
 801c1da:	46bd      	mov	sp, r7
 801c1dc:	bd80      	pop	{r7, pc}
 801c1de:	bf00      	nop
 801c1e0:	08026fd4 	.word	0x08026fd4
 801c1e4:	080275b4 	.word	0x080275b4
 801c1e8:	08027034 	.word	0x08027034

0801c1ec <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801c1ec:	b580      	push	{r7, lr}
 801c1ee:	b082      	sub	sp, #8
 801c1f0:	af00      	add	r7, sp, #0
 801c1f2:	6078      	str	r0, [r7, #4]
 801c1f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801c1f6:	687b      	ldr	r3, [r7, #4]
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	d00e      	beq.n	801c21a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	7d1b      	ldrb	r3, [r3, #20]
 801c200:	2b01      	cmp	r3, #1
 801c202:	d106      	bne.n	801c212 <tcp_err+0x26>
 801c204:	4b07      	ldr	r3, [pc, #28]	; (801c224 <tcp_err+0x38>)
 801c206:	f640 020d 	movw	r2, #2061	; 0x80d
 801c20a:	4907      	ldr	r1, [pc, #28]	; (801c228 <tcp_err+0x3c>)
 801c20c:	4807      	ldr	r0, [pc, #28]	; (801c22c <tcp_err+0x40>)
 801c20e:	f007 feeb 	bl	8023fe8 <iprintf>
    pcb->errf = err;
 801c212:	687b      	ldr	r3, [r7, #4]
 801c214:	683a      	ldr	r2, [r7, #0]
 801c216:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801c21a:	bf00      	nop
 801c21c:	3708      	adds	r7, #8
 801c21e:	46bd      	mov	sp, r7
 801c220:	bd80      	pop	{r7, pc}
 801c222:	bf00      	nop
 801c224:	08026fd4 	.word	0x08026fd4
 801c228:	080275dc 	.word	0x080275dc
 801c22c:	08027034 	.word	0x08027034

0801c230 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801c230:	b480      	push	{r7}
 801c232:	b085      	sub	sp, #20
 801c234:	af00      	add	r7, sp, #0
 801c236:	6078      	str	r0, [r7, #4]
 801c238:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	2b00      	cmp	r3, #0
 801c23e:	d008      	beq.n	801c252 <tcp_accept+0x22>
 801c240:	687b      	ldr	r3, [r7, #4]
 801c242:	7d1b      	ldrb	r3, [r3, #20]
 801c244:	2b01      	cmp	r3, #1
 801c246:	d104      	bne.n	801c252 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801c248:	687b      	ldr	r3, [r7, #4]
 801c24a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801c24c:	68fb      	ldr	r3, [r7, #12]
 801c24e:	683a      	ldr	r2, [r7, #0]
 801c250:	619a      	str	r2, [r3, #24]
  }
}
 801c252:	bf00      	nop
 801c254:	3714      	adds	r7, #20
 801c256:	46bd      	mov	sp, r7
 801c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c25c:	4770      	bx	lr
	...

0801c260 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801c260:	b580      	push	{r7, lr}
 801c262:	b084      	sub	sp, #16
 801c264:	af00      	add	r7, sp, #0
 801c266:	60f8      	str	r0, [r7, #12]
 801c268:	60b9      	str	r1, [r7, #8]
 801c26a:	4613      	mov	r3, r2
 801c26c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801c26e:	68fb      	ldr	r3, [r7, #12]
 801c270:	2b00      	cmp	r3, #0
 801c272:	d107      	bne.n	801c284 <tcp_poll+0x24>
 801c274:	4b0e      	ldr	r3, [pc, #56]	; (801c2b0 <tcp_poll+0x50>)
 801c276:	f640 023d 	movw	r2, #2109	; 0x83d
 801c27a:	490e      	ldr	r1, [pc, #56]	; (801c2b4 <tcp_poll+0x54>)
 801c27c:	480e      	ldr	r0, [pc, #56]	; (801c2b8 <tcp_poll+0x58>)
 801c27e:	f007 feb3 	bl	8023fe8 <iprintf>
 801c282:	e011      	b.n	801c2a8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801c284:	68fb      	ldr	r3, [r7, #12]
 801c286:	7d1b      	ldrb	r3, [r3, #20]
 801c288:	2b01      	cmp	r3, #1
 801c28a:	d106      	bne.n	801c29a <tcp_poll+0x3a>
 801c28c:	4b08      	ldr	r3, [pc, #32]	; (801c2b0 <tcp_poll+0x50>)
 801c28e:	f640 023e 	movw	r2, #2110	; 0x83e
 801c292:	490a      	ldr	r1, [pc, #40]	; (801c2bc <tcp_poll+0x5c>)
 801c294:	4808      	ldr	r0, [pc, #32]	; (801c2b8 <tcp_poll+0x58>)
 801c296:	f007 fea7 	bl	8023fe8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801c29a:	68fb      	ldr	r3, [r7, #12]
 801c29c:	68ba      	ldr	r2, [r7, #8]
 801c29e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801c2a2:	68fb      	ldr	r3, [r7, #12]
 801c2a4:	79fa      	ldrb	r2, [r7, #7]
 801c2a6:	775a      	strb	r2, [r3, #29]
}
 801c2a8:	3710      	adds	r7, #16
 801c2aa:	46bd      	mov	sp, r7
 801c2ac:	bd80      	pop	{r7, pc}
 801c2ae:	bf00      	nop
 801c2b0:	08026fd4 	.word	0x08026fd4
 801c2b4:	08027604 	.word	0x08027604
 801c2b8:	08027034 	.word	0x08027034
 801c2bc:	0802761c 	.word	0x0802761c

0801c2c0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801c2c0:	b580      	push	{r7, lr}
 801c2c2:	b082      	sub	sp, #8
 801c2c4:	af00      	add	r7, sp, #0
 801c2c6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	2b00      	cmp	r3, #0
 801c2cc:	d107      	bne.n	801c2de <tcp_pcb_purge+0x1e>
 801c2ce:	4b21      	ldr	r3, [pc, #132]	; (801c354 <tcp_pcb_purge+0x94>)
 801c2d0:	f640 0251 	movw	r2, #2129	; 0x851
 801c2d4:	4920      	ldr	r1, [pc, #128]	; (801c358 <tcp_pcb_purge+0x98>)
 801c2d6:	4821      	ldr	r0, [pc, #132]	; (801c35c <tcp_pcb_purge+0x9c>)
 801c2d8:	f007 fe86 	bl	8023fe8 <iprintf>
 801c2dc:	e037      	b.n	801c34e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801c2de:	687b      	ldr	r3, [r7, #4]
 801c2e0:	7d1b      	ldrb	r3, [r3, #20]
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	d033      	beq.n	801c34e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801c2ea:	2b0a      	cmp	r3, #10
 801c2ec:	d02f      	beq.n	801c34e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801c2ee:	687b      	ldr	r3, [r7, #4]
 801c2f0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801c2f2:	2b01      	cmp	r3, #1
 801c2f4:	d02b      	beq.n	801c34e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801c2f6:	687b      	ldr	r3, [r7, #4]
 801c2f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	d007      	beq.n	801c30e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c302:	4618      	mov	r0, r3
 801c304:	f7fd fd60 	bl	8019dc8 <pbuf_free>
      pcb->refused_data = NULL;
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	2200      	movs	r2, #0
 801c30c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801c30e:	687b      	ldr	r3, [r7, #4]
 801c310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c312:	2b00      	cmp	r3, #0
 801c314:	d002      	beq.n	801c31c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801c316:	6878      	ldr	r0, [r7, #4]
 801c318:	f000 f986 	bl	801c628 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801c31c:	687b      	ldr	r3, [r7, #4]
 801c31e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c322:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801c324:	687b      	ldr	r3, [r7, #4]
 801c326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c328:	4618      	mov	r0, r3
 801c32a:	f7ff fcfb 	bl	801bd24 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c332:	4618      	mov	r0, r3
 801c334:	f7ff fcf6 	bl	801bd24 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801c338:	687b      	ldr	r3, [r7, #4]
 801c33a:	2200      	movs	r2, #0
 801c33c:	66da      	str	r2, [r3, #108]	; 0x6c
 801c33e:	687b      	ldr	r3, [r7, #4]
 801c340:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	2200      	movs	r2, #0
 801c34a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801c34e:	3708      	adds	r7, #8
 801c350:	46bd      	mov	sp, r7
 801c352:	bd80      	pop	{r7, pc}
 801c354:	08026fd4 	.word	0x08026fd4
 801c358:	0802763c 	.word	0x0802763c
 801c35c:	08027034 	.word	0x08027034

0801c360 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801c360:	b580      	push	{r7, lr}
 801c362:	b084      	sub	sp, #16
 801c364:	af00      	add	r7, sp, #0
 801c366:	6078      	str	r0, [r7, #4]
 801c368:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801c36a:	683b      	ldr	r3, [r7, #0]
 801c36c:	2b00      	cmp	r3, #0
 801c36e:	d106      	bne.n	801c37e <tcp_pcb_remove+0x1e>
 801c370:	4b3e      	ldr	r3, [pc, #248]	; (801c46c <tcp_pcb_remove+0x10c>)
 801c372:	f640 0283 	movw	r2, #2179	; 0x883
 801c376:	493e      	ldr	r1, [pc, #248]	; (801c470 <tcp_pcb_remove+0x110>)
 801c378:	483e      	ldr	r0, [pc, #248]	; (801c474 <tcp_pcb_remove+0x114>)
 801c37a:	f007 fe35 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801c37e:	687b      	ldr	r3, [r7, #4]
 801c380:	2b00      	cmp	r3, #0
 801c382:	d106      	bne.n	801c392 <tcp_pcb_remove+0x32>
 801c384:	4b39      	ldr	r3, [pc, #228]	; (801c46c <tcp_pcb_remove+0x10c>)
 801c386:	f640 0284 	movw	r2, #2180	; 0x884
 801c38a:	493b      	ldr	r1, [pc, #236]	; (801c478 <tcp_pcb_remove+0x118>)
 801c38c:	4839      	ldr	r0, [pc, #228]	; (801c474 <tcp_pcb_remove+0x114>)
 801c38e:	f007 fe2b 	bl	8023fe8 <iprintf>

  TCP_RMV(pcblist, pcb);
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	681b      	ldr	r3, [r3, #0]
 801c396:	683a      	ldr	r2, [r7, #0]
 801c398:	429a      	cmp	r2, r3
 801c39a:	d105      	bne.n	801c3a8 <tcp_pcb_remove+0x48>
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	681b      	ldr	r3, [r3, #0]
 801c3a0:	68da      	ldr	r2, [r3, #12]
 801c3a2:	687b      	ldr	r3, [r7, #4]
 801c3a4:	601a      	str	r2, [r3, #0]
 801c3a6:	e013      	b.n	801c3d0 <tcp_pcb_remove+0x70>
 801c3a8:	687b      	ldr	r3, [r7, #4]
 801c3aa:	681b      	ldr	r3, [r3, #0]
 801c3ac:	60fb      	str	r3, [r7, #12]
 801c3ae:	e00c      	b.n	801c3ca <tcp_pcb_remove+0x6a>
 801c3b0:	68fb      	ldr	r3, [r7, #12]
 801c3b2:	68db      	ldr	r3, [r3, #12]
 801c3b4:	683a      	ldr	r2, [r7, #0]
 801c3b6:	429a      	cmp	r2, r3
 801c3b8:	d104      	bne.n	801c3c4 <tcp_pcb_remove+0x64>
 801c3ba:	683b      	ldr	r3, [r7, #0]
 801c3bc:	68da      	ldr	r2, [r3, #12]
 801c3be:	68fb      	ldr	r3, [r7, #12]
 801c3c0:	60da      	str	r2, [r3, #12]
 801c3c2:	e005      	b.n	801c3d0 <tcp_pcb_remove+0x70>
 801c3c4:	68fb      	ldr	r3, [r7, #12]
 801c3c6:	68db      	ldr	r3, [r3, #12]
 801c3c8:	60fb      	str	r3, [r7, #12]
 801c3ca:	68fb      	ldr	r3, [r7, #12]
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d1ef      	bne.n	801c3b0 <tcp_pcb_remove+0x50>
 801c3d0:	683b      	ldr	r3, [r7, #0]
 801c3d2:	2200      	movs	r2, #0
 801c3d4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801c3d6:	6838      	ldr	r0, [r7, #0]
 801c3d8:	f7ff ff72 	bl	801c2c0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801c3dc:	683b      	ldr	r3, [r7, #0]
 801c3de:	7d1b      	ldrb	r3, [r3, #20]
 801c3e0:	2b0a      	cmp	r3, #10
 801c3e2:	d013      	beq.n	801c40c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801c3e4:	683b      	ldr	r3, [r7, #0]
 801c3e6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801c3e8:	2b01      	cmp	r3, #1
 801c3ea:	d00f      	beq.n	801c40c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801c3ec:	683b      	ldr	r3, [r7, #0]
 801c3ee:	8b5b      	ldrh	r3, [r3, #26]
 801c3f0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801c3f4:	2b00      	cmp	r3, #0
 801c3f6:	d009      	beq.n	801c40c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801c3f8:	683b      	ldr	r3, [r7, #0]
 801c3fa:	8b5b      	ldrh	r3, [r3, #26]
 801c3fc:	f043 0302 	orr.w	r3, r3, #2
 801c400:	b29a      	uxth	r2, r3
 801c402:	683b      	ldr	r3, [r7, #0]
 801c404:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801c406:	6838      	ldr	r0, [r7, #0]
 801c408:	f003 fbc2 	bl	801fb90 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801c40c:	683b      	ldr	r3, [r7, #0]
 801c40e:	7d1b      	ldrb	r3, [r3, #20]
 801c410:	2b01      	cmp	r3, #1
 801c412:	d020      	beq.n	801c456 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801c414:	683b      	ldr	r3, [r7, #0]
 801c416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d006      	beq.n	801c42a <tcp_pcb_remove+0xca>
 801c41c:	4b13      	ldr	r3, [pc, #76]	; (801c46c <tcp_pcb_remove+0x10c>)
 801c41e:	f640 0293 	movw	r2, #2195	; 0x893
 801c422:	4916      	ldr	r1, [pc, #88]	; (801c47c <tcp_pcb_remove+0x11c>)
 801c424:	4813      	ldr	r0, [pc, #76]	; (801c474 <tcp_pcb_remove+0x114>)
 801c426:	f007 fddf 	bl	8023fe8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801c42a:	683b      	ldr	r3, [r7, #0]
 801c42c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c42e:	2b00      	cmp	r3, #0
 801c430:	d006      	beq.n	801c440 <tcp_pcb_remove+0xe0>
 801c432:	4b0e      	ldr	r3, [pc, #56]	; (801c46c <tcp_pcb_remove+0x10c>)
 801c434:	f640 0294 	movw	r2, #2196	; 0x894
 801c438:	4911      	ldr	r1, [pc, #68]	; (801c480 <tcp_pcb_remove+0x120>)
 801c43a:	480e      	ldr	r0, [pc, #56]	; (801c474 <tcp_pcb_remove+0x114>)
 801c43c:	f007 fdd4 	bl	8023fe8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801c440:	683b      	ldr	r3, [r7, #0]
 801c442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c444:	2b00      	cmp	r3, #0
 801c446:	d006      	beq.n	801c456 <tcp_pcb_remove+0xf6>
 801c448:	4b08      	ldr	r3, [pc, #32]	; (801c46c <tcp_pcb_remove+0x10c>)
 801c44a:	f640 0296 	movw	r2, #2198	; 0x896
 801c44e:	490d      	ldr	r1, [pc, #52]	; (801c484 <tcp_pcb_remove+0x124>)
 801c450:	4808      	ldr	r0, [pc, #32]	; (801c474 <tcp_pcb_remove+0x114>)
 801c452:	f007 fdc9 	bl	8023fe8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801c456:	683b      	ldr	r3, [r7, #0]
 801c458:	2200      	movs	r2, #0
 801c45a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801c45c:	683b      	ldr	r3, [r7, #0]
 801c45e:	2200      	movs	r2, #0
 801c460:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801c462:	bf00      	nop
 801c464:	3710      	adds	r7, #16
 801c466:	46bd      	mov	sp, r7
 801c468:	bd80      	pop	{r7, pc}
 801c46a:	bf00      	nop
 801c46c:	08026fd4 	.word	0x08026fd4
 801c470:	08027658 	.word	0x08027658
 801c474:	08027034 	.word	0x08027034
 801c478:	08027674 	.word	0x08027674
 801c47c:	08027694 	.word	0x08027694
 801c480:	080276ac 	.word	0x080276ac
 801c484:	080276c8 	.word	0x080276c8

0801c488 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801c488:	b580      	push	{r7, lr}
 801c48a:	b082      	sub	sp, #8
 801c48c:	af00      	add	r7, sp, #0
 801c48e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801c490:	687b      	ldr	r3, [r7, #4]
 801c492:	2b00      	cmp	r3, #0
 801c494:	d106      	bne.n	801c4a4 <tcp_next_iss+0x1c>
 801c496:	4b0a      	ldr	r3, [pc, #40]	; (801c4c0 <tcp_next_iss+0x38>)
 801c498:	f640 02af 	movw	r2, #2223	; 0x8af
 801c49c:	4909      	ldr	r1, [pc, #36]	; (801c4c4 <tcp_next_iss+0x3c>)
 801c49e:	480a      	ldr	r0, [pc, #40]	; (801c4c8 <tcp_next_iss+0x40>)
 801c4a0:	f007 fda2 	bl	8023fe8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801c4a4:	4b09      	ldr	r3, [pc, #36]	; (801c4cc <tcp_next_iss+0x44>)
 801c4a6:	681a      	ldr	r2, [r3, #0]
 801c4a8:	4b09      	ldr	r3, [pc, #36]	; (801c4d0 <tcp_next_iss+0x48>)
 801c4aa:	681b      	ldr	r3, [r3, #0]
 801c4ac:	4413      	add	r3, r2
 801c4ae:	4a07      	ldr	r2, [pc, #28]	; (801c4cc <tcp_next_iss+0x44>)
 801c4b0:	6013      	str	r3, [r2, #0]
  return iss;
 801c4b2:	4b06      	ldr	r3, [pc, #24]	; (801c4cc <tcp_next_iss+0x44>)
 801c4b4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801c4b6:	4618      	mov	r0, r3
 801c4b8:	3708      	adds	r7, #8
 801c4ba:	46bd      	mov	sp, r7
 801c4bc:	bd80      	pop	{r7, pc}
 801c4be:	bf00      	nop
 801c4c0:	08026fd4 	.word	0x08026fd4
 801c4c4:	080276e0 	.word	0x080276e0
 801c4c8:	08027034 	.word	0x08027034
 801c4cc:	2000001c 	.word	0x2000001c
 801c4d0:	20011820 	.word	0x20011820

0801c4d4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801c4d4:	b580      	push	{r7, lr}
 801c4d6:	b086      	sub	sp, #24
 801c4d8:	af00      	add	r7, sp, #0
 801c4da:	4603      	mov	r3, r0
 801c4dc:	60b9      	str	r1, [r7, #8]
 801c4de:	607a      	str	r2, [r7, #4]
 801c4e0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	d106      	bne.n	801c4f6 <tcp_eff_send_mss_netif+0x22>
 801c4e8:	4b14      	ldr	r3, [pc, #80]	; (801c53c <tcp_eff_send_mss_netif+0x68>)
 801c4ea:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801c4ee:	4914      	ldr	r1, [pc, #80]	; (801c540 <tcp_eff_send_mss_netif+0x6c>)
 801c4f0:	4814      	ldr	r0, [pc, #80]	; (801c544 <tcp_eff_send_mss_netif+0x70>)
 801c4f2:	f007 fd79 	bl	8023fe8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801c4f6:	68bb      	ldr	r3, [r7, #8]
 801c4f8:	2b00      	cmp	r3, #0
 801c4fa:	d101      	bne.n	801c500 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801c4fc:	89fb      	ldrh	r3, [r7, #14]
 801c4fe:	e019      	b.n	801c534 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801c500:	68bb      	ldr	r3, [r7, #8]
 801c502:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801c504:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801c506:	8afb      	ldrh	r3, [r7, #22]
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d012      	beq.n	801c532 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801c50c:	2328      	movs	r3, #40	; 0x28
 801c50e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801c510:	8afa      	ldrh	r2, [r7, #22]
 801c512:	8abb      	ldrh	r3, [r7, #20]
 801c514:	429a      	cmp	r2, r3
 801c516:	d904      	bls.n	801c522 <tcp_eff_send_mss_netif+0x4e>
 801c518:	8afa      	ldrh	r2, [r7, #22]
 801c51a:	8abb      	ldrh	r3, [r7, #20]
 801c51c:	1ad3      	subs	r3, r2, r3
 801c51e:	b29b      	uxth	r3, r3
 801c520:	e000      	b.n	801c524 <tcp_eff_send_mss_netif+0x50>
 801c522:	2300      	movs	r3, #0
 801c524:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801c526:	8a7a      	ldrh	r2, [r7, #18]
 801c528:	89fb      	ldrh	r3, [r7, #14]
 801c52a:	4293      	cmp	r3, r2
 801c52c:	bf28      	it	cs
 801c52e:	4613      	movcs	r3, r2
 801c530:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801c532:	89fb      	ldrh	r3, [r7, #14]
}
 801c534:	4618      	mov	r0, r3
 801c536:	3718      	adds	r7, #24
 801c538:	46bd      	mov	sp, r7
 801c53a:	bd80      	pop	{r7, pc}
 801c53c:	08026fd4 	.word	0x08026fd4
 801c540:	080276fc 	.word	0x080276fc
 801c544:	08027034 	.word	0x08027034

0801c548 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801c548:	b580      	push	{r7, lr}
 801c54a:	b084      	sub	sp, #16
 801c54c:	af00      	add	r7, sp, #0
 801c54e:	6078      	str	r0, [r7, #4]
 801c550:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801c552:	683b      	ldr	r3, [r7, #0]
 801c554:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	2b00      	cmp	r3, #0
 801c55a:	d119      	bne.n	801c590 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801c55c:	4b10      	ldr	r3, [pc, #64]	; (801c5a0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801c55e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801c562:	4910      	ldr	r1, [pc, #64]	; (801c5a4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801c564:	4810      	ldr	r0, [pc, #64]	; (801c5a8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801c566:	f007 fd3f 	bl	8023fe8 <iprintf>

  while (pcb != NULL) {
 801c56a:	e011      	b.n	801c590 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801c56c:	68fb      	ldr	r3, [r7, #12]
 801c56e:	681a      	ldr	r2, [r3, #0]
 801c570:	687b      	ldr	r3, [r7, #4]
 801c572:	681b      	ldr	r3, [r3, #0]
 801c574:	429a      	cmp	r2, r3
 801c576:	d108      	bne.n	801c58a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801c578:	68fb      	ldr	r3, [r7, #12]
 801c57a:	68db      	ldr	r3, [r3, #12]
 801c57c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801c57e:	68f8      	ldr	r0, [r7, #12]
 801c580:	f7fe fd54 	bl	801b02c <tcp_abort>
      pcb = next;
 801c584:	68bb      	ldr	r3, [r7, #8]
 801c586:	60fb      	str	r3, [r7, #12]
 801c588:	e002      	b.n	801c590 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801c58a:	68fb      	ldr	r3, [r7, #12]
 801c58c:	68db      	ldr	r3, [r3, #12]
 801c58e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801c590:	68fb      	ldr	r3, [r7, #12]
 801c592:	2b00      	cmp	r3, #0
 801c594:	d1ea      	bne.n	801c56c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801c596:	bf00      	nop
 801c598:	3710      	adds	r7, #16
 801c59a:	46bd      	mov	sp, r7
 801c59c:	bd80      	pop	{r7, pc}
 801c59e:	bf00      	nop
 801c5a0:	08026fd4 	.word	0x08026fd4
 801c5a4:	08027724 	.word	0x08027724
 801c5a8:	08027034 	.word	0x08027034

0801c5ac <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801c5ac:	b580      	push	{r7, lr}
 801c5ae:	b084      	sub	sp, #16
 801c5b0:	af00      	add	r7, sp, #0
 801c5b2:	6078      	str	r0, [r7, #4]
 801c5b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801c5b6:	687b      	ldr	r3, [r7, #4]
 801c5b8:	2b00      	cmp	r3, #0
 801c5ba:	d02a      	beq.n	801c612 <tcp_netif_ip_addr_changed+0x66>
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	681b      	ldr	r3, [r3, #0]
 801c5c0:	2b00      	cmp	r3, #0
 801c5c2:	d026      	beq.n	801c612 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801c5c4:	4b15      	ldr	r3, [pc, #84]	; (801c61c <tcp_netif_ip_addr_changed+0x70>)
 801c5c6:	681b      	ldr	r3, [r3, #0]
 801c5c8:	4619      	mov	r1, r3
 801c5ca:	6878      	ldr	r0, [r7, #4]
 801c5cc:	f7ff ffbc 	bl	801c548 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801c5d0:	4b13      	ldr	r3, [pc, #76]	; (801c620 <tcp_netif_ip_addr_changed+0x74>)
 801c5d2:	681b      	ldr	r3, [r3, #0]
 801c5d4:	4619      	mov	r1, r3
 801c5d6:	6878      	ldr	r0, [r7, #4]
 801c5d8:	f7ff ffb6 	bl	801c548 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801c5dc:	683b      	ldr	r3, [r7, #0]
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	d017      	beq.n	801c612 <tcp_netif_ip_addr_changed+0x66>
 801c5e2:	683b      	ldr	r3, [r7, #0]
 801c5e4:	681b      	ldr	r3, [r3, #0]
 801c5e6:	2b00      	cmp	r3, #0
 801c5e8:	d013      	beq.n	801c612 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c5ea:	4b0e      	ldr	r3, [pc, #56]	; (801c624 <tcp_netif_ip_addr_changed+0x78>)
 801c5ec:	681b      	ldr	r3, [r3, #0]
 801c5ee:	60fb      	str	r3, [r7, #12]
 801c5f0:	e00c      	b.n	801c60c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801c5f2:	68fb      	ldr	r3, [r7, #12]
 801c5f4:	681a      	ldr	r2, [r3, #0]
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	681b      	ldr	r3, [r3, #0]
 801c5fa:	429a      	cmp	r2, r3
 801c5fc:	d103      	bne.n	801c606 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801c5fe:	683b      	ldr	r3, [r7, #0]
 801c600:	681a      	ldr	r2, [r3, #0]
 801c602:	68fb      	ldr	r3, [r7, #12]
 801c604:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c606:	68fb      	ldr	r3, [r7, #12]
 801c608:	68db      	ldr	r3, [r3, #12]
 801c60a:	60fb      	str	r3, [r7, #12]
 801c60c:	68fb      	ldr	r3, [r7, #12]
 801c60e:	2b00      	cmp	r3, #0
 801c610:	d1ef      	bne.n	801c5f2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801c612:	bf00      	nop
 801c614:	3710      	adds	r7, #16
 801c616:	46bd      	mov	sp, r7
 801c618:	bd80      	pop	{r7, pc}
 801c61a:	bf00      	nop
 801c61c:	2001181c 	.word	0x2001181c
 801c620:	20011828 	.word	0x20011828
 801c624:	20011824 	.word	0x20011824

0801c628 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801c628:	b580      	push	{r7, lr}
 801c62a:	b082      	sub	sp, #8
 801c62c:	af00      	add	r7, sp, #0
 801c62e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c634:	2b00      	cmp	r3, #0
 801c636:	d007      	beq.n	801c648 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c63c:	4618      	mov	r0, r3
 801c63e:	f7ff fb71 	bl	801bd24 <tcp_segs_free>
    pcb->ooseq = NULL;
 801c642:	687b      	ldr	r3, [r7, #4]
 801c644:	2200      	movs	r2, #0
 801c646:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801c648:	bf00      	nop
 801c64a:	3708      	adds	r7, #8
 801c64c:	46bd      	mov	sp, r7
 801c64e:	bd80      	pop	{r7, pc}

0801c650 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801c650:	b590      	push	{r4, r7, lr}
 801c652:	b08d      	sub	sp, #52	; 0x34
 801c654:	af04      	add	r7, sp, #16
 801c656:	6078      	str	r0, [r7, #4]
 801c658:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	d105      	bne.n	801c66c <tcp_input+0x1c>
 801c660:	4b9b      	ldr	r3, [pc, #620]	; (801c8d0 <tcp_input+0x280>)
 801c662:	2283      	movs	r2, #131	; 0x83
 801c664:	499b      	ldr	r1, [pc, #620]	; (801c8d4 <tcp_input+0x284>)
 801c666:	489c      	ldr	r0, [pc, #624]	; (801c8d8 <tcp_input+0x288>)
 801c668:	f007 fcbe 	bl	8023fe8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801c66c:	687b      	ldr	r3, [r7, #4]
 801c66e:	685b      	ldr	r3, [r3, #4]
 801c670:	4a9a      	ldr	r2, [pc, #616]	; (801c8dc <tcp_input+0x28c>)
 801c672:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801c674:	687b      	ldr	r3, [r7, #4]
 801c676:	895b      	ldrh	r3, [r3, #10]
 801c678:	2b13      	cmp	r3, #19
 801c67a:	f240 83c4 	bls.w	801ce06 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801c67e:	4b98      	ldr	r3, [pc, #608]	; (801c8e0 <tcp_input+0x290>)
 801c680:	695a      	ldr	r2, [r3, #20]
 801c682:	4b97      	ldr	r3, [pc, #604]	; (801c8e0 <tcp_input+0x290>)
 801c684:	681b      	ldr	r3, [r3, #0]
 801c686:	4619      	mov	r1, r3
 801c688:	4610      	mov	r0, r2
 801c68a:	f7fb f9cd 	bl	8017a28 <ip4_addr_isbroadcast_u32>
 801c68e:	4603      	mov	r3, r0
 801c690:	2b00      	cmp	r3, #0
 801c692:	f040 83ba 	bne.w	801ce0a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801c696:	4b92      	ldr	r3, [pc, #584]	; (801c8e0 <tcp_input+0x290>)
 801c698:	695b      	ldr	r3, [r3, #20]
 801c69a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801c69e:	2be0      	cmp	r3, #224	; 0xe0
 801c6a0:	f000 83b3 	beq.w	801ce0a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801c6a4:	4b8d      	ldr	r3, [pc, #564]	; (801c8dc <tcp_input+0x28c>)
 801c6a6:	681b      	ldr	r3, [r3, #0]
 801c6a8:	899b      	ldrh	r3, [r3, #12]
 801c6aa:	b29b      	uxth	r3, r3
 801c6ac:	4618      	mov	r0, r3
 801c6ae:	f7f7 fb79 	bl	8013da4 <lwip_htons>
 801c6b2:	4603      	mov	r3, r0
 801c6b4:	0b1b      	lsrs	r3, r3, #12
 801c6b6:	b29b      	uxth	r3, r3
 801c6b8:	b2db      	uxtb	r3, r3
 801c6ba:	009b      	lsls	r3, r3, #2
 801c6bc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801c6be:	7cbb      	ldrb	r3, [r7, #18]
 801c6c0:	2b13      	cmp	r3, #19
 801c6c2:	f240 83a2 	bls.w	801ce0a <tcp_input+0x7ba>
 801c6c6:	7cbb      	ldrb	r3, [r7, #18]
 801c6c8:	b29a      	uxth	r2, r3
 801c6ca:	687b      	ldr	r3, [r7, #4]
 801c6cc:	891b      	ldrh	r3, [r3, #8]
 801c6ce:	429a      	cmp	r2, r3
 801c6d0:	f200 839b 	bhi.w	801ce0a <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801c6d4:	7cbb      	ldrb	r3, [r7, #18]
 801c6d6:	b29b      	uxth	r3, r3
 801c6d8:	3b14      	subs	r3, #20
 801c6da:	b29a      	uxth	r2, r3
 801c6dc:	4b81      	ldr	r3, [pc, #516]	; (801c8e4 <tcp_input+0x294>)
 801c6de:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801c6e0:	4b81      	ldr	r3, [pc, #516]	; (801c8e8 <tcp_input+0x298>)
 801c6e2:	2200      	movs	r2, #0
 801c6e4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801c6e6:	687b      	ldr	r3, [r7, #4]
 801c6e8:	895a      	ldrh	r2, [r3, #10]
 801c6ea:	7cbb      	ldrb	r3, [r7, #18]
 801c6ec:	b29b      	uxth	r3, r3
 801c6ee:	429a      	cmp	r2, r3
 801c6f0:	d309      	bcc.n	801c706 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801c6f2:	4b7c      	ldr	r3, [pc, #496]	; (801c8e4 <tcp_input+0x294>)
 801c6f4:	881a      	ldrh	r2, [r3, #0]
 801c6f6:	4b7d      	ldr	r3, [pc, #500]	; (801c8ec <tcp_input+0x29c>)
 801c6f8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801c6fa:	7cbb      	ldrb	r3, [r7, #18]
 801c6fc:	4619      	mov	r1, r3
 801c6fe:	6878      	ldr	r0, [r7, #4]
 801c700:	f7fd fadc 	bl	8019cbc <pbuf_remove_header>
 801c704:	e04e      	b.n	801c7a4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	681b      	ldr	r3, [r3, #0]
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	d105      	bne.n	801c71a <tcp_input+0xca>
 801c70e:	4b70      	ldr	r3, [pc, #448]	; (801c8d0 <tcp_input+0x280>)
 801c710:	22c2      	movs	r2, #194	; 0xc2
 801c712:	4977      	ldr	r1, [pc, #476]	; (801c8f0 <tcp_input+0x2a0>)
 801c714:	4870      	ldr	r0, [pc, #448]	; (801c8d8 <tcp_input+0x288>)
 801c716:	f007 fc67 	bl	8023fe8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801c71a:	2114      	movs	r1, #20
 801c71c:	6878      	ldr	r0, [r7, #4]
 801c71e:	f7fd facd 	bl	8019cbc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	895a      	ldrh	r2, [r3, #10]
 801c726:	4b71      	ldr	r3, [pc, #452]	; (801c8ec <tcp_input+0x29c>)
 801c728:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801c72a:	4b6e      	ldr	r3, [pc, #440]	; (801c8e4 <tcp_input+0x294>)
 801c72c:	881a      	ldrh	r2, [r3, #0]
 801c72e:	4b6f      	ldr	r3, [pc, #444]	; (801c8ec <tcp_input+0x29c>)
 801c730:	881b      	ldrh	r3, [r3, #0]
 801c732:	1ad3      	subs	r3, r2, r3
 801c734:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801c736:	4b6d      	ldr	r3, [pc, #436]	; (801c8ec <tcp_input+0x29c>)
 801c738:	881b      	ldrh	r3, [r3, #0]
 801c73a:	4619      	mov	r1, r3
 801c73c:	6878      	ldr	r0, [r7, #4]
 801c73e:	f7fd fabd 	bl	8019cbc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801c742:	687b      	ldr	r3, [r7, #4]
 801c744:	681b      	ldr	r3, [r3, #0]
 801c746:	895b      	ldrh	r3, [r3, #10]
 801c748:	8a3a      	ldrh	r2, [r7, #16]
 801c74a:	429a      	cmp	r2, r3
 801c74c:	f200 835f 	bhi.w	801ce0e <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801c750:	687b      	ldr	r3, [r7, #4]
 801c752:	681b      	ldr	r3, [r3, #0]
 801c754:	685b      	ldr	r3, [r3, #4]
 801c756:	4a64      	ldr	r2, [pc, #400]	; (801c8e8 <tcp_input+0x298>)
 801c758:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801c75a:	687b      	ldr	r3, [r7, #4]
 801c75c:	681b      	ldr	r3, [r3, #0]
 801c75e:	8a3a      	ldrh	r2, [r7, #16]
 801c760:	4611      	mov	r1, r2
 801c762:	4618      	mov	r0, r3
 801c764:	f7fd faaa 	bl	8019cbc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801c768:	687b      	ldr	r3, [r7, #4]
 801c76a:	891a      	ldrh	r2, [r3, #8]
 801c76c:	8a3b      	ldrh	r3, [r7, #16]
 801c76e:	1ad3      	subs	r3, r2, r3
 801c770:	b29a      	uxth	r2, r3
 801c772:	687b      	ldr	r3, [r7, #4]
 801c774:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801c776:	687b      	ldr	r3, [r7, #4]
 801c778:	895b      	ldrh	r3, [r3, #10]
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	d005      	beq.n	801c78a <tcp_input+0x13a>
 801c77e:	4b54      	ldr	r3, [pc, #336]	; (801c8d0 <tcp_input+0x280>)
 801c780:	22df      	movs	r2, #223	; 0xdf
 801c782:	495c      	ldr	r1, [pc, #368]	; (801c8f4 <tcp_input+0x2a4>)
 801c784:	4854      	ldr	r0, [pc, #336]	; (801c8d8 <tcp_input+0x288>)
 801c786:	f007 fc2f 	bl	8023fe8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801c78a:	687b      	ldr	r3, [r7, #4]
 801c78c:	891a      	ldrh	r2, [r3, #8]
 801c78e:	687b      	ldr	r3, [r7, #4]
 801c790:	681b      	ldr	r3, [r3, #0]
 801c792:	891b      	ldrh	r3, [r3, #8]
 801c794:	429a      	cmp	r2, r3
 801c796:	d005      	beq.n	801c7a4 <tcp_input+0x154>
 801c798:	4b4d      	ldr	r3, [pc, #308]	; (801c8d0 <tcp_input+0x280>)
 801c79a:	22e0      	movs	r2, #224	; 0xe0
 801c79c:	4956      	ldr	r1, [pc, #344]	; (801c8f8 <tcp_input+0x2a8>)
 801c79e:	484e      	ldr	r0, [pc, #312]	; (801c8d8 <tcp_input+0x288>)
 801c7a0:	f007 fc22 	bl	8023fe8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801c7a4:	4b4d      	ldr	r3, [pc, #308]	; (801c8dc <tcp_input+0x28c>)
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	881b      	ldrh	r3, [r3, #0]
 801c7aa:	b29a      	uxth	r2, r3
 801c7ac:	4b4b      	ldr	r3, [pc, #300]	; (801c8dc <tcp_input+0x28c>)
 801c7ae:	681c      	ldr	r4, [r3, #0]
 801c7b0:	4610      	mov	r0, r2
 801c7b2:	f7f7 faf7 	bl	8013da4 <lwip_htons>
 801c7b6:	4603      	mov	r3, r0
 801c7b8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801c7ba:	4b48      	ldr	r3, [pc, #288]	; (801c8dc <tcp_input+0x28c>)
 801c7bc:	681b      	ldr	r3, [r3, #0]
 801c7be:	885b      	ldrh	r3, [r3, #2]
 801c7c0:	b29a      	uxth	r2, r3
 801c7c2:	4b46      	ldr	r3, [pc, #280]	; (801c8dc <tcp_input+0x28c>)
 801c7c4:	681c      	ldr	r4, [r3, #0]
 801c7c6:	4610      	mov	r0, r2
 801c7c8:	f7f7 faec 	bl	8013da4 <lwip_htons>
 801c7cc:	4603      	mov	r3, r0
 801c7ce:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801c7d0:	4b42      	ldr	r3, [pc, #264]	; (801c8dc <tcp_input+0x28c>)
 801c7d2:	681b      	ldr	r3, [r3, #0]
 801c7d4:	685a      	ldr	r2, [r3, #4]
 801c7d6:	4b41      	ldr	r3, [pc, #260]	; (801c8dc <tcp_input+0x28c>)
 801c7d8:	681c      	ldr	r4, [r3, #0]
 801c7da:	4610      	mov	r0, r2
 801c7dc:	f7f7 faf7 	bl	8013dce <lwip_htonl>
 801c7e0:	4603      	mov	r3, r0
 801c7e2:	6063      	str	r3, [r4, #4]
 801c7e4:	6863      	ldr	r3, [r4, #4]
 801c7e6:	4a45      	ldr	r2, [pc, #276]	; (801c8fc <tcp_input+0x2ac>)
 801c7e8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801c7ea:	4b3c      	ldr	r3, [pc, #240]	; (801c8dc <tcp_input+0x28c>)
 801c7ec:	681b      	ldr	r3, [r3, #0]
 801c7ee:	689a      	ldr	r2, [r3, #8]
 801c7f0:	4b3a      	ldr	r3, [pc, #232]	; (801c8dc <tcp_input+0x28c>)
 801c7f2:	681c      	ldr	r4, [r3, #0]
 801c7f4:	4610      	mov	r0, r2
 801c7f6:	f7f7 faea 	bl	8013dce <lwip_htonl>
 801c7fa:	4603      	mov	r3, r0
 801c7fc:	60a3      	str	r3, [r4, #8]
 801c7fe:	68a3      	ldr	r3, [r4, #8]
 801c800:	4a3f      	ldr	r2, [pc, #252]	; (801c900 <tcp_input+0x2b0>)
 801c802:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801c804:	4b35      	ldr	r3, [pc, #212]	; (801c8dc <tcp_input+0x28c>)
 801c806:	681b      	ldr	r3, [r3, #0]
 801c808:	89db      	ldrh	r3, [r3, #14]
 801c80a:	b29a      	uxth	r2, r3
 801c80c:	4b33      	ldr	r3, [pc, #204]	; (801c8dc <tcp_input+0x28c>)
 801c80e:	681c      	ldr	r4, [r3, #0]
 801c810:	4610      	mov	r0, r2
 801c812:	f7f7 fac7 	bl	8013da4 <lwip_htons>
 801c816:	4603      	mov	r3, r0
 801c818:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801c81a:	4b30      	ldr	r3, [pc, #192]	; (801c8dc <tcp_input+0x28c>)
 801c81c:	681b      	ldr	r3, [r3, #0]
 801c81e:	899b      	ldrh	r3, [r3, #12]
 801c820:	b29b      	uxth	r3, r3
 801c822:	4618      	mov	r0, r3
 801c824:	f7f7 fabe 	bl	8013da4 <lwip_htons>
 801c828:	4603      	mov	r3, r0
 801c82a:	b2db      	uxtb	r3, r3
 801c82c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c830:	b2da      	uxtb	r2, r3
 801c832:	4b34      	ldr	r3, [pc, #208]	; (801c904 <tcp_input+0x2b4>)
 801c834:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801c836:	687b      	ldr	r3, [r7, #4]
 801c838:	891a      	ldrh	r2, [r3, #8]
 801c83a:	4b33      	ldr	r3, [pc, #204]	; (801c908 <tcp_input+0x2b8>)
 801c83c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801c83e:	4b31      	ldr	r3, [pc, #196]	; (801c904 <tcp_input+0x2b4>)
 801c840:	781b      	ldrb	r3, [r3, #0]
 801c842:	f003 0303 	and.w	r3, r3, #3
 801c846:	2b00      	cmp	r3, #0
 801c848:	d00c      	beq.n	801c864 <tcp_input+0x214>
    tcplen++;
 801c84a:	4b2f      	ldr	r3, [pc, #188]	; (801c908 <tcp_input+0x2b8>)
 801c84c:	881b      	ldrh	r3, [r3, #0]
 801c84e:	3301      	adds	r3, #1
 801c850:	b29a      	uxth	r2, r3
 801c852:	4b2d      	ldr	r3, [pc, #180]	; (801c908 <tcp_input+0x2b8>)
 801c854:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801c856:	687b      	ldr	r3, [r7, #4]
 801c858:	891a      	ldrh	r2, [r3, #8]
 801c85a:	4b2b      	ldr	r3, [pc, #172]	; (801c908 <tcp_input+0x2b8>)
 801c85c:	881b      	ldrh	r3, [r3, #0]
 801c85e:	429a      	cmp	r2, r3
 801c860:	f200 82d7 	bhi.w	801ce12 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801c864:	2300      	movs	r3, #0
 801c866:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c868:	4b28      	ldr	r3, [pc, #160]	; (801c90c <tcp_input+0x2bc>)
 801c86a:	681b      	ldr	r3, [r3, #0]
 801c86c:	61fb      	str	r3, [r7, #28]
 801c86e:	e09d      	b.n	801c9ac <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801c870:	69fb      	ldr	r3, [r7, #28]
 801c872:	7d1b      	ldrb	r3, [r3, #20]
 801c874:	2b00      	cmp	r3, #0
 801c876:	d105      	bne.n	801c884 <tcp_input+0x234>
 801c878:	4b15      	ldr	r3, [pc, #84]	; (801c8d0 <tcp_input+0x280>)
 801c87a:	22fb      	movs	r2, #251	; 0xfb
 801c87c:	4924      	ldr	r1, [pc, #144]	; (801c910 <tcp_input+0x2c0>)
 801c87e:	4816      	ldr	r0, [pc, #88]	; (801c8d8 <tcp_input+0x288>)
 801c880:	f007 fbb2 	bl	8023fe8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801c884:	69fb      	ldr	r3, [r7, #28]
 801c886:	7d1b      	ldrb	r3, [r3, #20]
 801c888:	2b0a      	cmp	r3, #10
 801c88a:	d105      	bne.n	801c898 <tcp_input+0x248>
 801c88c:	4b10      	ldr	r3, [pc, #64]	; (801c8d0 <tcp_input+0x280>)
 801c88e:	22fc      	movs	r2, #252	; 0xfc
 801c890:	4920      	ldr	r1, [pc, #128]	; (801c914 <tcp_input+0x2c4>)
 801c892:	4811      	ldr	r0, [pc, #68]	; (801c8d8 <tcp_input+0x288>)
 801c894:	f007 fba8 	bl	8023fe8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801c898:	69fb      	ldr	r3, [r7, #28]
 801c89a:	7d1b      	ldrb	r3, [r3, #20]
 801c89c:	2b01      	cmp	r3, #1
 801c89e:	d105      	bne.n	801c8ac <tcp_input+0x25c>
 801c8a0:	4b0b      	ldr	r3, [pc, #44]	; (801c8d0 <tcp_input+0x280>)
 801c8a2:	22fd      	movs	r2, #253	; 0xfd
 801c8a4:	491c      	ldr	r1, [pc, #112]	; (801c918 <tcp_input+0x2c8>)
 801c8a6:	480c      	ldr	r0, [pc, #48]	; (801c8d8 <tcp_input+0x288>)
 801c8a8:	f007 fb9e 	bl	8023fe8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c8ac:	69fb      	ldr	r3, [r7, #28]
 801c8ae:	7a1b      	ldrb	r3, [r3, #8]
 801c8b0:	2b00      	cmp	r3, #0
 801c8b2:	d033      	beq.n	801c91c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c8b4:	69fb      	ldr	r3, [r7, #28]
 801c8b6:	7a1a      	ldrb	r2, [r3, #8]
 801c8b8:	4b09      	ldr	r3, [pc, #36]	; (801c8e0 <tcp_input+0x290>)
 801c8ba:	685b      	ldr	r3, [r3, #4]
 801c8bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c8c0:	3301      	adds	r3, #1
 801c8c2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c8c4:	429a      	cmp	r2, r3
 801c8c6:	d029      	beq.n	801c91c <tcp_input+0x2cc>
      prev = pcb;
 801c8c8:	69fb      	ldr	r3, [r7, #28]
 801c8ca:	61bb      	str	r3, [r7, #24]
      continue;
 801c8cc:	e06b      	b.n	801c9a6 <tcp_input+0x356>
 801c8ce:	bf00      	nop
 801c8d0:	08027758 	.word	0x08027758
 801c8d4:	080277a8 	.word	0x080277a8
 801c8d8:	080277c0 	.word	0x080277c0
 801c8dc:	20008a7c 	.word	0x20008a7c
 801c8e0:	2000df98 	.word	0x2000df98
 801c8e4:	20008a80 	.word	0x20008a80
 801c8e8:	20008a84 	.word	0x20008a84
 801c8ec:	20008a82 	.word	0x20008a82
 801c8f0:	080277e8 	.word	0x080277e8
 801c8f4:	080277f8 	.word	0x080277f8
 801c8f8:	08027804 	.word	0x08027804
 801c8fc:	20008a8c 	.word	0x20008a8c
 801c900:	20008a90 	.word	0x20008a90
 801c904:	20008a98 	.word	0x20008a98
 801c908:	20008a96 	.word	0x20008a96
 801c90c:	2001181c 	.word	0x2001181c
 801c910:	08027824 	.word	0x08027824
 801c914:	0802784c 	.word	0x0802784c
 801c918:	08027878 	.word	0x08027878
    }

    if (pcb->remote_port == tcphdr->src &&
 801c91c:	69fb      	ldr	r3, [r7, #28]
 801c91e:	8b1a      	ldrh	r2, [r3, #24]
 801c920:	4b94      	ldr	r3, [pc, #592]	; (801cb74 <tcp_input+0x524>)
 801c922:	681b      	ldr	r3, [r3, #0]
 801c924:	881b      	ldrh	r3, [r3, #0]
 801c926:	b29b      	uxth	r3, r3
 801c928:	429a      	cmp	r2, r3
 801c92a:	d13a      	bne.n	801c9a2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801c92c:	69fb      	ldr	r3, [r7, #28]
 801c92e:	8ada      	ldrh	r2, [r3, #22]
 801c930:	4b90      	ldr	r3, [pc, #576]	; (801cb74 <tcp_input+0x524>)
 801c932:	681b      	ldr	r3, [r3, #0]
 801c934:	885b      	ldrh	r3, [r3, #2]
 801c936:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801c938:	429a      	cmp	r2, r3
 801c93a:	d132      	bne.n	801c9a2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801c93c:	69fb      	ldr	r3, [r7, #28]
 801c93e:	685a      	ldr	r2, [r3, #4]
 801c940:	4b8d      	ldr	r3, [pc, #564]	; (801cb78 <tcp_input+0x528>)
 801c942:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801c944:	429a      	cmp	r2, r3
 801c946:	d12c      	bne.n	801c9a2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c948:	69fb      	ldr	r3, [r7, #28]
 801c94a:	681a      	ldr	r2, [r3, #0]
 801c94c:	4b8a      	ldr	r3, [pc, #552]	; (801cb78 <tcp_input+0x528>)
 801c94e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801c950:	429a      	cmp	r2, r3
 801c952:	d126      	bne.n	801c9a2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801c954:	69fb      	ldr	r3, [r7, #28]
 801c956:	68db      	ldr	r3, [r3, #12]
 801c958:	69fa      	ldr	r2, [r7, #28]
 801c95a:	429a      	cmp	r2, r3
 801c95c:	d106      	bne.n	801c96c <tcp_input+0x31c>
 801c95e:	4b87      	ldr	r3, [pc, #540]	; (801cb7c <tcp_input+0x52c>)
 801c960:	f240 120d 	movw	r2, #269	; 0x10d
 801c964:	4986      	ldr	r1, [pc, #536]	; (801cb80 <tcp_input+0x530>)
 801c966:	4887      	ldr	r0, [pc, #540]	; (801cb84 <tcp_input+0x534>)
 801c968:	f007 fb3e 	bl	8023fe8 <iprintf>
      if (prev != NULL) {
 801c96c:	69bb      	ldr	r3, [r7, #24]
 801c96e:	2b00      	cmp	r3, #0
 801c970:	d00a      	beq.n	801c988 <tcp_input+0x338>
        prev->next = pcb->next;
 801c972:	69fb      	ldr	r3, [r7, #28]
 801c974:	68da      	ldr	r2, [r3, #12]
 801c976:	69bb      	ldr	r3, [r7, #24]
 801c978:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801c97a:	4b83      	ldr	r3, [pc, #524]	; (801cb88 <tcp_input+0x538>)
 801c97c:	681a      	ldr	r2, [r3, #0]
 801c97e:	69fb      	ldr	r3, [r7, #28]
 801c980:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801c982:	4a81      	ldr	r2, [pc, #516]	; (801cb88 <tcp_input+0x538>)
 801c984:	69fb      	ldr	r3, [r7, #28]
 801c986:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801c988:	69fb      	ldr	r3, [r7, #28]
 801c98a:	68db      	ldr	r3, [r3, #12]
 801c98c:	69fa      	ldr	r2, [r7, #28]
 801c98e:	429a      	cmp	r2, r3
 801c990:	d111      	bne.n	801c9b6 <tcp_input+0x366>
 801c992:	4b7a      	ldr	r3, [pc, #488]	; (801cb7c <tcp_input+0x52c>)
 801c994:	f240 1215 	movw	r2, #277	; 0x115
 801c998:	497c      	ldr	r1, [pc, #496]	; (801cb8c <tcp_input+0x53c>)
 801c99a:	487a      	ldr	r0, [pc, #488]	; (801cb84 <tcp_input+0x534>)
 801c99c:	f007 fb24 	bl	8023fe8 <iprintf>
      break;
 801c9a0:	e009      	b.n	801c9b6 <tcp_input+0x366>
    }
    prev = pcb;
 801c9a2:	69fb      	ldr	r3, [r7, #28]
 801c9a4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c9a6:	69fb      	ldr	r3, [r7, #28]
 801c9a8:	68db      	ldr	r3, [r3, #12]
 801c9aa:	61fb      	str	r3, [r7, #28]
 801c9ac:	69fb      	ldr	r3, [r7, #28]
 801c9ae:	2b00      	cmp	r3, #0
 801c9b0:	f47f af5e 	bne.w	801c870 <tcp_input+0x220>
 801c9b4:	e000      	b.n	801c9b8 <tcp_input+0x368>
      break;
 801c9b6:	bf00      	nop
  }

  if (pcb == NULL) {
 801c9b8:	69fb      	ldr	r3, [r7, #28]
 801c9ba:	2b00      	cmp	r3, #0
 801c9bc:	f040 8095 	bne.w	801caea <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c9c0:	4b73      	ldr	r3, [pc, #460]	; (801cb90 <tcp_input+0x540>)
 801c9c2:	681b      	ldr	r3, [r3, #0]
 801c9c4:	61fb      	str	r3, [r7, #28]
 801c9c6:	e03f      	b.n	801ca48 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801c9c8:	69fb      	ldr	r3, [r7, #28]
 801c9ca:	7d1b      	ldrb	r3, [r3, #20]
 801c9cc:	2b0a      	cmp	r3, #10
 801c9ce:	d006      	beq.n	801c9de <tcp_input+0x38e>
 801c9d0:	4b6a      	ldr	r3, [pc, #424]	; (801cb7c <tcp_input+0x52c>)
 801c9d2:	f240 121f 	movw	r2, #287	; 0x11f
 801c9d6:	496f      	ldr	r1, [pc, #444]	; (801cb94 <tcp_input+0x544>)
 801c9d8:	486a      	ldr	r0, [pc, #424]	; (801cb84 <tcp_input+0x534>)
 801c9da:	f007 fb05 	bl	8023fe8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c9de:	69fb      	ldr	r3, [r7, #28]
 801c9e0:	7a1b      	ldrb	r3, [r3, #8]
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	d009      	beq.n	801c9fa <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c9e6:	69fb      	ldr	r3, [r7, #28]
 801c9e8:	7a1a      	ldrb	r2, [r3, #8]
 801c9ea:	4b63      	ldr	r3, [pc, #396]	; (801cb78 <tcp_input+0x528>)
 801c9ec:	685b      	ldr	r3, [r3, #4]
 801c9ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c9f2:	3301      	adds	r3, #1
 801c9f4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c9f6:	429a      	cmp	r2, r3
 801c9f8:	d122      	bne.n	801ca40 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801c9fa:	69fb      	ldr	r3, [r7, #28]
 801c9fc:	8b1a      	ldrh	r2, [r3, #24]
 801c9fe:	4b5d      	ldr	r3, [pc, #372]	; (801cb74 <tcp_input+0x524>)
 801ca00:	681b      	ldr	r3, [r3, #0]
 801ca02:	881b      	ldrh	r3, [r3, #0]
 801ca04:	b29b      	uxth	r3, r3
 801ca06:	429a      	cmp	r2, r3
 801ca08:	d11b      	bne.n	801ca42 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801ca0a:	69fb      	ldr	r3, [r7, #28]
 801ca0c:	8ada      	ldrh	r2, [r3, #22]
 801ca0e:	4b59      	ldr	r3, [pc, #356]	; (801cb74 <tcp_input+0x524>)
 801ca10:	681b      	ldr	r3, [r3, #0]
 801ca12:	885b      	ldrh	r3, [r3, #2]
 801ca14:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801ca16:	429a      	cmp	r2, r3
 801ca18:	d113      	bne.n	801ca42 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ca1a:	69fb      	ldr	r3, [r7, #28]
 801ca1c:	685a      	ldr	r2, [r3, #4]
 801ca1e:	4b56      	ldr	r3, [pc, #344]	; (801cb78 <tcp_input+0x528>)
 801ca20:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801ca22:	429a      	cmp	r2, r3
 801ca24:	d10d      	bne.n	801ca42 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801ca26:	69fb      	ldr	r3, [r7, #28]
 801ca28:	681a      	ldr	r2, [r3, #0]
 801ca2a:	4b53      	ldr	r3, [pc, #332]	; (801cb78 <tcp_input+0x528>)
 801ca2c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801ca2e:	429a      	cmp	r2, r3
 801ca30:	d107      	bne.n	801ca42 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801ca32:	69f8      	ldr	r0, [r7, #28]
 801ca34:	f000 fb52 	bl	801d0dc <tcp_timewait_input>
        }
        pbuf_free(p);
 801ca38:	6878      	ldr	r0, [r7, #4]
 801ca3a:	f7fd f9c5 	bl	8019dc8 <pbuf_free>
        return;
 801ca3e:	e1ee      	b.n	801ce1e <tcp_input+0x7ce>
        continue;
 801ca40:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801ca42:	69fb      	ldr	r3, [r7, #28]
 801ca44:	68db      	ldr	r3, [r3, #12]
 801ca46:	61fb      	str	r3, [r7, #28]
 801ca48:	69fb      	ldr	r3, [r7, #28]
 801ca4a:	2b00      	cmp	r3, #0
 801ca4c:	d1bc      	bne.n	801c9c8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801ca4e:	2300      	movs	r3, #0
 801ca50:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ca52:	4b51      	ldr	r3, [pc, #324]	; (801cb98 <tcp_input+0x548>)
 801ca54:	681b      	ldr	r3, [r3, #0]
 801ca56:	617b      	str	r3, [r7, #20]
 801ca58:	e02a      	b.n	801cab0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801ca5a:	697b      	ldr	r3, [r7, #20]
 801ca5c:	7a1b      	ldrb	r3, [r3, #8]
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	d00c      	beq.n	801ca7c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ca62:	697b      	ldr	r3, [r7, #20]
 801ca64:	7a1a      	ldrb	r2, [r3, #8]
 801ca66:	4b44      	ldr	r3, [pc, #272]	; (801cb78 <tcp_input+0x528>)
 801ca68:	685b      	ldr	r3, [r3, #4]
 801ca6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ca6e:	3301      	adds	r3, #1
 801ca70:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801ca72:	429a      	cmp	r2, r3
 801ca74:	d002      	beq.n	801ca7c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801ca76:	697b      	ldr	r3, [r7, #20]
 801ca78:	61bb      	str	r3, [r7, #24]
        continue;
 801ca7a:	e016      	b.n	801caaa <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801ca7c:	697b      	ldr	r3, [r7, #20]
 801ca7e:	8ada      	ldrh	r2, [r3, #22]
 801ca80:	4b3c      	ldr	r3, [pc, #240]	; (801cb74 <tcp_input+0x524>)
 801ca82:	681b      	ldr	r3, [r3, #0]
 801ca84:	885b      	ldrh	r3, [r3, #2]
 801ca86:	b29b      	uxth	r3, r3
 801ca88:	429a      	cmp	r2, r3
 801ca8a:	d10c      	bne.n	801caa6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801ca8c:	697b      	ldr	r3, [r7, #20]
 801ca8e:	681a      	ldr	r2, [r3, #0]
 801ca90:	4b39      	ldr	r3, [pc, #228]	; (801cb78 <tcp_input+0x528>)
 801ca92:	695b      	ldr	r3, [r3, #20]
 801ca94:	429a      	cmp	r2, r3
 801ca96:	d00f      	beq.n	801cab8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801ca98:	697b      	ldr	r3, [r7, #20]
 801ca9a:	2b00      	cmp	r3, #0
 801ca9c:	d00d      	beq.n	801caba <tcp_input+0x46a>
 801ca9e:	697b      	ldr	r3, [r7, #20]
 801caa0:	681b      	ldr	r3, [r3, #0]
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	d009      	beq.n	801caba <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801caa6:	697b      	ldr	r3, [r7, #20]
 801caa8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801caaa:	697b      	ldr	r3, [r7, #20]
 801caac:	68db      	ldr	r3, [r3, #12]
 801caae:	617b      	str	r3, [r7, #20]
 801cab0:	697b      	ldr	r3, [r7, #20]
 801cab2:	2b00      	cmp	r3, #0
 801cab4:	d1d1      	bne.n	801ca5a <tcp_input+0x40a>
 801cab6:	e000      	b.n	801caba <tcp_input+0x46a>
            break;
 801cab8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801caba:	697b      	ldr	r3, [r7, #20]
 801cabc:	2b00      	cmp	r3, #0
 801cabe:	d014      	beq.n	801caea <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801cac0:	69bb      	ldr	r3, [r7, #24]
 801cac2:	2b00      	cmp	r3, #0
 801cac4:	d00a      	beq.n	801cadc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801cac6:	697b      	ldr	r3, [r7, #20]
 801cac8:	68da      	ldr	r2, [r3, #12]
 801caca:	69bb      	ldr	r3, [r7, #24]
 801cacc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801cace:	4b32      	ldr	r3, [pc, #200]	; (801cb98 <tcp_input+0x548>)
 801cad0:	681a      	ldr	r2, [r3, #0]
 801cad2:	697b      	ldr	r3, [r7, #20]
 801cad4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801cad6:	4a30      	ldr	r2, [pc, #192]	; (801cb98 <tcp_input+0x548>)
 801cad8:	697b      	ldr	r3, [r7, #20]
 801cada:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801cadc:	6978      	ldr	r0, [r7, #20]
 801cade:	f000 f9ff 	bl	801cee0 <tcp_listen_input>
      }
      pbuf_free(p);
 801cae2:	6878      	ldr	r0, [r7, #4]
 801cae4:	f7fd f970 	bl	8019dc8 <pbuf_free>
      return;
 801cae8:	e199      	b.n	801ce1e <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801caea:	69fb      	ldr	r3, [r7, #28]
 801caec:	2b00      	cmp	r3, #0
 801caee:	f000 8160 	beq.w	801cdb2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801caf2:	4b2a      	ldr	r3, [pc, #168]	; (801cb9c <tcp_input+0x54c>)
 801caf4:	2200      	movs	r2, #0
 801caf6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801caf8:	687b      	ldr	r3, [r7, #4]
 801cafa:	891a      	ldrh	r2, [r3, #8]
 801cafc:	4b27      	ldr	r3, [pc, #156]	; (801cb9c <tcp_input+0x54c>)
 801cafe:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801cb00:	4a26      	ldr	r2, [pc, #152]	; (801cb9c <tcp_input+0x54c>)
 801cb02:	687b      	ldr	r3, [r7, #4]
 801cb04:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801cb06:	4b1b      	ldr	r3, [pc, #108]	; (801cb74 <tcp_input+0x524>)
 801cb08:	681b      	ldr	r3, [r3, #0]
 801cb0a:	4a24      	ldr	r2, [pc, #144]	; (801cb9c <tcp_input+0x54c>)
 801cb0c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801cb0e:	4b24      	ldr	r3, [pc, #144]	; (801cba0 <tcp_input+0x550>)
 801cb10:	2200      	movs	r2, #0
 801cb12:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801cb14:	4b23      	ldr	r3, [pc, #140]	; (801cba4 <tcp_input+0x554>)
 801cb16:	2200      	movs	r2, #0
 801cb18:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801cb1a:	4b23      	ldr	r3, [pc, #140]	; (801cba8 <tcp_input+0x558>)
 801cb1c:	2200      	movs	r2, #0
 801cb1e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801cb20:	4b22      	ldr	r3, [pc, #136]	; (801cbac <tcp_input+0x55c>)
 801cb22:	781b      	ldrb	r3, [r3, #0]
 801cb24:	f003 0308 	and.w	r3, r3, #8
 801cb28:	2b00      	cmp	r3, #0
 801cb2a:	d006      	beq.n	801cb3a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 801cb2c:	687b      	ldr	r3, [r7, #4]
 801cb2e:	7b5b      	ldrb	r3, [r3, #13]
 801cb30:	f043 0301 	orr.w	r3, r3, #1
 801cb34:	b2da      	uxtb	r2, r3
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801cb3a:	69fb      	ldr	r3, [r7, #28]
 801cb3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801cb3e:	2b00      	cmp	r3, #0
 801cb40:	d038      	beq.n	801cbb4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801cb42:	69f8      	ldr	r0, [r7, #28]
 801cb44:	f7ff f872 	bl	801bc2c <tcp_process_refused_data>
 801cb48:	4603      	mov	r3, r0
 801cb4a:	f113 0f0d 	cmn.w	r3, #13
 801cb4e:	d007      	beq.n	801cb60 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801cb50:	69fb      	ldr	r3, [r7, #28]
 801cb52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	d02d      	beq.n	801cbb4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801cb58:	4b15      	ldr	r3, [pc, #84]	; (801cbb0 <tcp_input+0x560>)
 801cb5a:	881b      	ldrh	r3, [r3, #0]
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	d029      	beq.n	801cbb4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801cb60:	69fb      	ldr	r3, [r7, #28]
 801cb62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801cb64:	2b00      	cmp	r3, #0
 801cb66:	f040 8104 	bne.w	801cd72 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801cb6a:	69f8      	ldr	r0, [r7, #28]
 801cb6c:	f003 fe28 	bl	80207c0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801cb70:	e0ff      	b.n	801cd72 <tcp_input+0x722>
 801cb72:	bf00      	nop
 801cb74:	20008a7c 	.word	0x20008a7c
 801cb78:	2000df98 	.word	0x2000df98
 801cb7c:	08027758 	.word	0x08027758
 801cb80:	080278a0 	.word	0x080278a0
 801cb84:	080277c0 	.word	0x080277c0
 801cb88:	2001181c 	.word	0x2001181c
 801cb8c:	080278cc 	.word	0x080278cc
 801cb90:	2001182c 	.word	0x2001182c
 801cb94:	080278f8 	.word	0x080278f8
 801cb98:	20011824 	.word	0x20011824
 801cb9c:	20008a6c 	.word	0x20008a6c
 801cba0:	20008a9c 	.word	0x20008a9c
 801cba4:	20008a99 	.word	0x20008a99
 801cba8:	20008a94 	.word	0x20008a94
 801cbac:	20008a98 	.word	0x20008a98
 801cbb0:	20008a96 	.word	0x20008a96
      }
    }
    tcp_input_pcb = pcb;
 801cbb4:	4a9b      	ldr	r2, [pc, #620]	; (801ce24 <tcp_input+0x7d4>)
 801cbb6:	69fb      	ldr	r3, [r7, #28]
 801cbb8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801cbba:	69f8      	ldr	r0, [r7, #28]
 801cbbc:	f000 fb0a 	bl	801d1d4 <tcp_process>
 801cbc0:	4603      	mov	r3, r0
 801cbc2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801cbc4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cbc8:	f113 0f0d 	cmn.w	r3, #13
 801cbcc:	f000 80d3 	beq.w	801cd76 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 801cbd0:	4b95      	ldr	r3, [pc, #596]	; (801ce28 <tcp_input+0x7d8>)
 801cbd2:	781b      	ldrb	r3, [r3, #0]
 801cbd4:	f003 0308 	and.w	r3, r3, #8
 801cbd8:	2b00      	cmp	r3, #0
 801cbda:	d015      	beq.n	801cc08 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801cbdc:	69fb      	ldr	r3, [r7, #28]
 801cbde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cbe2:	2b00      	cmp	r3, #0
 801cbe4:	d008      	beq.n	801cbf8 <tcp_input+0x5a8>
 801cbe6:	69fb      	ldr	r3, [r7, #28]
 801cbe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cbec:	69fa      	ldr	r2, [r7, #28]
 801cbee:	6912      	ldr	r2, [r2, #16]
 801cbf0:	f06f 010d 	mvn.w	r1, #13
 801cbf4:	4610      	mov	r0, r2
 801cbf6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801cbf8:	69f9      	ldr	r1, [r7, #28]
 801cbfa:	488c      	ldr	r0, [pc, #560]	; (801ce2c <tcp_input+0x7dc>)
 801cbfc:	f7ff fbb0 	bl	801c360 <tcp_pcb_remove>
        tcp_free(pcb);
 801cc00:	69f8      	ldr	r0, [r7, #28]
 801cc02:	f7fd fed9 	bl	801a9b8 <tcp_free>
 801cc06:	e0c1      	b.n	801cd8c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 801cc08:	2300      	movs	r3, #0
 801cc0a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801cc0c:	4b88      	ldr	r3, [pc, #544]	; (801ce30 <tcp_input+0x7e0>)
 801cc0e:	881b      	ldrh	r3, [r3, #0]
 801cc10:	2b00      	cmp	r3, #0
 801cc12:	d01d      	beq.n	801cc50 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801cc14:	4b86      	ldr	r3, [pc, #536]	; (801ce30 <tcp_input+0x7e0>)
 801cc16:	881b      	ldrh	r3, [r3, #0]
 801cc18:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801cc1a:	69fb      	ldr	r3, [r7, #28]
 801cc1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cc20:	2b00      	cmp	r3, #0
 801cc22:	d00a      	beq.n	801cc3a <tcp_input+0x5ea>
 801cc24:	69fb      	ldr	r3, [r7, #28]
 801cc26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cc2a:	69fa      	ldr	r2, [r7, #28]
 801cc2c:	6910      	ldr	r0, [r2, #16]
 801cc2e:	89fa      	ldrh	r2, [r7, #14]
 801cc30:	69f9      	ldr	r1, [r7, #28]
 801cc32:	4798      	blx	r3
 801cc34:	4603      	mov	r3, r0
 801cc36:	74fb      	strb	r3, [r7, #19]
 801cc38:	e001      	b.n	801cc3e <tcp_input+0x5ee>
 801cc3a:	2300      	movs	r3, #0
 801cc3c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801cc3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cc42:	f113 0f0d 	cmn.w	r3, #13
 801cc46:	f000 8098 	beq.w	801cd7a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801cc4a:	4b79      	ldr	r3, [pc, #484]	; (801ce30 <tcp_input+0x7e0>)
 801cc4c:	2200      	movs	r2, #0
 801cc4e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801cc50:	69f8      	ldr	r0, [r7, #28]
 801cc52:	f000 f905 	bl	801ce60 <tcp_input_delayed_close>
 801cc56:	4603      	mov	r3, r0
 801cc58:	2b00      	cmp	r3, #0
 801cc5a:	f040 8090 	bne.w	801cd7e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801cc5e:	4b75      	ldr	r3, [pc, #468]	; (801ce34 <tcp_input+0x7e4>)
 801cc60:	681b      	ldr	r3, [r3, #0]
 801cc62:	2b00      	cmp	r3, #0
 801cc64:	d041      	beq.n	801ccea <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801cc66:	69fb      	ldr	r3, [r7, #28]
 801cc68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801cc6a:	2b00      	cmp	r3, #0
 801cc6c:	d006      	beq.n	801cc7c <tcp_input+0x62c>
 801cc6e:	4b72      	ldr	r3, [pc, #456]	; (801ce38 <tcp_input+0x7e8>)
 801cc70:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801cc74:	4971      	ldr	r1, [pc, #452]	; (801ce3c <tcp_input+0x7ec>)
 801cc76:	4872      	ldr	r0, [pc, #456]	; (801ce40 <tcp_input+0x7f0>)
 801cc78:	f007 f9b6 	bl	8023fe8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801cc7c:	69fb      	ldr	r3, [r7, #28]
 801cc7e:	8b5b      	ldrh	r3, [r3, #26]
 801cc80:	f003 0310 	and.w	r3, r3, #16
 801cc84:	2b00      	cmp	r3, #0
 801cc86:	d008      	beq.n	801cc9a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801cc88:	4b6a      	ldr	r3, [pc, #424]	; (801ce34 <tcp_input+0x7e4>)
 801cc8a:	681b      	ldr	r3, [r3, #0]
 801cc8c:	4618      	mov	r0, r3
 801cc8e:	f7fd f89b 	bl	8019dc8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801cc92:	69f8      	ldr	r0, [r7, #28]
 801cc94:	f7fe f9ca 	bl	801b02c <tcp_abort>
            goto aborted;
 801cc98:	e078      	b.n	801cd8c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801cc9a:	69fb      	ldr	r3, [r7, #28]
 801cc9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cca0:	2b00      	cmp	r3, #0
 801cca2:	d00c      	beq.n	801ccbe <tcp_input+0x66e>
 801cca4:	69fb      	ldr	r3, [r7, #28]
 801cca6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801ccaa:	69fb      	ldr	r3, [r7, #28]
 801ccac:	6918      	ldr	r0, [r3, #16]
 801ccae:	4b61      	ldr	r3, [pc, #388]	; (801ce34 <tcp_input+0x7e4>)
 801ccb0:	681a      	ldr	r2, [r3, #0]
 801ccb2:	2300      	movs	r3, #0
 801ccb4:	69f9      	ldr	r1, [r7, #28]
 801ccb6:	47a0      	blx	r4
 801ccb8:	4603      	mov	r3, r0
 801ccba:	74fb      	strb	r3, [r7, #19]
 801ccbc:	e008      	b.n	801ccd0 <tcp_input+0x680>
 801ccbe:	4b5d      	ldr	r3, [pc, #372]	; (801ce34 <tcp_input+0x7e4>)
 801ccc0:	681a      	ldr	r2, [r3, #0]
 801ccc2:	2300      	movs	r3, #0
 801ccc4:	69f9      	ldr	r1, [r7, #28]
 801ccc6:	2000      	movs	r0, #0
 801ccc8:	f7ff f884 	bl	801bdd4 <tcp_recv_null>
 801cccc:	4603      	mov	r3, r0
 801ccce:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801ccd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ccd4:	f113 0f0d 	cmn.w	r3, #13
 801ccd8:	d053      	beq.n	801cd82 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801ccda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801ccde:	2b00      	cmp	r3, #0
 801cce0:	d003      	beq.n	801ccea <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801cce2:	4b54      	ldr	r3, [pc, #336]	; (801ce34 <tcp_input+0x7e4>)
 801cce4:	681a      	ldr	r2, [r3, #0]
 801cce6:	69fb      	ldr	r3, [r7, #28]
 801cce8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801ccea:	4b4f      	ldr	r3, [pc, #316]	; (801ce28 <tcp_input+0x7d8>)
 801ccec:	781b      	ldrb	r3, [r3, #0]
 801ccee:	f003 0320 	and.w	r3, r3, #32
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	d030      	beq.n	801cd58 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801ccf6:	69fb      	ldr	r3, [r7, #28]
 801ccf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ccfa:	2b00      	cmp	r3, #0
 801ccfc:	d009      	beq.n	801cd12 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801ccfe:	69fb      	ldr	r3, [r7, #28]
 801cd00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801cd02:	7b5a      	ldrb	r2, [r3, #13]
 801cd04:	69fb      	ldr	r3, [r7, #28]
 801cd06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801cd08:	f042 0220 	orr.w	r2, r2, #32
 801cd0c:	b2d2      	uxtb	r2, r2
 801cd0e:	735a      	strb	r2, [r3, #13]
 801cd10:	e022      	b.n	801cd58 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801cd12:	69fb      	ldr	r3, [r7, #28]
 801cd14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cd16:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801cd1a:	d005      	beq.n	801cd28 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 801cd1c:	69fb      	ldr	r3, [r7, #28]
 801cd1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cd20:	3301      	adds	r3, #1
 801cd22:	b29a      	uxth	r2, r3
 801cd24:	69fb      	ldr	r3, [r7, #28]
 801cd26:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801cd28:	69fb      	ldr	r3, [r7, #28]
 801cd2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	d00b      	beq.n	801cd4a <tcp_input+0x6fa>
 801cd32:	69fb      	ldr	r3, [r7, #28]
 801cd34:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801cd38:	69fb      	ldr	r3, [r7, #28]
 801cd3a:	6918      	ldr	r0, [r3, #16]
 801cd3c:	2300      	movs	r3, #0
 801cd3e:	2200      	movs	r2, #0
 801cd40:	69f9      	ldr	r1, [r7, #28]
 801cd42:	47a0      	blx	r4
 801cd44:	4603      	mov	r3, r0
 801cd46:	74fb      	strb	r3, [r7, #19]
 801cd48:	e001      	b.n	801cd4e <tcp_input+0x6fe>
 801cd4a:	2300      	movs	r3, #0
 801cd4c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801cd4e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cd52:	f113 0f0d 	cmn.w	r3, #13
 801cd56:	d016      	beq.n	801cd86 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801cd58:	4b32      	ldr	r3, [pc, #200]	; (801ce24 <tcp_input+0x7d4>)
 801cd5a:	2200      	movs	r2, #0
 801cd5c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801cd5e:	69f8      	ldr	r0, [r7, #28]
 801cd60:	f000 f87e 	bl	801ce60 <tcp_input_delayed_close>
 801cd64:	4603      	mov	r3, r0
 801cd66:	2b00      	cmp	r3, #0
 801cd68:	d10f      	bne.n	801cd8a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801cd6a:	69f8      	ldr	r0, [r7, #28]
 801cd6c:	f002 ff10 	bl	801fb90 <tcp_output>
 801cd70:	e00c      	b.n	801cd8c <tcp_input+0x73c>
        goto aborted;
 801cd72:	bf00      	nop
 801cd74:	e00a      	b.n	801cd8c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801cd76:	bf00      	nop
 801cd78:	e008      	b.n	801cd8c <tcp_input+0x73c>
              goto aborted;
 801cd7a:	bf00      	nop
 801cd7c:	e006      	b.n	801cd8c <tcp_input+0x73c>
          goto aborted;
 801cd7e:	bf00      	nop
 801cd80:	e004      	b.n	801cd8c <tcp_input+0x73c>
            goto aborted;
 801cd82:	bf00      	nop
 801cd84:	e002      	b.n	801cd8c <tcp_input+0x73c>
              goto aborted;
 801cd86:	bf00      	nop
 801cd88:	e000      	b.n	801cd8c <tcp_input+0x73c>
          goto aborted;
 801cd8a:	bf00      	nop
    tcp_input_pcb = NULL;
 801cd8c:	4b25      	ldr	r3, [pc, #148]	; (801ce24 <tcp_input+0x7d4>)
 801cd8e:	2200      	movs	r2, #0
 801cd90:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801cd92:	4b28      	ldr	r3, [pc, #160]	; (801ce34 <tcp_input+0x7e4>)
 801cd94:	2200      	movs	r2, #0
 801cd96:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801cd98:	4b2a      	ldr	r3, [pc, #168]	; (801ce44 <tcp_input+0x7f4>)
 801cd9a:	685b      	ldr	r3, [r3, #4]
 801cd9c:	2b00      	cmp	r3, #0
 801cd9e:	d03d      	beq.n	801ce1c <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 801cda0:	4b28      	ldr	r3, [pc, #160]	; (801ce44 <tcp_input+0x7f4>)
 801cda2:	685b      	ldr	r3, [r3, #4]
 801cda4:	4618      	mov	r0, r3
 801cda6:	f7fd f80f 	bl	8019dc8 <pbuf_free>
      inseg.p = NULL;
 801cdaa:	4b26      	ldr	r3, [pc, #152]	; (801ce44 <tcp_input+0x7f4>)
 801cdac:	2200      	movs	r2, #0
 801cdae:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801cdb0:	e034      	b.n	801ce1c <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801cdb2:	4b25      	ldr	r3, [pc, #148]	; (801ce48 <tcp_input+0x7f8>)
 801cdb4:	681b      	ldr	r3, [r3, #0]
 801cdb6:	899b      	ldrh	r3, [r3, #12]
 801cdb8:	b29b      	uxth	r3, r3
 801cdba:	4618      	mov	r0, r3
 801cdbc:	f7f6 fff2 	bl	8013da4 <lwip_htons>
 801cdc0:	4603      	mov	r3, r0
 801cdc2:	b2db      	uxtb	r3, r3
 801cdc4:	f003 0304 	and.w	r3, r3, #4
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	d118      	bne.n	801cdfe <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cdcc:	4b1f      	ldr	r3, [pc, #124]	; (801ce4c <tcp_input+0x7fc>)
 801cdce:	6819      	ldr	r1, [r3, #0]
 801cdd0:	4b1f      	ldr	r3, [pc, #124]	; (801ce50 <tcp_input+0x800>)
 801cdd2:	881b      	ldrh	r3, [r3, #0]
 801cdd4:	461a      	mov	r2, r3
 801cdd6:	4b1f      	ldr	r3, [pc, #124]	; (801ce54 <tcp_input+0x804>)
 801cdd8:	681b      	ldr	r3, [r3, #0]
 801cdda:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cddc:	4b1a      	ldr	r3, [pc, #104]	; (801ce48 <tcp_input+0x7f8>)
 801cdde:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cde0:	885b      	ldrh	r3, [r3, #2]
 801cde2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cde4:	4a18      	ldr	r2, [pc, #96]	; (801ce48 <tcp_input+0x7f8>)
 801cde6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cde8:	8812      	ldrh	r2, [r2, #0]
 801cdea:	b292      	uxth	r2, r2
 801cdec:	9202      	str	r2, [sp, #8]
 801cdee:	9301      	str	r3, [sp, #4]
 801cdf0:	4b19      	ldr	r3, [pc, #100]	; (801ce58 <tcp_input+0x808>)
 801cdf2:	9300      	str	r3, [sp, #0]
 801cdf4:	4b19      	ldr	r3, [pc, #100]	; (801ce5c <tcp_input+0x80c>)
 801cdf6:	4602      	mov	r2, r0
 801cdf8:	2000      	movs	r0, #0
 801cdfa:	f003 fc8f 	bl	802071c <tcp_rst>
    pbuf_free(p);
 801cdfe:	6878      	ldr	r0, [r7, #4]
 801ce00:	f7fc ffe2 	bl	8019dc8 <pbuf_free>
  return;
 801ce04:	e00a      	b.n	801ce1c <tcp_input+0x7cc>
    goto dropped;
 801ce06:	bf00      	nop
 801ce08:	e004      	b.n	801ce14 <tcp_input+0x7c4>
dropped:
 801ce0a:	bf00      	nop
 801ce0c:	e002      	b.n	801ce14 <tcp_input+0x7c4>
      goto dropped;
 801ce0e:	bf00      	nop
 801ce10:	e000      	b.n	801ce14 <tcp_input+0x7c4>
      goto dropped;
 801ce12:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801ce14:	6878      	ldr	r0, [r7, #4]
 801ce16:	f7fc ffd7 	bl	8019dc8 <pbuf_free>
 801ce1a:	e000      	b.n	801ce1e <tcp_input+0x7ce>
  return;
 801ce1c:	bf00      	nop
}
 801ce1e:	3724      	adds	r7, #36	; 0x24
 801ce20:	46bd      	mov	sp, r7
 801ce22:	bd90      	pop	{r4, r7, pc}
 801ce24:	20011830 	.word	0x20011830
 801ce28:	20008a99 	.word	0x20008a99
 801ce2c:	2001181c 	.word	0x2001181c
 801ce30:	20008a94 	.word	0x20008a94
 801ce34:	20008a9c 	.word	0x20008a9c
 801ce38:	08027758 	.word	0x08027758
 801ce3c:	08027928 	.word	0x08027928
 801ce40:	080277c0 	.word	0x080277c0
 801ce44:	20008a6c 	.word	0x20008a6c
 801ce48:	20008a7c 	.word	0x20008a7c
 801ce4c:	20008a90 	.word	0x20008a90
 801ce50:	20008a96 	.word	0x20008a96
 801ce54:	20008a8c 	.word	0x20008a8c
 801ce58:	2000dfa8 	.word	0x2000dfa8
 801ce5c:	2000dfac 	.word	0x2000dfac

0801ce60 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801ce60:	b580      	push	{r7, lr}
 801ce62:	b082      	sub	sp, #8
 801ce64:	af00      	add	r7, sp, #0
 801ce66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801ce68:	687b      	ldr	r3, [r7, #4]
 801ce6a:	2b00      	cmp	r3, #0
 801ce6c:	d106      	bne.n	801ce7c <tcp_input_delayed_close+0x1c>
 801ce6e:	4b17      	ldr	r3, [pc, #92]	; (801cecc <tcp_input_delayed_close+0x6c>)
 801ce70:	f240 225a 	movw	r2, #602	; 0x25a
 801ce74:	4916      	ldr	r1, [pc, #88]	; (801ced0 <tcp_input_delayed_close+0x70>)
 801ce76:	4817      	ldr	r0, [pc, #92]	; (801ced4 <tcp_input_delayed_close+0x74>)
 801ce78:	f007 f8b6 	bl	8023fe8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801ce7c:	4b16      	ldr	r3, [pc, #88]	; (801ced8 <tcp_input_delayed_close+0x78>)
 801ce7e:	781b      	ldrb	r3, [r3, #0]
 801ce80:	f003 0310 	and.w	r3, r3, #16
 801ce84:	2b00      	cmp	r3, #0
 801ce86:	d01c      	beq.n	801cec2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801ce88:	687b      	ldr	r3, [r7, #4]
 801ce8a:	8b5b      	ldrh	r3, [r3, #26]
 801ce8c:	f003 0310 	and.w	r3, r3, #16
 801ce90:	2b00      	cmp	r3, #0
 801ce92:	d10d      	bne.n	801ceb0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	d008      	beq.n	801ceb0 <tcp_input_delayed_close+0x50>
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cea4:	687a      	ldr	r2, [r7, #4]
 801cea6:	6912      	ldr	r2, [r2, #16]
 801cea8:	f06f 010e 	mvn.w	r1, #14
 801ceac:	4610      	mov	r0, r2
 801ceae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801ceb0:	6879      	ldr	r1, [r7, #4]
 801ceb2:	480a      	ldr	r0, [pc, #40]	; (801cedc <tcp_input_delayed_close+0x7c>)
 801ceb4:	f7ff fa54 	bl	801c360 <tcp_pcb_remove>
    tcp_free(pcb);
 801ceb8:	6878      	ldr	r0, [r7, #4]
 801ceba:	f7fd fd7d 	bl	801a9b8 <tcp_free>
    return 1;
 801cebe:	2301      	movs	r3, #1
 801cec0:	e000      	b.n	801cec4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801cec2:	2300      	movs	r3, #0
}
 801cec4:	4618      	mov	r0, r3
 801cec6:	3708      	adds	r7, #8
 801cec8:	46bd      	mov	sp, r7
 801ceca:	bd80      	pop	{r7, pc}
 801cecc:	08027758 	.word	0x08027758
 801ced0:	08027944 	.word	0x08027944
 801ced4:	080277c0 	.word	0x080277c0
 801ced8:	20008a99 	.word	0x20008a99
 801cedc:	2001181c 	.word	0x2001181c

0801cee0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801cee0:	b590      	push	{r4, r7, lr}
 801cee2:	b08b      	sub	sp, #44	; 0x2c
 801cee4:	af04      	add	r7, sp, #16
 801cee6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801cee8:	4b6f      	ldr	r3, [pc, #444]	; (801d0a8 <tcp_listen_input+0x1c8>)
 801ceea:	781b      	ldrb	r3, [r3, #0]
 801ceec:	f003 0304 	and.w	r3, r3, #4
 801cef0:	2b00      	cmp	r3, #0
 801cef2:	f040 80d3 	bne.w	801d09c <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	2b00      	cmp	r3, #0
 801cefa:	d106      	bne.n	801cf0a <tcp_listen_input+0x2a>
 801cefc:	4b6b      	ldr	r3, [pc, #428]	; (801d0ac <tcp_listen_input+0x1cc>)
 801cefe:	f240 2281 	movw	r2, #641	; 0x281
 801cf02:	496b      	ldr	r1, [pc, #428]	; (801d0b0 <tcp_listen_input+0x1d0>)
 801cf04:	486b      	ldr	r0, [pc, #428]	; (801d0b4 <tcp_listen_input+0x1d4>)
 801cf06:	f007 f86f 	bl	8023fe8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801cf0a:	4b67      	ldr	r3, [pc, #412]	; (801d0a8 <tcp_listen_input+0x1c8>)
 801cf0c:	781b      	ldrb	r3, [r3, #0]
 801cf0e:	f003 0310 	and.w	r3, r3, #16
 801cf12:	2b00      	cmp	r3, #0
 801cf14:	d019      	beq.n	801cf4a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cf16:	4b68      	ldr	r3, [pc, #416]	; (801d0b8 <tcp_listen_input+0x1d8>)
 801cf18:	6819      	ldr	r1, [r3, #0]
 801cf1a:	4b68      	ldr	r3, [pc, #416]	; (801d0bc <tcp_listen_input+0x1dc>)
 801cf1c:	881b      	ldrh	r3, [r3, #0]
 801cf1e:	461a      	mov	r2, r3
 801cf20:	4b67      	ldr	r3, [pc, #412]	; (801d0c0 <tcp_listen_input+0x1e0>)
 801cf22:	681b      	ldr	r3, [r3, #0]
 801cf24:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cf26:	4b67      	ldr	r3, [pc, #412]	; (801d0c4 <tcp_listen_input+0x1e4>)
 801cf28:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cf2a:	885b      	ldrh	r3, [r3, #2]
 801cf2c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801cf2e:	4a65      	ldr	r2, [pc, #404]	; (801d0c4 <tcp_listen_input+0x1e4>)
 801cf30:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801cf32:	8812      	ldrh	r2, [r2, #0]
 801cf34:	b292      	uxth	r2, r2
 801cf36:	9202      	str	r2, [sp, #8]
 801cf38:	9301      	str	r3, [sp, #4]
 801cf3a:	4b63      	ldr	r3, [pc, #396]	; (801d0c8 <tcp_listen_input+0x1e8>)
 801cf3c:	9300      	str	r3, [sp, #0]
 801cf3e:	4b63      	ldr	r3, [pc, #396]	; (801d0cc <tcp_listen_input+0x1ec>)
 801cf40:	4602      	mov	r2, r0
 801cf42:	6878      	ldr	r0, [r7, #4]
 801cf44:	f003 fbea 	bl	802071c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801cf48:	e0aa      	b.n	801d0a0 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 801cf4a:	4b57      	ldr	r3, [pc, #348]	; (801d0a8 <tcp_listen_input+0x1c8>)
 801cf4c:	781b      	ldrb	r3, [r3, #0]
 801cf4e:	f003 0302 	and.w	r3, r3, #2
 801cf52:	2b00      	cmp	r3, #0
 801cf54:	f000 80a4 	beq.w	801d0a0 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 801cf58:	687b      	ldr	r3, [r7, #4]
 801cf5a:	7d5b      	ldrb	r3, [r3, #21]
 801cf5c:	4618      	mov	r0, r3
 801cf5e:	f7ff f85d 	bl	801c01c <tcp_alloc>
 801cf62:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801cf64:	697b      	ldr	r3, [r7, #20]
 801cf66:	2b00      	cmp	r3, #0
 801cf68:	d111      	bne.n	801cf8e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801cf6a:	687b      	ldr	r3, [r7, #4]
 801cf6c:	699b      	ldr	r3, [r3, #24]
 801cf6e:	2b00      	cmp	r3, #0
 801cf70:	d00a      	beq.n	801cf88 <tcp_listen_input+0xa8>
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	699b      	ldr	r3, [r3, #24]
 801cf76:	687a      	ldr	r2, [r7, #4]
 801cf78:	6910      	ldr	r0, [r2, #16]
 801cf7a:	f04f 32ff 	mov.w	r2, #4294967295
 801cf7e:	2100      	movs	r1, #0
 801cf80:	4798      	blx	r3
 801cf82:	4603      	mov	r3, r0
 801cf84:	73bb      	strb	r3, [r7, #14]
      return;
 801cf86:	e08c      	b.n	801d0a2 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801cf88:	23f0      	movs	r3, #240	; 0xf0
 801cf8a:	73bb      	strb	r3, [r7, #14]
      return;
 801cf8c:	e089      	b.n	801d0a2 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801cf8e:	4b50      	ldr	r3, [pc, #320]	; (801d0d0 <tcp_listen_input+0x1f0>)
 801cf90:	695a      	ldr	r2, [r3, #20]
 801cf92:	697b      	ldr	r3, [r7, #20]
 801cf94:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801cf96:	4b4e      	ldr	r3, [pc, #312]	; (801d0d0 <tcp_listen_input+0x1f0>)
 801cf98:	691a      	ldr	r2, [r3, #16]
 801cf9a:	697b      	ldr	r3, [r7, #20]
 801cf9c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801cf9e:	687b      	ldr	r3, [r7, #4]
 801cfa0:	8ada      	ldrh	r2, [r3, #22]
 801cfa2:	697b      	ldr	r3, [r7, #20]
 801cfa4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801cfa6:	4b47      	ldr	r3, [pc, #284]	; (801d0c4 <tcp_listen_input+0x1e4>)
 801cfa8:	681b      	ldr	r3, [r3, #0]
 801cfaa:	881b      	ldrh	r3, [r3, #0]
 801cfac:	b29a      	uxth	r2, r3
 801cfae:	697b      	ldr	r3, [r7, #20]
 801cfb0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801cfb2:	697b      	ldr	r3, [r7, #20]
 801cfb4:	2203      	movs	r2, #3
 801cfb6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801cfb8:	4b41      	ldr	r3, [pc, #260]	; (801d0c0 <tcp_listen_input+0x1e0>)
 801cfba:	681b      	ldr	r3, [r3, #0]
 801cfbc:	1c5a      	adds	r2, r3, #1
 801cfbe:	697b      	ldr	r3, [r7, #20]
 801cfc0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801cfc2:	697b      	ldr	r3, [r7, #20]
 801cfc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801cfc6:	697b      	ldr	r3, [r7, #20]
 801cfc8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801cfca:	6978      	ldr	r0, [r7, #20]
 801cfcc:	f7ff fa5c 	bl	801c488 <tcp_next_iss>
 801cfd0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801cfd2:	697b      	ldr	r3, [r7, #20]
 801cfd4:	693a      	ldr	r2, [r7, #16]
 801cfd6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801cfd8:	697b      	ldr	r3, [r7, #20]
 801cfda:	693a      	ldr	r2, [r7, #16]
 801cfdc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801cfde:	697b      	ldr	r3, [r7, #20]
 801cfe0:	693a      	ldr	r2, [r7, #16]
 801cfe2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801cfe4:	697b      	ldr	r3, [r7, #20]
 801cfe6:	693a      	ldr	r2, [r7, #16]
 801cfe8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801cfea:	4b35      	ldr	r3, [pc, #212]	; (801d0c0 <tcp_listen_input+0x1e0>)
 801cfec:	681b      	ldr	r3, [r3, #0]
 801cfee:	1e5a      	subs	r2, r3, #1
 801cff0:	697b      	ldr	r3, [r7, #20]
 801cff2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801cff4:	687b      	ldr	r3, [r7, #4]
 801cff6:	691a      	ldr	r2, [r3, #16]
 801cff8:	697b      	ldr	r3, [r7, #20]
 801cffa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801cffc:	697b      	ldr	r3, [r7, #20]
 801cffe:	687a      	ldr	r2, [r7, #4]
 801d000:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801d002:	687b      	ldr	r3, [r7, #4]
 801d004:	7a5b      	ldrb	r3, [r3, #9]
 801d006:	f003 030c 	and.w	r3, r3, #12
 801d00a:	b2da      	uxtb	r2, r3
 801d00c:	697b      	ldr	r3, [r7, #20]
 801d00e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801d010:	687b      	ldr	r3, [r7, #4]
 801d012:	7a1a      	ldrb	r2, [r3, #8]
 801d014:	697b      	ldr	r3, [r7, #20]
 801d016:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801d018:	4b2e      	ldr	r3, [pc, #184]	; (801d0d4 <tcp_listen_input+0x1f4>)
 801d01a:	681a      	ldr	r2, [r3, #0]
 801d01c:	697b      	ldr	r3, [r7, #20]
 801d01e:	60da      	str	r2, [r3, #12]
 801d020:	4a2c      	ldr	r2, [pc, #176]	; (801d0d4 <tcp_listen_input+0x1f4>)
 801d022:	697b      	ldr	r3, [r7, #20]
 801d024:	6013      	str	r3, [r2, #0]
 801d026:	f003 feef 	bl	8020e08 <tcp_timer_needed>
 801d02a:	4b2b      	ldr	r3, [pc, #172]	; (801d0d8 <tcp_listen_input+0x1f8>)
 801d02c:	2201      	movs	r2, #1
 801d02e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801d030:	6978      	ldr	r0, [r7, #20]
 801d032:	f001 fd8f 	bl	801eb54 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801d036:	4b23      	ldr	r3, [pc, #140]	; (801d0c4 <tcp_listen_input+0x1e4>)
 801d038:	681b      	ldr	r3, [r3, #0]
 801d03a:	89db      	ldrh	r3, [r3, #14]
 801d03c:	b29a      	uxth	r2, r3
 801d03e:	697b      	ldr	r3, [r7, #20]
 801d040:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801d044:	697b      	ldr	r3, [r7, #20]
 801d046:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801d04a:	697b      	ldr	r3, [r7, #20]
 801d04c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801d050:	697b      	ldr	r3, [r7, #20]
 801d052:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801d054:	697b      	ldr	r3, [r7, #20]
 801d056:	3304      	adds	r3, #4
 801d058:	4618      	mov	r0, r3
 801d05a:	f7fa fa33 	bl	80174c4 <ip4_route>
 801d05e:	4601      	mov	r1, r0
 801d060:	697b      	ldr	r3, [r7, #20]
 801d062:	3304      	adds	r3, #4
 801d064:	461a      	mov	r2, r3
 801d066:	4620      	mov	r0, r4
 801d068:	f7ff fa34 	bl	801c4d4 <tcp_eff_send_mss_netif>
 801d06c:	4603      	mov	r3, r0
 801d06e:	461a      	mov	r2, r3
 801d070:	697b      	ldr	r3, [r7, #20]
 801d072:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801d074:	2112      	movs	r1, #18
 801d076:	6978      	ldr	r0, [r7, #20]
 801d078:	f002 fc9c 	bl	801f9b4 <tcp_enqueue_flags>
 801d07c:	4603      	mov	r3, r0
 801d07e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801d080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d084:	2b00      	cmp	r3, #0
 801d086:	d004      	beq.n	801d092 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801d088:	2100      	movs	r1, #0
 801d08a:	6978      	ldr	r0, [r7, #20]
 801d08c:	f7fd ff10 	bl	801aeb0 <tcp_abandon>
      return;
 801d090:	e007      	b.n	801d0a2 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 801d092:	6978      	ldr	r0, [r7, #20]
 801d094:	f002 fd7c 	bl	801fb90 <tcp_output>
  return;
 801d098:	bf00      	nop
 801d09a:	e001      	b.n	801d0a0 <tcp_listen_input+0x1c0>
    return;
 801d09c:	bf00      	nop
 801d09e:	e000      	b.n	801d0a2 <tcp_listen_input+0x1c2>
  return;
 801d0a0:	bf00      	nop
}
 801d0a2:	371c      	adds	r7, #28
 801d0a4:	46bd      	mov	sp, r7
 801d0a6:	bd90      	pop	{r4, r7, pc}
 801d0a8:	20008a98 	.word	0x20008a98
 801d0ac:	08027758 	.word	0x08027758
 801d0b0:	0802796c 	.word	0x0802796c
 801d0b4:	080277c0 	.word	0x080277c0
 801d0b8:	20008a90 	.word	0x20008a90
 801d0bc:	20008a96 	.word	0x20008a96
 801d0c0:	20008a8c 	.word	0x20008a8c
 801d0c4:	20008a7c 	.word	0x20008a7c
 801d0c8:	2000dfa8 	.word	0x2000dfa8
 801d0cc:	2000dfac 	.word	0x2000dfac
 801d0d0:	2000df98 	.word	0x2000df98
 801d0d4:	2001181c 	.word	0x2001181c
 801d0d8:	20011818 	.word	0x20011818

0801d0dc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801d0dc:	b580      	push	{r7, lr}
 801d0de:	b086      	sub	sp, #24
 801d0e0:	af04      	add	r7, sp, #16
 801d0e2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801d0e4:	4b30      	ldr	r3, [pc, #192]	; (801d1a8 <tcp_timewait_input+0xcc>)
 801d0e6:	781b      	ldrb	r3, [r3, #0]
 801d0e8:	f003 0304 	and.w	r3, r3, #4
 801d0ec:	2b00      	cmp	r3, #0
 801d0ee:	d154      	bne.n	801d19a <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801d0f0:	687b      	ldr	r3, [r7, #4]
 801d0f2:	2b00      	cmp	r3, #0
 801d0f4:	d106      	bne.n	801d104 <tcp_timewait_input+0x28>
 801d0f6:	4b2d      	ldr	r3, [pc, #180]	; (801d1ac <tcp_timewait_input+0xd0>)
 801d0f8:	f240 22ee 	movw	r2, #750	; 0x2ee
 801d0fc:	492c      	ldr	r1, [pc, #176]	; (801d1b0 <tcp_timewait_input+0xd4>)
 801d0fe:	482d      	ldr	r0, [pc, #180]	; (801d1b4 <tcp_timewait_input+0xd8>)
 801d100:	f006 ff72 	bl	8023fe8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801d104:	4b28      	ldr	r3, [pc, #160]	; (801d1a8 <tcp_timewait_input+0xcc>)
 801d106:	781b      	ldrb	r3, [r3, #0]
 801d108:	f003 0302 	and.w	r3, r3, #2
 801d10c:	2b00      	cmp	r3, #0
 801d10e:	d02a      	beq.n	801d166 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801d110:	4b29      	ldr	r3, [pc, #164]	; (801d1b8 <tcp_timewait_input+0xdc>)
 801d112:	681a      	ldr	r2, [r3, #0]
 801d114:	687b      	ldr	r3, [r7, #4]
 801d116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d118:	1ad3      	subs	r3, r2, r3
 801d11a:	2b00      	cmp	r3, #0
 801d11c:	db2d      	blt.n	801d17a <tcp_timewait_input+0x9e>
 801d11e:	4b26      	ldr	r3, [pc, #152]	; (801d1b8 <tcp_timewait_input+0xdc>)
 801d120:	681a      	ldr	r2, [r3, #0]
 801d122:	687b      	ldr	r3, [r7, #4]
 801d124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d126:	6879      	ldr	r1, [r7, #4]
 801d128:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d12a:	440b      	add	r3, r1
 801d12c:	1ad3      	subs	r3, r2, r3
 801d12e:	2b00      	cmp	r3, #0
 801d130:	dc23      	bgt.n	801d17a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d132:	4b22      	ldr	r3, [pc, #136]	; (801d1bc <tcp_timewait_input+0xe0>)
 801d134:	6819      	ldr	r1, [r3, #0]
 801d136:	4b22      	ldr	r3, [pc, #136]	; (801d1c0 <tcp_timewait_input+0xe4>)
 801d138:	881b      	ldrh	r3, [r3, #0]
 801d13a:	461a      	mov	r2, r3
 801d13c:	4b1e      	ldr	r3, [pc, #120]	; (801d1b8 <tcp_timewait_input+0xdc>)
 801d13e:	681b      	ldr	r3, [r3, #0]
 801d140:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d142:	4b20      	ldr	r3, [pc, #128]	; (801d1c4 <tcp_timewait_input+0xe8>)
 801d144:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d146:	885b      	ldrh	r3, [r3, #2]
 801d148:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d14a:	4a1e      	ldr	r2, [pc, #120]	; (801d1c4 <tcp_timewait_input+0xe8>)
 801d14c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d14e:	8812      	ldrh	r2, [r2, #0]
 801d150:	b292      	uxth	r2, r2
 801d152:	9202      	str	r2, [sp, #8]
 801d154:	9301      	str	r3, [sp, #4]
 801d156:	4b1c      	ldr	r3, [pc, #112]	; (801d1c8 <tcp_timewait_input+0xec>)
 801d158:	9300      	str	r3, [sp, #0]
 801d15a:	4b1c      	ldr	r3, [pc, #112]	; (801d1cc <tcp_timewait_input+0xf0>)
 801d15c:	4602      	mov	r2, r0
 801d15e:	6878      	ldr	r0, [r7, #4]
 801d160:	f003 fadc 	bl	802071c <tcp_rst>
      return;
 801d164:	e01c      	b.n	801d1a0 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 801d166:	4b10      	ldr	r3, [pc, #64]	; (801d1a8 <tcp_timewait_input+0xcc>)
 801d168:	781b      	ldrb	r3, [r3, #0]
 801d16a:	f003 0301 	and.w	r3, r3, #1
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d003      	beq.n	801d17a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801d172:	4b17      	ldr	r3, [pc, #92]	; (801d1d0 <tcp_timewait_input+0xf4>)
 801d174:	681a      	ldr	r2, [r3, #0]
 801d176:	687b      	ldr	r3, [r7, #4]
 801d178:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801d17a:	4b11      	ldr	r3, [pc, #68]	; (801d1c0 <tcp_timewait_input+0xe4>)
 801d17c:	881b      	ldrh	r3, [r3, #0]
 801d17e:	2b00      	cmp	r3, #0
 801d180:	d00d      	beq.n	801d19e <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801d182:	687b      	ldr	r3, [r7, #4]
 801d184:	8b5b      	ldrh	r3, [r3, #26]
 801d186:	f043 0302 	orr.w	r3, r3, #2
 801d18a:	b29a      	uxth	r2, r3
 801d18c:	687b      	ldr	r3, [r7, #4]
 801d18e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801d190:	6878      	ldr	r0, [r7, #4]
 801d192:	f002 fcfd 	bl	801fb90 <tcp_output>
  }
  return;
 801d196:	bf00      	nop
 801d198:	e001      	b.n	801d19e <tcp_timewait_input+0xc2>
    return;
 801d19a:	bf00      	nop
 801d19c:	e000      	b.n	801d1a0 <tcp_timewait_input+0xc4>
  return;
 801d19e:	bf00      	nop
}
 801d1a0:	3708      	adds	r7, #8
 801d1a2:	46bd      	mov	sp, r7
 801d1a4:	bd80      	pop	{r7, pc}
 801d1a6:	bf00      	nop
 801d1a8:	20008a98 	.word	0x20008a98
 801d1ac:	08027758 	.word	0x08027758
 801d1b0:	0802798c 	.word	0x0802798c
 801d1b4:	080277c0 	.word	0x080277c0
 801d1b8:	20008a8c 	.word	0x20008a8c
 801d1bc:	20008a90 	.word	0x20008a90
 801d1c0:	20008a96 	.word	0x20008a96
 801d1c4:	20008a7c 	.word	0x20008a7c
 801d1c8:	2000dfa8 	.word	0x2000dfa8
 801d1cc:	2000dfac 	.word	0x2000dfac
 801d1d0:	20011820 	.word	0x20011820

0801d1d4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801d1d4:	b590      	push	{r4, r7, lr}
 801d1d6:	b08d      	sub	sp, #52	; 0x34
 801d1d8:	af04      	add	r7, sp, #16
 801d1da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801d1dc:	2300      	movs	r3, #0
 801d1de:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801d1e0:	2300      	movs	r3, #0
 801d1e2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801d1e4:	687b      	ldr	r3, [r7, #4]
 801d1e6:	2b00      	cmp	r3, #0
 801d1e8:	d106      	bne.n	801d1f8 <tcp_process+0x24>
 801d1ea:	4ba5      	ldr	r3, [pc, #660]	; (801d480 <tcp_process+0x2ac>)
 801d1ec:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801d1f0:	49a4      	ldr	r1, [pc, #656]	; (801d484 <tcp_process+0x2b0>)
 801d1f2:	48a5      	ldr	r0, [pc, #660]	; (801d488 <tcp_process+0x2b4>)
 801d1f4:	f006 fef8 	bl	8023fe8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801d1f8:	4ba4      	ldr	r3, [pc, #656]	; (801d48c <tcp_process+0x2b8>)
 801d1fa:	781b      	ldrb	r3, [r3, #0]
 801d1fc:	f003 0304 	and.w	r3, r3, #4
 801d200:	2b00      	cmp	r3, #0
 801d202:	d04e      	beq.n	801d2a2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801d204:	687b      	ldr	r3, [r7, #4]
 801d206:	7d1b      	ldrb	r3, [r3, #20]
 801d208:	2b02      	cmp	r3, #2
 801d20a:	d108      	bne.n	801d21e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801d20c:	687b      	ldr	r3, [r7, #4]
 801d20e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d210:	4b9f      	ldr	r3, [pc, #636]	; (801d490 <tcp_process+0x2bc>)
 801d212:	681b      	ldr	r3, [r3, #0]
 801d214:	429a      	cmp	r2, r3
 801d216:	d123      	bne.n	801d260 <tcp_process+0x8c>
        acceptable = 1;
 801d218:	2301      	movs	r3, #1
 801d21a:	76fb      	strb	r3, [r7, #27]
 801d21c:	e020      	b.n	801d260 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801d21e:	687b      	ldr	r3, [r7, #4]
 801d220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d222:	4b9c      	ldr	r3, [pc, #624]	; (801d494 <tcp_process+0x2c0>)
 801d224:	681b      	ldr	r3, [r3, #0]
 801d226:	429a      	cmp	r2, r3
 801d228:	d102      	bne.n	801d230 <tcp_process+0x5c>
        acceptable = 1;
 801d22a:	2301      	movs	r3, #1
 801d22c:	76fb      	strb	r3, [r7, #27]
 801d22e:	e017      	b.n	801d260 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d230:	4b98      	ldr	r3, [pc, #608]	; (801d494 <tcp_process+0x2c0>)
 801d232:	681a      	ldr	r2, [r3, #0]
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d238:	1ad3      	subs	r3, r2, r3
 801d23a:	2b00      	cmp	r3, #0
 801d23c:	db10      	blt.n	801d260 <tcp_process+0x8c>
 801d23e:	4b95      	ldr	r3, [pc, #596]	; (801d494 <tcp_process+0x2c0>)
 801d240:	681a      	ldr	r2, [r3, #0]
 801d242:	687b      	ldr	r3, [r7, #4]
 801d244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d246:	6879      	ldr	r1, [r7, #4]
 801d248:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d24a:	440b      	add	r3, r1
 801d24c:	1ad3      	subs	r3, r2, r3
 801d24e:	2b00      	cmp	r3, #0
 801d250:	dc06      	bgt.n	801d260 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801d252:	687b      	ldr	r3, [r7, #4]
 801d254:	8b5b      	ldrh	r3, [r3, #26]
 801d256:	f043 0302 	orr.w	r3, r3, #2
 801d25a:	b29a      	uxth	r2, r3
 801d25c:	687b      	ldr	r3, [r7, #4]
 801d25e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801d260:	7efb      	ldrb	r3, [r7, #27]
 801d262:	2b00      	cmp	r3, #0
 801d264:	d01b      	beq.n	801d29e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801d266:	687b      	ldr	r3, [r7, #4]
 801d268:	7d1b      	ldrb	r3, [r3, #20]
 801d26a:	2b00      	cmp	r3, #0
 801d26c:	d106      	bne.n	801d27c <tcp_process+0xa8>
 801d26e:	4b84      	ldr	r3, [pc, #528]	; (801d480 <tcp_process+0x2ac>)
 801d270:	f44f 724e 	mov.w	r2, #824	; 0x338
 801d274:	4988      	ldr	r1, [pc, #544]	; (801d498 <tcp_process+0x2c4>)
 801d276:	4884      	ldr	r0, [pc, #528]	; (801d488 <tcp_process+0x2b4>)
 801d278:	f006 feb6 	bl	8023fe8 <iprintf>
      recv_flags |= TF_RESET;
 801d27c:	4b87      	ldr	r3, [pc, #540]	; (801d49c <tcp_process+0x2c8>)
 801d27e:	781b      	ldrb	r3, [r3, #0]
 801d280:	f043 0308 	orr.w	r3, r3, #8
 801d284:	b2da      	uxtb	r2, r3
 801d286:	4b85      	ldr	r3, [pc, #532]	; (801d49c <tcp_process+0x2c8>)
 801d288:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801d28a:	687b      	ldr	r3, [r7, #4]
 801d28c:	8b5b      	ldrh	r3, [r3, #26]
 801d28e:	f023 0301 	bic.w	r3, r3, #1
 801d292:	b29a      	uxth	r2, r3
 801d294:	687b      	ldr	r3, [r7, #4]
 801d296:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801d298:	f06f 030d 	mvn.w	r3, #13
 801d29c:	e37a      	b.n	801d994 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801d29e:	2300      	movs	r3, #0
 801d2a0:	e378      	b.n	801d994 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801d2a2:	4b7a      	ldr	r3, [pc, #488]	; (801d48c <tcp_process+0x2b8>)
 801d2a4:	781b      	ldrb	r3, [r3, #0]
 801d2a6:	f003 0302 	and.w	r3, r3, #2
 801d2aa:	2b00      	cmp	r3, #0
 801d2ac:	d010      	beq.n	801d2d0 <tcp_process+0xfc>
 801d2ae:	687b      	ldr	r3, [r7, #4]
 801d2b0:	7d1b      	ldrb	r3, [r3, #20]
 801d2b2:	2b02      	cmp	r3, #2
 801d2b4:	d00c      	beq.n	801d2d0 <tcp_process+0xfc>
 801d2b6:	687b      	ldr	r3, [r7, #4]
 801d2b8:	7d1b      	ldrb	r3, [r3, #20]
 801d2ba:	2b03      	cmp	r3, #3
 801d2bc:	d008      	beq.n	801d2d0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801d2be:	687b      	ldr	r3, [r7, #4]
 801d2c0:	8b5b      	ldrh	r3, [r3, #26]
 801d2c2:	f043 0302 	orr.w	r3, r3, #2
 801d2c6:	b29a      	uxth	r2, r3
 801d2c8:	687b      	ldr	r3, [r7, #4]
 801d2ca:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801d2cc:	2300      	movs	r3, #0
 801d2ce:	e361      	b.n	801d994 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801d2d0:	687b      	ldr	r3, [r7, #4]
 801d2d2:	8b5b      	ldrh	r3, [r3, #26]
 801d2d4:	f003 0310 	and.w	r3, r3, #16
 801d2d8:	2b00      	cmp	r3, #0
 801d2da:	d103      	bne.n	801d2e4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801d2dc:	4b70      	ldr	r3, [pc, #448]	; (801d4a0 <tcp_process+0x2cc>)
 801d2de:	681a      	ldr	r2, [r3, #0]
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801d2e4:	687b      	ldr	r3, [r7, #4]
 801d2e6:	2200      	movs	r2, #0
 801d2e8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801d2ec:	687b      	ldr	r3, [r7, #4]
 801d2ee:	2200      	movs	r2, #0
 801d2f0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801d2f4:	6878      	ldr	r0, [r7, #4]
 801d2f6:	f001 fc2d 	bl	801eb54 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801d2fa:	687b      	ldr	r3, [r7, #4]
 801d2fc:	7d1b      	ldrb	r3, [r3, #20]
 801d2fe:	3b02      	subs	r3, #2
 801d300:	2b07      	cmp	r3, #7
 801d302:	f200 8337 	bhi.w	801d974 <tcp_process+0x7a0>
 801d306:	a201      	add	r2, pc, #4	; (adr r2, 801d30c <tcp_process+0x138>)
 801d308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d30c:	0801d32d 	.word	0x0801d32d
 801d310:	0801d55d 	.word	0x0801d55d
 801d314:	0801d6d5 	.word	0x0801d6d5
 801d318:	0801d6ff 	.word	0x0801d6ff
 801d31c:	0801d823 	.word	0x0801d823
 801d320:	0801d6d5 	.word	0x0801d6d5
 801d324:	0801d8af 	.word	0x0801d8af
 801d328:	0801d93f 	.word	0x0801d93f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801d32c:	4b57      	ldr	r3, [pc, #348]	; (801d48c <tcp_process+0x2b8>)
 801d32e:	781b      	ldrb	r3, [r3, #0]
 801d330:	f003 0310 	and.w	r3, r3, #16
 801d334:	2b00      	cmp	r3, #0
 801d336:	f000 80e4 	beq.w	801d502 <tcp_process+0x32e>
 801d33a:	4b54      	ldr	r3, [pc, #336]	; (801d48c <tcp_process+0x2b8>)
 801d33c:	781b      	ldrb	r3, [r3, #0]
 801d33e:	f003 0302 	and.w	r3, r3, #2
 801d342:	2b00      	cmp	r3, #0
 801d344:	f000 80dd 	beq.w	801d502 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801d348:	687b      	ldr	r3, [r7, #4]
 801d34a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d34c:	1c5a      	adds	r2, r3, #1
 801d34e:	4b50      	ldr	r3, [pc, #320]	; (801d490 <tcp_process+0x2bc>)
 801d350:	681b      	ldr	r3, [r3, #0]
 801d352:	429a      	cmp	r2, r3
 801d354:	f040 80d5 	bne.w	801d502 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801d358:	4b4e      	ldr	r3, [pc, #312]	; (801d494 <tcp_process+0x2c0>)
 801d35a:	681b      	ldr	r3, [r3, #0]
 801d35c:	1c5a      	adds	r2, r3, #1
 801d35e:	687b      	ldr	r3, [r7, #4]
 801d360:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801d362:	687b      	ldr	r3, [r7, #4]
 801d364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d366:	687b      	ldr	r3, [r7, #4]
 801d368:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801d36a:	4b49      	ldr	r3, [pc, #292]	; (801d490 <tcp_process+0x2bc>)
 801d36c:	681a      	ldr	r2, [r3, #0]
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801d372:	4b4c      	ldr	r3, [pc, #304]	; (801d4a4 <tcp_process+0x2d0>)
 801d374:	681b      	ldr	r3, [r3, #0]
 801d376:	89db      	ldrh	r3, [r3, #14]
 801d378:	b29a      	uxth	r2, r3
 801d37a:	687b      	ldr	r3, [r7, #4]
 801d37c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801d380:	687b      	ldr	r3, [r7, #4]
 801d382:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801d386:	687b      	ldr	r3, [r7, #4]
 801d388:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801d38c:	4b41      	ldr	r3, [pc, #260]	; (801d494 <tcp_process+0x2c0>)
 801d38e:	681b      	ldr	r3, [r3, #0]
 801d390:	1e5a      	subs	r2, r3, #1
 801d392:	687b      	ldr	r3, [r7, #4]
 801d394:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801d396:	687b      	ldr	r3, [r7, #4]
 801d398:	2204      	movs	r2, #4
 801d39a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801d3a0:	687b      	ldr	r3, [r7, #4]
 801d3a2:	3304      	adds	r3, #4
 801d3a4:	4618      	mov	r0, r3
 801d3a6:	f7fa f88d 	bl	80174c4 <ip4_route>
 801d3aa:	4601      	mov	r1, r0
 801d3ac:	687b      	ldr	r3, [r7, #4]
 801d3ae:	3304      	adds	r3, #4
 801d3b0:	461a      	mov	r2, r3
 801d3b2:	4620      	mov	r0, r4
 801d3b4:	f7ff f88e 	bl	801c4d4 <tcp_eff_send_mss_netif>
 801d3b8:	4603      	mov	r3, r0
 801d3ba:	461a      	mov	r2, r3
 801d3bc:	687b      	ldr	r3, [r7, #4]
 801d3be:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801d3c0:	687b      	ldr	r3, [r7, #4]
 801d3c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d3c4:	009a      	lsls	r2, r3, #2
 801d3c6:	687b      	ldr	r3, [r7, #4]
 801d3c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d3ca:	005b      	lsls	r3, r3, #1
 801d3cc:	f241 111c 	movw	r1, #4380	; 0x111c
 801d3d0:	428b      	cmp	r3, r1
 801d3d2:	bf38      	it	cc
 801d3d4:	460b      	movcc	r3, r1
 801d3d6:	429a      	cmp	r2, r3
 801d3d8:	d204      	bcs.n	801d3e4 <tcp_process+0x210>
 801d3da:	687b      	ldr	r3, [r7, #4]
 801d3dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d3de:	009b      	lsls	r3, r3, #2
 801d3e0:	b29b      	uxth	r3, r3
 801d3e2:	e00d      	b.n	801d400 <tcp_process+0x22c>
 801d3e4:	687b      	ldr	r3, [r7, #4]
 801d3e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d3e8:	005b      	lsls	r3, r3, #1
 801d3ea:	f241 121c 	movw	r2, #4380	; 0x111c
 801d3ee:	4293      	cmp	r3, r2
 801d3f0:	d904      	bls.n	801d3fc <tcp_process+0x228>
 801d3f2:	687b      	ldr	r3, [r7, #4]
 801d3f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d3f6:	005b      	lsls	r3, r3, #1
 801d3f8:	b29b      	uxth	r3, r3
 801d3fa:	e001      	b.n	801d400 <tcp_process+0x22c>
 801d3fc:	f241 131c 	movw	r3, #4380	; 0x111c
 801d400:	687a      	ldr	r2, [r7, #4]
 801d402:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801d406:	687b      	ldr	r3, [r7, #4]
 801d408:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d40c:	2b00      	cmp	r3, #0
 801d40e:	d106      	bne.n	801d41e <tcp_process+0x24a>
 801d410:	4b1b      	ldr	r3, [pc, #108]	; (801d480 <tcp_process+0x2ac>)
 801d412:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801d416:	4924      	ldr	r1, [pc, #144]	; (801d4a8 <tcp_process+0x2d4>)
 801d418:	481b      	ldr	r0, [pc, #108]	; (801d488 <tcp_process+0x2b4>)
 801d41a:	f006 fde5 	bl	8023fe8 <iprintf>
        --pcb->snd_queuelen;
 801d41e:	687b      	ldr	r3, [r7, #4]
 801d420:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d424:	3b01      	subs	r3, #1
 801d426:	b29a      	uxth	r2, r3
 801d428:	687b      	ldr	r3, [r7, #4]
 801d42a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801d42e:	687b      	ldr	r3, [r7, #4]
 801d430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d432:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801d434:	69fb      	ldr	r3, [r7, #28]
 801d436:	2b00      	cmp	r3, #0
 801d438:	d111      	bne.n	801d45e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801d43a:	687b      	ldr	r3, [r7, #4]
 801d43c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d43e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801d440:	69fb      	ldr	r3, [r7, #28]
 801d442:	2b00      	cmp	r3, #0
 801d444:	d106      	bne.n	801d454 <tcp_process+0x280>
 801d446:	4b0e      	ldr	r3, [pc, #56]	; (801d480 <tcp_process+0x2ac>)
 801d448:	f44f 725d 	mov.w	r2, #884	; 0x374
 801d44c:	4917      	ldr	r1, [pc, #92]	; (801d4ac <tcp_process+0x2d8>)
 801d44e:	480e      	ldr	r0, [pc, #56]	; (801d488 <tcp_process+0x2b4>)
 801d450:	f006 fdca 	bl	8023fe8 <iprintf>
          pcb->unsent = rseg->next;
 801d454:	69fb      	ldr	r3, [r7, #28]
 801d456:	681a      	ldr	r2, [r3, #0]
 801d458:	687b      	ldr	r3, [r7, #4]
 801d45a:	66da      	str	r2, [r3, #108]	; 0x6c
 801d45c:	e003      	b.n	801d466 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801d45e:	69fb      	ldr	r3, [r7, #28]
 801d460:	681a      	ldr	r2, [r3, #0]
 801d462:	687b      	ldr	r3, [r7, #4]
 801d464:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801d466:	69f8      	ldr	r0, [r7, #28]
 801d468:	f7fe fc70 	bl	801bd4c <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801d46c:	687b      	ldr	r3, [r7, #4]
 801d46e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d470:	2b00      	cmp	r3, #0
 801d472:	d11d      	bne.n	801d4b0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801d474:	687b      	ldr	r3, [r7, #4]
 801d476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d47a:	861a      	strh	r2, [r3, #48]	; 0x30
 801d47c:	e01f      	b.n	801d4be <tcp_process+0x2ea>
 801d47e:	bf00      	nop
 801d480:	08027758 	.word	0x08027758
 801d484:	080279ac 	.word	0x080279ac
 801d488:	080277c0 	.word	0x080277c0
 801d48c:	20008a98 	.word	0x20008a98
 801d490:	20008a90 	.word	0x20008a90
 801d494:	20008a8c 	.word	0x20008a8c
 801d498:	080279c8 	.word	0x080279c8
 801d49c:	20008a99 	.word	0x20008a99
 801d4a0:	20011820 	.word	0x20011820
 801d4a4:	20008a7c 	.word	0x20008a7c
 801d4a8:	080279e8 	.word	0x080279e8
 801d4ac:	08027a00 	.word	0x08027a00
        } else {
          pcb->rtime = 0;
 801d4b0:	687b      	ldr	r3, [r7, #4]
 801d4b2:	2200      	movs	r2, #0
 801d4b4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801d4b6:	687b      	ldr	r3, [r7, #4]
 801d4b8:	2200      	movs	r2, #0
 801d4ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801d4be:	687b      	ldr	r3, [r7, #4]
 801d4c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d4c4:	2b00      	cmp	r3, #0
 801d4c6:	d00a      	beq.n	801d4de <tcp_process+0x30a>
 801d4c8:	687b      	ldr	r3, [r7, #4]
 801d4ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d4ce:	687a      	ldr	r2, [r7, #4]
 801d4d0:	6910      	ldr	r0, [r2, #16]
 801d4d2:	2200      	movs	r2, #0
 801d4d4:	6879      	ldr	r1, [r7, #4]
 801d4d6:	4798      	blx	r3
 801d4d8:	4603      	mov	r3, r0
 801d4da:	76bb      	strb	r3, [r7, #26]
 801d4dc:	e001      	b.n	801d4e2 <tcp_process+0x30e>
 801d4de:	2300      	movs	r3, #0
 801d4e0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801d4e2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801d4e6:	f113 0f0d 	cmn.w	r3, #13
 801d4ea:	d102      	bne.n	801d4f2 <tcp_process+0x31e>
          return ERR_ABRT;
 801d4ec:	f06f 030c 	mvn.w	r3, #12
 801d4f0:	e250      	b.n	801d994 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801d4f2:	687b      	ldr	r3, [r7, #4]
 801d4f4:	8b5b      	ldrh	r3, [r3, #26]
 801d4f6:	f043 0302 	orr.w	r3, r3, #2
 801d4fa:	b29a      	uxth	r2, r3
 801d4fc:	687b      	ldr	r3, [r7, #4]
 801d4fe:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801d500:	e23a      	b.n	801d978 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801d502:	4b9d      	ldr	r3, [pc, #628]	; (801d778 <tcp_process+0x5a4>)
 801d504:	781b      	ldrb	r3, [r3, #0]
 801d506:	f003 0310 	and.w	r3, r3, #16
 801d50a:	2b00      	cmp	r3, #0
 801d50c:	f000 8234 	beq.w	801d978 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d510:	4b9a      	ldr	r3, [pc, #616]	; (801d77c <tcp_process+0x5a8>)
 801d512:	6819      	ldr	r1, [r3, #0]
 801d514:	4b9a      	ldr	r3, [pc, #616]	; (801d780 <tcp_process+0x5ac>)
 801d516:	881b      	ldrh	r3, [r3, #0]
 801d518:	461a      	mov	r2, r3
 801d51a:	4b9a      	ldr	r3, [pc, #616]	; (801d784 <tcp_process+0x5b0>)
 801d51c:	681b      	ldr	r3, [r3, #0]
 801d51e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d520:	4b99      	ldr	r3, [pc, #612]	; (801d788 <tcp_process+0x5b4>)
 801d522:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d524:	885b      	ldrh	r3, [r3, #2]
 801d526:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d528:	4a97      	ldr	r2, [pc, #604]	; (801d788 <tcp_process+0x5b4>)
 801d52a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d52c:	8812      	ldrh	r2, [r2, #0]
 801d52e:	b292      	uxth	r2, r2
 801d530:	9202      	str	r2, [sp, #8]
 801d532:	9301      	str	r3, [sp, #4]
 801d534:	4b95      	ldr	r3, [pc, #596]	; (801d78c <tcp_process+0x5b8>)
 801d536:	9300      	str	r3, [sp, #0]
 801d538:	4b95      	ldr	r3, [pc, #596]	; (801d790 <tcp_process+0x5bc>)
 801d53a:	4602      	mov	r2, r0
 801d53c:	6878      	ldr	r0, [r7, #4]
 801d53e:	f003 f8ed 	bl	802071c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801d542:	687b      	ldr	r3, [r7, #4]
 801d544:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d548:	2b05      	cmp	r3, #5
 801d54a:	f200 8215 	bhi.w	801d978 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801d54e:	687b      	ldr	r3, [r7, #4]
 801d550:	2200      	movs	r2, #0
 801d552:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801d554:	6878      	ldr	r0, [r7, #4]
 801d556:	f002 feab 	bl	80202b0 <tcp_rexmit_rto>
      break;
 801d55a:	e20d      	b.n	801d978 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801d55c:	4b86      	ldr	r3, [pc, #536]	; (801d778 <tcp_process+0x5a4>)
 801d55e:	781b      	ldrb	r3, [r3, #0]
 801d560:	f003 0310 	and.w	r3, r3, #16
 801d564:	2b00      	cmp	r3, #0
 801d566:	f000 80a1 	beq.w	801d6ac <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801d56a:	4b84      	ldr	r3, [pc, #528]	; (801d77c <tcp_process+0x5a8>)
 801d56c:	681a      	ldr	r2, [r3, #0]
 801d56e:	687b      	ldr	r3, [r7, #4]
 801d570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d572:	1ad3      	subs	r3, r2, r3
 801d574:	3b01      	subs	r3, #1
 801d576:	2b00      	cmp	r3, #0
 801d578:	db7e      	blt.n	801d678 <tcp_process+0x4a4>
 801d57a:	4b80      	ldr	r3, [pc, #512]	; (801d77c <tcp_process+0x5a8>)
 801d57c:	681a      	ldr	r2, [r3, #0]
 801d57e:	687b      	ldr	r3, [r7, #4]
 801d580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d582:	1ad3      	subs	r3, r2, r3
 801d584:	2b00      	cmp	r3, #0
 801d586:	dc77      	bgt.n	801d678 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801d588:	687b      	ldr	r3, [r7, #4]
 801d58a:	2204      	movs	r2, #4
 801d58c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801d58e:	687b      	ldr	r3, [r7, #4]
 801d590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d592:	2b00      	cmp	r3, #0
 801d594:	d102      	bne.n	801d59c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801d596:	23fa      	movs	r3, #250	; 0xfa
 801d598:	76bb      	strb	r3, [r7, #26]
 801d59a:	e01d      	b.n	801d5d8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801d59c:	687b      	ldr	r3, [r7, #4]
 801d59e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d5a0:	699b      	ldr	r3, [r3, #24]
 801d5a2:	2b00      	cmp	r3, #0
 801d5a4:	d106      	bne.n	801d5b4 <tcp_process+0x3e0>
 801d5a6:	4b7b      	ldr	r3, [pc, #492]	; (801d794 <tcp_process+0x5c0>)
 801d5a8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801d5ac:	497a      	ldr	r1, [pc, #488]	; (801d798 <tcp_process+0x5c4>)
 801d5ae:	487b      	ldr	r0, [pc, #492]	; (801d79c <tcp_process+0x5c8>)
 801d5b0:	f006 fd1a 	bl	8023fe8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801d5b4:	687b      	ldr	r3, [r7, #4]
 801d5b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d5b8:	699b      	ldr	r3, [r3, #24]
 801d5ba:	2b00      	cmp	r3, #0
 801d5bc:	d00a      	beq.n	801d5d4 <tcp_process+0x400>
 801d5be:	687b      	ldr	r3, [r7, #4]
 801d5c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d5c2:	699b      	ldr	r3, [r3, #24]
 801d5c4:	687a      	ldr	r2, [r7, #4]
 801d5c6:	6910      	ldr	r0, [r2, #16]
 801d5c8:	2200      	movs	r2, #0
 801d5ca:	6879      	ldr	r1, [r7, #4]
 801d5cc:	4798      	blx	r3
 801d5ce:	4603      	mov	r3, r0
 801d5d0:	76bb      	strb	r3, [r7, #26]
 801d5d2:	e001      	b.n	801d5d8 <tcp_process+0x404>
 801d5d4:	23f0      	movs	r3, #240	; 0xf0
 801d5d6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801d5d8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801d5dc:	2b00      	cmp	r3, #0
 801d5de:	d00a      	beq.n	801d5f6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801d5e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801d5e4:	f113 0f0d 	cmn.w	r3, #13
 801d5e8:	d002      	beq.n	801d5f0 <tcp_process+0x41c>
              tcp_abort(pcb);
 801d5ea:	6878      	ldr	r0, [r7, #4]
 801d5ec:	f7fd fd1e 	bl	801b02c <tcp_abort>
            }
            return ERR_ABRT;
 801d5f0:	f06f 030c 	mvn.w	r3, #12
 801d5f4:	e1ce      	b.n	801d994 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801d5f6:	6878      	ldr	r0, [r7, #4]
 801d5f8:	f000 fae0 	bl	801dbbc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801d5fc:	4b68      	ldr	r3, [pc, #416]	; (801d7a0 <tcp_process+0x5cc>)
 801d5fe:	881b      	ldrh	r3, [r3, #0]
 801d600:	2b00      	cmp	r3, #0
 801d602:	d005      	beq.n	801d610 <tcp_process+0x43c>
            recv_acked--;
 801d604:	4b66      	ldr	r3, [pc, #408]	; (801d7a0 <tcp_process+0x5cc>)
 801d606:	881b      	ldrh	r3, [r3, #0]
 801d608:	3b01      	subs	r3, #1
 801d60a:	b29a      	uxth	r2, r3
 801d60c:	4b64      	ldr	r3, [pc, #400]	; (801d7a0 <tcp_process+0x5cc>)
 801d60e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801d610:	687b      	ldr	r3, [r7, #4]
 801d612:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d614:	009a      	lsls	r2, r3, #2
 801d616:	687b      	ldr	r3, [r7, #4]
 801d618:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d61a:	005b      	lsls	r3, r3, #1
 801d61c:	f241 111c 	movw	r1, #4380	; 0x111c
 801d620:	428b      	cmp	r3, r1
 801d622:	bf38      	it	cc
 801d624:	460b      	movcc	r3, r1
 801d626:	429a      	cmp	r2, r3
 801d628:	d204      	bcs.n	801d634 <tcp_process+0x460>
 801d62a:	687b      	ldr	r3, [r7, #4]
 801d62c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d62e:	009b      	lsls	r3, r3, #2
 801d630:	b29b      	uxth	r3, r3
 801d632:	e00d      	b.n	801d650 <tcp_process+0x47c>
 801d634:	687b      	ldr	r3, [r7, #4]
 801d636:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d638:	005b      	lsls	r3, r3, #1
 801d63a:	f241 121c 	movw	r2, #4380	; 0x111c
 801d63e:	4293      	cmp	r3, r2
 801d640:	d904      	bls.n	801d64c <tcp_process+0x478>
 801d642:	687b      	ldr	r3, [r7, #4]
 801d644:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d646:	005b      	lsls	r3, r3, #1
 801d648:	b29b      	uxth	r3, r3
 801d64a:	e001      	b.n	801d650 <tcp_process+0x47c>
 801d64c:	f241 131c 	movw	r3, #4380	; 0x111c
 801d650:	687a      	ldr	r2, [r7, #4]
 801d652:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801d656:	4b53      	ldr	r3, [pc, #332]	; (801d7a4 <tcp_process+0x5d0>)
 801d658:	781b      	ldrb	r3, [r3, #0]
 801d65a:	f003 0320 	and.w	r3, r3, #32
 801d65e:	2b00      	cmp	r3, #0
 801d660:	d037      	beq.n	801d6d2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801d662:	687b      	ldr	r3, [r7, #4]
 801d664:	8b5b      	ldrh	r3, [r3, #26]
 801d666:	f043 0302 	orr.w	r3, r3, #2
 801d66a:	b29a      	uxth	r2, r3
 801d66c:	687b      	ldr	r3, [r7, #4]
 801d66e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801d670:	687b      	ldr	r3, [r7, #4]
 801d672:	2207      	movs	r2, #7
 801d674:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801d676:	e02c      	b.n	801d6d2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d678:	4b40      	ldr	r3, [pc, #256]	; (801d77c <tcp_process+0x5a8>)
 801d67a:	6819      	ldr	r1, [r3, #0]
 801d67c:	4b40      	ldr	r3, [pc, #256]	; (801d780 <tcp_process+0x5ac>)
 801d67e:	881b      	ldrh	r3, [r3, #0]
 801d680:	461a      	mov	r2, r3
 801d682:	4b40      	ldr	r3, [pc, #256]	; (801d784 <tcp_process+0x5b0>)
 801d684:	681b      	ldr	r3, [r3, #0]
 801d686:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d688:	4b3f      	ldr	r3, [pc, #252]	; (801d788 <tcp_process+0x5b4>)
 801d68a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d68c:	885b      	ldrh	r3, [r3, #2]
 801d68e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801d690:	4a3d      	ldr	r2, [pc, #244]	; (801d788 <tcp_process+0x5b4>)
 801d692:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801d694:	8812      	ldrh	r2, [r2, #0]
 801d696:	b292      	uxth	r2, r2
 801d698:	9202      	str	r2, [sp, #8]
 801d69a:	9301      	str	r3, [sp, #4]
 801d69c:	4b3b      	ldr	r3, [pc, #236]	; (801d78c <tcp_process+0x5b8>)
 801d69e:	9300      	str	r3, [sp, #0]
 801d6a0:	4b3b      	ldr	r3, [pc, #236]	; (801d790 <tcp_process+0x5bc>)
 801d6a2:	4602      	mov	r2, r0
 801d6a4:	6878      	ldr	r0, [r7, #4]
 801d6a6:	f003 f839 	bl	802071c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801d6aa:	e167      	b.n	801d97c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801d6ac:	4b32      	ldr	r3, [pc, #200]	; (801d778 <tcp_process+0x5a4>)
 801d6ae:	781b      	ldrb	r3, [r3, #0]
 801d6b0:	f003 0302 	and.w	r3, r3, #2
 801d6b4:	2b00      	cmp	r3, #0
 801d6b6:	f000 8161 	beq.w	801d97c <tcp_process+0x7a8>
 801d6ba:	687b      	ldr	r3, [r7, #4]
 801d6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d6be:	1e5a      	subs	r2, r3, #1
 801d6c0:	4b30      	ldr	r3, [pc, #192]	; (801d784 <tcp_process+0x5b0>)
 801d6c2:	681b      	ldr	r3, [r3, #0]
 801d6c4:	429a      	cmp	r2, r3
 801d6c6:	f040 8159 	bne.w	801d97c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801d6ca:	6878      	ldr	r0, [r7, #4]
 801d6cc:	f002 fe12 	bl	80202f4 <tcp_rexmit>
      break;
 801d6d0:	e154      	b.n	801d97c <tcp_process+0x7a8>
 801d6d2:	e153      	b.n	801d97c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801d6d4:	6878      	ldr	r0, [r7, #4]
 801d6d6:	f000 fa71 	bl	801dbbc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801d6da:	4b32      	ldr	r3, [pc, #200]	; (801d7a4 <tcp_process+0x5d0>)
 801d6dc:	781b      	ldrb	r3, [r3, #0]
 801d6de:	f003 0320 	and.w	r3, r3, #32
 801d6e2:	2b00      	cmp	r3, #0
 801d6e4:	f000 814c 	beq.w	801d980 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801d6e8:	687b      	ldr	r3, [r7, #4]
 801d6ea:	8b5b      	ldrh	r3, [r3, #26]
 801d6ec:	f043 0302 	orr.w	r3, r3, #2
 801d6f0:	b29a      	uxth	r2, r3
 801d6f2:	687b      	ldr	r3, [r7, #4]
 801d6f4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801d6f6:	687b      	ldr	r3, [r7, #4]
 801d6f8:	2207      	movs	r2, #7
 801d6fa:	751a      	strb	r2, [r3, #20]
      }
      break;
 801d6fc:	e140      	b.n	801d980 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801d6fe:	6878      	ldr	r0, [r7, #4]
 801d700:	f000 fa5c 	bl	801dbbc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801d704:	4b27      	ldr	r3, [pc, #156]	; (801d7a4 <tcp_process+0x5d0>)
 801d706:	781b      	ldrb	r3, [r3, #0]
 801d708:	f003 0320 	and.w	r3, r3, #32
 801d70c:	2b00      	cmp	r3, #0
 801d70e:	d071      	beq.n	801d7f4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d710:	4b19      	ldr	r3, [pc, #100]	; (801d778 <tcp_process+0x5a4>)
 801d712:	781b      	ldrb	r3, [r3, #0]
 801d714:	f003 0310 	and.w	r3, r3, #16
 801d718:	2b00      	cmp	r3, #0
 801d71a:	d060      	beq.n	801d7de <tcp_process+0x60a>
 801d71c:	687b      	ldr	r3, [r7, #4]
 801d71e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d720:	4b16      	ldr	r3, [pc, #88]	; (801d77c <tcp_process+0x5a8>)
 801d722:	681b      	ldr	r3, [r3, #0]
 801d724:	429a      	cmp	r2, r3
 801d726:	d15a      	bne.n	801d7de <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801d728:	687b      	ldr	r3, [r7, #4]
 801d72a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d72c:	2b00      	cmp	r3, #0
 801d72e:	d156      	bne.n	801d7de <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801d730:	687b      	ldr	r3, [r7, #4]
 801d732:	8b5b      	ldrh	r3, [r3, #26]
 801d734:	f043 0302 	orr.w	r3, r3, #2
 801d738:	b29a      	uxth	r2, r3
 801d73a:	687b      	ldr	r3, [r7, #4]
 801d73c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801d73e:	6878      	ldr	r0, [r7, #4]
 801d740:	f7fe fdbe 	bl	801c2c0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801d744:	4b18      	ldr	r3, [pc, #96]	; (801d7a8 <tcp_process+0x5d4>)
 801d746:	681b      	ldr	r3, [r3, #0]
 801d748:	687a      	ldr	r2, [r7, #4]
 801d74a:	429a      	cmp	r2, r3
 801d74c:	d105      	bne.n	801d75a <tcp_process+0x586>
 801d74e:	4b16      	ldr	r3, [pc, #88]	; (801d7a8 <tcp_process+0x5d4>)
 801d750:	681b      	ldr	r3, [r3, #0]
 801d752:	68db      	ldr	r3, [r3, #12]
 801d754:	4a14      	ldr	r2, [pc, #80]	; (801d7a8 <tcp_process+0x5d4>)
 801d756:	6013      	str	r3, [r2, #0]
 801d758:	e02e      	b.n	801d7b8 <tcp_process+0x5e4>
 801d75a:	4b13      	ldr	r3, [pc, #76]	; (801d7a8 <tcp_process+0x5d4>)
 801d75c:	681b      	ldr	r3, [r3, #0]
 801d75e:	617b      	str	r3, [r7, #20]
 801d760:	e027      	b.n	801d7b2 <tcp_process+0x5de>
 801d762:	697b      	ldr	r3, [r7, #20]
 801d764:	68db      	ldr	r3, [r3, #12]
 801d766:	687a      	ldr	r2, [r7, #4]
 801d768:	429a      	cmp	r2, r3
 801d76a:	d11f      	bne.n	801d7ac <tcp_process+0x5d8>
 801d76c:	687b      	ldr	r3, [r7, #4]
 801d76e:	68da      	ldr	r2, [r3, #12]
 801d770:	697b      	ldr	r3, [r7, #20]
 801d772:	60da      	str	r2, [r3, #12]
 801d774:	e020      	b.n	801d7b8 <tcp_process+0x5e4>
 801d776:	bf00      	nop
 801d778:	20008a98 	.word	0x20008a98
 801d77c:	20008a90 	.word	0x20008a90
 801d780:	20008a96 	.word	0x20008a96
 801d784:	20008a8c 	.word	0x20008a8c
 801d788:	20008a7c 	.word	0x20008a7c
 801d78c:	2000dfa8 	.word	0x2000dfa8
 801d790:	2000dfac 	.word	0x2000dfac
 801d794:	08027758 	.word	0x08027758
 801d798:	08027a14 	.word	0x08027a14
 801d79c:	080277c0 	.word	0x080277c0
 801d7a0:	20008a94 	.word	0x20008a94
 801d7a4:	20008a99 	.word	0x20008a99
 801d7a8:	2001181c 	.word	0x2001181c
 801d7ac:	697b      	ldr	r3, [r7, #20]
 801d7ae:	68db      	ldr	r3, [r3, #12]
 801d7b0:	617b      	str	r3, [r7, #20]
 801d7b2:	697b      	ldr	r3, [r7, #20]
 801d7b4:	2b00      	cmp	r3, #0
 801d7b6:	d1d4      	bne.n	801d762 <tcp_process+0x58e>
 801d7b8:	687b      	ldr	r3, [r7, #4]
 801d7ba:	2200      	movs	r2, #0
 801d7bc:	60da      	str	r2, [r3, #12]
 801d7be:	4b77      	ldr	r3, [pc, #476]	; (801d99c <tcp_process+0x7c8>)
 801d7c0:	2201      	movs	r2, #1
 801d7c2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801d7c4:	687b      	ldr	r3, [r7, #4]
 801d7c6:	220a      	movs	r2, #10
 801d7c8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801d7ca:	4b75      	ldr	r3, [pc, #468]	; (801d9a0 <tcp_process+0x7cc>)
 801d7cc:	681a      	ldr	r2, [r3, #0]
 801d7ce:	687b      	ldr	r3, [r7, #4]
 801d7d0:	60da      	str	r2, [r3, #12]
 801d7d2:	4a73      	ldr	r2, [pc, #460]	; (801d9a0 <tcp_process+0x7cc>)
 801d7d4:	687b      	ldr	r3, [r7, #4]
 801d7d6:	6013      	str	r3, [r2, #0]
 801d7d8:	f003 fb16 	bl	8020e08 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801d7dc:	e0d2      	b.n	801d984 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	8b5b      	ldrh	r3, [r3, #26]
 801d7e2:	f043 0302 	orr.w	r3, r3, #2
 801d7e6:	b29a      	uxth	r2, r3
 801d7e8:	687b      	ldr	r3, [r7, #4]
 801d7ea:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801d7ec:	687b      	ldr	r3, [r7, #4]
 801d7ee:	2208      	movs	r2, #8
 801d7f0:	751a      	strb	r2, [r3, #20]
      break;
 801d7f2:	e0c7      	b.n	801d984 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d7f4:	4b6b      	ldr	r3, [pc, #428]	; (801d9a4 <tcp_process+0x7d0>)
 801d7f6:	781b      	ldrb	r3, [r3, #0]
 801d7f8:	f003 0310 	and.w	r3, r3, #16
 801d7fc:	2b00      	cmp	r3, #0
 801d7fe:	f000 80c1 	beq.w	801d984 <tcp_process+0x7b0>
 801d802:	687b      	ldr	r3, [r7, #4]
 801d804:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d806:	4b68      	ldr	r3, [pc, #416]	; (801d9a8 <tcp_process+0x7d4>)
 801d808:	681b      	ldr	r3, [r3, #0]
 801d80a:	429a      	cmp	r2, r3
 801d80c:	f040 80ba 	bne.w	801d984 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801d810:	687b      	ldr	r3, [r7, #4]
 801d812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801d814:	2b00      	cmp	r3, #0
 801d816:	f040 80b5 	bne.w	801d984 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801d81a:	687b      	ldr	r3, [r7, #4]
 801d81c:	2206      	movs	r2, #6
 801d81e:	751a      	strb	r2, [r3, #20]
      break;
 801d820:	e0b0      	b.n	801d984 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801d822:	6878      	ldr	r0, [r7, #4]
 801d824:	f000 f9ca 	bl	801dbbc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801d828:	4b60      	ldr	r3, [pc, #384]	; (801d9ac <tcp_process+0x7d8>)
 801d82a:	781b      	ldrb	r3, [r3, #0]
 801d82c:	f003 0320 	and.w	r3, r3, #32
 801d830:	2b00      	cmp	r3, #0
 801d832:	f000 80a9 	beq.w	801d988 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	8b5b      	ldrh	r3, [r3, #26]
 801d83a:	f043 0302 	orr.w	r3, r3, #2
 801d83e:	b29a      	uxth	r2, r3
 801d840:	687b      	ldr	r3, [r7, #4]
 801d842:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801d844:	6878      	ldr	r0, [r7, #4]
 801d846:	f7fe fd3b 	bl	801c2c0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801d84a:	4b59      	ldr	r3, [pc, #356]	; (801d9b0 <tcp_process+0x7dc>)
 801d84c:	681b      	ldr	r3, [r3, #0]
 801d84e:	687a      	ldr	r2, [r7, #4]
 801d850:	429a      	cmp	r2, r3
 801d852:	d105      	bne.n	801d860 <tcp_process+0x68c>
 801d854:	4b56      	ldr	r3, [pc, #344]	; (801d9b0 <tcp_process+0x7dc>)
 801d856:	681b      	ldr	r3, [r3, #0]
 801d858:	68db      	ldr	r3, [r3, #12]
 801d85a:	4a55      	ldr	r2, [pc, #340]	; (801d9b0 <tcp_process+0x7dc>)
 801d85c:	6013      	str	r3, [r2, #0]
 801d85e:	e013      	b.n	801d888 <tcp_process+0x6b4>
 801d860:	4b53      	ldr	r3, [pc, #332]	; (801d9b0 <tcp_process+0x7dc>)
 801d862:	681b      	ldr	r3, [r3, #0]
 801d864:	613b      	str	r3, [r7, #16]
 801d866:	e00c      	b.n	801d882 <tcp_process+0x6ae>
 801d868:	693b      	ldr	r3, [r7, #16]
 801d86a:	68db      	ldr	r3, [r3, #12]
 801d86c:	687a      	ldr	r2, [r7, #4]
 801d86e:	429a      	cmp	r2, r3
 801d870:	d104      	bne.n	801d87c <tcp_process+0x6a8>
 801d872:	687b      	ldr	r3, [r7, #4]
 801d874:	68da      	ldr	r2, [r3, #12]
 801d876:	693b      	ldr	r3, [r7, #16]
 801d878:	60da      	str	r2, [r3, #12]
 801d87a:	e005      	b.n	801d888 <tcp_process+0x6b4>
 801d87c:	693b      	ldr	r3, [r7, #16]
 801d87e:	68db      	ldr	r3, [r3, #12]
 801d880:	613b      	str	r3, [r7, #16]
 801d882:	693b      	ldr	r3, [r7, #16]
 801d884:	2b00      	cmp	r3, #0
 801d886:	d1ef      	bne.n	801d868 <tcp_process+0x694>
 801d888:	687b      	ldr	r3, [r7, #4]
 801d88a:	2200      	movs	r2, #0
 801d88c:	60da      	str	r2, [r3, #12]
 801d88e:	4b43      	ldr	r3, [pc, #268]	; (801d99c <tcp_process+0x7c8>)
 801d890:	2201      	movs	r2, #1
 801d892:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801d894:	687b      	ldr	r3, [r7, #4]
 801d896:	220a      	movs	r2, #10
 801d898:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d89a:	4b41      	ldr	r3, [pc, #260]	; (801d9a0 <tcp_process+0x7cc>)
 801d89c:	681a      	ldr	r2, [r3, #0]
 801d89e:	687b      	ldr	r3, [r7, #4]
 801d8a0:	60da      	str	r2, [r3, #12]
 801d8a2:	4a3f      	ldr	r2, [pc, #252]	; (801d9a0 <tcp_process+0x7cc>)
 801d8a4:	687b      	ldr	r3, [r7, #4]
 801d8a6:	6013      	str	r3, [r2, #0]
 801d8a8:	f003 faae 	bl	8020e08 <tcp_timer_needed>
      }
      break;
 801d8ac:	e06c      	b.n	801d988 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801d8ae:	6878      	ldr	r0, [r7, #4]
 801d8b0:	f000 f984 	bl	801dbbc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801d8b4:	4b3b      	ldr	r3, [pc, #236]	; (801d9a4 <tcp_process+0x7d0>)
 801d8b6:	781b      	ldrb	r3, [r3, #0]
 801d8b8:	f003 0310 	and.w	r3, r3, #16
 801d8bc:	2b00      	cmp	r3, #0
 801d8be:	d065      	beq.n	801d98c <tcp_process+0x7b8>
 801d8c0:	687b      	ldr	r3, [r7, #4]
 801d8c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d8c4:	4b38      	ldr	r3, [pc, #224]	; (801d9a8 <tcp_process+0x7d4>)
 801d8c6:	681b      	ldr	r3, [r3, #0]
 801d8c8:	429a      	cmp	r2, r3
 801d8ca:	d15f      	bne.n	801d98c <tcp_process+0x7b8>
 801d8cc:	687b      	ldr	r3, [r7, #4]
 801d8ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d8d0:	2b00      	cmp	r3, #0
 801d8d2:	d15b      	bne.n	801d98c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801d8d4:	6878      	ldr	r0, [r7, #4]
 801d8d6:	f7fe fcf3 	bl	801c2c0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801d8da:	4b35      	ldr	r3, [pc, #212]	; (801d9b0 <tcp_process+0x7dc>)
 801d8dc:	681b      	ldr	r3, [r3, #0]
 801d8de:	687a      	ldr	r2, [r7, #4]
 801d8e0:	429a      	cmp	r2, r3
 801d8e2:	d105      	bne.n	801d8f0 <tcp_process+0x71c>
 801d8e4:	4b32      	ldr	r3, [pc, #200]	; (801d9b0 <tcp_process+0x7dc>)
 801d8e6:	681b      	ldr	r3, [r3, #0]
 801d8e8:	68db      	ldr	r3, [r3, #12]
 801d8ea:	4a31      	ldr	r2, [pc, #196]	; (801d9b0 <tcp_process+0x7dc>)
 801d8ec:	6013      	str	r3, [r2, #0]
 801d8ee:	e013      	b.n	801d918 <tcp_process+0x744>
 801d8f0:	4b2f      	ldr	r3, [pc, #188]	; (801d9b0 <tcp_process+0x7dc>)
 801d8f2:	681b      	ldr	r3, [r3, #0]
 801d8f4:	60fb      	str	r3, [r7, #12]
 801d8f6:	e00c      	b.n	801d912 <tcp_process+0x73e>
 801d8f8:	68fb      	ldr	r3, [r7, #12]
 801d8fa:	68db      	ldr	r3, [r3, #12]
 801d8fc:	687a      	ldr	r2, [r7, #4]
 801d8fe:	429a      	cmp	r2, r3
 801d900:	d104      	bne.n	801d90c <tcp_process+0x738>
 801d902:	687b      	ldr	r3, [r7, #4]
 801d904:	68da      	ldr	r2, [r3, #12]
 801d906:	68fb      	ldr	r3, [r7, #12]
 801d908:	60da      	str	r2, [r3, #12]
 801d90a:	e005      	b.n	801d918 <tcp_process+0x744>
 801d90c:	68fb      	ldr	r3, [r7, #12]
 801d90e:	68db      	ldr	r3, [r3, #12]
 801d910:	60fb      	str	r3, [r7, #12]
 801d912:	68fb      	ldr	r3, [r7, #12]
 801d914:	2b00      	cmp	r3, #0
 801d916:	d1ef      	bne.n	801d8f8 <tcp_process+0x724>
 801d918:	687b      	ldr	r3, [r7, #4]
 801d91a:	2200      	movs	r2, #0
 801d91c:	60da      	str	r2, [r3, #12]
 801d91e:	4b1f      	ldr	r3, [pc, #124]	; (801d99c <tcp_process+0x7c8>)
 801d920:	2201      	movs	r2, #1
 801d922:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	220a      	movs	r2, #10
 801d928:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801d92a:	4b1d      	ldr	r3, [pc, #116]	; (801d9a0 <tcp_process+0x7cc>)
 801d92c:	681a      	ldr	r2, [r3, #0]
 801d92e:	687b      	ldr	r3, [r7, #4]
 801d930:	60da      	str	r2, [r3, #12]
 801d932:	4a1b      	ldr	r2, [pc, #108]	; (801d9a0 <tcp_process+0x7cc>)
 801d934:	687b      	ldr	r3, [r7, #4]
 801d936:	6013      	str	r3, [r2, #0]
 801d938:	f003 fa66 	bl	8020e08 <tcp_timer_needed>
      }
      break;
 801d93c:	e026      	b.n	801d98c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801d93e:	6878      	ldr	r0, [r7, #4]
 801d940:	f000 f93c 	bl	801dbbc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801d944:	4b17      	ldr	r3, [pc, #92]	; (801d9a4 <tcp_process+0x7d0>)
 801d946:	781b      	ldrb	r3, [r3, #0]
 801d948:	f003 0310 	and.w	r3, r3, #16
 801d94c:	2b00      	cmp	r3, #0
 801d94e:	d01f      	beq.n	801d990 <tcp_process+0x7bc>
 801d950:	687b      	ldr	r3, [r7, #4]
 801d952:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d954:	4b14      	ldr	r3, [pc, #80]	; (801d9a8 <tcp_process+0x7d4>)
 801d956:	681b      	ldr	r3, [r3, #0]
 801d958:	429a      	cmp	r2, r3
 801d95a:	d119      	bne.n	801d990 <tcp_process+0x7bc>
 801d95c:	687b      	ldr	r3, [r7, #4]
 801d95e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d960:	2b00      	cmp	r3, #0
 801d962:	d115      	bne.n	801d990 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801d964:	4b11      	ldr	r3, [pc, #68]	; (801d9ac <tcp_process+0x7d8>)
 801d966:	781b      	ldrb	r3, [r3, #0]
 801d968:	f043 0310 	orr.w	r3, r3, #16
 801d96c:	b2da      	uxtb	r2, r3
 801d96e:	4b0f      	ldr	r3, [pc, #60]	; (801d9ac <tcp_process+0x7d8>)
 801d970:	701a      	strb	r2, [r3, #0]
      }
      break;
 801d972:	e00d      	b.n	801d990 <tcp_process+0x7bc>
    default:
      break;
 801d974:	bf00      	nop
 801d976:	e00c      	b.n	801d992 <tcp_process+0x7be>
      break;
 801d978:	bf00      	nop
 801d97a:	e00a      	b.n	801d992 <tcp_process+0x7be>
      break;
 801d97c:	bf00      	nop
 801d97e:	e008      	b.n	801d992 <tcp_process+0x7be>
      break;
 801d980:	bf00      	nop
 801d982:	e006      	b.n	801d992 <tcp_process+0x7be>
      break;
 801d984:	bf00      	nop
 801d986:	e004      	b.n	801d992 <tcp_process+0x7be>
      break;
 801d988:	bf00      	nop
 801d98a:	e002      	b.n	801d992 <tcp_process+0x7be>
      break;
 801d98c:	bf00      	nop
 801d98e:	e000      	b.n	801d992 <tcp_process+0x7be>
      break;
 801d990:	bf00      	nop
  }
  return ERR_OK;
 801d992:	2300      	movs	r3, #0
}
 801d994:	4618      	mov	r0, r3
 801d996:	3724      	adds	r7, #36	; 0x24
 801d998:	46bd      	mov	sp, r7
 801d99a:	bd90      	pop	{r4, r7, pc}
 801d99c:	20011818 	.word	0x20011818
 801d9a0:	2001182c 	.word	0x2001182c
 801d9a4:	20008a98 	.word	0x20008a98
 801d9a8:	20008a90 	.word	0x20008a90
 801d9ac:	20008a99 	.word	0x20008a99
 801d9b0:	2001181c 	.word	0x2001181c

0801d9b4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801d9b4:	b590      	push	{r4, r7, lr}
 801d9b6:	b085      	sub	sp, #20
 801d9b8:	af00      	add	r7, sp, #0
 801d9ba:	6078      	str	r0, [r7, #4]
 801d9bc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801d9be:	687b      	ldr	r3, [r7, #4]
 801d9c0:	2b00      	cmp	r3, #0
 801d9c2:	d106      	bne.n	801d9d2 <tcp_oos_insert_segment+0x1e>
 801d9c4:	4b3b      	ldr	r3, [pc, #236]	; (801dab4 <tcp_oos_insert_segment+0x100>)
 801d9c6:	f240 421f 	movw	r2, #1055	; 0x41f
 801d9ca:	493b      	ldr	r1, [pc, #236]	; (801dab8 <tcp_oos_insert_segment+0x104>)
 801d9cc:	483b      	ldr	r0, [pc, #236]	; (801dabc <tcp_oos_insert_segment+0x108>)
 801d9ce:	f006 fb0b 	bl	8023fe8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801d9d2:	687b      	ldr	r3, [r7, #4]
 801d9d4:	68db      	ldr	r3, [r3, #12]
 801d9d6:	899b      	ldrh	r3, [r3, #12]
 801d9d8:	b29b      	uxth	r3, r3
 801d9da:	4618      	mov	r0, r3
 801d9dc:	f7f6 f9e2 	bl	8013da4 <lwip_htons>
 801d9e0:	4603      	mov	r3, r0
 801d9e2:	b2db      	uxtb	r3, r3
 801d9e4:	f003 0301 	and.w	r3, r3, #1
 801d9e8:	2b00      	cmp	r3, #0
 801d9ea:	d028      	beq.n	801da3e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801d9ec:	6838      	ldr	r0, [r7, #0]
 801d9ee:	f7fe f999 	bl	801bd24 <tcp_segs_free>
    next = NULL;
 801d9f2:	2300      	movs	r3, #0
 801d9f4:	603b      	str	r3, [r7, #0]
 801d9f6:	e056      	b.n	801daa6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801d9f8:	683b      	ldr	r3, [r7, #0]
 801d9fa:	68db      	ldr	r3, [r3, #12]
 801d9fc:	899b      	ldrh	r3, [r3, #12]
 801d9fe:	b29b      	uxth	r3, r3
 801da00:	4618      	mov	r0, r3
 801da02:	f7f6 f9cf 	bl	8013da4 <lwip_htons>
 801da06:	4603      	mov	r3, r0
 801da08:	b2db      	uxtb	r3, r3
 801da0a:	f003 0301 	and.w	r3, r3, #1
 801da0e:	2b00      	cmp	r3, #0
 801da10:	d00d      	beq.n	801da2e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801da12:	687b      	ldr	r3, [r7, #4]
 801da14:	68db      	ldr	r3, [r3, #12]
 801da16:	899b      	ldrh	r3, [r3, #12]
 801da18:	b29c      	uxth	r4, r3
 801da1a:	2001      	movs	r0, #1
 801da1c:	f7f6 f9c2 	bl	8013da4 <lwip_htons>
 801da20:	4603      	mov	r3, r0
 801da22:	461a      	mov	r2, r3
 801da24:	687b      	ldr	r3, [r7, #4]
 801da26:	68db      	ldr	r3, [r3, #12]
 801da28:	4322      	orrs	r2, r4
 801da2a:	b292      	uxth	r2, r2
 801da2c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801da2e:	683b      	ldr	r3, [r7, #0]
 801da30:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801da32:	683b      	ldr	r3, [r7, #0]
 801da34:	681b      	ldr	r3, [r3, #0]
 801da36:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801da38:	68f8      	ldr	r0, [r7, #12]
 801da3a:	f7fe f987 	bl	801bd4c <tcp_seg_free>
    while (next &&
 801da3e:	683b      	ldr	r3, [r7, #0]
 801da40:	2b00      	cmp	r3, #0
 801da42:	d00e      	beq.n	801da62 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801da44:	687b      	ldr	r3, [r7, #4]
 801da46:	891b      	ldrh	r3, [r3, #8]
 801da48:	461a      	mov	r2, r3
 801da4a:	4b1d      	ldr	r3, [pc, #116]	; (801dac0 <tcp_oos_insert_segment+0x10c>)
 801da4c:	681b      	ldr	r3, [r3, #0]
 801da4e:	441a      	add	r2, r3
 801da50:	683b      	ldr	r3, [r7, #0]
 801da52:	68db      	ldr	r3, [r3, #12]
 801da54:	685b      	ldr	r3, [r3, #4]
 801da56:	6839      	ldr	r1, [r7, #0]
 801da58:	8909      	ldrh	r1, [r1, #8]
 801da5a:	440b      	add	r3, r1
 801da5c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801da5e:	2b00      	cmp	r3, #0
 801da60:	daca      	bge.n	801d9f8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801da62:	683b      	ldr	r3, [r7, #0]
 801da64:	2b00      	cmp	r3, #0
 801da66:	d01e      	beq.n	801daa6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801da68:	687b      	ldr	r3, [r7, #4]
 801da6a:	891b      	ldrh	r3, [r3, #8]
 801da6c:	461a      	mov	r2, r3
 801da6e:	4b14      	ldr	r3, [pc, #80]	; (801dac0 <tcp_oos_insert_segment+0x10c>)
 801da70:	681b      	ldr	r3, [r3, #0]
 801da72:	441a      	add	r2, r3
 801da74:	683b      	ldr	r3, [r7, #0]
 801da76:	68db      	ldr	r3, [r3, #12]
 801da78:	685b      	ldr	r3, [r3, #4]
 801da7a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801da7c:	2b00      	cmp	r3, #0
 801da7e:	dd12      	ble.n	801daa6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801da80:	683b      	ldr	r3, [r7, #0]
 801da82:	68db      	ldr	r3, [r3, #12]
 801da84:	685b      	ldr	r3, [r3, #4]
 801da86:	b29a      	uxth	r2, r3
 801da88:	4b0d      	ldr	r3, [pc, #52]	; (801dac0 <tcp_oos_insert_segment+0x10c>)
 801da8a:	681b      	ldr	r3, [r3, #0]
 801da8c:	b29b      	uxth	r3, r3
 801da8e:	1ad3      	subs	r3, r2, r3
 801da90:	b29a      	uxth	r2, r3
 801da92:	687b      	ldr	r3, [r7, #4]
 801da94:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801da96:	687b      	ldr	r3, [r7, #4]
 801da98:	685a      	ldr	r2, [r3, #4]
 801da9a:	687b      	ldr	r3, [r7, #4]
 801da9c:	891b      	ldrh	r3, [r3, #8]
 801da9e:	4619      	mov	r1, r3
 801daa0:	4610      	mov	r0, r2
 801daa2:	f7fc f80b 	bl	8019abc <pbuf_realloc>
    }
  }
  cseg->next = next;
 801daa6:	687b      	ldr	r3, [r7, #4]
 801daa8:	683a      	ldr	r2, [r7, #0]
 801daaa:	601a      	str	r2, [r3, #0]
}
 801daac:	bf00      	nop
 801daae:	3714      	adds	r7, #20
 801dab0:	46bd      	mov	sp, r7
 801dab2:	bd90      	pop	{r4, r7, pc}
 801dab4:	08027758 	.word	0x08027758
 801dab8:	08027a34 	.word	0x08027a34
 801dabc:	080277c0 	.word	0x080277c0
 801dac0:	20008a8c 	.word	0x20008a8c

0801dac4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801dac4:	b5b0      	push	{r4, r5, r7, lr}
 801dac6:	b086      	sub	sp, #24
 801dac8:	af00      	add	r7, sp, #0
 801daca:	60f8      	str	r0, [r7, #12]
 801dacc:	60b9      	str	r1, [r7, #8]
 801dace:	607a      	str	r2, [r7, #4]
 801dad0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801dad2:	e03e      	b.n	801db52 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801dad4:	68bb      	ldr	r3, [r7, #8]
 801dad6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801dad8:	68bb      	ldr	r3, [r7, #8]
 801dada:	681b      	ldr	r3, [r3, #0]
 801dadc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801dade:	697b      	ldr	r3, [r7, #20]
 801dae0:	685b      	ldr	r3, [r3, #4]
 801dae2:	4618      	mov	r0, r3
 801dae4:	f7fc f9fe 	bl	8019ee4 <pbuf_clen>
 801dae8:	4603      	mov	r3, r0
 801daea:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801daec:	68fb      	ldr	r3, [r7, #12]
 801daee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801daf2:	8a7a      	ldrh	r2, [r7, #18]
 801daf4:	429a      	cmp	r2, r3
 801daf6:	d906      	bls.n	801db06 <tcp_free_acked_segments+0x42>
 801daf8:	4b2a      	ldr	r3, [pc, #168]	; (801dba4 <tcp_free_acked_segments+0xe0>)
 801dafa:	f240 4257 	movw	r2, #1111	; 0x457
 801dafe:	492a      	ldr	r1, [pc, #168]	; (801dba8 <tcp_free_acked_segments+0xe4>)
 801db00:	482a      	ldr	r0, [pc, #168]	; (801dbac <tcp_free_acked_segments+0xe8>)
 801db02:	f006 fa71 	bl	8023fe8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801db06:	68fb      	ldr	r3, [r7, #12]
 801db08:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801db0c:	8a7b      	ldrh	r3, [r7, #18]
 801db0e:	1ad3      	subs	r3, r2, r3
 801db10:	b29a      	uxth	r2, r3
 801db12:	68fb      	ldr	r3, [r7, #12]
 801db14:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801db18:	697b      	ldr	r3, [r7, #20]
 801db1a:	891a      	ldrh	r2, [r3, #8]
 801db1c:	4b24      	ldr	r3, [pc, #144]	; (801dbb0 <tcp_free_acked_segments+0xec>)
 801db1e:	881b      	ldrh	r3, [r3, #0]
 801db20:	4413      	add	r3, r2
 801db22:	b29a      	uxth	r2, r3
 801db24:	4b22      	ldr	r3, [pc, #136]	; (801dbb0 <tcp_free_acked_segments+0xec>)
 801db26:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801db28:	6978      	ldr	r0, [r7, #20]
 801db2a:	f7fe f90f 	bl	801bd4c <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801db2e:	68fb      	ldr	r3, [r7, #12]
 801db30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801db34:	2b00      	cmp	r3, #0
 801db36:	d00c      	beq.n	801db52 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801db38:	68bb      	ldr	r3, [r7, #8]
 801db3a:	2b00      	cmp	r3, #0
 801db3c:	d109      	bne.n	801db52 <tcp_free_acked_segments+0x8e>
 801db3e:	683b      	ldr	r3, [r7, #0]
 801db40:	2b00      	cmp	r3, #0
 801db42:	d106      	bne.n	801db52 <tcp_free_acked_segments+0x8e>
 801db44:	4b17      	ldr	r3, [pc, #92]	; (801dba4 <tcp_free_acked_segments+0xe0>)
 801db46:	f240 4262 	movw	r2, #1122	; 0x462
 801db4a:	491a      	ldr	r1, [pc, #104]	; (801dbb4 <tcp_free_acked_segments+0xf0>)
 801db4c:	4817      	ldr	r0, [pc, #92]	; (801dbac <tcp_free_acked_segments+0xe8>)
 801db4e:	f006 fa4b 	bl	8023fe8 <iprintf>
  while (seg_list != NULL &&
 801db52:	68bb      	ldr	r3, [r7, #8]
 801db54:	2b00      	cmp	r3, #0
 801db56:	d020      	beq.n	801db9a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801db58:	68bb      	ldr	r3, [r7, #8]
 801db5a:	68db      	ldr	r3, [r3, #12]
 801db5c:	685b      	ldr	r3, [r3, #4]
 801db5e:	4618      	mov	r0, r3
 801db60:	f7f6 f935 	bl	8013dce <lwip_htonl>
 801db64:	4604      	mov	r4, r0
 801db66:	68bb      	ldr	r3, [r7, #8]
 801db68:	891b      	ldrh	r3, [r3, #8]
 801db6a:	461d      	mov	r5, r3
 801db6c:	68bb      	ldr	r3, [r7, #8]
 801db6e:	68db      	ldr	r3, [r3, #12]
 801db70:	899b      	ldrh	r3, [r3, #12]
 801db72:	b29b      	uxth	r3, r3
 801db74:	4618      	mov	r0, r3
 801db76:	f7f6 f915 	bl	8013da4 <lwip_htons>
 801db7a:	4603      	mov	r3, r0
 801db7c:	b2db      	uxtb	r3, r3
 801db7e:	f003 0303 	and.w	r3, r3, #3
 801db82:	2b00      	cmp	r3, #0
 801db84:	d001      	beq.n	801db8a <tcp_free_acked_segments+0xc6>
 801db86:	2301      	movs	r3, #1
 801db88:	e000      	b.n	801db8c <tcp_free_acked_segments+0xc8>
 801db8a:	2300      	movs	r3, #0
 801db8c:	442b      	add	r3, r5
 801db8e:	18e2      	adds	r2, r4, r3
 801db90:	4b09      	ldr	r3, [pc, #36]	; (801dbb8 <tcp_free_acked_segments+0xf4>)
 801db92:	681b      	ldr	r3, [r3, #0]
 801db94:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801db96:	2b00      	cmp	r3, #0
 801db98:	dd9c      	ble.n	801dad4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801db9a:	68bb      	ldr	r3, [r7, #8]
}
 801db9c:	4618      	mov	r0, r3
 801db9e:	3718      	adds	r7, #24
 801dba0:	46bd      	mov	sp, r7
 801dba2:	bdb0      	pop	{r4, r5, r7, pc}
 801dba4:	08027758 	.word	0x08027758
 801dba8:	08027a5c 	.word	0x08027a5c
 801dbac:	080277c0 	.word	0x080277c0
 801dbb0:	20008a94 	.word	0x20008a94
 801dbb4:	08027a84 	.word	0x08027a84
 801dbb8:	20008a90 	.word	0x20008a90

0801dbbc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801dbbc:	b5b0      	push	{r4, r5, r7, lr}
 801dbbe:	b094      	sub	sp, #80	; 0x50
 801dbc0:	af00      	add	r7, sp, #0
 801dbc2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801dbc4:	2300      	movs	r3, #0
 801dbc6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801dbc8:	687b      	ldr	r3, [r7, #4]
 801dbca:	2b00      	cmp	r3, #0
 801dbcc:	d106      	bne.n	801dbdc <tcp_receive+0x20>
 801dbce:	4ba6      	ldr	r3, [pc, #664]	; (801de68 <tcp_receive+0x2ac>)
 801dbd0:	f240 427b 	movw	r2, #1147	; 0x47b
 801dbd4:	49a5      	ldr	r1, [pc, #660]	; (801de6c <tcp_receive+0x2b0>)
 801dbd6:	48a6      	ldr	r0, [pc, #664]	; (801de70 <tcp_receive+0x2b4>)
 801dbd8:	f006 fa06 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801dbdc:	687b      	ldr	r3, [r7, #4]
 801dbde:	7d1b      	ldrb	r3, [r3, #20]
 801dbe0:	2b03      	cmp	r3, #3
 801dbe2:	d806      	bhi.n	801dbf2 <tcp_receive+0x36>
 801dbe4:	4ba0      	ldr	r3, [pc, #640]	; (801de68 <tcp_receive+0x2ac>)
 801dbe6:	f240 427c 	movw	r2, #1148	; 0x47c
 801dbea:	49a2      	ldr	r1, [pc, #648]	; (801de74 <tcp_receive+0x2b8>)
 801dbec:	48a0      	ldr	r0, [pc, #640]	; (801de70 <tcp_receive+0x2b4>)
 801dbee:	f006 f9fb 	bl	8023fe8 <iprintf>

  if (flags & TCP_ACK) {
 801dbf2:	4ba1      	ldr	r3, [pc, #644]	; (801de78 <tcp_receive+0x2bc>)
 801dbf4:	781b      	ldrb	r3, [r3, #0]
 801dbf6:	f003 0310 	and.w	r3, r3, #16
 801dbfa:	2b00      	cmp	r3, #0
 801dbfc:	f000 8263 	beq.w	801e0c6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801dc06:	461a      	mov	r2, r3
 801dc08:	687b      	ldr	r3, [r7, #4]
 801dc0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801dc0c:	4413      	add	r3, r2
 801dc0e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801dc10:	687b      	ldr	r3, [r7, #4]
 801dc12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801dc14:	4b99      	ldr	r3, [pc, #612]	; (801de7c <tcp_receive+0x2c0>)
 801dc16:	681b      	ldr	r3, [r3, #0]
 801dc18:	1ad3      	subs	r3, r2, r3
 801dc1a:	2b00      	cmp	r3, #0
 801dc1c:	db1b      	blt.n	801dc56 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801dc1e:	687b      	ldr	r3, [r7, #4]
 801dc20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801dc22:	4b96      	ldr	r3, [pc, #600]	; (801de7c <tcp_receive+0x2c0>)
 801dc24:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801dc26:	429a      	cmp	r2, r3
 801dc28:	d106      	bne.n	801dc38 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801dc2a:	687b      	ldr	r3, [r7, #4]
 801dc2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801dc2e:	4b94      	ldr	r3, [pc, #592]	; (801de80 <tcp_receive+0x2c4>)
 801dc30:	681b      	ldr	r3, [r3, #0]
 801dc32:	1ad3      	subs	r3, r2, r3
 801dc34:	2b00      	cmp	r3, #0
 801dc36:	db0e      	blt.n	801dc56 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801dc38:	687b      	ldr	r3, [r7, #4]
 801dc3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801dc3c:	4b90      	ldr	r3, [pc, #576]	; (801de80 <tcp_receive+0x2c4>)
 801dc3e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801dc40:	429a      	cmp	r2, r3
 801dc42:	d125      	bne.n	801dc90 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801dc44:	4b8f      	ldr	r3, [pc, #572]	; (801de84 <tcp_receive+0x2c8>)
 801dc46:	681b      	ldr	r3, [r3, #0]
 801dc48:	89db      	ldrh	r3, [r3, #14]
 801dc4a:	b29a      	uxth	r2, r3
 801dc4c:	687b      	ldr	r3, [r7, #4]
 801dc4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801dc52:	429a      	cmp	r2, r3
 801dc54:	d91c      	bls.n	801dc90 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801dc56:	4b8b      	ldr	r3, [pc, #556]	; (801de84 <tcp_receive+0x2c8>)
 801dc58:	681b      	ldr	r3, [r3, #0]
 801dc5a:	89db      	ldrh	r3, [r3, #14]
 801dc5c:	b29a      	uxth	r2, r3
 801dc5e:	687b      	ldr	r3, [r7, #4]
 801dc60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801dc64:	687b      	ldr	r3, [r7, #4]
 801dc66:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801dc6a:	687b      	ldr	r3, [r7, #4]
 801dc6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801dc70:	429a      	cmp	r2, r3
 801dc72:	d205      	bcs.n	801dc80 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801dc74:	687b      	ldr	r3, [r7, #4]
 801dc76:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801dc7a:	687b      	ldr	r3, [r7, #4]
 801dc7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801dc80:	4b7e      	ldr	r3, [pc, #504]	; (801de7c <tcp_receive+0x2c0>)
 801dc82:	681a      	ldr	r2, [r3, #0]
 801dc84:	687b      	ldr	r3, [r7, #4]
 801dc86:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801dc88:	4b7d      	ldr	r3, [pc, #500]	; (801de80 <tcp_receive+0x2c4>)
 801dc8a:	681a      	ldr	r2, [r3, #0]
 801dc8c:	687b      	ldr	r3, [r7, #4]
 801dc8e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801dc90:	4b7b      	ldr	r3, [pc, #492]	; (801de80 <tcp_receive+0x2c4>)
 801dc92:	681a      	ldr	r2, [r3, #0]
 801dc94:	687b      	ldr	r3, [r7, #4]
 801dc96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dc98:	1ad3      	subs	r3, r2, r3
 801dc9a:	2b00      	cmp	r3, #0
 801dc9c:	dc58      	bgt.n	801dd50 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801dc9e:	4b7a      	ldr	r3, [pc, #488]	; (801de88 <tcp_receive+0x2cc>)
 801dca0:	881b      	ldrh	r3, [r3, #0]
 801dca2:	2b00      	cmp	r3, #0
 801dca4:	d14b      	bne.n	801dd3e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801dca6:	687b      	ldr	r3, [r7, #4]
 801dca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801dcaa:	687a      	ldr	r2, [r7, #4]
 801dcac:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801dcb0:	4413      	add	r3, r2
 801dcb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dcb4:	429a      	cmp	r2, r3
 801dcb6:	d142      	bne.n	801dd3e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801dcb8:	687b      	ldr	r3, [r7, #4]
 801dcba:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801dcbe:	2b00      	cmp	r3, #0
 801dcc0:	db3d      	blt.n	801dd3e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801dcc2:	687b      	ldr	r3, [r7, #4]
 801dcc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801dcc6:	4b6e      	ldr	r3, [pc, #440]	; (801de80 <tcp_receive+0x2c4>)
 801dcc8:	681b      	ldr	r3, [r3, #0]
 801dcca:	429a      	cmp	r2, r3
 801dccc:	d137      	bne.n	801dd3e <tcp_receive+0x182>
              found_dupack = 1;
 801dcce:	2301      	movs	r3, #1
 801dcd0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801dcd2:	687b      	ldr	r3, [r7, #4]
 801dcd4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801dcd8:	2bff      	cmp	r3, #255	; 0xff
 801dcda:	d007      	beq.n	801dcec <tcp_receive+0x130>
                ++pcb->dupacks;
 801dcdc:	687b      	ldr	r3, [r7, #4]
 801dcde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801dce2:	3301      	adds	r3, #1
 801dce4:	b2da      	uxtb	r2, r3
 801dce6:	687b      	ldr	r3, [r7, #4]
 801dce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801dcec:	687b      	ldr	r3, [r7, #4]
 801dcee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801dcf2:	2b03      	cmp	r3, #3
 801dcf4:	d91b      	bls.n	801dd2e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801dcf6:	687b      	ldr	r3, [r7, #4]
 801dcf8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801dcfc:	687b      	ldr	r3, [r7, #4]
 801dcfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801dd00:	4413      	add	r3, r2
 801dd02:	b29a      	uxth	r2, r3
 801dd04:	687b      	ldr	r3, [r7, #4]
 801dd06:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801dd0a:	429a      	cmp	r2, r3
 801dd0c:	d30a      	bcc.n	801dd24 <tcp_receive+0x168>
 801dd0e:	687b      	ldr	r3, [r7, #4]
 801dd10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801dd14:	687b      	ldr	r3, [r7, #4]
 801dd16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801dd18:	4413      	add	r3, r2
 801dd1a:	b29a      	uxth	r2, r3
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801dd22:	e004      	b.n	801dd2e <tcp_receive+0x172>
 801dd24:	687b      	ldr	r3, [r7, #4]
 801dd26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801dd2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801dd2e:	687b      	ldr	r3, [r7, #4]
 801dd30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801dd34:	2b02      	cmp	r3, #2
 801dd36:	d902      	bls.n	801dd3e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801dd38:	6878      	ldr	r0, [r7, #4]
 801dd3a:	f002 fb47 	bl	80203cc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801dd3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dd40:	2b00      	cmp	r3, #0
 801dd42:	f040 8160 	bne.w	801e006 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801dd46:	687b      	ldr	r3, [r7, #4]
 801dd48:	2200      	movs	r2, #0
 801dd4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801dd4e:	e15a      	b.n	801e006 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801dd50:	4b4b      	ldr	r3, [pc, #300]	; (801de80 <tcp_receive+0x2c4>)
 801dd52:	681a      	ldr	r2, [r3, #0]
 801dd54:	687b      	ldr	r3, [r7, #4]
 801dd56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dd58:	1ad3      	subs	r3, r2, r3
 801dd5a:	3b01      	subs	r3, #1
 801dd5c:	2b00      	cmp	r3, #0
 801dd5e:	f2c0 814d 	blt.w	801dffc <tcp_receive+0x440>
 801dd62:	4b47      	ldr	r3, [pc, #284]	; (801de80 <tcp_receive+0x2c4>)
 801dd64:	681a      	ldr	r2, [r3, #0]
 801dd66:	687b      	ldr	r3, [r7, #4]
 801dd68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dd6a:	1ad3      	subs	r3, r2, r3
 801dd6c:	2b00      	cmp	r3, #0
 801dd6e:	f300 8145 	bgt.w	801dffc <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801dd72:	687b      	ldr	r3, [r7, #4]
 801dd74:	8b5b      	ldrh	r3, [r3, #26]
 801dd76:	f003 0304 	and.w	r3, r3, #4
 801dd7a:	2b00      	cmp	r3, #0
 801dd7c:	d010      	beq.n	801dda0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801dd7e:	687b      	ldr	r3, [r7, #4]
 801dd80:	8b5b      	ldrh	r3, [r3, #26]
 801dd82:	f023 0304 	bic.w	r3, r3, #4
 801dd86:	b29a      	uxth	r2, r3
 801dd88:	687b      	ldr	r3, [r7, #4]
 801dd8a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801dd8c:	687b      	ldr	r3, [r7, #4]
 801dd8e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801dd92:	687b      	ldr	r3, [r7, #4]
 801dd94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801dd98:	687b      	ldr	r3, [r7, #4]
 801dd9a:	2200      	movs	r2, #0
 801dd9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801dda0:	687b      	ldr	r3, [r7, #4]
 801dda2:	2200      	movs	r2, #0
 801dda4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801dda8:	687b      	ldr	r3, [r7, #4]
 801ddaa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801ddae:	10db      	asrs	r3, r3, #3
 801ddb0:	b21b      	sxth	r3, r3
 801ddb2:	b29a      	uxth	r2, r3
 801ddb4:	687b      	ldr	r3, [r7, #4]
 801ddb6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801ddba:	b29b      	uxth	r3, r3
 801ddbc:	4413      	add	r3, r2
 801ddbe:	b29b      	uxth	r3, r3
 801ddc0:	b21a      	sxth	r2, r3
 801ddc2:	687b      	ldr	r3, [r7, #4]
 801ddc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801ddc8:	4b2d      	ldr	r3, [pc, #180]	; (801de80 <tcp_receive+0x2c4>)
 801ddca:	681b      	ldr	r3, [r3, #0]
 801ddcc:	b29a      	uxth	r2, r3
 801ddce:	687b      	ldr	r3, [r7, #4]
 801ddd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ddd2:	b29b      	uxth	r3, r3
 801ddd4:	1ad3      	subs	r3, r2, r3
 801ddd6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801ddd8:	687b      	ldr	r3, [r7, #4]
 801ddda:	2200      	movs	r2, #0
 801dddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801dde0:	4b27      	ldr	r3, [pc, #156]	; (801de80 <tcp_receive+0x2c4>)
 801dde2:	681a      	ldr	r2, [r3, #0]
 801dde4:	687b      	ldr	r3, [r7, #4]
 801dde6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801dde8:	687b      	ldr	r3, [r7, #4]
 801ddea:	7d1b      	ldrb	r3, [r3, #20]
 801ddec:	2b03      	cmp	r3, #3
 801ddee:	f240 8096 	bls.w	801df1e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801ddf2:	687b      	ldr	r3, [r7, #4]
 801ddf4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ddf8:	687b      	ldr	r3, [r7, #4]
 801ddfa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801ddfe:	429a      	cmp	r2, r3
 801de00:	d244      	bcs.n	801de8c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801de02:	687b      	ldr	r3, [r7, #4]
 801de04:	8b5b      	ldrh	r3, [r3, #26]
 801de06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801de0a:	2b00      	cmp	r3, #0
 801de0c:	d001      	beq.n	801de12 <tcp_receive+0x256>
 801de0e:	2301      	movs	r3, #1
 801de10:	e000      	b.n	801de14 <tcp_receive+0x258>
 801de12:	2302      	movs	r3, #2
 801de14:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801de18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801de1c:	b29a      	uxth	r2, r3
 801de1e:	687b      	ldr	r3, [r7, #4]
 801de20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801de22:	fb12 f303 	smulbb	r3, r2, r3
 801de26:	b29b      	uxth	r3, r3
 801de28:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801de2a:	4293      	cmp	r3, r2
 801de2c:	bf28      	it	cs
 801de2e:	4613      	movcs	r3, r2
 801de30:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801de32:	687b      	ldr	r3, [r7, #4]
 801de34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801de38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801de3a:	4413      	add	r3, r2
 801de3c:	b29a      	uxth	r2, r3
 801de3e:	687b      	ldr	r3, [r7, #4]
 801de40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801de44:	429a      	cmp	r2, r3
 801de46:	d309      	bcc.n	801de5c <tcp_receive+0x2a0>
 801de48:	687b      	ldr	r3, [r7, #4]
 801de4a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801de4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801de50:	4413      	add	r3, r2
 801de52:	b29a      	uxth	r2, r3
 801de54:	687b      	ldr	r3, [r7, #4]
 801de56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801de5a:	e060      	b.n	801df1e <tcp_receive+0x362>
 801de5c:	687b      	ldr	r3, [r7, #4]
 801de5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801de62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801de66:	e05a      	b.n	801df1e <tcp_receive+0x362>
 801de68:	08027758 	.word	0x08027758
 801de6c:	08027aa4 	.word	0x08027aa4
 801de70:	080277c0 	.word	0x080277c0
 801de74:	08027ac0 	.word	0x08027ac0
 801de78:	20008a98 	.word	0x20008a98
 801de7c:	20008a8c 	.word	0x20008a8c
 801de80:	20008a90 	.word	0x20008a90
 801de84:	20008a7c 	.word	0x20008a7c
 801de88:	20008a96 	.word	0x20008a96
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801de8c:	687b      	ldr	r3, [r7, #4]
 801de8e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801de92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801de94:	4413      	add	r3, r2
 801de96:	b29a      	uxth	r2, r3
 801de98:	687b      	ldr	r3, [r7, #4]
 801de9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801de9e:	429a      	cmp	r2, r3
 801dea0:	d309      	bcc.n	801deb6 <tcp_receive+0x2fa>
 801dea2:	687b      	ldr	r3, [r7, #4]
 801dea4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801dea8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801deaa:	4413      	add	r3, r2
 801deac:	b29a      	uxth	r2, r3
 801deae:	687b      	ldr	r3, [r7, #4]
 801deb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801deb4:	e004      	b.n	801dec0 <tcp_receive+0x304>
 801deb6:	687b      	ldr	r3, [r7, #4]
 801deb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801debc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801dec0:	687b      	ldr	r3, [r7, #4]
 801dec2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801dec6:	687b      	ldr	r3, [r7, #4]
 801dec8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801decc:	429a      	cmp	r2, r3
 801dece:	d326      	bcc.n	801df1e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801ded0:	687b      	ldr	r3, [r7, #4]
 801ded2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801ded6:	687b      	ldr	r3, [r7, #4]
 801ded8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801dedc:	1ad3      	subs	r3, r2, r3
 801dede:	b29a      	uxth	r2, r3
 801dee0:	687b      	ldr	r3, [r7, #4]
 801dee2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801dee6:	687b      	ldr	r3, [r7, #4]
 801dee8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801deec:	687b      	ldr	r3, [r7, #4]
 801deee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801def0:	4413      	add	r3, r2
 801def2:	b29a      	uxth	r2, r3
 801def4:	687b      	ldr	r3, [r7, #4]
 801def6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801defa:	429a      	cmp	r2, r3
 801defc:	d30a      	bcc.n	801df14 <tcp_receive+0x358>
 801defe:	687b      	ldr	r3, [r7, #4]
 801df00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801df04:	687b      	ldr	r3, [r7, #4]
 801df06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801df08:	4413      	add	r3, r2
 801df0a:	b29a      	uxth	r2, r3
 801df0c:	687b      	ldr	r3, [r7, #4]
 801df0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801df12:	e004      	b.n	801df1e <tcp_receive+0x362>
 801df14:	687b      	ldr	r3, [r7, #4]
 801df16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801df1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801df1e:	687b      	ldr	r3, [r7, #4]
 801df20:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801df22:	687b      	ldr	r3, [r7, #4]
 801df24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801df26:	4a98      	ldr	r2, [pc, #608]	; (801e188 <tcp_receive+0x5cc>)
 801df28:	6878      	ldr	r0, [r7, #4]
 801df2a:	f7ff fdcb 	bl	801dac4 <tcp_free_acked_segments>
 801df2e:	4602      	mov	r2, r0
 801df30:	687b      	ldr	r3, [r7, #4]
 801df32:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801df34:	687b      	ldr	r3, [r7, #4]
 801df36:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801df38:	687b      	ldr	r3, [r7, #4]
 801df3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801df3c:	4a93      	ldr	r2, [pc, #588]	; (801e18c <tcp_receive+0x5d0>)
 801df3e:	6878      	ldr	r0, [r7, #4]
 801df40:	f7ff fdc0 	bl	801dac4 <tcp_free_acked_segments>
 801df44:	4602      	mov	r2, r0
 801df46:	687b      	ldr	r3, [r7, #4]
 801df48:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801df4a:	687b      	ldr	r3, [r7, #4]
 801df4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801df4e:	2b00      	cmp	r3, #0
 801df50:	d104      	bne.n	801df5c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801df52:	687b      	ldr	r3, [r7, #4]
 801df54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801df58:	861a      	strh	r2, [r3, #48]	; 0x30
 801df5a:	e002      	b.n	801df62 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 801df5c:	687b      	ldr	r3, [r7, #4]
 801df5e:	2200      	movs	r2, #0
 801df60:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801df62:	687b      	ldr	r3, [r7, #4]
 801df64:	2200      	movs	r2, #0
 801df66:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801df68:	687b      	ldr	r3, [r7, #4]
 801df6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801df6c:	2b00      	cmp	r3, #0
 801df6e:	d103      	bne.n	801df78 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801df70:	687b      	ldr	r3, [r7, #4]
 801df72:	2200      	movs	r2, #0
 801df74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801df78:	687b      	ldr	r3, [r7, #4]
 801df7a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801df7e:	4b84      	ldr	r3, [pc, #528]	; (801e190 <tcp_receive+0x5d4>)
 801df80:	881b      	ldrh	r3, [r3, #0]
 801df82:	4413      	add	r3, r2
 801df84:	b29a      	uxth	r2, r3
 801df86:	687b      	ldr	r3, [r7, #4]
 801df88:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801df8c:	687b      	ldr	r3, [r7, #4]
 801df8e:	8b5b      	ldrh	r3, [r3, #26]
 801df90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801df94:	2b00      	cmp	r3, #0
 801df96:	d035      	beq.n	801e004 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801df98:	687b      	ldr	r3, [r7, #4]
 801df9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801df9c:	2b00      	cmp	r3, #0
 801df9e:	d118      	bne.n	801dfd2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801dfa0:	687b      	ldr	r3, [r7, #4]
 801dfa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dfa4:	2b00      	cmp	r3, #0
 801dfa6:	d00c      	beq.n	801dfc2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801dfa8:	687b      	ldr	r3, [r7, #4]
 801dfaa:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801dfac:	687b      	ldr	r3, [r7, #4]
 801dfae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dfb0:	68db      	ldr	r3, [r3, #12]
 801dfb2:	685b      	ldr	r3, [r3, #4]
 801dfb4:	4618      	mov	r0, r3
 801dfb6:	f7f5 ff0a 	bl	8013dce <lwip_htonl>
 801dfba:	4603      	mov	r3, r0
 801dfbc:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801dfbe:	2b00      	cmp	r3, #0
 801dfc0:	dc20      	bgt.n	801e004 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801dfc2:	687b      	ldr	r3, [r7, #4]
 801dfc4:	8b5b      	ldrh	r3, [r3, #26]
 801dfc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801dfca:	b29a      	uxth	r2, r3
 801dfcc:	687b      	ldr	r3, [r7, #4]
 801dfce:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801dfd0:	e018      	b.n	801e004 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801dfd2:	687b      	ldr	r3, [r7, #4]
 801dfd4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801dfd6:	687b      	ldr	r3, [r7, #4]
 801dfd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dfda:	68db      	ldr	r3, [r3, #12]
 801dfdc:	685b      	ldr	r3, [r3, #4]
 801dfde:	4618      	mov	r0, r3
 801dfe0:	f7f5 fef5 	bl	8013dce <lwip_htonl>
 801dfe4:	4603      	mov	r3, r0
 801dfe6:	1ae3      	subs	r3, r4, r3
 801dfe8:	2b00      	cmp	r3, #0
 801dfea:	dc0b      	bgt.n	801e004 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	8b5b      	ldrh	r3, [r3, #26]
 801dff0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801dff4:	b29a      	uxth	r2, r3
 801dff6:	687b      	ldr	r3, [r7, #4]
 801dff8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801dffa:	e003      	b.n	801e004 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801dffc:	6878      	ldr	r0, [r7, #4]
 801dffe:	f002 fbdf 	bl	80207c0 <tcp_send_empty_ack>
 801e002:	e000      	b.n	801e006 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801e004:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801e006:	687b      	ldr	r3, [r7, #4]
 801e008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e00a:	2b00      	cmp	r3, #0
 801e00c:	d05b      	beq.n	801e0c6 <tcp_receive+0x50a>
 801e00e:	687b      	ldr	r3, [r7, #4]
 801e010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e012:	4b60      	ldr	r3, [pc, #384]	; (801e194 <tcp_receive+0x5d8>)
 801e014:	681b      	ldr	r3, [r3, #0]
 801e016:	1ad3      	subs	r3, r2, r3
 801e018:	2b00      	cmp	r3, #0
 801e01a:	da54      	bge.n	801e0c6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801e01c:	4b5e      	ldr	r3, [pc, #376]	; (801e198 <tcp_receive+0x5dc>)
 801e01e:	681b      	ldr	r3, [r3, #0]
 801e020:	b29a      	uxth	r2, r3
 801e022:	687b      	ldr	r3, [r7, #4]
 801e024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e026:	b29b      	uxth	r3, r3
 801e028:	1ad3      	subs	r3, r2, r3
 801e02a:	b29b      	uxth	r3, r3
 801e02c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801e030:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801e034:	687b      	ldr	r3, [r7, #4]
 801e036:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801e03a:	10db      	asrs	r3, r3, #3
 801e03c:	b21b      	sxth	r3, r3
 801e03e:	b29b      	uxth	r3, r3
 801e040:	1ad3      	subs	r3, r2, r3
 801e042:	b29b      	uxth	r3, r3
 801e044:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801e048:	687b      	ldr	r3, [r7, #4]
 801e04a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801e04e:	b29a      	uxth	r2, r3
 801e050:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801e054:	4413      	add	r3, r2
 801e056:	b29b      	uxth	r3, r3
 801e058:	b21a      	sxth	r2, r3
 801e05a:	687b      	ldr	r3, [r7, #4]
 801e05c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801e05e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801e062:	2b00      	cmp	r3, #0
 801e064:	da05      	bge.n	801e072 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801e066:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801e06a:	425b      	negs	r3, r3
 801e06c:	b29b      	uxth	r3, r3
 801e06e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801e072:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801e076:	687b      	ldr	r3, [r7, #4]
 801e078:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801e07c:	109b      	asrs	r3, r3, #2
 801e07e:	b21b      	sxth	r3, r3
 801e080:	b29b      	uxth	r3, r3
 801e082:	1ad3      	subs	r3, r2, r3
 801e084:	b29b      	uxth	r3, r3
 801e086:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801e08a:	687b      	ldr	r3, [r7, #4]
 801e08c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801e090:	b29a      	uxth	r2, r3
 801e092:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801e096:	4413      	add	r3, r2
 801e098:	b29b      	uxth	r3, r3
 801e09a:	b21a      	sxth	r2, r3
 801e09c:	687b      	ldr	r3, [r7, #4]
 801e09e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801e0a0:	687b      	ldr	r3, [r7, #4]
 801e0a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801e0a6:	10db      	asrs	r3, r3, #3
 801e0a8:	b21b      	sxth	r3, r3
 801e0aa:	b29a      	uxth	r2, r3
 801e0ac:	687b      	ldr	r3, [r7, #4]
 801e0ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801e0b2:	b29b      	uxth	r3, r3
 801e0b4:	4413      	add	r3, r2
 801e0b6:	b29b      	uxth	r3, r3
 801e0b8:	b21a      	sxth	r2, r3
 801e0ba:	687b      	ldr	r3, [r7, #4]
 801e0bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801e0c0:	687b      	ldr	r3, [r7, #4]
 801e0c2:	2200      	movs	r2, #0
 801e0c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801e0c6:	4b35      	ldr	r3, [pc, #212]	; (801e19c <tcp_receive+0x5e0>)
 801e0c8:	881b      	ldrh	r3, [r3, #0]
 801e0ca:	2b00      	cmp	r3, #0
 801e0cc:	f000 84e1 	beq.w	801ea92 <tcp_receive+0xed6>
 801e0d0:	687b      	ldr	r3, [r7, #4]
 801e0d2:	7d1b      	ldrb	r3, [r3, #20]
 801e0d4:	2b06      	cmp	r3, #6
 801e0d6:	f200 84dc 	bhi.w	801ea92 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e0da:	687b      	ldr	r3, [r7, #4]
 801e0dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e0de:	4b30      	ldr	r3, [pc, #192]	; (801e1a0 <tcp_receive+0x5e4>)
 801e0e0:	681b      	ldr	r3, [r3, #0]
 801e0e2:	1ad3      	subs	r3, r2, r3
 801e0e4:	3b01      	subs	r3, #1
 801e0e6:	2b00      	cmp	r3, #0
 801e0e8:	f2c0 808e 	blt.w	801e208 <tcp_receive+0x64c>
 801e0ec:	687b      	ldr	r3, [r7, #4]
 801e0ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e0f0:	4b2a      	ldr	r3, [pc, #168]	; (801e19c <tcp_receive+0x5e0>)
 801e0f2:	881b      	ldrh	r3, [r3, #0]
 801e0f4:	4619      	mov	r1, r3
 801e0f6:	4b2a      	ldr	r3, [pc, #168]	; (801e1a0 <tcp_receive+0x5e4>)
 801e0f8:	681b      	ldr	r3, [r3, #0]
 801e0fa:	440b      	add	r3, r1
 801e0fc:	1ad3      	subs	r3, r2, r3
 801e0fe:	3301      	adds	r3, #1
 801e100:	2b00      	cmp	r3, #0
 801e102:	f300 8081 	bgt.w	801e208 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801e106:	4b27      	ldr	r3, [pc, #156]	; (801e1a4 <tcp_receive+0x5e8>)
 801e108:	685b      	ldr	r3, [r3, #4]
 801e10a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801e10c:	687b      	ldr	r3, [r7, #4]
 801e10e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e110:	4b23      	ldr	r3, [pc, #140]	; (801e1a0 <tcp_receive+0x5e4>)
 801e112:	681b      	ldr	r3, [r3, #0]
 801e114:	1ad3      	subs	r3, r2, r3
 801e116:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801e118:	4b22      	ldr	r3, [pc, #136]	; (801e1a4 <tcp_receive+0x5e8>)
 801e11a:	685b      	ldr	r3, [r3, #4]
 801e11c:	2b00      	cmp	r3, #0
 801e11e:	d106      	bne.n	801e12e <tcp_receive+0x572>
 801e120:	4b21      	ldr	r3, [pc, #132]	; (801e1a8 <tcp_receive+0x5ec>)
 801e122:	f240 5294 	movw	r2, #1428	; 0x594
 801e126:	4921      	ldr	r1, [pc, #132]	; (801e1ac <tcp_receive+0x5f0>)
 801e128:	4821      	ldr	r0, [pc, #132]	; (801e1b0 <tcp_receive+0x5f4>)
 801e12a:	f005 ff5d 	bl	8023fe8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801e12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e130:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e134:	4293      	cmp	r3, r2
 801e136:	d906      	bls.n	801e146 <tcp_receive+0x58a>
 801e138:	4b1b      	ldr	r3, [pc, #108]	; (801e1a8 <tcp_receive+0x5ec>)
 801e13a:	f240 5295 	movw	r2, #1429	; 0x595
 801e13e:	491d      	ldr	r1, [pc, #116]	; (801e1b4 <tcp_receive+0x5f8>)
 801e140:	481b      	ldr	r0, [pc, #108]	; (801e1b0 <tcp_receive+0x5f4>)
 801e142:	f005 ff51 	bl	8023fe8 <iprintf>
      off = (u16_t)off32;
 801e146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e148:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801e14c:	4b15      	ldr	r3, [pc, #84]	; (801e1a4 <tcp_receive+0x5e8>)
 801e14e:	685b      	ldr	r3, [r3, #4]
 801e150:	891b      	ldrh	r3, [r3, #8]
 801e152:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e156:	429a      	cmp	r2, r3
 801e158:	d906      	bls.n	801e168 <tcp_receive+0x5ac>
 801e15a:	4b13      	ldr	r3, [pc, #76]	; (801e1a8 <tcp_receive+0x5ec>)
 801e15c:	f240 5297 	movw	r2, #1431	; 0x597
 801e160:	4915      	ldr	r1, [pc, #84]	; (801e1b8 <tcp_receive+0x5fc>)
 801e162:	4813      	ldr	r0, [pc, #76]	; (801e1b0 <tcp_receive+0x5f4>)
 801e164:	f005 ff40 	bl	8023fe8 <iprintf>
      inseg.len -= off;
 801e168:	4b0e      	ldr	r3, [pc, #56]	; (801e1a4 <tcp_receive+0x5e8>)
 801e16a:	891a      	ldrh	r2, [r3, #8]
 801e16c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e170:	1ad3      	subs	r3, r2, r3
 801e172:	b29a      	uxth	r2, r3
 801e174:	4b0b      	ldr	r3, [pc, #44]	; (801e1a4 <tcp_receive+0x5e8>)
 801e176:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801e178:	4b0a      	ldr	r3, [pc, #40]	; (801e1a4 <tcp_receive+0x5e8>)
 801e17a:	685b      	ldr	r3, [r3, #4]
 801e17c:	891a      	ldrh	r2, [r3, #8]
 801e17e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e182:	1ad3      	subs	r3, r2, r3
 801e184:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801e186:	e029      	b.n	801e1dc <tcp_receive+0x620>
 801e188:	08027adc 	.word	0x08027adc
 801e18c:	08027ae4 	.word	0x08027ae4
 801e190:	20008a94 	.word	0x20008a94
 801e194:	20008a90 	.word	0x20008a90
 801e198:	20011820 	.word	0x20011820
 801e19c:	20008a96 	.word	0x20008a96
 801e1a0:	20008a8c 	.word	0x20008a8c
 801e1a4:	20008a6c 	.word	0x20008a6c
 801e1a8:	08027758 	.word	0x08027758
 801e1ac:	08027aec 	.word	0x08027aec
 801e1b0:	080277c0 	.word	0x080277c0
 801e1b4:	08027afc 	.word	0x08027afc
 801e1b8:	08027b0c 	.word	0x08027b0c
        off -= p->len;
 801e1bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e1be:	895b      	ldrh	r3, [r3, #10]
 801e1c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e1c4:	1ad3      	subs	r3, r2, r3
 801e1c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801e1ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e1cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801e1ce:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801e1d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e1d2:	2200      	movs	r2, #0
 801e1d4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801e1d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e1d8:	681b      	ldr	r3, [r3, #0]
 801e1da:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801e1dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e1de:	895b      	ldrh	r3, [r3, #10]
 801e1e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e1e4:	429a      	cmp	r2, r3
 801e1e6:	d8e9      	bhi.n	801e1bc <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801e1e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e1ec:	4619      	mov	r1, r3
 801e1ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801e1f0:	f7fb fd64 	bl	8019cbc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801e1f4:	687b      	ldr	r3, [r7, #4]
 801e1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e1f8:	4a91      	ldr	r2, [pc, #580]	; (801e440 <tcp_receive+0x884>)
 801e1fa:	6013      	str	r3, [r2, #0]
 801e1fc:	4b91      	ldr	r3, [pc, #580]	; (801e444 <tcp_receive+0x888>)
 801e1fe:	68db      	ldr	r3, [r3, #12]
 801e200:	4a8f      	ldr	r2, [pc, #572]	; (801e440 <tcp_receive+0x884>)
 801e202:	6812      	ldr	r2, [r2, #0]
 801e204:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801e206:	e00d      	b.n	801e224 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801e208:	4b8d      	ldr	r3, [pc, #564]	; (801e440 <tcp_receive+0x884>)
 801e20a:	681a      	ldr	r2, [r3, #0]
 801e20c:	687b      	ldr	r3, [r7, #4]
 801e20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e210:	1ad3      	subs	r3, r2, r3
 801e212:	2b00      	cmp	r3, #0
 801e214:	da06      	bge.n	801e224 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801e216:	687b      	ldr	r3, [r7, #4]
 801e218:	8b5b      	ldrh	r3, [r3, #26]
 801e21a:	f043 0302 	orr.w	r3, r3, #2
 801e21e:	b29a      	uxth	r2, r3
 801e220:	687b      	ldr	r3, [r7, #4]
 801e222:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801e224:	4b86      	ldr	r3, [pc, #536]	; (801e440 <tcp_receive+0x884>)
 801e226:	681a      	ldr	r2, [r3, #0]
 801e228:	687b      	ldr	r3, [r7, #4]
 801e22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e22c:	1ad3      	subs	r3, r2, r3
 801e22e:	2b00      	cmp	r3, #0
 801e230:	f2c0 842a 	blt.w	801ea88 <tcp_receive+0xecc>
 801e234:	4b82      	ldr	r3, [pc, #520]	; (801e440 <tcp_receive+0x884>)
 801e236:	681a      	ldr	r2, [r3, #0]
 801e238:	687b      	ldr	r3, [r7, #4]
 801e23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e23c:	6879      	ldr	r1, [r7, #4]
 801e23e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801e240:	440b      	add	r3, r1
 801e242:	1ad3      	subs	r3, r2, r3
 801e244:	3301      	adds	r3, #1
 801e246:	2b00      	cmp	r3, #0
 801e248:	f300 841e 	bgt.w	801ea88 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801e24c:	687b      	ldr	r3, [r7, #4]
 801e24e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e250:	4b7b      	ldr	r3, [pc, #492]	; (801e440 <tcp_receive+0x884>)
 801e252:	681b      	ldr	r3, [r3, #0]
 801e254:	429a      	cmp	r2, r3
 801e256:	f040 829a 	bne.w	801e78e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801e25a:	4b7a      	ldr	r3, [pc, #488]	; (801e444 <tcp_receive+0x888>)
 801e25c:	891c      	ldrh	r4, [r3, #8]
 801e25e:	4b79      	ldr	r3, [pc, #484]	; (801e444 <tcp_receive+0x888>)
 801e260:	68db      	ldr	r3, [r3, #12]
 801e262:	899b      	ldrh	r3, [r3, #12]
 801e264:	b29b      	uxth	r3, r3
 801e266:	4618      	mov	r0, r3
 801e268:	f7f5 fd9c 	bl	8013da4 <lwip_htons>
 801e26c:	4603      	mov	r3, r0
 801e26e:	b2db      	uxtb	r3, r3
 801e270:	f003 0303 	and.w	r3, r3, #3
 801e274:	2b00      	cmp	r3, #0
 801e276:	d001      	beq.n	801e27c <tcp_receive+0x6c0>
 801e278:	2301      	movs	r3, #1
 801e27a:	e000      	b.n	801e27e <tcp_receive+0x6c2>
 801e27c:	2300      	movs	r3, #0
 801e27e:	4423      	add	r3, r4
 801e280:	b29a      	uxth	r2, r3
 801e282:	4b71      	ldr	r3, [pc, #452]	; (801e448 <tcp_receive+0x88c>)
 801e284:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801e286:	687b      	ldr	r3, [r7, #4]
 801e288:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801e28a:	4b6f      	ldr	r3, [pc, #444]	; (801e448 <tcp_receive+0x88c>)
 801e28c:	881b      	ldrh	r3, [r3, #0]
 801e28e:	429a      	cmp	r2, r3
 801e290:	d275      	bcs.n	801e37e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e292:	4b6c      	ldr	r3, [pc, #432]	; (801e444 <tcp_receive+0x888>)
 801e294:	68db      	ldr	r3, [r3, #12]
 801e296:	899b      	ldrh	r3, [r3, #12]
 801e298:	b29b      	uxth	r3, r3
 801e29a:	4618      	mov	r0, r3
 801e29c:	f7f5 fd82 	bl	8013da4 <lwip_htons>
 801e2a0:	4603      	mov	r3, r0
 801e2a2:	b2db      	uxtb	r3, r3
 801e2a4:	f003 0301 	and.w	r3, r3, #1
 801e2a8:	2b00      	cmp	r3, #0
 801e2aa:	d01f      	beq.n	801e2ec <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801e2ac:	4b65      	ldr	r3, [pc, #404]	; (801e444 <tcp_receive+0x888>)
 801e2ae:	68db      	ldr	r3, [r3, #12]
 801e2b0:	899b      	ldrh	r3, [r3, #12]
 801e2b2:	b29b      	uxth	r3, r3
 801e2b4:	b21b      	sxth	r3, r3
 801e2b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801e2ba:	b21c      	sxth	r4, r3
 801e2bc:	4b61      	ldr	r3, [pc, #388]	; (801e444 <tcp_receive+0x888>)
 801e2be:	68db      	ldr	r3, [r3, #12]
 801e2c0:	899b      	ldrh	r3, [r3, #12]
 801e2c2:	b29b      	uxth	r3, r3
 801e2c4:	4618      	mov	r0, r3
 801e2c6:	f7f5 fd6d 	bl	8013da4 <lwip_htons>
 801e2ca:	4603      	mov	r3, r0
 801e2cc:	b2db      	uxtb	r3, r3
 801e2ce:	b29b      	uxth	r3, r3
 801e2d0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801e2d4:	b29b      	uxth	r3, r3
 801e2d6:	4618      	mov	r0, r3
 801e2d8:	f7f5 fd64 	bl	8013da4 <lwip_htons>
 801e2dc:	4603      	mov	r3, r0
 801e2de:	b21b      	sxth	r3, r3
 801e2e0:	4323      	orrs	r3, r4
 801e2e2:	b21a      	sxth	r2, r3
 801e2e4:	4b57      	ldr	r3, [pc, #348]	; (801e444 <tcp_receive+0x888>)
 801e2e6:	68db      	ldr	r3, [r3, #12]
 801e2e8:	b292      	uxth	r2, r2
 801e2ea:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801e2ec:	687b      	ldr	r3, [r7, #4]
 801e2ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801e2f0:	4b54      	ldr	r3, [pc, #336]	; (801e444 <tcp_receive+0x888>)
 801e2f2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801e2f4:	4b53      	ldr	r3, [pc, #332]	; (801e444 <tcp_receive+0x888>)
 801e2f6:	68db      	ldr	r3, [r3, #12]
 801e2f8:	899b      	ldrh	r3, [r3, #12]
 801e2fa:	b29b      	uxth	r3, r3
 801e2fc:	4618      	mov	r0, r3
 801e2fe:	f7f5 fd51 	bl	8013da4 <lwip_htons>
 801e302:	4603      	mov	r3, r0
 801e304:	b2db      	uxtb	r3, r3
 801e306:	f003 0302 	and.w	r3, r3, #2
 801e30a:	2b00      	cmp	r3, #0
 801e30c:	d005      	beq.n	801e31a <tcp_receive+0x75e>
            inseg.len -= 1;
 801e30e:	4b4d      	ldr	r3, [pc, #308]	; (801e444 <tcp_receive+0x888>)
 801e310:	891b      	ldrh	r3, [r3, #8]
 801e312:	3b01      	subs	r3, #1
 801e314:	b29a      	uxth	r2, r3
 801e316:	4b4b      	ldr	r3, [pc, #300]	; (801e444 <tcp_receive+0x888>)
 801e318:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801e31a:	4b4a      	ldr	r3, [pc, #296]	; (801e444 <tcp_receive+0x888>)
 801e31c:	685a      	ldr	r2, [r3, #4]
 801e31e:	4b49      	ldr	r3, [pc, #292]	; (801e444 <tcp_receive+0x888>)
 801e320:	891b      	ldrh	r3, [r3, #8]
 801e322:	4619      	mov	r1, r3
 801e324:	4610      	mov	r0, r2
 801e326:	f7fb fbc9 	bl	8019abc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801e32a:	4b46      	ldr	r3, [pc, #280]	; (801e444 <tcp_receive+0x888>)
 801e32c:	891c      	ldrh	r4, [r3, #8]
 801e32e:	4b45      	ldr	r3, [pc, #276]	; (801e444 <tcp_receive+0x888>)
 801e330:	68db      	ldr	r3, [r3, #12]
 801e332:	899b      	ldrh	r3, [r3, #12]
 801e334:	b29b      	uxth	r3, r3
 801e336:	4618      	mov	r0, r3
 801e338:	f7f5 fd34 	bl	8013da4 <lwip_htons>
 801e33c:	4603      	mov	r3, r0
 801e33e:	b2db      	uxtb	r3, r3
 801e340:	f003 0303 	and.w	r3, r3, #3
 801e344:	2b00      	cmp	r3, #0
 801e346:	d001      	beq.n	801e34c <tcp_receive+0x790>
 801e348:	2301      	movs	r3, #1
 801e34a:	e000      	b.n	801e34e <tcp_receive+0x792>
 801e34c:	2300      	movs	r3, #0
 801e34e:	4423      	add	r3, r4
 801e350:	b29a      	uxth	r2, r3
 801e352:	4b3d      	ldr	r3, [pc, #244]	; (801e448 <tcp_receive+0x88c>)
 801e354:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801e356:	4b3c      	ldr	r3, [pc, #240]	; (801e448 <tcp_receive+0x88c>)
 801e358:	881b      	ldrh	r3, [r3, #0]
 801e35a:	461a      	mov	r2, r3
 801e35c:	4b38      	ldr	r3, [pc, #224]	; (801e440 <tcp_receive+0x884>)
 801e35e:	681b      	ldr	r3, [r3, #0]
 801e360:	441a      	add	r2, r3
 801e362:	687b      	ldr	r3, [r7, #4]
 801e364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e366:	6879      	ldr	r1, [r7, #4]
 801e368:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801e36a:	440b      	add	r3, r1
 801e36c:	429a      	cmp	r2, r3
 801e36e:	d006      	beq.n	801e37e <tcp_receive+0x7c2>
 801e370:	4b36      	ldr	r3, [pc, #216]	; (801e44c <tcp_receive+0x890>)
 801e372:	f240 52cc 	movw	r2, #1484	; 0x5cc
 801e376:	4936      	ldr	r1, [pc, #216]	; (801e450 <tcp_receive+0x894>)
 801e378:	4836      	ldr	r0, [pc, #216]	; (801e454 <tcp_receive+0x898>)
 801e37a:	f005 fe35 	bl	8023fe8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801e37e:	687b      	ldr	r3, [r7, #4]
 801e380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e382:	2b00      	cmp	r3, #0
 801e384:	f000 80e7 	beq.w	801e556 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e388:	4b2e      	ldr	r3, [pc, #184]	; (801e444 <tcp_receive+0x888>)
 801e38a:	68db      	ldr	r3, [r3, #12]
 801e38c:	899b      	ldrh	r3, [r3, #12]
 801e38e:	b29b      	uxth	r3, r3
 801e390:	4618      	mov	r0, r3
 801e392:	f7f5 fd07 	bl	8013da4 <lwip_htons>
 801e396:	4603      	mov	r3, r0
 801e398:	b2db      	uxtb	r3, r3
 801e39a:	f003 0301 	and.w	r3, r3, #1
 801e39e:	2b00      	cmp	r3, #0
 801e3a0:	d010      	beq.n	801e3c4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801e3a2:	e00a      	b.n	801e3ba <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801e3a4:	687b      	ldr	r3, [r7, #4]
 801e3a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e3a8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801e3aa:	687b      	ldr	r3, [r7, #4]
 801e3ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e3ae:	681a      	ldr	r2, [r3, #0]
 801e3b0:	687b      	ldr	r3, [r7, #4]
 801e3b2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801e3b4:	68f8      	ldr	r0, [r7, #12]
 801e3b6:	f7fd fcc9 	bl	801bd4c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801e3ba:	687b      	ldr	r3, [r7, #4]
 801e3bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e3be:	2b00      	cmp	r3, #0
 801e3c0:	d1f0      	bne.n	801e3a4 <tcp_receive+0x7e8>
 801e3c2:	e0c8      	b.n	801e556 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801e3c4:	687b      	ldr	r3, [r7, #4]
 801e3c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801e3ca:	e052      	b.n	801e472 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801e3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e3ce:	68db      	ldr	r3, [r3, #12]
 801e3d0:	899b      	ldrh	r3, [r3, #12]
 801e3d2:	b29b      	uxth	r3, r3
 801e3d4:	4618      	mov	r0, r3
 801e3d6:	f7f5 fce5 	bl	8013da4 <lwip_htons>
 801e3da:	4603      	mov	r3, r0
 801e3dc:	b2db      	uxtb	r3, r3
 801e3de:	f003 0301 	and.w	r3, r3, #1
 801e3e2:	2b00      	cmp	r3, #0
 801e3e4:	d03d      	beq.n	801e462 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801e3e6:	4b17      	ldr	r3, [pc, #92]	; (801e444 <tcp_receive+0x888>)
 801e3e8:	68db      	ldr	r3, [r3, #12]
 801e3ea:	899b      	ldrh	r3, [r3, #12]
 801e3ec:	b29b      	uxth	r3, r3
 801e3ee:	4618      	mov	r0, r3
 801e3f0:	f7f5 fcd8 	bl	8013da4 <lwip_htons>
 801e3f4:	4603      	mov	r3, r0
 801e3f6:	b2db      	uxtb	r3, r3
 801e3f8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801e3fc:	2b00      	cmp	r3, #0
 801e3fe:	d130      	bne.n	801e462 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801e400:	4b10      	ldr	r3, [pc, #64]	; (801e444 <tcp_receive+0x888>)
 801e402:	68db      	ldr	r3, [r3, #12]
 801e404:	899b      	ldrh	r3, [r3, #12]
 801e406:	b29c      	uxth	r4, r3
 801e408:	2001      	movs	r0, #1
 801e40a:	f7f5 fccb 	bl	8013da4 <lwip_htons>
 801e40e:	4603      	mov	r3, r0
 801e410:	461a      	mov	r2, r3
 801e412:	4b0c      	ldr	r3, [pc, #48]	; (801e444 <tcp_receive+0x888>)
 801e414:	68db      	ldr	r3, [r3, #12]
 801e416:	4322      	orrs	r2, r4
 801e418:	b292      	uxth	r2, r2
 801e41a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801e41c:	4b09      	ldr	r3, [pc, #36]	; (801e444 <tcp_receive+0x888>)
 801e41e:	891c      	ldrh	r4, [r3, #8]
 801e420:	4b08      	ldr	r3, [pc, #32]	; (801e444 <tcp_receive+0x888>)
 801e422:	68db      	ldr	r3, [r3, #12]
 801e424:	899b      	ldrh	r3, [r3, #12]
 801e426:	b29b      	uxth	r3, r3
 801e428:	4618      	mov	r0, r3
 801e42a:	f7f5 fcbb 	bl	8013da4 <lwip_htons>
 801e42e:	4603      	mov	r3, r0
 801e430:	b2db      	uxtb	r3, r3
 801e432:	f003 0303 	and.w	r3, r3, #3
 801e436:	2b00      	cmp	r3, #0
 801e438:	d00e      	beq.n	801e458 <tcp_receive+0x89c>
 801e43a:	2301      	movs	r3, #1
 801e43c:	e00d      	b.n	801e45a <tcp_receive+0x89e>
 801e43e:	bf00      	nop
 801e440:	20008a8c 	.word	0x20008a8c
 801e444:	20008a6c 	.word	0x20008a6c
 801e448:	20008a96 	.word	0x20008a96
 801e44c:	08027758 	.word	0x08027758
 801e450:	08027b1c 	.word	0x08027b1c
 801e454:	080277c0 	.word	0x080277c0
 801e458:	2300      	movs	r3, #0
 801e45a:	4423      	add	r3, r4
 801e45c:	b29a      	uxth	r2, r3
 801e45e:	4b98      	ldr	r3, [pc, #608]	; (801e6c0 <tcp_receive+0xb04>)
 801e460:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801e462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e464:	613b      	str	r3, [r7, #16]
              next = next->next;
 801e466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e468:	681b      	ldr	r3, [r3, #0]
 801e46a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801e46c:	6938      	ldr	r0, [r7, #16]
 801e46e:	f7fd fc6d 	bl	801bd4c <tcp_seg_free>
            while (next &&
 801e472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e474:	2b00      	cmp	r3, #0
 801e476:	d00e      	beq.n	801e496 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801e478:	4b91      	ldr	r3, [pc, #580]	; (801e6c0 <tcp_receive+0xb04>)
 801e47a:	881b      	ldrh	r3, [r3, #0]
 801e47c:	461a      	mov	r2, r3
 801e47e:	4b91      	ldr	r3, [pc, #580]	; (801e6c4 <tcp_receive+0xb08>)
 801e480:	681b      	ldr	r3, [r3, #0]
 801e482:	441a      	add	r2, r3
 801e484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e486:	68db      	ldr	r3, [r3, #12]
 801e488:	685b      	ldr	r3, [r3, #4]
 801e48a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801e48c:	8909      	ldrh	r1, [r1, #8]
 801e48e:	440b      	add	r3, r1
 801e490:	1ad3      	subs	r3, r2, r3
            while (next &&
 801e492:	2b00      	cmp	r3, #0
 801e494:	da9a      	bge.n	801e3cc <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801e496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e498:	2b00      	cmp	r3, #0
 801e49a:	d059      	beq.n	801e550 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801e49c:	4b88      	ldr	r3, [pc, #544]	; (801e6c0 <tcp_receive+0xb04>)
 801e49e:	881b      	ldrh	r3, [r3, #0]
 801e4a0:	461a      	mov	r2, r3
 801e4a2:	4b88      	ldr	r3, [pc, #544]	; (801e6c4 <tcp_receive+0xb08>)
 801e4a4:	681b      	ldr	r3, [r3, #0]
 801e4a6:	441a      	add	r2, r3
 801e4a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e4aa:	68db      	ldr	r3, [r3, #12]
 801e4ac:	685b      	ldr	r3, [r3, #4]
 801e4ae:	1ad3      	subs	r3, r2, r3
            if (next &&
 801e4b0:	2b00      	cmp	r3, #0
 801e4b2:	dd4d      	ble.n	801e550 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801e4b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e4b6:	68db      	ldr	r3, [r3, #12]
 801e4b8:	685b      	ldr	r3, [r3, #4]
 801e4ba:	b29a      	uxth	r2, r3
 801e4bc:	4b81      	ldr	r3, [pc, #516]	; (801e6c4 <tcp_receive+0xb08>)
 801e4be:	681b      	ldr	r3, [r3, #0]
 801e4c0:	b29b      	uxth	r3, r3
 801e4c2:	1ad3      	subs	r3, r2, r3
 801e4c4:	b29a      	uxth	r2, r3
 801e4c6:	4b80      	ldr	r3, [pc, #512]	; (801e6c8 <tcp_receive+0xb0c>)
 801e4c8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801e4ca:	4b7f      	ldr	r3, [pc, #508]	; (801e6c8 <tcp_receive+0xb0c>)
 801e4cc:	68db      	ldr	r3, [r3, #12]
 801e4ce:	899b      	ldrh	r3, [r3, #12]
 801e4d0:	b29b      	uxth	r3, r3
 801e4d2:	4618      	mov	r0, r3
 801e4d4:	f7f5 fc66 	bl	8013da4 <lwip_htons>
 801e4d8:	4603      	mov	r3, r0
 801e4da:	b2db      	uxtb	r3, r3
 801e4dc:	f003 0302 	and.w	r3, r3, #2
 801e4e0:	2b00      	cmp	r3, #0
 801e4e2:	d005      	beq.n	801e4f0 <tcp_receive+0x934>
                inseg.len -= 1;
 801e4e4:	4b78      	ldr	r3, [pc, #480]	; (801e6c8 <tcp_receive+0xb0c>)
 801e4e6:	891b      	ldrh	r3, [r3, #8]
 801e4e8:	3b01      	subs	r3, #1
 801e4ea:	b29a      	uxth	r2, r3
 801e4ec:	4b76      	ldr	r3, [pc, #472]	; (801e6c8 <tcp_receive+0xb0c>)
 801e4ee:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801e4f0:	4b75      	ldr	r3, [pc, #468]	; (801e6c8 <tcp_receive+0xb0c>)
 801e4f2:	685a      	ldr	r2, [r3, #4]
 801e4f4:	4b74      	ldr	r3, [pc, #464]	; (801e6c8 <tcp_receive+0xb0c>)
 801e4f6:	891b      	ldrh	r3, [r3, #8]
 801e4f8:	4619      	mov	r1, r3
 801e4fa:	4610      	mov	r0, r2
 801e4fc:	f7fb fade 	bl	8019abc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801e500:	4b71      	ldr	r3, [pc, #452]	; (801e6c8 <tcp_receive+0xb0c>)
 801e502:	891c      	ldrh	r4, [r3, #8]
 801e504:	4b70      	ldr	r3, [pc, #448]	; (801e6c8 <tcp_receive+0xb0c>)
 801e506:	68db      	ldr	r3, [r3, #12]
 801e508:	899b      	ldrh	r3, [r3, #12]
 801e50a:	b29b      	uxth	r3, r3
 801e50c:	4618      	mov	r0, r3
 801e50e:	f7f5 fc49 	bl	8013da4 <lwip_htons>
 801e512:	4603      	mov	r3, r0
 801e514:	b2db      	uxtb	r3, r3
 801e516:	f003 0303 	and.w	r3, r3, #3
 801e51a:	2b00      	cmp	r3, #0
 801e51c:	d001      	beq.n	801e522 <tcp_receive+0x966>
 801e51e:	2301      	movs	r3, #1
 801e520:	e000      	b.n	801e524 <tcp_receive+0x968>
 801e522:	2300      	movs	r3, #0
 801e524:	4423      	add	r3, r4
 801e526:	b29a      	uxth	r2, r3
 801e528:	4b65      	ldr	r3, [pc, #404]	; (801e6c0 <tcp_receive+0xb04>)
 801e52a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801e52c:	4b64      	ldr	r3, [pc, #400]	; (801e6c0 <tcp_receive+0xb04>)
 801e52e:	881b      	ldrh	r3, [r3, #0]
 801e530:	461a      	mov	r2, r3
 801e532:	4b64      	ldr	r3, [pc, #400]	; (801e6c4 <tcp_receive+0xb08>)
 801e534:	681b      	ldr	r3, [r3, #0]
 801e536:	441a      	add	r2, r3
 801e538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e53a:	68db      	ldr	r3, [r3, #12]
 801e53c:	685b      	ldr	r3, [r3, #4]
 801e53e:	429a      	cmp	r2, r3
 801e540:	d006      	beq.n	801e550 <tcp_receive+0x994>
 801e542:	4b62      	ldr	r3, [pc, #392]	; (801e6cc <tcp_receive+0xb10>)
 801e544:	f240 52fd 	movw	r2, #1533	; 0x5fd
 801e548:	4961      	ldr	r1, [pc, #388]	; (801e6d0 <tcp_receive+0xb14>)
 801e54a:	4862      	ldr	r0, [pc, #392]	; (801e6d4 <tcp_receive+0xb18>)
 801e54c:	f005 fd4c 	bl	8023fe8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801e550:	687b      	ldr	r3, [r7, #4]
 801e552:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e554:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801e556:	4b5a      	ldr	r3, [pc, #360]	; (801e6c0 <tcp_receive+0xb04>)
 801e558:	881b      	ldrh	r3, [r3, #0]
 801e55a:	461a      	mov	r2, r3
 801e55c:	4b59      	ldr	r3, [pc, #356]	; (801e6c4 <tcp_receive+0xb08>)
 801e55e:	681b      	ldr	r3, [r3, #0]
 801e560:	441a      	add	r2, r3
 801e562:	687b      	ldr	r3, [r7, #4]
 801e564:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801e566:	687b      	ldr	r3, [r7, #4]
 801e568:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801e56a:	4b55      	ldr	r3, [pc, #340]	; (801e6c0 <tcp_receive+0xb04>)
 801e56c:	881b      	ldrh	r3, [r3, #0]
 801e56e:	429a      	cmp	r2, r3
 801e570:	d206      	bcs.n	801e580 <tcp_receive+0x9c4>
 801e572:	4b56      	ldr	r3, [pc, #344]	; (801e6cc <tcp_receive+0xb10>)
 801e574:	f240 6207 	movw	r2, #1543	; 0x607
 801e578:	4957      	ldr	r1, [pc, #348]	; (801e6d8 <tcp_receive+0xb1c>)
 801e57a:	4856      	ldr	r0, [pc, #344]	; (801e6d4 <tcp_receive+0xb18>)
 801e57c:	f005 fd34 	bl	8023fe8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801e580:	687b      	ldr	r3, [r7, #4]
 801e582:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801e584:	4b4e      	ldr	r3, [pc, #312]	; (801e6c0 <tcp_receive+0xb04>)
 801e586:	881b      	ldrh	r3, [r3, #0]
 801e588:	1ad3      	subs	r3, r2, r3
 801e58a:	b29a      	uxth	r2, r3
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801e590:	6878      	ldr	r0, [r7, #4]
 801e592:	f7fc feb9 	bl	801b308 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801e596:	4b4c      	ldr	r3, [pc, #304]	; (801e6c8 <tcp_receive+0xb0c>)
 801e598:	685b      	ldr	r3, [r3, #4]
 801e59a:	891b      	ldrh	r3, [r3, #8]
 801e59c:	2b00      	cmp	r3, #0
 801e59e:	d006      	beq.n	801e5ae <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801e5a0:	4b49      	ldr	r3, [pc, #292]	; (801e6c8 <tcp_receive+0xb0c>)
 801e5a2:	685b      	ldr	r3, [r3, #4]
 801e5a4:	4a4d      	ldr	r2, [pc, #308]	; (801e6dc <tcp_receive+0xb20>)
 801e5a6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801e5a8:	4b47      	ldr	r3, [pc, #284]	; (801e6c8 <tcp_receive+0xb0c>)
 801e5aa:	2200      	movs	r2, #0
 801e5ac:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801e5ae:	4b46      	ldr	r3, [pc, #280]	; (801e6c8 <tcp_receive+0xb0c>)
 801e5b0:	68db      	ldr	r3, [r3, #12]
 801e5b2:	899b      	ldrh	r3, [r3, #12]
 801e5b4:	b29b      	uxth	r3, r3
 801e5b6:	4618      	mov	r0, r3
 801e5b8:	f7f5 fbf4 	bl	8013da4 <lwip_htons>
 801e5bc:	4603      	mov	r3, r0
 801e5be:	b2db      	uxtb	r3, r3
 801e5c0:	f003 0301 	and.w	r3, r3, #1
 801e5c4:	2b00      	cmp	r3, #0
 801e5c6:	f000 80b8 	beq.w	801e73a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801e5ca:	4b45      	ldr	r3, [pc, #276]	; (801e6e0 <tcp_receive+0xb24>)
 801e5cc:	781b      	ldrb	r3, [r3, #0]
 801e5ce:	f043 0320 	orr.w	r3, r3, #32
 801e5d2:	b2da      	uxtb	r2, r3
 801e5d4:	4b42      	ldr	r3, [pc, #264]	; (801e6e0 <tcp_receive+0xb24>)
 801e5d6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801e5d8:	e0af      	b.n	801e73a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801e5da:	687b      	ldr	r3, [r7, #4]
 801e5dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e5de:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801e5e0:	687b      	ldr	r3, [r7, #4]
 801e5e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e5e4:	68db      	ldr	r3, [r3, #12]
 801e5e6:	685b      	ldr	r3, [r3, #4]
 801e5e8:	4a36      	ldr	r2, [pc, #216]	; (801e6c4 <tcp_receive+0xb08>)
 801e5ea:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801e5ec:	68bb      	ldr	r3, [r7, #8]
 801e5ee:	891b      	ldrh	r3, [r3, #8]
 801e5f0:	461c      	mov	r4, r3
 801e5f2:	68bb      	ldr	r3, [r7, #8]
 801e5f4:	68db      	ldr	r3, [r3, #12]
 801e5f6:	899b      	ldrh	r3, [r3, #12]
 801e5f8:	b29b      	uxth	r3, r3
 801e5fa:	4618      	mov	r0, r3
 801e5fc:	f7f5 fbd2 	bl	8013da4 <lwip_htons>
 801e600:	4603      	mov	r3, r0
 801e602:	b2db      	uxtb	r3, r3
 801e604:	f003 0303 	and.w	r3, r3, #3
 801e608:	2b00      	cmp	r3, #0
 801e60a:	d001      	beq.n	801e610 <tcp_receive+0xa54>
 801e60c:	2301      	movs	r3, #1
 801e60e:	e000      	b.n	801e612 <tcp_receive+0xa56>
 801e610:	2300      	movs	r3, #0
 801e612:	191a      	adds	r2, r3, r4
 801e614:	687b      	ldr	r3, [r7, #4]
 801e616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e618:	441a      	add	r2, r3
 801e61a:	687b      	ldr	r3, [r7, #4]
 801e61c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801e61e:	687b      	ldr	r3, [r7, #4]
 801e620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e622:	461c      	mov	r4, r3
 801e624:	68bb      	ldr	r3, [r7, #8]
 801e626:	891b      	ldrh	r3, [r3, #8]
 801e628:	461d      	mov	r5, r3
 801e62a:	68bb      	ldr	r3, [r7, #8]
 801e62c:	68db      	ldr	r3, [r3, #12]
 801e62e:	899b      	ldrh	r3, [r3, #12]
 801e630:	b29b      	uxth	r3, r3
 801e632:	4618      	mov	r0, r3
 801e634:	f7f5 fbb6 	bl	8013da4 <lwip_htons>
 801e638:	4603      	mov	r3, r0
 801e63a:	b2db      	uxtb	r3, r3
 801e63c:	f003 0303 	and.w	r3, r3, #3
 801e640:	2b00      	cmp	r3, #0
 801e642:	d001      	beq.n	801e648 <tcp_receive+0xa8c>
 801e644:	2301      	movs	r3, #1
 801e646:	e000      	b.n	801e64a <tcp_receive+0xa8e>
 801e648:	2300      	movs	r3, #0
 801e64a:	442b      	add	r3, r5
 801e64c:	429c      	cmp	r4, r3
 801e64e:	d206      	bcs.n	801e65e <tcp_receive+0xaa2>
 801e650:	4b1e      	ldr	r3, [pc, #120]	; (801e6cc <tcp_receive+0xb10>)
 801e652:	f240 622c 	movw	r2, #1580	; 0x62c
 801e656:	4923      	ldr	r1, [pc, #140]	; (801e6e4 <tcp_receive+0xb28>)
 801e658:	481e      	ldr	r0, [pc, #120]	; (801e6d4 <tcp_receive+0xb18>)
 801e65a:	f005 fcc5 	bl	8023fe8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801e65e:	68bb      	ldr	r3, [r7, #8]
 801e660:	891b      	ldrh	r3, [r3, #8]
 801e662:	461c      	mov	r4, r3
 801e664:	68bb      	ldr	r3, [r7, #8]
 801e666:	68db      	ldr	r3, [r3, #12]
 801e668:	899b      	ldrh	r3, [r3, #12]
 801e66a:	b29b      	uxth	r3, r3
 801e66c:	4618      	mov	r0, r3
 801e66e:	f7f5 fb99 	bl	8013da4 <lwip_htons>
 801e672:	4603      	mov	r3, r0
 801e674:	b2db      	uxtb	r3, r3
 801e676:	f003 0303 	and.w	r3, r3, #3
 801e67a:	2b00      	cmp	r3, #0
 801e67c:	d001      	beq.n	801e682 <tcp_receive+0xac6>
 801e67e:	2301      	movs	r3, #1
 801e680:	e000      	b.n	801e684 <tcp_receive+0xac8>
 801e682:	2300      	movs	r3, #0
 801e684:	1919      	adds	r1, r3, r4
 801e686:	687b      	ldr	r3, [r7, #4]
 801e688:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801e68a:	b28b      	uxth	r3, r1
 801e68c:	1ad3      	subs	r3, r2, r3
 801e68e:	b29a      	uxth	r2, r3
 801e690:	687b      	ldr	r3, [r7, #4]
 801e692:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801e694:	6878      	ldr	r0, [r7, #4]
 801e696:	f7fc fe37 	bl	801b308 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801e69a:	68bb      	ldr	r3, [r7, #8]
 801e69c:	685b      	ldr	r3, [r3, #4]
 801e69e:	891b      	ldrh	r3, [r3, #8]
 801e6a0:	2b00      	cmp	r3, #0
 801e6a2:	d028      	beq.n	801e6f6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801e6a4:	4b0d      	ldr	r3, [pc, #52]	; (801e6dc <tcp_receive+0xb20>)
 801e6a6:	681b      	ldr	r3, [r3, #0]
 801e6a8:	2b00      	cmp	r3, #0
 801e6aa:	d01d      	beq.n	801e6e8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801e6ac:	4b0b      	ldr	r3, [pc, #44]	; (801e6dc <tcp_receive+0xb20>)
 801e6ae:	681a      	ldr	r2, [r3, #0]
 801e6b0:	68bb      	ldr	r3, [r7, #8]
 801e6b2:	685b      	ldr	r3, [r3, #4]
 801e6b4:	4619      	mov	r1, r3
 801e6b6:	4610      	mov	r0, r2
 801e6b8:	f7fb fc54 	bl	8019f64 <pbuf_cat>
 801e6bc:	e018      	b.n	801e6f0 <tcp_receive+0xb34>
 801e6be:	bf00      	nop
 801e6c0:	20008a96 	.word	0x20008a96
 801e6c4:	20008a8c 	.word	0x20008a8c
 801e6c8:	20008a6c 	.word	0x20008a6c
 801e6cc:	08027758 	.word	0x08027758
 801e6d0:	08027b54 	.word	0x08027b54
 801e6d4:	080277c0 	.word	0x080277c0
 801e6d8:	08027b90 	.word	0x08027b90
 801e6dc:	20008a9c 	.word	0x20008a9c
 801e6e0:	20008a99 	.word	0x20008a99
 801e6e4:	08027bb0 	.word	0x08027bb0
            } else {
              recv_data = cseg->p;
 801e6e8:	68bb      	ldr	r3, [r7, #8]
 801e6ea:	685b      	ldr	r3, [r3, #4]
 801e6ec:	4a70      	ldr	r2, [pc, #448]	; (801e8b0 <tcp_receive+0xcf4>)
 801e6ee:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801e6f0:	68bb      	ldr	r3, [r7, #8]
 801e6f2:	2200      	movs	r2, #0
 801e6f4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801e6f6:	68bb      	ldr	r3, [r7, #8]
 801e6f8:	68db      	ldr	r3, [r3, #12]
 801e6fa:	899b      	ldrh	r3, [r3, #12]
 801e6fc:	b29b      	uxth	r3, r3
 801e6fe:	4618      	mov	r0, r3
 801e700:	f7f5 fb50 	bl	8013da4 <lwip_htons>
 801e704:	4603      	mov	r3, r0
 801e706:	b2db      	uxtb	r3, r3
 801e708:	f003 0301 	and.w	r3, r3, #1
 801e70c:	2b00      	cmp	r3, #0
 801e70e:	d00d      	beq.n	801e72c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801e710:	4b68      	ldr	r3, [pc, #416]	; (801e8b4 <tcp_receive+0xcf8>)
 801e712:	781b      	ldrb	r3, [r3, #0]
 801e714:	f043 0320 	orr.w	r3, r3, #32
 801e718:	b2da      	uxtb	r2, r3
 801e71a:	4b66      	ldr	r3, [pc, #408]	; (801e8b4 <tcp_receive+0xcf8>)
 801e71c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801e71e:	687b      	ldr	r3, [r7, #4]
 801e720:	7d1b      	ldrb	r3, [r3, #20]
 801e722:	2b04      	cmp	r3, #4
 801e724:	d102      	bne.n	801e72c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801e726:	687b      	ldr	r3, [r7, #4]
 801e728:	2207      	movs	r2, #7
 801e72a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801e72c:	68bb      	ldr	r3, [r7, #8]
 801e72e:	681a      	ldr	r2, [r3, #0]
 801e730:	687b      	ldr	r3, [r7, #4]
 801e732:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801e734:	68b8      	ldr	r0, [r7, #8]
 801e736:	f7fd fb09 	bl	801bd4c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801e73a:	687b      	ldr	r3, [r7, #4]
 801e73c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e73e:	2b00      	cmp	r3, #0
 801e740:	d008      	beq.n	801e754 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801e742:	687b      	ldr	r3, [r7, #4]
 801e744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e746:	68db      	ldr	r3, [r3, #12]
 801e748:	685a      	ldr	r2, [r3, #4]
 801e74a:	687b      	ldr	r3, [r7, #4]
 801e74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801e74e:	429a      	cmp	r2, r3
 801e750:	f43f af43 	beq.w	801e5da <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801e754:	687b      	ldr	r3, [r7, #4]
 801e756:	8b5b      	ldrh	r3, [r3, #26]
 801e758:	f003 0301 	and.w	r3, r3, #1
 801e75c:	2b00      	cmp	r3, #0
 801e75e:	d00e      	beq.n	801e77e <tcp_receive+0xbc2>
 801e760:	687b      	ldr	r3, [r7, #4]
 801e762:	8b5b      	ldrh	r3, [r3, #26]
 801e764:	f023 0301 	bic.w	r3, r3, #1
 801e768:	b29a      	uxth	r2, r3
 801e76a:	687b      	ldr	r3, [r7, #4]
 801e76c:	835a      	strh	r2, [r3, #26]
 801e76e:	687b      	ldr	r3, [r7, #4]
 801e770:	8b5b      	ldrh	r3, [r3, #26]
 801e772:	f043 0302 	orr.w	r3, r3, #2
 801e776:	b29a      	uxth	r2, r3
 801e778:	687b      	ldr	r3, [r7, #4]
 801e77a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801e77c:	e188      	b.n	801ea90 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801e77e:	687b      	ldr	r3, [r7, #4]
 801e780:	8b5b      	ldrh	r3, [r3, #26]
 801e782:	f043 0301 	orr.w	r3, r3, #1
 801e786:	b29a      	uxth	r2, r3
 801e788:	687b      	ldr	r3, [r7, #4]
 801e78a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801e78c:	e180      	b.n	801ea90 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801e78e:	687b      	ldr	r3, [r7, #4]
 801e790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e792:	2b00      	cmp	r3, #0
 801e794:	d106      	bne.n	801e7a4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801e796:	4848      	ldr	r0, [pc, #288]	; (801e8b8 <tcp_receive+0xcfc>)
 801e798:	f7fd faf0 	bl	801bd7c <tcp_seg_copy>
 801e79c:	4602      	mov	r2, r0
 801e79e:	687b      	ldr	r3, [r7, #4]
 801e7a0:	675a      	str	r2, [r3, #116]	; 0x74
 801e7a2:	e16d      	b.n	801ea80 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801e7a4:	2300      	movs	r3, #0
 801e7a6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801e7a8:	687b      	ldr	r3, [r7, #4]
 801e7aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e7ac:	63bb      	str	r3, [r7, #56]	; 0x38
 801e7ae:	e157      	b.n	801ea60 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801e7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e7b2:	68db      	ldr	r3, [r3, #12]
 801e7b4:	685a      	ldr	r2, [r3, #4]
 801e7b6:	4b41      	ldr	r3, [pc, #260]	; (801e8bc <tcp_receive+0xd00>)
 801e7b8:	681b      	ldr	r3, [r3, #0]
 801e7ba:	429a      	cmp	r2, r3
 801e7bc:	d11d      	bne.n	801e7fa <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801e7be:	4b3e      	ldr	r3, [pc, #248]	; (801e8b8 <tcp_receive+0xcfc>)
 801e7c0:	891a      	ldrh	r2, [r3, #8]
 801e7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e7c4:	891b      	ldrh	r3, [r3, #8]
 801e7c6:	429a      	cmp	r2, r3
 801e7c8:	f240 814f 	bls.w	801ea6a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e7cc:	483a      	ldr	r0, [pc, #232]	; (801e8b8 <tcp_receive+0xcfc>)
 801e7ce:	f7fd fad5 	bl	801bd7c <tcp_seg_copy>
 801e7d2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801e7d4:	697b      	ldr	r3, [r7, #20]
 801e7d6:	2b00      	cmp	r3, #0
 801e7d8:	f000 8149 	beq.w	801ea6e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801e7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e7de:	2b00      	cmp	r3, #0
 801e7e0:	d003      	beq.n	801e7ea <tcp_receive+0xc2e>
                    prev->next = cseg;
 801e7e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e7e4:	697a      	ldr	r2, [r7, #20]
 801e7e6:	601a      	str	r2, [r3, #0]
 801e7e8:	e002      	b.n	801e7f0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801e7ea:	687b      	ldr	r3, [r7, #4]
 801e7ec:	697a      	ldr	r2, [r7, #20]
 801e7ee:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801e7f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801e7f2:	6978      	ldr	r0, [r7, #20]
 801e7f4:	f7ff f8de 	bl	801d9b4 <tcp_oos_insert_segment>
                }
                break;
 801e7f8:	e139      	b.n	801ea6e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801e7fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e7fc:	2b00      	cmp	r3, #0
 801e7fe:	d117      	bne.n	801e830 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801e800:	4b2e      	ldr	r3, [pc, #184]	; (801e8bc <tcp_receive+0xd00>)
 801e802:	681a      	ldr	r2, [r3, #0]
 801e804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e806:	68db      	ldr	r3, [r3, #12]
 801e808:	685b      	ldr	r3, [r3, #4]
 801e80a:	1ad3      	subs	r3, r2, r3
 801e80c:	2b00      	cmp	r3, #0
 801e80e:	da57      	bge.n	801e8c0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e810:	4829      	ldr	r0, [pc, #164]	; (801e8b8 <tcp_receive+0xcfc>)
 801e812:	f7fd fab3 	bl	801bd7c <tcp_seg_copy>
 801e816:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801e818:	69bb      	ldr	r3, [r7, #24]
 801e81a:	2b00      	cmp	r3, #0
 801e81c:	f000 8129 	beq.w	801ea72 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801e820:	687b      	ldr	r3, [r7, #4]
 801e822:	69ba      	ldr	r2, [r7, #24]
 801e824:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801e826:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801e828:	69b8      	ldr	r0, [r7, #24]
 801e82a:	f7ff f8c3 	bl	801d9b4 <tcp_oos_insert_segment>
                  }
                  break;
 801e82e:	e120      	b.n	801ea72 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801e830:	4b22      	ldr	r3, [pc, #136]	; (801e8bc <tcp_receive+0xd00>)
 801e832:	681a      	ldr	r2, [r3, #0]
 801e834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e836:	68db      	ldr	r3, [r3, #12]
 801e838:	685b      	ldr	r3, [r3, #4]
 801e83a:	1ad3      	subs	r3, r2, r3
 801e83c:	3b01      	subs	r3, #1
 801e83e:	2b00      	cmp	r3, #0
 801e840:	db3e      	blt.n	801e8c0 <tcp_receive+0xd04>
 801e842:	4b1e      	ldr	r3, [pc, #120]	; (801e8bc <tcp_receive+0xd00>)
 801e844:	681a      	ldr	r2, [r3, #0]
 801e846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e848:	68db      	ldr	r3, [r3, #12]
 801e84a:	685b      	ldr	r3, [r3, #4]
 801e84c:	1ad3      	subs	r3, r2, r3
 801e84e:	3301      	adds	r3, #1
 801e850:	2b00      	cmp	r3, #0
 801e852:	dc35      	bgt.n	801e8c0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801e854:	4818      	ldr	r0, [pc, #96]	; (801e8b8 <tcp_receive+0xcfc>)
 801e856:	f7fd fa91 	bl	801bd7c <tcp_seg_copy>
 801e85a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801e85c:	69fb      	ldr	r3, [r7, #28]
 801e85e:	2b00      	cmp	r3, #0
 801e860:	f000 8109 	beq.w	801ea76 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801e864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e866:	68db      	ldr	r3, [r3, #12]
 801e868:	685b      	ldr	r3, [r3, #4]
 801e86a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801e86c:	8912      	ldrh	r2, [r2, #8]
 801e86e:	441a      	add	r2, r3
 801e870:	4b12      	ldr	r3, [pc, #72]	; (801e8bc <tcp_receive+0xd00>)
 801e872:	681b      	ldr	r3, [r3, #0]
 801e874:	1ad3      	subs	r3, r2, r3
 801e876:	2b00      	cmp	r3, #0
 801e878:	dd12      	ble.n	801e8a0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801e87a:	4b10      	ldr	r3, [pc, #64]	; (801e8bc <tcp_receive+0xd00>)
 801e87c:	681b      	ldr	r3, [r3, #0]
 801e87e:	b29a      	uxth	r2, r3
 801e880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e882:	68db      	ldr	r3, [r3, #12]
 801e884:	685b      	ldr	r3, [r3, #4]
 801e886:	b29b      	uxth	r3, r3
 801e888:	1ad3      	subs	r3, r2, r3
 801e88a:	b29a      	uxth	r2, r3
 801e88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e88e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801e890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e892:	685a      	ldr	r2, [r3, #4]
 801e894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e896:	891b      	ldrh	r3, [r3, #8]
 801e898:	4619      	mov	r1, r3
 801e89a:	4610      	mov	r0, r2
 801e89c:	f7fb f90e 	bl	8019abc <pbuf_realloc>
                    }
                    prev->next = cseg;
 801e8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e8a2:	69fa      	ldr	r2, [r7, #28]
 801e8a4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801e8a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801e8a8:	69f8      	ldr	r0, [r7, #28]
 801e8aa:	f7ff f883 	bl	801d9b4 <tcp_oos_insert_segment>
                  }
                  break;
 801e8ae:	e0e2      	b.n	801ea76 <tcp_receive+0xeba>
 801e8b0:	20008a9c 	.word	0x20008a9c
 801e8b4:	20008a99 	.word	0x20008a99
 801e8b8:	20008a6c 	.word	0x20008a6c
 801e8bc:	20008a8c 	.word	0x20008a8c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801e8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e8c2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801e8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e8c6:	681b      	ldr	r3, [r3, #0]
 801e8c8:	2b00      	cmp	r3, #0
 801e8ca:	f040 80c6 	bne.w	801ea5a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801e8ce:	4b80      	ldr	r3, [pc, #512]	; (801ead0 <tcp_receive+0xf14>)
 801e8d0:	681a      	ldr	r2, [r3, #0]
 801e8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e8d4:	68db      	ldr	r3, [r3, #12]
 801e8d6:	685b      	ldr	r3, [r3, #4]
 801e8d8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801e8da:	2b00      	cmp	r3, #0
 801e8dc:	f340 80bd 	ble.w	801ea5a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801e8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e8e2:	68db      	ldr	r3, [r3, #12]
 801e8e4:	899b      	ldrh	r3, [r3, #12]
 801e8e6:	b29b      	uxth	r3, r3
 801e8e8:	4618      	mov	r0, r3
 801e8ea:	f7f5 fa5b 	bl	8013da4 <lwip_htons>
 801e8ee:	4603      	mov	r3, r0
 801e8f0:	b2db      	uxtb	r3, r3
 801e8f2:	f003 0301 	and.w	r3, r3, #1
 801e8f6:	2b00      	cmp	r3, #0
 801e8f8:	f040 80bf 	bne.w	801ea7a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801e8fc:	4875      	ldr	r0, [pc, #468]	; (801ead4 <tcp_receive+0xf18>)
 801e8fe:	f7fd fa3d 	bl	801bd7c <tcp_seg_copy>
 801e902:	4602      	mov	r2, r0
 801e904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e906:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801e908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e90a:	681b      	ldr	r3, [r3, #0]
 801e90c:	2b00      	cmp	r3, #0
 801e90e:	f000 80b6 	beq.w	801ea7e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801e912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e914:	68db      	ldr	r3, [r3, #12]
 801e916:	685b      	ldr	r3, [r3, #4]
 801e918:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801e91a:	8912      	ldrh	r2, [r2, #8]
 801e91c:	441a      	add	r2, r3
 801e91e:	4b6c      	ldr	r3, [pc, #432]	; (801ead0 <tcp_receive+0xf14>)
 801e920:	681b      	ldr	r3, [r3, #0]
 801e922:	1ad3      	subs	r3, r2, r3
 801e924:	2b00      	cmp	r3, #0
 801e926:	dd12      	ble.n	801e94e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801e928:	4b69      	ldr	r3, [pc, #420]	; (801ead0 <tcp_receive+0xf14>)
 801e92a:	681b      	ldr	r3, [r3, #0]
 801e92c:	b29a      	uxth	r2, r3
 801e92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e930:	68db      	ldr	r3, [r3, #12]
 801e932:	685b      	ldr	r3, [r3, #4]
 801e934:	b29b      	uxth	r3, r3
 801e936:	1ad3      	subs	r3, r2, r3
 801e938:	b29a      	uxth	r2, r3
 801e93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e93c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801e93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e940:	685a      	ldr	r2, [r3, #4]
 801e942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e944:	891b      	ldrh	r3, [r3, #8]
 801e946:	4619      	mov	r1, r3
 801e948:	4610      	mov	r0, r2
 801e94a:	f7fb f8b7 	bl	8019abc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801e94e:	4b62      	ldr	r3, [pc, #392]	; (801ead8 <tcp_receive+0xf1c>)
 801e950:	881b      	ldrh	r3, [r3, #0]
 801e952:	461a      	mov	r2, r3
 801e954:	4b5e      	ldr	r3, [pc, #376]	; (801ead0 <tcp_receive+0xf14>)
 801e956:	681b      	ldr	r3, [r3, #0]
 801e958:	441a      	add	r2, r3
 801e95a:	687b      	ldr	r3, [r7, #4]
 801e95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e95e:	6879      	ldr	r1, [r7, #4]
 801e960:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801e962:	440b      	add	r3, r1
 801e964:	1ad3      	subs	r3, r2, r3
 801e966:	2b00      	cmp	r3, #0
 801e968:	f340 8089 	ble.w	801ea7e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801e96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e96e:	681b      	ldr	r3, [r3, #0]
 801e970:	68db      	ldr	r3, [r3, #12]
 801e972:	899b      	ldrh	r3, [r3, #12]
 801e974:	b29b      	uxth	r3, r3
 801e976:	4618      	mov	r0, r3
 801e978:	f7f5 fa14 	bl	8013da4 <lwip_htons>
 801e97c:	4603      	mov	r3, r0
 801e97e:	b2db      	uxtb	r3, r3
 801e980:	f003 0301 	and.w	r3, r3, #1
 801e984:	2b00      	cmp	r3, #0
 801e986:	d022      	beq.n	801e9ce <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801e988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e98a:	681b      	ldr	r3, [r3, #0]
 801e98c:	68db      	ldr	r3, [r3, #12]
 801e98e:	899b      	ldrh	r3, [r3, #12]
 801e990:	b29b      	uxth	r3, r3
 801e992:	b21b      	sxth	r3, r3
 801e994:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801e998:	b21c      	sxth	r4, r3
 801e99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e99c:	681b      	ldr	r3, [r3, #0]
 801e99e:	68db      	ldr	r3, [r3, #12]
 801e9a0:	899b      	ldrh	r3, [r3, #12]
 801e9a2:	b29b      	uxth	r3, r3
 801e9a4:	4618      	mov	r0, r3
 801e9a6:	f7f5 f9fd 	bl	8013da4 <lwip_htons>
 801e9aa:	4603      	mov	r3, r0
 801e9ac:	b2db      	uxtb	r3, r3
 801e9ae:	b29b      	uxth	r3, r3
 801e9b0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801e9b4:	b29b      	uxth	r3, r3
 801e9b6:	4618      	mov	r0, r3
 801e9b8:	f7f5 f9f4 	bl	8013da4 <lwip_htons>
 801e9bc:	4603      	mov	r3, r0
 801e9be:	b21b      	sxth	r3, r3
 801e9c0:	4323      	orrs	r3, r4
 801e9c2:	b21a      	sxth	r2, r3
 801e9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e9c6:	681b      	ldr	r3, [r3, #0]
 801e9c8:	68db      	ldr	r3, [r3, #12]
 801e9ca:	b292      	uxth	r2, r2
 801e9cc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801e9ce:	687b      	ldr	r3, [r7, #4]
 801e9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e9d2:	b29a      	uxth	r2, r3
 801e9d4:	687b      	ldr	r3, [r7, #4]
 801e9d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e9d8:	4413      	add	r3, r2
 801e9da:	b299      	uxth	r1, r3
 801e9dc:	4b3c      	ldr	r3, [pc, #240]	; (801ead0 <tcp_receive+0xf14>)
 801e9de:	681b      	ldr	r3, [r3, #0]
 801e9e0:	b29a      	uxth	r2, r3
 801e9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e9e4:	681b      	ldr	r3, [r3, #0]
 801e9e6:	1a8a      	subs	r2, r1, r2
 801e9e8:	b292      	uxth	r2, r2
 801e9ea:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801e9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e9ee:	681b      	ldr	r3, [r3, #0]
 801e9f0:	685a      	ldr	r2, [r3, #4]
 801e9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e9f4:	681b      	ldr	r3, [r3, #0]
 801e9f6:	891b      	ldrh	r3, [r3, #8]
 801e9f8:	4619      	mov	r1, r3
 801e9fa:	4610      	mov	r0, r2
 801e9fc:	f7fb f85e 	bl	8019abc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801ea00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ea02:	681b      	ldr	r3, [r3, #0]
 801ea04:	891c      	ldrh	r4, [r3, #8]
 801ea06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ea08:	681b      	ldr	r3, [r3, #0]
 801ea0a:	68db      	ldr	r3, [r3, #12]
 801ea0c:	899b      	ldrh	r3, [r3, #12]
 801ea0e:	b29b      	uxth	r3, r3
 801ea10:	4618      	mov	r0, r3
 801ea12:	f7f5 f9c7 	bl	8013da4 <lwip_htons>
 801ea16:	4603      	mov	r3, r0
 801ea18:	b2db      	uxtb	r3, r3
 801ea1a:	f003 0303 	and.w	r3, r3, #3
 801ea1e:	2b00      	cmp	r3, #0
 801ea20:	d001      	beq.n	801ea26 <tcp_receive+0xe6a>
 801ea22:	2301      	movs	r3, #1
 801ea24:	e000      	b.n	801ea28 <tcp_receive+0xe6c>
 801ea26:	2300      	movs	r3, #0
 801ea28:	4423      	add	r3, r4
 801ea2a:	b29a      	uxth	r2, r3
 801ea2c:	4b2a      	ldr	r3, [pc, #168]	; (801ead8 <tcp_receive+0xf1c>)
 801ea2e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801ea30:	4b29      	ldr	r3, [pc, #164]	; (801ead8 <tcp_receive+0xf1c>)
 801ea32:	881b      	ldrh	r3, [r3, #0]
 801ea34:	461a      	mov	r2, r3
 801ea36:	4b26      	ldr	r3, [pc, #152]	; (801ead0 <tcp_receive+0xf14>)
 801ea38:	681b      	ldr	r3, [r3, #0]
 801ea3a:	441a      	add	r2, r3
 801ea3c:	687b      	ldr	r3, [r7, #4]
 801ea3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ea40:	6879      	ldr	r1, [r7, #4]
 801ea42:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801ea44:	440b      	add	r3, r1
 801ea46:	429a      	cmp	r2, r3
 801ea48:	d019      	beq.n	801ea7e <tcp_receive+0xec2>
 801ea4a:	4b24      	ldr	r3, [pc, #144]	; (801eadc <tcp_receive+0xf20>)
 801ea4c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801ea50:	4923      	ldr	r1, [pc, #140]	; (801eae0 <tcp_receive+0xf24>)
 801ea52:	4824      	ldr	r0, [pc, #144]	; (801eae4 <tcp_receive+0xf28>)
 801ea54:	f005 fac8 	bl	8023fe8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801ea58:	e011      	b.n	801ea7e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801ea5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ea5c:	681b      	ldr	r3, [r3, #0]
 801ea5e:	63bb      	str	r3, [r7, #56]	; 0x38
 801ea60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ea62:	2b00      	cmp	r3, #0
 801ea64:	f47f aea4 	bne.w	801e7b0 <tcp_receive+0xbf4>
 801ea68:	e00a      	b.n	801ea80 <tcp_receive+0xec4>
                break;
 801ea6a:	bf00      	nop
 801ea6c:	e008      	b.n	801ea80 <tcp_receive+0xec4>
                break;
 801ea6e:	bf00      	nop
 801ea70:	e006      	b.n	801ea80 <tcp_receive+0xec4>
                  break;
 801ea72:	bf00      	nop
 801ea74:	e004      	b.n	801ea80 <tcp_receive+0xec4>
                  break;
 801ea76:	bf00      	nop
 801ea78:	e002      	b.n	801ea80 <tcp_receive+0xec4>
                  break;
 801ea7a:	bf00      	nop
 801ea7c:	e000      	b.n	801ea80 <tcp_receive+0xec4>
                break;
 801ea7e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801ea80:	6878      	ldr	r0, [r7, #4]
 801ea82:	f001 fe9d 	bl	80207c0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801ea86:	e003      	b.n	801ea90 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801ea88:	6878      	ldr	r0, [r7, #4]
 801ea8a:	f001 fe99 	bl	80207c0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801ea8e:	e01a      	b.n	801eac6 <tcp_receive+0xf0a>
 801ea90:	e019      	b.n	801eac6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801ea92:	4b0f      	ldr	r3, [pc, #60]	; (801ead0 <tcp_receive+0xf14>)
 801ea94:	681a      	ldr	r2, [r3, #0]
 801ea96:	687b      	ldr	r3, [r7, #4]
 801ea98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ea9a:	1ad3      	subs	r3, r2, r3
 801ea9c:	2b00      	cmp	r3, #0
 801ea9e:	db0a      	blt.n	801eab6 <tcp_receive+0xefa>
 801eaa0:	4b0b      	ldr	r3, [pc, #44]	; (801ead0 <tcp_receive+0xf14>)
 801eaa2:	681a      	ldr	r2, [r3, #0]
 801eaa4:	687b      	ldr	r3, [r7, #4]
 801eaa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eaa8:	6879      	ldr	r1, [r7, #4]
 801eaaa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801eaac:	440b      	add	r3, r1
 801eaae:	1ad3      	subs	r3, r2, r3
 801eab0:	3301      	adds	r3, #1
 801eab2:	2b00      	cmp	r3, #0
 801eab4:	dd07      	ble.n	801eac6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801eab6:	687b      	ldr	r3, [r7, #4]
 801eab8:	8b5b      	ldrh	r3, [r3, #26]
 801eaba:	f043 0302 	orr.w	r3, r3, #2
 801eabe:	b29a      	uxth	r2, r3
 801eac0:	687b      	ldr	r3, [r7, #4]
 801eac2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801eac4:	e7ff      	b.n	801eac6 <tcp_receive+0xf0a>
 801eac6:	bf00      	nop
 801eac8:	3750      	adds	r7, #80	; 0x50
 801eaca:	46bd      	mov	sp, r7
 801eacc:	bdb0      	pop	{r4, r5, r7, pc}
 801eace:	bf00      	nop
 801ead0:	20008a8c 	.word	0x20008a8c
 801ead4:	20008a6c 	.word	0x20008a6c
 801ead8:	20008a96 	.word	0x20008a96
 801eadc:	08027758 	.word	0x08027758
 801eae0:	08027b1c 	.word	0x08027b1c
 801eae4:	080277c0 	.word	0x080277c0

0801eae8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801eae8:	b480      	push	{r7}
 801eaea:	b083      	sub	sp, #12
 801eaec:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801eaee:	4b15      	ldr	r3, [pc, #84]	; (801eb44 <tcp_get_next_optbyte+0x5c>)
 801eaf0:	881b      	ldrh	r3, [r3, #0]
 801eaf2:	1c5a      	adds	r2, r3, #1
 801eaf4:	b291      	uxth	r1, r2
 801eaf6:	4a13      	ldr	r2, [pc, #76]	; (801eb44 <tcp_get_next_optbyte+0x5c>)
 801eaf8:	8011      	strh	r1, [r2, #0]
 801eafa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801eafc:	4b12      	ldr	r3, [pc, #72]	; (801eb48 <tcp_get_next_optbyte+0x60>)
 801eafe:	681b      	ldr	r3, [r3, #0]
 801eb00:	2b00      	cmp	r3, #0
 801eb02:	d004      	beq.n	801eb0e <tcp_get_next_optbyte+0x26>
 801eb04:	4b11      	ldr	r3, [pc, #68]	; (801eb4c <tcp_get_next_optbyte+0x64>)
 801eb06:	881b      	ldrh	r3, [r3, #0]
 801eb08:	88fa      	ldrh	r2, [r7, #6]
 801eb0a:	429a      	cmp	r2, r3
 801eb0c:	d208      	bcs.n	801eb20 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801eb0e:	4b10      	ldr	r3, [pc, #64]	; (801eb50 <tcp_get_next_optbyte+0x68>)
 801eb10:	681b      	ldr	r3, [r3, #0]
 801eb12:	3314      	adds	r3, #20
 801eb14:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801eb16:	88fb      	ldrh	r3, [r7, #6]
 801eb18:	683a      	ldr	r2, [r7, #0]
 801eb1a:	4413      	add	r3, r2
 801eb1c:	781b      	ldrb	r3, [r3, #0]
 801eb1e:	e00b      	b.n	801eb38 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801eb20:	88fb      	ldrh	r3, [r7, #6]
 801eb22:	b2da      	uxtb	r2, r3
 801eb24:	4b09      	ldr	r3, [pc, #36]	; (801eb4c <tcp_get_next_optbyte+0x64>)
 801eb26:	881b      	ldrh	r3, [r3, #0]
 801eb28:	b2db      	uxtb	r3, r3
 801eb2a:	1ad3      	subs	r3, r2, r3
 801eb2c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801eb2e:	4b06      	ldr	r3, [pc, #24]	; (801eb48 <tcp_get_next_optbyte+0x60>)
 801eb30:	681a      	ldr	r2, [r3, #0]
 801eb32:	797b      	ldrb	r3, [r7, #5]
 801eb34:	4413      	add	r3, r2
 801eb36:	781b      	ldrb	r3, [r3, #0]
  }
}
 801eb38:	4618      	mov	r0, r3
 801eb3a:	370c      	adds	r7, #12
 801eb3c:	46bd      	mov	sp, r7
 801eb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb42:	4770      	bx	lr
 801eb44:	20008a88 	.word	0x20008a88
 801eb48:	20008a84 	.word	0x20008a84
 801eb4c:	20008a82 	.word	0x20008a82
 801eb50:	20008a7c 	.word	0x20008a7c

0801eb54 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801eb54:	b580      	push	{r7, lr}
 801eb56:	b084      	sub	sp, #16
 801eb58:	af00      	add	r7, sp, #0
 801eb5a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801eb5c:	687b      	ldr	r3, [r7, #4]
 801eb5e:	2b00      	cmp	r3, #0
 801eb60:	d106      	bne.n	801eb70 <tcp_parseopt+0x1c>
 801eb62:	4b31      	ldr	r3, [pc, #196]	; (801ec28 <tcp_parseopt+0xd4>)
 801eb64:	f240 727d 	movw	r2, #1917	; 0x77d
 801eb68:	4930      	ldr	r1, [pc, #192]	; (801ec2c <tcp_parseopt+0xd8>)
 801eb6a:	4831      	ldr	r0, [pc, #196]	; (801ec30 <tcp_parseopt+0xdc>)
 801eb6c:	f005 fa3c 	bl	8023fe8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801eb70:	4b30      	ldr	r3, [pc, #192]	; (801ec34 <tcp_parseopt+0xe0>)
 801eb72:	881b      	ldrh	r3, [r3, #0]
 801eb74:	2b00      	cmp	r3, #0
 801eb76:	d053      	beq.n	801ec20 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801eb78:	4b2f      	ldr	r3, [pc, #188]	; (801ec38 <tcp_parseopt+0xe4>)
 801eb7a:	2200      	movs	r2, #0
 801eb7c:	801a      	strh	r2, [r3, #0]
 801eb7e:	e043      	b.n	801ec08 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 801eb80:	f7ff ffb2 	bl	801eae8 <tcp_get_next_optbyte>
 801eb84:	4603      	mov	r3, r0
 801eb86:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801eb88:	7bfb      	ldrb	r3, [r7, #15]
 801eb8a:	2b01      	cmp	r3, #1
 801eb8c:	d03c      	beq.n	801ec08 <tcp_parseopt+0xb4>
 801eb8e:	2b02      	cmp	r3, #2
 801eb90:	d002      	beq.n	801eb98 <tcp_parseopt+0x44>
 801eb92:	2b00      	cmp	r3, #0
 801eb94:	d03f      	beq.n	801ec16 <tcp_parseopt+0xc2>
 801eb96:	e026      	b.n	801ebe6 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801eb98:	f7ff ffa6 	bl	801eae8 <tcp_get_next_optbyte>
 801eb9c:	4603      	mov	r3, r0
 801eb9e:	2b04      	cmp	r3, #4
 801eba0:	d13b      	bne.n	801ec1a <tcp_parseopt+0xc6>
 801eba2:	4b25      	ldr	r3, [pc, #148]	; (801ec38 <tcp_parseopt+0xe4>)
 801eba4:	881b      	ldrh	r3, [r3, #0]
 801eba6:	3302      	adds	r3, #2
 801eba8:	4a22      	ldr	r2, [pc, #136]	; (801ec34 <tcp_parseopt+0xe0>)
 801ebaa:	8812      	ldrh	r2, [r2, #0]
 801ebac:	4293      	cmp	r3, r2
 801ebae:	dc34      	bgt.n	801ec1a <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801ebb0:	f7ff ff9a 	bl	801eae8 <tcp_get_next_optbyte>
 801ebb4:	4603      	mov	r3, r0
 801ebb6:	b29b      	uxth	r3, r3
 801ebb8:	021b      	lsls	r3, r3, #8
 801ebba:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801ebbc:	f7ff ff94 	bl	801eae8 <tcp_get_next_optbyte>
 801ebc0:	4603      	mov	r3, r0
 801ebc2:	b29a      	uxth	r2, r3
 801ebc4:	89bb      	ldrh	r3, [r7, #12]
 801ebc6:	4313      	orrs	r3, r2
 801ebc8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801ebca:	89bb      	ldrh	r3, [r7, #12]
 801ebcc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801ebd0:	d804      	bhi.n	801ebdc <tcp_parseopt+0x88>
 801ebd2:	89bb      	ldrh	r3, [r7, #12]
 801ebd4:	2b00      	cmp	r3, #0
 801ebd6:	d001      	beq.n	801ebdc <tcp_parseopt+0x88>
 801ebd8:	89ba      	ldrh	r2, [r7, #12]
 801ebda:	e001      	b.n	801ebe0 <tcp_parseopt+0x8c>
 801ebdc:	f44f 7206 	mov.w	r2, #536	; 0x218
 801ebe0:	687b      	ldr	r3, [r7, #4]
 801ebe2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801ebe4:	e010      	b.n	801ec08 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801ebe6:	f7ff ff7f 	bl	801eae8 <tcp_get_next_optbyte>
 801ebea:	4603      	mov	r3, r0
 801ebec:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801ebee:	7afb      	ldrb	r3, [r7, #11]
 801ebf0:	2b01      	cmp	r3, #1
 801ebf2:	d914      	bls.n	801ec1e <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801ebf4:	7afb      	ldrb	r3, [r7, #11]
 801ebf6:	b29a      	uxth	r2, r3
 801ebf8:	4b0f      	ldr	r3, [pc, #60]	; (801ec38 <tcp_parseopt+0xe4>)
 801ebfa:	881b      	ldrh	r3, [r3, #0]
 801ebfc:	4413      	add	r3, r2
 801ebfe:	b29b      	uxth	r3, r3
 801ec00:	3b02      	subs	r3, #2
 801ec02:	b29a      	uxth	r2, r3
 801ec04:	4b0c      	ldr	r3, [pc, #48]	; (801ec38 <tcp_parseopt+0xe4>)
 801ec06:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ec08:	4b0b      	ldr	r3, [pc, #44]	; (801ec38 <tcp_parseopt+0xe4>)
 801ec0a:	881a      	ldrh	r2, [r3, #0]
 801ec0c:	4b09      	ldr	r3, [pc, #36]	; (801ec34 <tcp_parseopt+0xe0>)
 801ec0e:	881b      	ldrh	r3, [r3, #0]
 801ec10:	429a      	cmp	r2, r3
 801ec12:	d3b5      	bcc.n	801eb80 <tcp_parseopt+0x2c>
 801ec14:	e004      	b.n	801ec20 <tcp_parseopt+0xcc>
          return;
 801ec16:	bf00      	nop
 801ec18:	e002      	b.n	801ec20 <tcp_parseopt+0xcc>
            return;
 801ec1a:	bf00      	nop
 801ec1c:	e000      	b.n	801ec20 <tcp_parseopt+0xcc>
            return;
 801ec1e:	bf00      	nop
      }
    }
  }
}
 801ec20:	3710      	adds	r7, #16
 801ec22:	46bd      	mov	sp, r7
 801ec24:	bd80      	pop	{r7, pc}
 801ec26:	bf00      	nop
 801ec28:	08027758 	.word	0x08027758
 801ec2c:	08027bd8 	.word	0x08027bd8
 801ec30:	080277c0 	.word	0x080277c0
 801ec34:	20008a80 	.word	0x20008a80
 801ec38:	20008a88 	.word	0x20008a88

0801ec3c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801ec3c:	b480      	push	{r7}
 801ec3e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801ec40:	4b05      	ldr	r3, [pc, #20]	; (801ec58 <tcp_trigger_input_pcb_close+0x1c>)
 801ec42:	781b      	ldrb	r3, [r3, #0]
 801ec44:	f043 0310 	orr.w	r3, r3, #16
 801ec48:	b2da      	uxtb	r2, r3
 801ec4a:	4b03      	ldr	r3, [pc, #12]	; (801ec58 <tcp_trigger_input_pcb_close+0x1c>)
 801ec4c:	701a      	strb	r2, [r3, #0]
}
 801ec4e:	bf00      	nop
 801ec50:	46bd      	mov	sp, r7
 801ec52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec56:	4770      	bx	lr
 801ec58:	20008a99 	.word	0x20008a99

0801ec5c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801ec5c:	b580      	push	{r7, lr}
 801ec5e:	b084      	sub	sp, #16
 801ec60:	af00      	add	r7, sp, #0
 801ec62:	60f8      	str	r0, [r7, #12]
 801ec64:	60b9      	str	r1, [r7, #8]
 801ec66:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801ec68:	68fb      	ldr	r3, [r7, #12]
 801ec6a:	2b00      	cmp	r3, #0
 801ec6c:	d00a      	beq.n	801ec84 <tcp_route+0x28>
 801ec6e:	68fb      	ldr	r3, [r7, #12]
 801ec70:	7a1b      	ldrb	r3, [r3, #8]
 801ec72:	2b00      	cmp	r3, #0
 801ec74:	d006      	beq.n	801ec84 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801ec76:	68fb      	ldr	r3, [r7, #12]
 801ec78:	7a1b      	ldrb	r3, [r3, #8]
 801ec7a:	4618      	mov	r0, r3
 801ec7c:	f7fa fd1a 	bl	80196b4 <netif_get_by_index>
 801ec80:	4603      	mov	r3, r0
 801ec82:	e003      	b.n	801ec8c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801ec84:	6878      	ldr	r0, [r7, #4]
 801ec86:	f7f8 fc1d 	bl	80174c4 <ip4_route>
 801ec8a:	4603      	mov	r3, r0
  }
}
 801ec8c:	4618      	mov	r0, r3
 801ec8e:	3710      	adds	r7, #16
 801ec90:	46bd      	mov	sp, r7
 801ec92:	bd80      	pop	{r7, pc}

0801ec94 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801ec94:	b590      	push	{r4, r7, lr}
 801ec96:	b087      	sub	sp, #28
 801ec98:	af00      	add	r7, sp, #0
 801ec9a:	60f8      	str	r0, [r7, #12]
 801ec9c:	60b9      	str	r1, [r7, #8]
 801ec9e:	603b      	str	r3, [r7, #0]
 801eca0:	4613      	mov	r3, r2
 801eca2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801eca4:	68fb      	ldr	r3, [r7, #12]
 801eca6:	2b00      	cmp	r3, #0
 801eca8:	d105      	bne.n	801ecb6 <tcp_create_segment+0x22>
 801ecaa:	4b44      	ldr	r3, [pc, #272]	; (801edbc <tcp_create_segment+0x128>)
 801ecac:	22a3      	movs	r2, #163	; 0xa3
 801ecae:	4944      	ldr	r1, [pc, #272]	; (801edc0 <tcp_create_segment+0x12c>)
 801ecb0:	4844      	ldr	r0, [pc, #272]	; (801edc4 <tcp_create_segment+0x130>)
 801ecb2:	f005 f999 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801ecb6:	68bb      	ldr	r3, [r7, #8]
 801ecb8:	2b00      	cmp	r3, #0
 801ecba:	d105      	bne.n	801ecc8 <tcp_create_segment+0x34>
 801ecbc:	4b3f      	ldr	r3, [pc, #252]	; (801edbc <tcp_create_segment+0x128>)
 801ecbe:	22a4      	movs	r2, #164	; 0xa4
 801ecc0:	4941      	ldr	r1, [pc, #260]	; (801edc8 <tcp_create_segment+0x134>)
 801ecc2:	4840      	ldr	r0, [pc, #256]	; (801edc4 <tcp_create_segment+0x130>)
 801ecc4:	f005 f990 	bl	8023fe8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801ecc8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801eccc:	009b      	lsls	r3, r3, #2
 801ecce:	b2db      	uxtb	r3, r3
 801ecd0:	f003 0304 	and.w	r3, r3, #4
 801ecd4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801ecd6:	2003      	movs	r0, #3
 801ecd8:	f7fa f98c 	bl	8018ff4 <memp_malloc>
 801ecdc:	6138      	str	r0, [r7, #16]
 801ecde:	693b      	ldr	r3, [r7, #16]
 801ece0:	2b00      	cmp	r3, #0
 801ece2:	d104      	bne.n	801ecee <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801ece4:	68b8      	ldr	r0, [r7, #8]
 801ece6:	f7fb f86f 	bl	8019dc8 <pbuf_free>
    return NULL;
 801ecea:	2300      	movs	r3, #0
 801ecec:	e061      	b.n	801edb2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801ecee:	693b      	ldr	r3, [r7, #16]
 801ecf0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801ecf4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801ecf6:	693b      	ldr	r3, [r7, #16]
 801ecf8:	2200      	movs	r2, #0
 801ecfa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801ecfc:	693b      	ldr	r3, [r7, #16]
 801ecfe:	68ba      	ldr	r2, [r7, #8]
 801ed00:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801ed02:	68bb      	ldr	r3, [r7, #8]
 801ed04:	891a      	ldrh	r2, [r3, #8]
 801ed06:	7dfb      	ldrb	r3, [r7, #23]
 801ed08:	b29b      	uxth	r3, r3
 801ed0a:	429a      	cmp	r2, r3
 801ed0c:	d205      	bcs.n	801ed1a <tcp_create_segment+0x86>
 801ed0e:	4b2b      	ldr	r3, [pc, #172]	; (801edbc <tcp_create_segment+0x128>)
 801ed10:	22b0      	movs	r2, #176	; 0xb0
 801ed12:	492e      	ldr	r1, [pc, #184]	; (801edcc <tcp_create_segment+0x138>)
 801ed14:	482b      	ldr	r0, [pc, #172]	; (801edc4 <tcp_create_segment+0x130>)
 801ed16:	f005 f967 	bl	8023fe8 <iprintf>
  seg->len = p->tot_len - optlen;
 801ed1a:	68bb      	ldr	r3, [r7, #8]
 801ed1c:	891a      	ldrh	r2, [r3, #8]
 801ed1e:	7dfb      	ldrb	r3, [r7, #23]
 801ed20:	b29b      	uxth	r3, r3
 801ed22:	1ad3      	subs	r3, r2, r3
 801ed24:	b29a      	uxth	r2, r3
 801ed26:	693b      	ldr	r3, [r7, #16]
 801ed28:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801ed2a:	2114      	movs	r1, #20
 801ed2c:	68b8      	ldr	r0, [r7, #8]
 801ed2e:	f7fa ffb5 	bl	8019c9c <pbuf_add_header>
 801ed32:	4603      	mov	r3, r0
 801ed34:	2b00      	cmp	r3, #0
 801ed36:	d004      	beq.n	801ed42 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801ed38:	6938      	ldr	r0, [r7, #16]
 801ed3a:	f7fd f807 	bl	801bd4c <tcp_seg_free>
    return NULL;
 801ed3e:	2300      	movs	r3, #0
 801ed40:	e037      	b.n	801edb2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801ed42:	693b      	ldr	r3, [r7, #16]
 801ed44:	685b      	ldr	r3, [r3, #4]
 801ed46:	685a      	ldr	r2, [r3, #4]
 801ed48:	693b      	ldr	r3, [r7, #16]
 801ed4a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801ed4c:	68fb      	ldr	r3, [r7, #12]
 801ed4e:	8ada      	ldrh	r2, [r3, #22]
 801ed50:	693b      	ldr	r3, [r7, #16]
 801ed52:	68dc      	ldr	r4, [r3, #12]
 801ed54:	4610      	mov	r0, r2
 801ed56:	f7f5 f825 	bl	8013da4 <lwip_htons>
 801ed5a:	4603      	mov	r3, r0
 801ed5c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801ed5e:	68fb      	ldr	r3, [r7, #12]
 801ed60:	8b1a      	ldrh	r2, [r3, #24]
 801ed62:	693b      	ldr	r3, [r7, #16]
 801ed64:	68dc      	ldr	r4, [r3, #12]
 801ed66:	4610      	mov	r0, r2
 801ed68:	f7f5 f81c 	bl	8013da4 <lwip_htons>
 801ed6c:	4603      	mov	r3, r0
 801ed6e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801ed70:	693b      	ldr	r3, [r7, #16]
 801ed72:	68dc      	ldr	r4, [r3, #12]
 801ed74:	6838      	ldr	r0, [r7, #0]
 801ed76:	f7f5 f82a 	bl	8013dce <lwip_htonl>
 801ed7a:	4603      	mov	r3, r0
 801ed7c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801ed7e:	7dfb      	ldrb	r3, [r7, #23]
 801ed80:	089b      	lsrs	r3, r3, #2
 801ed82:	b2db      	uxtb	r3, r3
 801ed84:	b29b      	uxth	r3, r3
 801ed86:	3305      	adds	r3, #5
 801ed88:	b29b      	uxth	r3, r3
 801ed8a:	031b      	lsls	r3, r3, #12
 801ed8c:	b29a      	uxth	r2, r3
 801ed8e:	79fb      	ldrb	r3, [r7, #7]
 801ed90:	b29b      	uxth	r3, r3
 801ed92:	4313      	orrs	r3, r2
 801ed94:	b29a      	uxth	r2, r3
 801ed96:	693b      	ldr	r3, [r7, #16]
 801ed98:	68dc      	ldr	r4, [r3, #12]
 801ed9a:	4610      	mov	r0, r2
 801ed9c:	f7f5 f802 	bl	8013da4 <lwip_htons>
 801eda0:	4603      	mov	r3, r0
 801eda2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801eda4:	693b      	ldr	r3, [r7, #16]
 801eda6:	68db      	ldr	r3, [r3, #12]
 801eda8:	2200      	movs	r2, #0
 801edaa:	749a      	strb	r2, [r3, #18]
 801edac:	2200      	movs	r2, #0
 801edae:	74da      	strb	r2, [r3, #19]
  return seg;
 801edb0:	693b      	ldr	r3, [r7, #16]
}
 801edb2:	4618      	mov	r0, r3
 801edb4:	371c      	adds	r7, #28
 801edb6:	46bd      	mov	sp, r7
 801edb8:	bd90      	pop	{r4, r7, pc}
 801edba:	bf00      	nop
 801edbc:	08027bf4 	.word	0x08027bf4
 801edc0:	08027c44 	.word	0x08027c44
 801edc4:	08027c64 	.word	0x08027c64
 801edc8:	08027c8c 	.word	0x08027c8c
 801edcc:	08027cb0 	.word	0x08027cb0

0801edd0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801edd0:	b580      	push	{r7, lr}
 801edd2:	b086      	sub	sp, #24
 801edd4:	af00      	add	r7, sp, #0
 801edd6:	607b      	str	r3, [r7, #4]
 801edd8:	4603      	mov	r3, r0
 801edda:	73fb      	strb	r3, [r7, #15]
 801eddc:	460b      	mov	r3, r1
 801edde:	81bb      	strh	r3, [r7, #12]
 801ede0:	4613      	mov	r3, r2
 801ede2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801ede4:	89bb      	ldrh	r3, [r7, #12]
 801ede6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801ede8:	687b      	ldr	r3, [r7, #4]
 801edea:	2b00      	cmp	r3, #0
 801edec:	d105      	bne.n	801edfa <tcp_pbuf_prealloc+0x2a>
 801edee:	4b30      	ldr	r3, [pc, #192]	; (801eeb0 <tcp_pbuf_prealloc+0xe0>)
 801edf0:	22e8      	movs	r2, #232	; 0xe8
 801edf2:	4930      	ldr	r1, [pc, #192]	; (801eeb4 <tcp_pbuf_prealloc+0xe4>)
 801edf4:	4830      	ldr	r0, [pc, #192]	; (801eeb8 <tcp_pbuf_prealloc+0xe8>)
 801edf6:	f005 f8f7 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801edfa:	6a3b      	ldr	r3, [r7, #32]
 801edfc:	2b00      	cmp	r3, #0
 801edfe:	d105      	bne.n	801ee0c <tcp_pbuf_prealloc+0x3c>
 801ee00:	4b2b      	ldr	r3, [pc, #172]	; (801eeb0 <tcp_pbuf_prealloc+0xe0>)
 801ee02:	22e9      	movs	r2, #233	; 0xe9
 801ee04:	492d      	ldr	r1, [pc, #180]	; (801eebc <tcp_pbuf_prealloc+0xec>)
 801ee06:	482c      	ldr	r0, [pc, #176]	; (801eeb8 <tcp_pbuf_prealloc+0xe8>)
 801ee08:	f005 f8ee 	bl	8023fe8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801ee0c:	89ba      	ldrh	r2, [r7, #12]
 801ee0e:	897b      	ldrh	r3, [r7, #10]
 801ee10:	429a      	cmp	r2, r3
 801ee12:	d221      	bcs.n	801ee58 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801ee14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ee18:	f003 0302 	and.w	r3, r3, #2
 801ee1c:	2b00      	cmp	r3, #0
 801ee1e:	d111      	bne.n	801ee44 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801ee20:	6a3b      	ldr	r3, [r7, #32]
 801ee22:	8b5b      	ldrh	r3, [r3, #26]
 801ee24:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801ee28:	2b00      	cmp	r3, #0
 801ee2a:	d115      	bne.n	801ee58 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801ee2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801ee30:	2b00      	cmp	r3, #0
 801ee32:	d007      	beq.n	801ee44 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801ee34:	6a3b      	ldr	r3, [r7, #32]
 801ee36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801ee38:	2b00      	cmp	r3, #0
 801ee3a:	d103      	bne.n	801ee44 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801ee3c:	6a3b      	ldr	r3, [r7, #32]
 801ee3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801ee40:	2b00      	cmp	r3, #0
 801ee42:	d009      	beq.n	801ee58 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801ee44:	89bb      	ldrh	r3, [r7, #12]
 801ee46:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801ee4a:	f023 0203 	bic.w	r2, r3, #3
 801ee4e:	897b      	ldrh	r3, [r7, #10]
 801ee50:	4293      	cmp	r3, r2
 801ee52:	bf28      	it	cs
 801ee54:	4613      	movcs	r3, r2
 801ee56:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801ee58:	8af9      	ldrh	r1, [r7, #22]
 801ee5a:	7bfb      	ldrb	r3, [r7, #15]
 801ee5c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ee60:	4618      	mov	r0, r3
 801ee62:	f7fa fcd1 	bl	8019808 <pbuf_alloc>
 801ee66:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801ee68:	693b      	ldr	r3, [r7, #16]
 801ee6a:	2b00      	cmp	r3, #0
 801ee6c:	d101      	bne.n	801ee72 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801ee6e:	2300      	movs	r3, #0
 801ee70:	e019      	b.n	801eea6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801ee72:	693b      	ldr	r3, [r7, #16]
 801ee74:	681b      	ldr	r3, [r3, #0]
 801ee76:	2b00      	cmp	r3, #0
 801ee78:	d006      	beq.n	801ee88 <tcp_pbuf_prealloc+0xb8>
 801ee7a:	4b0d      	ldr	r3, [pc, #52]	; (801eeb0 <tcp_pbuf_prealloc+0xe0>)
 801ee7c:	f240 120b 	movw	r2, #267	; 0x10b
 801ee80:	490f      	ldr	r1, [pc, #60]	; (801eec0 <tcp_pbuf_prealloc+0xf0>)
 801ee82:	480d      	ldr	r0, [pc, #52]	; (801eeb8 <tcp_pbuf_prealloc+0xe8>)
 801ee84:	f005 f8b0 	bl	8023fe8 <iprintf>
  *oversize = p->len - length;
 801ee88:	693b      	ldr	r3, [r7, #16]
 801ee8a:	895a      	ldrh	r2, [r3, #10]
 801ee8c:	89bb      	ldrh	r3, [r7, #12]
 801ee8e:	1ad3      	subs	r3, r2, r3
 801ee90:	b29a      	uxth	r2, r3
 801ee92:	687b      	ldr	r3, [r7, #4]
 801ee94:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801ee96:	693b      	ldr	r3, [r7, #16]
 801ee98:	89ba      	ldrh	r2, [r7, #12]
 801ee9a:	811a      	strh	r2, [r3, #8]
 801ee9c:	693b      	ldr	r3, [r7, #16]
 801ee9e:	891a      	ldrh	r2, [r3, #8]
 801eea0:	693b      	ldr	r3, [r7, #16]
 801eea2:	815a      	strh	r2, [r3, #10]
  return p;
 801eea4:	693b      	ldr	r3, [r7, #16]
}
 801eea6:	4618      	mov	r0, r3
 801eea8:	3718      	adds	r7, #24
 801eeaa:	46bd      	mov	sp, r7
 801eeac:	bd80      	pop	{r7, pc}
 801eeae:	bf00      	nop
 801eeb0:	08027bf4 	.word	0x08027bf4
 801eeb4:	08027cc8 	.word	0x08027cc8
 801eeb8:	08027c64 	.word	0x08027c64
 801eebc:	08027cec 	.word	0x08027cec
 801eec0:	08027d0c 	.word	0x08027d0c

0801eec4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801eec4:	b580      	push	{r7, lr}
 801eec6:	b082      	sub	sp, #8
 801eec8:	af00      	add	r7, sp, #0
 801eeca:	6078      	str	r0, [r7, #4]
 801eecc:	460b      	mov	r3, r1
 801eece:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801eed0:	687b      	ldr	r3, [r7, #4]
 801eed2:	2b00      	cmp	r3, #0
 801eed4:	d106      	bne.n	801eee4 <tcp_write_checks+0x20>
 801eed6:	4b33      	ldr	r3, [pc, #204]	; (801efa4 <tcp_write_checks+0xe0>)
 801eed8:	f240 1233 	movw	r2, #307	; 0x133
 801eedc:	4932      	ldr	r1, [pc, #200]	; (801efa8 <tcp_write_checks+0xe4>)
 801eede:	4833      	ldr	r0, [pc, #204]	; (801efac <tcp_write_checks+0xe8>)
 801eee0:	f005 f882 	bl	8023fe8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801eee4:	687b      	ldr	r3, [r7, #4]
 801eee6:	7d1b      	ldrb	r3, [r3, #20]
 801eee8:	2b04      	cmp	r3, #4
 801eeea:	d00e      	beq.n	801ef0a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801eeec:	687b      	ldr	r3, [r7, #4]
 801eeee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801eef0:	2b07      	cmp	r3, #7
 801eef2:	d00a      	beq.n	801ef0a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801eef4:	687b      	ldr	r3, [r7, #4]
 801eef6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801eef8:	2b02      	cmp	r3, #2
 801eefa:	d006      	beq.n	801ef0a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801eefc:	687b      	ldr	r3, [r7, #4]
 801eefe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801ef00:	2b03      	cmp	r3, #3
 801ef02:	d002      	beq.n	801ef0a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801ef04:	f06f 030a 	mvn.w	r3, #10
 801ef08:	e048      	b.n	801ef9c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801ef0a:	887b      	ldrh	r3, [r7, #2]
 801ef0c:	2b00      	cmp	r3, #0
 801ef0e:	d101      	bne.n	801ef14 <tcp_write_checks+0x50>
    return ERR_OK;
 801ef10:	2300      	movs	r3, #0
 801ef12:	e043      	b.n	801ef9c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801ef14:	687b      	ldr	r3, [r7, #4]
 801ef16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801ef1a:	887a      	ldrh	r2, [r7, #2]
 801ef1c:	429a      	cmp	r2, r3
 801ef1e:	d909      	bls.n	801ef34 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ef20:	687b      	ldr	r3, [r7, #4]
 801ef22:	8b5b      	ldrh	r3, [r3, #26]
 801ef24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ef28:	b29a      	uxth	r2, r3
 801ef2a:	687b      	ldr	r3, [r7, #4]
 801ef2c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801ef2e:	f04f 33ff 	mov.w	r3, #4294967295
 801ef32:	e033      	b.n	801ef9c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801ef34:	687b      	ldr	r3, [r7, #4]
 801ef36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ef3a:	2b08      	cmp	r3, #8
 801ef3c:	d909      	bls.n	801ef52 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ef3e:	687b      	ldr	r3, [r7, #4]
 801ef40:	8b5b      	ldrh	r3, [r3, #26]
 801ef42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ef46:	b29a      	uxth	r2, r3
 801ef48:	687b      	ldr	r3, [r7, #4]
 801ef4a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801ef4c:	f04f 33ff 	mov.w	r3, #4294967295
 801ef50:	e024      	b.n	801ef9c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801ef52:	687b      	ldr	r3, [r7, #4]
 801ef54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ef58:	2b00      	cmp	r3, #0
 801ef5a:	d00f      	beq.n	801ef7c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801ef5c:	687b      	ldr	r3, [r7, #4]
 801ef5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ef60:	2b00      	cmp	r3, #0
 801ef62:	d11a      	bne.n	801ef9a <tcp_write_checks+0xd6>
 801ef64:	687b      	ldr	r3, [r7, #4]
 801ef66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ef68:	2b00      	cmp	r3, #0
 801ef6a:	d116      	bne.n	801ef9a <tcp_write_checks+0xd6>
 801ef6c:	4b0d      	ldr	r3, [pc, #52]	; (801efa4 <tcp_write_checks+0xe0>)
 801ef6e:	f44f 72ab 	mov.w	r2, #342	; 0x156
 801ef72:	490f      	ldr	r1, [pc, #60]	; (801efb0 <tcp_write_checks+0xec>)
 801ef74:	480d      	ldr	r0, [pc, #52]	; (801efac <tcp_write_checks+0xe8>)
 801ef76:	f005 f837 	bl	8023fe8 <iprintf>
 801ef7a:	e00e      	b.n	801ef9a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801ef7c:	687b      	ldr	r3, [r7, #4]
 801ef7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ef80:	2b00      	cmp	r3, #0
 801ef82:	d103      	bne.n	801ef8c <tcp_write_checks+0xc8>
 801ef84:	687b      	ldr	r3, [r7, #4]
 801ef86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ef88:	2b00      	cmp	r3, #0
 801ef8a:	d006      	beq.n	801ef9a <tcp_write_checks+0xd6>
 801ef8c:	4b05      	ldr	r3, [pc, #20]	; (801efa4 <tcp_write_checks+0xe0>)
 801ef8e:	f240 1259 	movw	r2, #345	; 0x159
 801ef92:	4908      	ldr	r1, [pc, #32]	; (801efb4 <tcp_write_checks+0xf0>)
 801ef94:	4805      	ldr	r0, [pc, #20]	; (801efac <tcp_write_checks+0xe8>)
 801ef96:	f005 f827 	bl	8023fe8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801ef9a:	2300      	movs	r3, #0
}
 801ef9c:	4618      	mov	r0, r3
 801ef9e:	3708      	adds	r7, #8
 801efa0:	46bd      	mov	sp, r7
 801efa2:	bd80      	pop	{r7, pc}
 801efa4:	08027bf4 	.word	0x08027bf4
 801efa8:	08027d20 	.word	0x08027d20
 801efac:	08027c64 	.word	0x08027c64
 801efb0:	08027d40 	.word	0x08027d40
 801efb4:	08027d7c 	.word	0x08027d7c

0801efb8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801efb8:	b590      	push	{r4, r7, lr}
 801efba:	b09b      	sub	sp, #108	; 0x6c
 801efbc:	af04      	add	r7, sp, #16
 801efbe:	60f8      	str	r0, [r7, #12]
 801efc0:	60b9      	str	r1, [r7, #8]
 801efc2:	4611      	mov	r1, r2
 801efc4:	461a      	mov	r2, r3
 801efc6:	460b      	mov	r3, r1
 801efc8:	80fb      	strh	r3, [r7, #6]
 801efca:	4613      	mov	r3, r2
 801efcc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801efce:	2300      	movs	r3, #0
 801efd0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801efd2:	2300      	movs	r3, #0
 801efd4:	653b      	str	r3, [r7, #80]	; 0x50
 801efd6:	2300      	movs	r3, #0
 801efd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 801efda:	2300      	movs	r3, #0
 801efdc:	64bb      	str	r3, [r7, #72]	; 0x48
 801efde:	2300      	movs	r3, #0
 801efe0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801efe2:	2300      	movs	r3, #0
 801efe4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801efe8:	2300      	movs	r3, #0
 801efea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801efee:	2300      	movs	r3, #0
 801eff0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801eff2:	2300      	movs	r3, #0
 801eff4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801eff6:	2300      	movs	r3, #0
 801eff8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801effa:	68fb      	ldr	r3, [r7, #12]
 801effc:	2b00      	cmp	r3, #0
 801effe:	d109      	bne.n	801f014 <tcp_write+0x5c>
 801f000:	4ba5      	ldr	r3, [pc, #660]	; (801f298 <tcp_write+0x2e0>)
 801f002:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801f006:	49a5      	ldr	r1, [pc, #660]	; (801f29c <tcp_write+0x2e4>)
 801f008:	48a5      	ldr	r0, [pc, #660]	; (801f2a0 <tcp_write+0x2e8>)
 801f00a:	f004 ffed 	bl	8023fe8 <iprintf>
 801f00e:	f06f 030f 	mvn.w	r3, #15
 801f012:	e32c      	b.n	801f66e <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801f014:	68fb      	ldr	r3, [r7, #12]
 801f016:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801f01a:	085b      	lsrs	r3, r3, #1
 801f01c:	b29a      	uxth	r2, r3
 801f01e:	68fb      	ldr	r3, [r7, #12]
 801f020:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f022:	4293      	cmp	r3, r2
 801f024:	bf28      	it	cs
 801f026:	4613      	movcs	r3, r2
 801f028:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801f02a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f02c:	2b00      	cmp	r3, #0
 801f02e:	d102      	bne.n	801f036 <tcp_write+0x7e>
 801f030:	68fb      	ldr	r3, [r7, #12]
 801f032:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f034:	e000      	b.n	801f038 <tcp_write+0x80>
 801f036:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f038:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801f03a:	68bb      	ldr	r3, [r7, #8]
 801f03c:	2b00      	cmp	r3, #0
 801f03e:	d109      	bne.n	801f054 <tcp_write+0x9c>
 801f040:	4b95      	ldr	r3, [pc, #596]	; (801f298 <tcp_write+0x2e0>)
 801f042:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 801f046:	4997      	ldr	r1, [pc, #604]	; (801f2a4 <tcp_write+0x2ec>)
 801f048:	4895      	ldr	r0, [pc, #596]	; (801f2a0 <tcp_write+0x2e8>)
 801f04a:	f004 ffcd 	bl	8023fe8 <iprintf>
 801f04e:	f06f 030f 	mvn.w	r3, #15
 801f052:	e30c      	b.n	801f66e <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801f054:	88fb      	ldrh	r3, [r7, #6]
 801f056:	4619      	mov	r1, r3
 801f058:	68f8      	ldr	r0, [r7, #12]
 801f05a:	f7ff ff33 	bl	801eec4 <tcp_write_checks>
 801f05e:	4603      	mov	r3, r0
 801f060:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801f064:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801f068:	2b00      	cmp	r3, #0
 801f06a:	d002      	beq.n	801f072 <tcp_write+0xba>
    return err;
 801f06c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801f070:	e2fd      	b.n	801f66e <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 801f072:	68fb      	ldr	r3, [r7, #12]
 801f074:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801f078:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801f07c:	2300      	movs	r3, #0
 801f07e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801f082:	68fb      	ldr	r3, [r7, #12]
 801f084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f086:	2b00      	cmp	r3, #0
 801f088:	f000 80f7 	beq.w	801f27a <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f08c:	68fb      	ldr	r3, [r7, #12]
 801f08e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f090:	653b      	str	r3, [r7, #80]	; 0x50
 801f092:	e002      	b.n	801f09a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801f094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f096:	681b      	ldr	r3, [r3, #0]
 801f098:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f09a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f09c:	681b      	ldr	r3, [r3, #0]
 801f09e:	2b00      	cmp	r3, #0
 801f0a0:	d1f8      	bne.n	801f094 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801f0a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f0a4:	7a9b      	ldrb	r3, [r3, #10]
 801f0a6:	009b      	lsls	r3, r3, #2
 801f0a8:	b29b      	uxth	r3, r3
 801f0aa:	f003 0304 	and.w	r3, r3, #4
 801f0ae:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801f0b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801f0b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f0b4:	891b      	ldrh	r3, [r3, #8]
 801f0b6:	4619      	mov	r1, r3
 801f0b8:	8c3b      	ldrh	r3, [r7, #32]
 801f0ba:	440b      	add	r3, r1
 801f0bc:	429a      	cmp	r2, r3
 801f0be:	da06      	bge.n	801f0ce <tcp_write+0x116>
 801f0c0:	4b75      	ldr	r3, [pc, #468]	; (801f298 <tcp_write+0x2e0>)
 801f0c2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801f0c6:	4978      	ldr	r1, [pc, #480]	; (801f2a8 <tcp_write+0x2f0>)
 801f0c8:	4875      	ldr	r0, [pc, #468]	; (801f2a0 <tcp_write+0x2e8>)
 801f0ca:	f004 ff8d 	bl	8023fe8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801f0ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f0d0:	891a      	ldrh	r2, [r3, #8]
 801f0d2:	8c3b      	ldrh	r3, [r7, #32]
 801f0d4:	4413      	add	r3, r2
 801f0d6:	b29b      	uxth	r3, r3
 801f0d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801f0da:	1ad3      	subs	r3, r2, r3
 801f0dc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801f0de:	68fb      	ldr	r3, [r7, #12]
 801f0e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801f0e4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801f0e6:	8a7b      	ldrh	r3, [r7, #18]
 801f0e8:	2b00      	cmp	r3, #0
 801f0ea:	d027      	beq.n	801f13c <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801f0ec:	8a7b      	ldrh	r3, [r7, #18]
 801f0ee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801f0f0:	429a      	cmp	r2, r3
 801f0f2:	d206      	bcs.n	801f102 <tcp_write+0x14a>
 801f0f4:	4b68      	ldr	r3, [pc, #416]	; (801f298 <tcp_write+0x2e0>)
 801f0f6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801f0fa:	496c      	ldr	r1, [pc, #432]	; (801f2ac <tcp_write+0x2f4>)
 801f0fc:	4868      	ldr	r0, [pc, #416]	; (801f2a0 <tcp_write+0x2e8>)
 801f0fe:	f004 ff73 	bl	8023fe8 <iprintf>
      seg = last_unsent;
 801f102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f104:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801f106:	8a7b      	ldrh	r3, [r7, #18]
 801f108:	88fa      	ldrh	r2, [r7, #6]
 801f10a:	429a      	cmp	r2, r3
 801f10c:	d901      	bls.n	801f112 <tcp_write+0x15a>
 801f10e:	8a7b      	ldrh	r3, [r7, #18]
 801f110:	e000      	b.n	801f114 <tcp_write+0x15c>
 801f112:	88fb      	ldrh	r3, [r7, #6]
 801f114:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801f116:	4293      	cmp	r3, r2
 801f118:	bfa8      	it	ge
 801f11a:	4613      	movge	r3, r2
 801f11c:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801f11e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801f122:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801f124:	4413      	add	r3, r2
 801f126:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801f12a:	8a7a      	ldrh	r2, [r7, #18]
 801f12c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801f12e:	1ad3      	subs	r3, r2, r3
 801f130:	b29b      	uxth	r3, r3
 801f132:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801f134:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801f136:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801f138:	1ad3      	subs	r3, r2, r3
 801f13a:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801f13c:	8a7b      	ldrh	r3, [r7, #18]
 801f13e:	2b00      	cmp	r3, #0
 801f140:	d00b      	beq.n	801f15a <tcp_write+0x1a2>
 801f142:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801f146:	88fb      	ldrh	r3, [r7, #6]
 801f148:	429a      	cmp	r2, r3
 801f14a:	d006      	beq.n	801f15a <tcp_write+0x1a2>
 801f14c:	4b52      	ldr	r3, [pc, #328]	; (801f298 <tcp_write+0x2e0>)
 801f14e:	f44f 7200 	mov.w	r2, #512	; 0x200
 801f152:	4957      	ldr	r1, [pc, #348]	; (801f2b0 <tcp_write+0x2f8>)
 801f154:	4852      	ldr	r0, [pc, #328]	; (801f2a0 <tcp_write+0x2e8>)
 801f156:	f004 ff47 	bl	8023fe8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801f15a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801f15e:	88fb      	ldrh	r3, [r7, #6]
 801f160:	429a      	cmp	r2, r3
 801f162:	f080 8168 	bcs.w	801f436 <tcp_write+0x47e>
 801f166:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801f168:	2b00      	cmp	r3, #0
 801f16a:	f000 8164 	beq.w	801f436 <tcp_write+0x47e>
 801f16e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f170:	891b      	ldrh	r3, [r3, #8]
 801f172:	2b00      	cmp	r3, #0
 801f174:	f000 815f 	beq.w	801f436 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801f178:	88fa      	ldrh	r2, [r7, #6]
 801f17a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f17e:	1ad2      	subs	r2, r2, r3
 801f180:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801f182:	4293      	cmp	r3, r2
 801f184:	bfa8      	it	ge
 801f186:	4613      	movge	r3, r2
 801f188:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801f18a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f18c:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801f18e:	797b      	ldrb	r3, [r7, #5]
 801f190:	f003 0301 	and.w	r3, r3, #1
 801f194:	2b00      	cmp	r3, #0
 801f196:	d027      	beq.n	801f1e8 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801f198:	f107 0012 	add.w	r0, r7, #18
 801f19c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801f19e:	8bf9      	ldrh	r1, [r7, #30]
 801f1a0:	2301      	movs	r3, #1
 801f1a2:	9302      	str	r3, [sp, #8]
 801f1a4:	797b      	ldrb	r3, [r7, #5]
 801f1a6:	9301      	str	r3, [sp, #4]
 801f1a8:	68fb      	ldr	r3, [r7, #12]
 801f1aa:	9300      	str	r3, [sp, #0]
 801f1ac:	4603      	mov	r3, r0
 801f1ae:	2000      	movs	r0, #0
 801f1b0:	f7ff fe0e 	bl	801edd0 <tcp_pbuf_prealloc>
 801f1b4:	6578      	str	r0, [r7, #84]	; 0x54
 801f1b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f1b8:	2b00      	cmp	r3, #0
 801f1ba:	f000 8226 	beq.w	801f60a <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801f1be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f1c0:	6858      	ldr	r0, [r3, #4]
 801f1c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f1c6:	68ba      	ldr	r2, [r7, #8]
 801f1c8:	4413      	add	r3, r2
 801f1ca:	8bfa      	ldrh	r2, [r7, #30]
 801f1cc:	4619      	mov	r1, r3
 801f1ce:	f004 fe50 	bl	8023e72 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801f1d2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801f1d4:	f7fa fe86 	bl	8019ee4 <pbuf_clen>
 801f1d8:	4603      	mov	r3, r0
 801f1da:	461a      	mov	r2, r3
 801f1dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801f1e0:	4413      	add	r3, r2
 801f1e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801f1e6:	e041      	b.n	801f26c <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801f1e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f1ea:	685b      	ldr	r3, [r3, #4]
 801f1ec:	637b      	str	r3, [r7, #52]	; 0x34
 801f1ee:	e002      	b.n	801f1f6 <tcp_write+0x23e>
 801f1f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f1f2:	681b      	ldr	r3, [r3, #0]
 801f1f4:	637b      	str	r3, [r7, #52]	; 0x34
 801f1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f1f8:	681b      	ldr	r3, [r3, #0]
 801f1fa:	2b00      	cmp	r3, #0
 801f1fc:	d1f8      	bne.n	801f1f0 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801f1fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f200:	7b1b      	ldrb	r3, [r3, #12]
 801f202:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801f206:	2b00      	cmp	r3, #0
 801f208:	d115      	bne.n	801f236 <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801f20a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f20c:	685b      	ldr	r3, [r3, #4]
 801f20e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f210:	8952      	ldrh	r2, [r2, #10]
 801f212:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801f214:	68ba      	ldr	r2, [r7, #8]
 801f216:	429a      	cmp	r2, r3
 801f218:	d10d      	bne.n	801f236 <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801f21a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f21e:	2b00      	cmp	r3, #0
 801f220:	d006      	beq.n	801f230 <tcp_write+0x278>
 801f222:	4b1d      	ldr	r3, [pc, #116]	; (801f298 <tcp_write+0x2e0>)
 801f224:	f240 2231 	movw	r2, #561	; 0x231
 801f228:	4922      	ldr	r1, [pc, #136]	; (801f2b4 <tcp_write+0x2fc>)
 801f22a:	481d      	ldr	r0, [pc, #116]	; (801f2a0 <tcp_write+0x2e8>)
 801f22c:	f004 fedc 	bl	8023fe8 <iprintf>
          extendlen = seglen;
 801f230:	8bfb      	ldrh	r3, [r7, #30]
 801f232:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801f234:	e01a      	b.n	801f26c <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801f236:	8bfb      	ldrh	r3, [r7, #30]
 801f238:	2201      	movs	r2, #1
 801f23a:	4619      	mov	r1, r3
 801f23c:	2000      	movs	r0, #0
 801f23e:	f7fa fae3 	bl	8019808 <pbuf_alloc>
 801f242:	6578      	str	r0, [r7, #84]	; 0x54
 801f244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f246:	2b00      	cmp	r3, #0
 801f248:	f000 81e1 	beq.w	801f60e <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801f24c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f250:	68ba      	ldr	r2, [r7, #8]
 801f252:	441a      	add	r2, r3
 801f254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f256:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801f258:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801f25a:	f7fa fe43 	bl	8019ee4 <pbuf_clen>
 801f25e:	4603      	mov	r3, r0
 801f260:	461a      	mov	r2, r3
 801f262:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801f266:	4413      	add	r3, r2
 801f268:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801f26c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801f270:	8bfb      	ldrh	r3, [r7, #30]
 801f272:	4413      	add	r3, r2
 801f274:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801f278:	e0dd      	b.n	801f436 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801f27a:	68fb      	ldr	r3, [r7, #12]
 801f27c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801f280:	2b00      	cmp	r3, #0
 801f282:	f000 80d8 	beq.w	801f436 <tcp_write+0x47e>
 801f286:	4b04      	ldr	r3, [pc, #16]	; (801f298 <tcp_write+0x2e0>)
 801f288:	f240 224b 	movw	r2, #587	; 0x24b
 801f28c:	490a      	ldr	r1, [pc, #40]	; (801f2b8 <tcp_write+0x300>)
 801f28e:	4804      	ldr	r0, [pc, #16]	; (801f2a0 <tcp_write+0x2e8>)
 801f290:	f004 feaa 	bl	8023fe8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801f294:	e0cf      	b.n	801f436 <tcp_write+0x47e>
 801f296:	bf00      	nop
 801f298:	08027bf4 	.word	0x08027bf4
 801f29c:	08027db0 	.word	0x08027db0
 801f2a0:	08027c64 	.word	0x08027c64
 801f2a4:	08027dc8 	.word	0x08027dc8
 801f2a8:	08027dfc 	.word	0x08027dfc
 801f2ac:	08027e14 	.word	0x08027e14
 801f2b0:	08027e34 	.word	0x08027e34
 801f2b4:	08027e54 	.word	0x08027e54
 801f2b8:	08027e80 	.word	0x08027e80
    struct pbuf *p;
    u16_t left = len - pos;
 801f2bc:	88fa      	ldrh	r2, [r7, #6]
 801f2be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f2c2:	1ad3      	subs	r3, r2, r3
 801f2c4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801f2c6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801f2ca:	b29b      	uxth	r3, r3
 801f2cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801f2ce:	1ad3      	subs	r3, r2, r3
 801f2d0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801f2d2:	8b7a      	ldrh	r2, [r7, #26]
 801f2d4:	8bbb      	ldrh	r3, [r7, #28]
 801f2d6:	4293      	cmp	r3, r2
 801f2d8:	bf28      	it	cs
 801f2da:	4613      	movcs	r3, r2
 801f2dc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801f2de:	797b      	ldrb	r3, [r7, #5]
 801f2e0:	f003 0301 	and.w	r3, r3, #1
 801f2e4:	2b00      	cmp	r3, #0
 801f2e6:	d036      	beq.n	801f356 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801f2e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801f2ec:	b29a      	uxth	r2, r3
 801f2ee:	8b3b      	ldrh	r3, [r7, #24]
 801f2f0:	4413      	add	r3, r2
 801f2f2:	b299      	uxth	r1, r3
 801f2f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f2f6:	2b00      	cmp	r3, #0
 801f2f8:	bf0c      	ite	eq
 801f2fa:	2301      	moveq	r3, #1
 801f2fc:	2300      	movne	r3, #0
 801f2fe:	b2db      	uxtb	r3, r3
 801f300:	f107 0012 	add.w	r0, r7, #18
 801f304:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801f306:	9302      	str	r3, [sp, #8]
 801f308:	797b      	ldrb	r3, [r7, #5]
 801f30a:	9301      	str	r3, [sp, #4]
 801f30c:	68fb      	ldr	r3, [r7, #12]
 801f30e:	9300      	str	r3, [sp, #0]
 801f310:	4603      	mov	r3, r0
 801f312:	2036      	movs	r0, #54	; 0x36
 801f314:	f7ff fd5c 	bl	801edd0 <tcp_pbuf_prealloc>
 801f318:	6338      	str	r0, [r7, #48]	; 0x30
 801f31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f31c:	2b00      	cmp	r3, #0
 801f31e:	f000 8178 	beq.w	801f612 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801f322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f324:	895b      	ldrh	r3, [r3, #10]
 801f326:	8b3a      	ldrh	r2, [r7, #24]
 801f328:	429a      	cmp	r2, r3
 801f32a:	d906      	bls.n	801f33a <tcp_write+0x382>
 801f32c:	4b8c      	ldr	r3, [pc, #560]	; (801f560 <tcp_write+0x5a8>)
 801f32e:	f240 2267 	movw	r2, #615	; 0x267
 801f332:	498c      	ldr	r1, [pc, #560]	; (801f564 <tcp_write+0x5ac>)
 801f334:	488c      	ldr	r0, [pc, #560]	; (801f568 <tcp_write+0x5b0>)
 801f336:	f004 fe57 	bl	8023fe8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801f33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f33c:	685a      	ldr	r2, [r3, #4]
 801f33e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801f342:	18d0      	adds	r0, r2, r3
 801f344:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f348:	68ba      	ldr	r2, [r7, #8]
 801f34a:	4413      	add	r3, r2
 801f34c:	8b3a      	ldrh	r2, [r7, #24]
 801f34e:	4619      	mov	r1, r3
 801f350:	f004 fd8f 	bl	8023e72 <memcpy>
 801f354:	e02f      	b.n	801f3b6 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801f356:	8a7b      	ldrh	r3, [r7, #18]
 801f358:	2b00      	cmp	r3, #0
 801f35a:	d006      	beq.n	801f36a <tcp_write+0x3b2>
 801f35c:	4b80      	ldr	r3, [pc, #512]	; (801f560 <tcp_write+0x5a8>)
 801f35e:	f240 2271 	movw	r2, #625	; 0x271
 801f362:	4982      	ldr	r1, [pc, #520]	; (801f56c <tcp_write+0x5b4>)
 801f364:	4880      	ldr	r0, [pc, #512]	; (801f568 <tcp_write+0x5b0>)
 801f366:	f004 fe3f 	bl	8023fe8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801f36a:	8b3b      	ldrh	r3, [r7, #24]
 801f36c:	2201      	movs	r2, #1
 801f36e:	4619      	mov	r1, r3
 801f370:	2036      	movs	r0, #54	; 0x36
 801f372:	f7fa fa49 	bl	8019808 <pbuf_alloc>
 801f376:	6178      	str	r0, [r7, #20]
 801f378:	697b      	ldr	r3, [r7, #20]
 801f37a:	2b00      	cmp	r3, #0
 801f37c:	f000 814b 	beq.w	801f616 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801f380:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f384:	68ba      	ldr	r2, [r7, #8]
 801f386:	441a      	add	r2, r3
 801f388:	697b      	ldr	r3, [r7, #20]
 801f38a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801f38c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801f390:	b29b      	uxth	r3, r3
 801f392:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f396:	4619      	mov	r1, r3
 801f398:	2036      	movs	r0, #54	; 0x36
 801f39a:	f7fa fa35 	bl	8019808 <pbuf_alloc>
 801f39e:	6338      	str	r0, [r7, #48]	; 0x30
 801f3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f3a2:	2b00      	cmp	r3, #0
 801f3a4:	d103      	bne.n	801f3ae <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801f3a6:	6978      	ldr	r0, [r7, #20]
 801f3a8:	f7fa fd0e 	bl	8019dc8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801f3ac:	e136      	b.n	801f61c <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801f3ae:	6979      	ldr	r1, [r7, #20]
 801f3b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f3b2:	f7fa fdd7 	bl	8019f64 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801f3b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f3b8:	f7fa fd94 	bl	8019ee4 <pbuf_clen>
 801f3bc:	4603      	mov	r3, r0
 801f3be:	461a      	mov	r2, r3
 801f3c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801f3c4:	4413      	add	r3, r2
 801f3c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801f3ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801f3ce:	2b09      	cmp	r3, #9
 801f3d0:	d903      	bls.n	801f3da <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801f3d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f3d4:	f7fa fcf8 	bl	8019dc8 <pbuf_free>
      goto memerr;
 801f3d8:	e120      	b.n	801f61c <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801f3da:	68fb      	ldr	r3, [r7, #12]
 801f3dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801f3de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f3e2:	441a      	add	r2, r3
 801f3e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f3e8:	9300      	str	r3, [sp, #0]
 801f3ea:	4613      	mov	r3, r2
 801f3ec:	2200      	movs	r2, #0
 801f3ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801f3f0:	68f8      	ldr	r0, [r7, #12]
 801f3f2:	f7ff fc4f 	bl	801ec94 <tcp_create_segment>
 801f3f6:	64f8      	str	r0, [r7, #76]	; 0x4c
 801f3f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f3fa:	2b00      	cmp	r3, #0
 801f3fc:	f000 810d 	beq.w	801f61a <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801f400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f402:	2b00      	cmp	r3, #0
 801f404:	d102      	bne.n	801f40c <tcp_write+0x454>
      queue = seg;
 801f406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f408:	647b      	str	r3, [r7, #68]	; 0x44
 801f40a:	e00c      	b.n	801f426 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801f40c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f40e:	2b00      	cmp	r3, #0
 801f410:	d106      	bne.n	801f420 <tcp_write+0x468>
 801f412:	4b53      	ldr	r3, [pc, #332]	; (801f560 <tcp_write+0x5a8>)
 801f414:	f240 22ab 	movw	r2, #683	; 0x2ab
 801f418:	4955      	ldr	r1, [pc, #340]	; (801f570 <tcp_write+0x5b8>)
 801f41a:	4853      	ldr	r0, [pc, #332]	; (801f568 <tcp_write+0x5b0>)
 801f41c:	f004 fde4 	bl	8023fe8 <iprintf>
      prev_seg->next = seg;
 801f420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f422:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801f424:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801f426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f428:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801f42a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801f42e:	8b3b      	ldrh	r3, [r7, #24]
 801f430:	4413      	add	r3, r2
 801f432:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801f436:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801f43a:	88fb      	ldrh	r3, [r7, #6]
 801f43c:	429a      	cmp	r2, r3
 801f43e:	f4ff af3d 	bcc.w	801f2bc <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801f442:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801f444:	2b00      	cmp	r3, #0
 801f446:	d02c      	beq.n	801f4a2 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801f448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f44a:	685b      	ldr	r3, [r3, #4]
 801f44c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f44e:	e01e      	b.n	801f48e <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 801f450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f452:	891a      	ldrh	r2, [r3, #8]
 801f454:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801f456:	4413      	add	r3, r2
 801f458:	b29a      	uxth	r2, r3
 801f45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f45c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801f45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f460:	681b      	ldr	r3, [r3, #0]
 801f462:	2b00      	cmp	r3, #0
 801f464:	d110      	bne.n	801f488 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801f466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f468:	685b      	ldr	r3, [r3, #4]
 801f46a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f46c:	8952      	ldrh	r2, [r2, #10]
 801f46e:	4413      	add	r3, r2
 801f470:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801f472:	68b9      	ldr	r1, [r7, #8]
 801f474:	4618      	mov	r0, r3
 801f476:	f004 fcfc 	bl	8023e72 <memcpy>
        p->len += oversize_used;
 801f47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f47c:	895a      	ldrh	r2, [r3, #10]
 801f47e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801f480:	4413      	add	r3, r2
 801f482:	b29a      	uxth	r2, r3
 801f484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f486:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801f488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f48a:	681b      	ldr	r3, [r3, #0]
 801f48c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f490:	2b00      	cmp	r3, #0
 801f492:	d1dd      	bne.n	801f450 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 801f494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f496:	891a      	ldrh	r2, [r3, #8]
 801f498:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801f49a:	4413      	add	r3, r2
 801f49c:	b29a      	uxth	r2, r3
 801f49e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f4a0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801f4a2:	8a7a      	ldrh	r2, [r7, #18]
 801f4a4:	68fb      	ldr	r3, [r7, #12]
 801f4a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801f4aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f4ac:	2b00      	cmp	r3, #0
 801f4ae:	d018      	beq.n	801f4e2 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801f4b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f4b2:	2b00      	cmp	r3, #0
 801f4b4:	d106      	bne.n	801f4c4 <tcp_write+0x50c>
 801f4b6:	4b2a      	ldr	r3, [pc, #168]	; (801f560 <tcp_write+0x5a8>)
 801f4b8:	f240 22e1 	movw	r2, #737	; 0x2e1
 801f4bc:	492d      	ldr	r1, [pc, #180]	; (801f574 <tcp_write+0x5bc>)
 801f4be:	482a      	ldr	r0, [pc, #168]	; (801f568 <tcp_write+0x5b0>)
 801f4c0:	f004 fd92 	bl	8023fe8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801f4c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f4c6:	685b      	ldr	r3, [r3, #4]
 801f4c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801f4ca:	4618      	mov	r0, r3
 801f4cc:	f7fa fd4a 	bl	8019f64 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801f4d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f4d2:	891a      	ldrh	r2, [r3, #8]
 801f4d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f4d6:	891b      	ldrh	r3, [r3, #8]
 801f4d8:	4413      	add	r3, r2
 801f4da:	b29a      	uxth	r2, r3
 801f4dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f4de:	811a      	strh	r2, [r3, #8]
 801f4e0:	e037      	b.n	801f552 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 801f4e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801f4e4:	2b00      	cmp	r3, #0
 801f4e6:	d034      	beq.n	801f552 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801f4e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f4ea:	2b00      	cmp	r3, #0
 801f4ec:	d003      	beq.n	801f4f6 <tcp_write+0x53e>
 801f4ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f4f0:	685b      	ldr	r3, [r3, #4]
 801f4f2:	2b00      	cmp	r3, #0
 801f4f4:	d106      	bne.n	801f504 <tcp_write+0x54c>
 801f4f6:	4b1a      	ldr	r3, [pc, #104]	; (801f560 <tcp_write+0x5a8>)
 801f4f8:	f240 22e7 	movw	r2, #743	; 0x2e7
 801f4fc:	491e      	ldr	r1, [pc, #120]	; (801f578 <tcp_write+0x5c0>)
 801f4fe:	481a      	ldr	r0, [pc, #104]	; (801f568 <tcp_write+0x5b0>)
 801f500:	f004 fd72 	bl	8023fe8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801f504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f506:	685b      	ldr	r3, [r3, #4]
 801f508:	62bb      	str	r3, [r7, #40]	; 0x28
 801f50a:	e009      	b.n	801f520 <tcp_write+0x568>
      p->tot_len += extendlen;
 801f50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f50e:	891a      	ldrh	r2, [r3, #8]
 801f510:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801f512:	4413      	add	r3, r2
 801f514:	b29a      	uxth	r2, r3
 801f516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f518:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801f51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f51c:	681b      	ldr	r3, [r3, #0]
 801f51e:	62bb      	str	r3, [r7, #40]	; 0x28
 801f520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f522:	681b      	ldr	r3, [r3, #0]
 801f524:	2b00      	cmp	r3, #0
 801f526:	d1f1      	bne.n	801f50c <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 801f528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f52a:	891a      	ldrh	r2, [r3, #8]
 801f52c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801f52e:	4413      	add	r3, r2
 801f530:	b29a      	uxth	r2, r3
 801f532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f534:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801f536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f538:	895a      	ldrh	r2, [r3, #10]
 801f53a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801f53c:	4413      	add	r3, r2
 801f53e:	b29a      	uxth	r2, r3
 801f540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f542:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801f544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f546:	891a      	ldrh	r2, [r3, #8]
 801f548:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801f54a:	4413      	add	r3, r2
 801f54c:	b29a      	uxth	r2, r3
 801f54e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f550:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801f552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f554:	2b00      	cmp	r3, #0
 801f556:	d111      	bne.n	801f57c <tcp_write+0x5c4>
    pcb->unsent = queue;
 801f558:	68fb      	ldr	r3, [r7, #12]
 801f55a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f55c:	66da      	str	r2, [r3, #108]	; 0x6c
 801f55e:	e010      	b.n	801f582 <tcp_write+0x5ca>
 801f560:	08027bf4 	.word	0x08027bf4
 801f564:	08027eb0 	.word	0x08027eb0
 801f568:	08027c64 	.word	0x08027c64
 801f56c:	08027ef0 	.word	0x08027ef0
 801f570:	08027f00 	.word	0x08027f00
 801f574:	08027f14 	.word	0x08027f14
 801f578:	08027f4c 	.word	0x08027f4c
  } else {
    last_unsent->next = queue;
 801f57c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f57e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f580:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801f582:	68fb      	ldr	r3, [r7, #12]
 801f584:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801f586:	88fb      	ldrh	r3, [r7, #6]
 801f588:	441a      	add	r2, r3
 801f58a:	68fb      	ldr	r3, [r7, #12]
 801f58c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801f58e:	68fb      	ldr	r3, [r7, #12]
 801f590:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801f594:	88fb      	ldrh	r3, [r7, #6]
 801f596:	1ad3      	subs	r3, r2, r3
 801f598:	b29a      	uxth	r2, r3
 801f59a:	68fb      	ldr	r3, [r7, #12]
 801f59c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801f5a0:	68fb      	ldr	r3, [r7, #12]
 801f5a2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801f5a6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801f5aa:	68fb      	ldr	r3, [r7, #12]
 801f5ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801f5b0:	2b00      	cmp	r3, #0
 801f5b2:	d00e      	beq.n	801f5d2 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 801f5b4:	68fb      	ldr	r3, [r7, #12]
 801f5b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f5b8:	2b00      	cmp	r3, #0
 801f5ba:	d10a      	bne.n	801f5d2 <tcp_write+0x61a>
 801f5bc:	68fb      	ldr	r3, [r7, #12]
 801f5be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f5c0:	2b00      	cmp	r3, #0
 801f5c2:	d106      	bne.n	801f5d2 <tcp_write+0x61a>
 801f5c4:	4b2c      	ldr	r3, [pc, #176]	; (801f678 <tcp_write+0x6c0>)
 801f5c6:	f240 3213 	movw	r2, #787	; 0x313
 801f5ca:	492c      	ldr	r1, [pc, #176]	; (801f67c <tcp_write+0x6c4>)
 801f5cc:	482c      	ldr	r0, [pc, #176]	; (801f680 <tcp_write+0x6c8>)
 801f5ce:	f004 fd0b 	bl	8023fe8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801f5d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f5d4:	2b00      	cmp	r3, #0
 801f5d6:	d016      	beq.n	801f606 <tcp_write+0x64e>
 801f5d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f5da:	68db      	ldr	r3, [r3, #12]
 801f5dc:	2b00      	cmp	r3, #0
 801f5de:	d012      	beq.n	801f606 <tcp_write+0x64e>
 801f5e0:	797b      	ldrb	r3, [r7, #5]
 801f5e2:	f003 0302 	and.w	r3, r3, #2
 801f5e6:	2b00      	cmp	r3, #0
 801f5e8:	d10d      	bne.n	801f606 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801f5ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f5ec:	68db      	ldr	r3, [r3, #12]
 801f5ee:	899b      	ldrh	r3, [r3, #12]
 801f5f0:	b29c      	uxth	r4, r3
 801f5f2:	2008      	movs	r0, #8
 801f5f4:	f7f4 fbd6 	bl	8013da4 <lwip_htons>
 801f5f8:	4603      	mov	r3, r0
 801f5fa:	461a      	mov	r2, r3
 801f5fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f5fe:	68db      	ldr	r3, [r3, #12]
 801f600:	4322      	orrs	r2, r4
 801f602:	b292      	uxth	r2, r2
 801f604:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801f606:	2300      	movs	r3, #0
 801f608:	e031      	b.n	801f66e <tcp_write+0x6b6>
          goto memerr;
 801f60a:	bf00      	nop
 801f60c:	e006      	b.n	801f61c <tcp_write+0x664>
            goto memerr;
 801f60e:	bf00      	nop
 801f610:	e004      	b.n	801f61c <tcp_write+0x664>
        goto memerr;
 801f612:	bf00      	nop
 801f614:	e002      	b.n	801f61c <tcp_write+0x664>
        goto memerr;
 801f616:	bf00      	nop
 801f618:	e000      	b.n	801f61c <tcp_write+0x664>
      goto memerr;
 801f61a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f61c:	68fb      	ldr	r3, [r7, #12]
 801f61e:	8b5b      	ldrh	r3, [r3, #26]
 801f620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f624:	b29a      	uxth	r2, r3
 801f626:	68fb      	ldr	r3, [r7, #12]
 801f628:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801f62a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f62c:	2b00      	cmp	r3, #0
 801f62e:	d002      	beq.n	801f636 <tcp_write+0x67e>
    pbuf_free(concat_p);
 801f630:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801f632:	f7fa fbc9 	bl	8019dc8 <pbuf_free>
  }
  if (queue != NULL) {
 801f636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f638:	2b00      	cmp	r3, #0
 801f63a:	d002      	beq.n	801f642 <tcp_write+0x68a>
    tcp_segs_free(queue);
 801f63c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801f63e:	f7fc fb71 	bl	801bd24 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801f642:	68fb      	ldr	r3, [r7, #12]
 801f644:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801f648:	2b00      	cmp	r3, #0
 801f64a:	d00e      	beq.n	801f66a <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801f64c:	68fb      	ldr	r3, [r7, #12]
 801f64e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f650:	2b00      	cmp	r3, #0
 801f652:	d10a      	bne.n	801f66a <tcp_write+0x6b2>
 801f654:	68fb      	ldr	r3, [r7, #12]
 801f656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f658:	2b00      	cmp	r3, #0
 801f65a:	d106      	bne.n	801f66a <tcp_write+0x6b2>
 801f65c:	4b06      	ldr	r3, [pc, #24]	; (801f678 <tcp_write+0x6c0>)
 801f65e:	f44f 724a 	mov.w	r2, #808	; 0x328
 801f662:	4906      	ldr	r1, [pc, #24]	; (801f67c <tcp_write+0x6c4>)
 801f664:	4806      	ldr	r0, [pc, #24]	; (801f680 <tcp_write+0x6c8>)
 801f666:	f004 fcbf 	bl	8023fe8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801f66a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801f66e:	4618      	mov	r0, r3
 801f670:	375c      	adds	r7, #92	; 0x5c
 801f672:	46bd      	mov	sp, r7
 801f674:	bd90      	pop	{r4, r7, pc}
 801f676:	bf00      	nop
 801f678:	08027bf4 	.word	0x08027bf4
 801f67c:	08027f84 	.word	0x08027f84
 801f680:	08027c64 	.word	0x08027c64

0801f684 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801f684:	b590      	push	{r4, r7, lr}
 801f686:	b08b      	sub	sp, #44	; 0x2c
 801f688:	af02      	add	r7, sp, #8
 801f68a:	6078      	str	r0, [r7, #4]
 801f68c:	460b      	mov	r3, r1
 801f68e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801f690:	2300      	movs	r3, #0
 801f692:	61fb      	str	r3, [r7, #28]
 801f694:	2300      	movs	r3, #0
 801f696:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801f698:	2300      	movs	r3, #0
 801f69a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801f69c:	687b      	ldr	r3, [r7, #4]
 801f69e:	2b00      	cmp	r3, #0
 801f6a0:	d106      	bne.n	801f6b0 <tcp_split_unsent_seg+0x2c>
 801f6a2:	4b95      	ldr	r3, [pc, #596]	; (801f8f8 <tcp_split_unsent_seg+0x274>)
 801f6a4:	f240 324b 	movw	r2, #843	; 0x34b
 801f6a8:	4994      	ldr	r1, [pc, #592]	; (801f8fc <tcp_split_unsent_seg+0x278>)
 801f6aa:	4895      	ldr	r0, [pc, #596]	; (801f900 <tcp_split_unsent_seg+0x27c>)
 801f6ac:	f004 fc9c 	bl	8023fe8 <iprintf>

  useg = pcb->unsent;
 801f6b0:	687b      	ldr	r3, [r7, #4]
 801f6b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f6b4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801f6b6:	697b      	ldr	r3, [r7, #20]
 801f6b8:	2b00      	cmp	r3, #0
 801f6ba:	d102      	bne.n	801f6c2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801f6bc:	f04f 33ff 	mov.w	r3, #4294967295
 801f6c0:	e116      	b.n	801f8f0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801f6c2:	887b      	ldrh	r3, [r7, #2]
 801f6c4:	2b00      	cmp	r3, #0
 801f6c6:	d109      	bne.n	801f6dc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801f6c8:	4b8b      	ldr	r3, [pc, #556]	; (801f8f8 <tcp_split_unsent_seg+0x274>)
 801f6ca:	f240 3253 	movw	r2, #851	; 0x353
 801f6ce:	498d      	ldr	r1, [pc, #564]	; (801f904 <tcp_split_unsent_seg+0x280>)
 801f6d0:	488b      	ldr	r0, [pc, #556]	; (801f900 <tcp_split_unsent_seg+0x27c>)
 801f6d2:	f004 fc89 	bl	8023fe8 <iprintf>
    return ERR_VAL;
 801f6d6:	f06f 0305 	mvn.w	r3, #5
 801f6da:	e109      	b.n	801f8f0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801f6dc:	697b      	ldr	r3, [r7, #20]
 801f6de:	891b      	ldrh	r3, [r3, #8]
 801f6e0:	887a      	ldrh	r2, [r7, #2]
 801f6e2:	429a      	cmp	r2, r3
 801f6e4:	d301      	bcc.n	801f6ea <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801f6e6:	2300      	movs	r3, #0
 801f6e8:	e102      	b.n	801f8f0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801f6ea:	687b      	ldr	r3, [r7, #4]
 801f6ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f6ee:	887a      	ldrh	r2, [r7, #2]
 801f6f0:	429a      	cmp	r2, r3
 801f6f2:	d906      	bls.n	801f702 <tcp_split_unsent_seg+0x7e>
 801f6f4:	4b80      	ldr	r3, [pc, #512]	; (801f8f8 <tcp_split_unsent_seg+0x274>)
 801f6f6:	f240 325b 	movw	r2, #859	; 0x35b
 801f6fa:	4983      	ldr	r1, [pc, #524]	; (801f908 <tcp_split_unsent_seg+0x284>)
 801f6fc:	4880      	ldr	r0, [pc, #512]	; (801f900 <tcp_split_unsent_seg+0x27c>)
 801f6fe:	f004 fc73 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801f702:	697b      	ldr	r3, [r7, #20]
 801f704:	891b      	ldrh	r3, [r3, #8]
 801f706:	2b00      	cmp	r3, #0
 801f708:	d106      	bne.n	801f718 <tcp_split_unsent_seg+0x94>
 801f70a:	4b7b      	ldr	r3, [pc, #492]	; (801f8f8 <tcp_split_unsent_seg+0x274>)
 801f70c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801f710:	497e      	ldr	r1, [pc, #504]	; (801f90c <tcp_split_unsent_seg+0x288>)
 801f712:	487b      	ldr	r0, [pc, #492]	; (801f900 <tcp_split_unsent_seg+0x27c>)
 801f714:	f004 fc68 	bl	8023fe8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801f718:	697b      	ldr	r3, [r7, #20]
 801f71a:	7a9b      	ldrb	r3, [r3, #10]
 801f71c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801f71e:	7bfb      	ldrb	r3, [r7, #15]
 801f720:	009b      	lsls	r3, r3, #2
 801f722:	b2db      	uxtb	r3, r3
 801f724:	f003 0304 	and.w	r3, r3, #4
 801f728:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801f72a:	697b      	ldr	r3, [r7, #20]
 801f72c:	891a      	ldrh	r2, [r3, #8]
 801f72e:	887b      	ldrh	r3, [r7, #2]
 801f730:	1ad3      	subs	r3, r2, r3
 801f732:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801f734:	7bbb      	ldrb	r3, [r7, #14]
 801f736:	b29a      	uxth	r2, r3
 801f738:	89bb      	ldrh	r3, [r7, #12]
 801f73a:	4413      	add	r3, r2
 801f73c:	b29b      	uxth	r3, r3
 801f73e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f742:	4619      	mov	r1, r3
 801f744:	2036      	movs	r0, #54	; 0x36
 801f746:	f7fa f85f 	bl	8019808 <pbuf_alloc>
 801f74a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801f74c:	693b      	ldr	r3, [r7, #16]
 801f74e:	2b00      	cmp	r3, #0
 801f750:	f000 80b7 	beq.w	801f8c2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801f754:	697b      	ldr	r3, [r7, #20]
 801f756:	685b      	ldr	r3, [r3, #4]
 801f758:	891a      	ldrh	r2, [r3, #8]
 801f75a:	697b      	ldr	r3, [r7, #20]
 801f75c:	891b      	ldrh	r3, [r3, #8]
 801f75e:	1ad3      	subs	r3, r2, r3
 801f760:	b29a      	uxth	r2, r3
 801f762:	887b      	ldrh	r3, [r7, #2]
 801f764:	4413      	add	r3, r2
 801f766:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801f768:	697b      	ldr	r3, [r7, #20]
 801f76a:	6858      	ldr	r0, [r3, #4]
 801f76c:	693b      	ldr	r3, [r7, #16]
 801f76e:	685a      	ldr	r2, [r3, #4]
 801f770:	7bbb      	ldrb	r3, [r7, #14]
 801f772:	18d1      	adds	r1, r2, r3
 801f774:	897b      	ldrh	r3, [r7, #10]
 801f776:	89ba      	ldrh	r2, [r7, #12]
 801f778:	f7fa fd2c 	bl	801a1d4 <pbuf_copy_partial>
 801f77c:	4603      	mov	r3, r0
 801f77e:	461a      	mov	r2, r3
 801f780:	89bb      	ldrh	r3, [r7, #12]
 801f782:	4293      	cmp	r3, r2
 801f784:	f040 809f 	bne.w	801f8c6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801f788:	697b      	ldr	r3, [r7, #20]
 801f78a:	68db      	ldr	r3, [r3, #12]
 801f78c:	899b      	ldrh	r3, [r3, #12]
 801f78e:	b29b      	uxth	r3, r3
 801f790:	4618      	mov	r0, r3
 801f792:	f7f4 fb07 	bl	8013da4 <lwip_htons>
 801f796:	4603      	mov	r3, r0
 801f798:	b2db      	uxtb	r3, r3
 801f79a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801f79e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801f7a0:	2300      	movs	r3, #0
 801f7a2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801f7a4:	7efb      	ldrb	r3, [r7, #27]
 801f7a6:	f003 0308 	and.w	r3, r3, #8
 801f7aa:	2b00      	cmp	r3, #0
 801f7ac:	d007      	beq.n	801f7be <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801f7ae:	7efb      	ldrb	r3, [r7, #27]
 801f7b0:	f023 0308 	bic.w	r3, r3, #8
 801f7b4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801f7b6:	7ebb      	ldrb	r3, [r7, #26]
 801f7b8:	f043 0308 	orr.w	r3, r3, #8
 801f7bc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801f7be:	7efb      	ldrb	r3, [r7, #27]
 801f7c0:	f003 0301 	and.w	r3, r3, #1
 801f7c4:	2b00      	cmp	r3, #0
 801f7c6:	d007      	beq.n	801f7d8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801f7c8:	7efb      	ldrb	r3, [r7, #27]
 801f7ca:	f023 0301 	bic.w	r3, r3, #1
 801f7ce:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801f7d0:	7ebb      	ldrb	r3, [r7, #26]
 801f7d2:	f043 0301 	orr.w	r3, r3, #1
 801f7d6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801f7d8:	697b      	ldr	r3, [r7, #20]
 801f7da:	68db      	ldr	r3, [r3, #12]
 801f7dc:	685b      	ldr	r3, [r3, #4]
 801f7de:	4618      	mov	r0, r3
 801f7e0:	f7f4 faf5 	bl	8013dce <lwip_htonl>
 801f7e4:	4602      	mov	r2, r0
 801f7e6:	887b      	ldrh	r3, [r7, #2]
 801f7e8:	18d1      	adds	r1, r2, r3
 801f7ea:	7eba      	ldrb	r2, [r7, #26]
 801f7ec:	7bfb      	ldrb	r3, [r7, #15]
 801f7ee:	9300      	str	r3, [sp, #0]
 801f7f0:	460b      	mov	r3, r1
 801f7f2:	6939      	ldr	r1, [r7, #16]
 801f7f4:	6878      	ldr	r0, [r7, #4]
 801f7f6:	f7ff fa4d 	bl	801ec94 <tcp_create_segment>
 801f7fa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801f7fc:	69fb      	ldr	r3, [r7, #28]
 801f7fe:	2b00      	cmp	r3, #0
 801f800:	d063      	beq.n	801f8ca <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801f802:	697b      	ldr	r3, [r7, #20]
 801f804:	685b      	ldr	r3, [r3, #4]
 801f806:	4618      	mov	r0, r3
 801f808:	f7fa fb6c 	bl	8019ee4 <pbuf_clen>
 801f80c:	4603      	mov	r3, r0
 801f80e:	461a      	mov	r2, r3
 801f810:	687b      	ldr	r3, [r7, #4]
 801f812:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801f816:	1a9b      	subs	r3, r3, r2
 801f818:	b29a      	uxth	r2, r3
 801f81a:	687b      	ldr	r3, [r7, #4]
 801f81c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801f820:	697b      	ldr	r3, [r7, #20]
 801f822:	6858      	ldr	r0, [r3, #4]
 801f824:	697b      	ldr	r3, [r7, #20]
 801f826:	685b      	ldr	r3, [r3, #4]
 801f828:	891a      	ldrh	r2, [r3, #8]
 801f82a:	89bb      	ldrh	r3, [r7, #12]
 801f82c:	1ad3      	subs	r3, r2, r3
 801f82e:	b29b      	uxth	r3, r3
 801f830:	4619      	mov	r1, r3
 801f832:	f7fa f943 	bl	8019abc <pbuf_realloc>
  useg->len -= remainder;
 801f836:	697b      	ldr	r3, [r7, #20]
 801f838:	891a      	ldrh	r2, [r3, #8]
 801f83a:	89bb      	ldrh	r3, [r7, #12]
 801f83c:	1ad3      	subs	r3, r2, r3
 801f83e:	b29a      	uxth	r2, r3
 801f840:	697b      	ldr	r3, [r7, #20]
 801f842:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801f844:	697b      	ldr	r3, [r7, #20]
 801f846:	68db      	ldr	r3, [r3, #12]
 801f848:	899b      	ldrh	r3, [r3, #12]
 801f84a:	b29c      	uxth	r4, r3
 801f84c:	7efb      	ldrb	r3, [r7, #27]
 801f84e:	b29b      	uxth	r3, r3
 801f850:	4618      	mov	r0, r3
 801f852:	f7f4 faa7 	bl	8013da4 <lwip_htons>
 801f856:	4603      	mov	r3, r0
 801f858:	461a      	mov	r2, r3
 801f85a:	697b      	ldr	r3, [r7, #20]
 801f85c:	68db      	ldr	r3, [r3, #12]
 801f85e:	4322      	orrs	r2, r4
 801f860:	b292      	uxth	r2, r2
 801f862:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801f864:	697b      	ldr	r3, [r7, #20]
 801f866:	685b      	ldr	r3, [r3, #4]
 801f868:	4618      	mov	r0, r3
 801f86a:	f7fa fb3b 	bl	8019ee4 <pbuf_clen>
 801f86e:	4603      	mov	r3, r0
 801f870:	461a      	mov	r2, r3
 801f872:	687b      	ldr	r3, [r7, #4]
 801f874:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801f878:	4413      	add	r3, r2
 801f87a:	b29a      	uxth	r2, r3
 801f87c:	687b      	ldr	r3, [r7, #4]
 801f87e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801f882:	69fb      	ldr	r3, [r7, #28]
 801f884:	685b      	ldr	r3, [r3, #4]
 801f886:	4618      	mov	r0, r3
 801f888:	f7fa fb2c 	bl	8019ee4 <pbuf_clen>
 801f88c:	4603      	mov	r3, r0
 801f88e:	461a      	mov	r2, r3
 801f890:	687b      	ldr	r3, [r7, #4]
 801f892:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801f896:	4413      	add	r3, r2
 801f898:	b29a      	uxth	r2, r3
 801f89a:	687b      	ldr	r3, [r7, #4]
 801f89c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801f8a0:	697b      	ldr	r3, [r7, #20]
 801f8a2:	681a      	ldr	r2, [r3, #0]
 801f8a4:	69fb      	ldr	r3, [r7, #28]
 801f8a6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801f8a8:	697b      	ldr	r3, [r7, #20]
 801f8aa:	69fa      	ldr	r2, [r7, #28]
 801f8ac:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801f8ae:	69fb      	ldr	r3, [r7, #28]
 801f8b0:	681b      	ldr	r3, [r3, #0]
 801f8b2:	2b00      	cmp	r3, #0
 801f8b4:	d103      	bne.n	801f8be <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801f8b6:	687b      	ldr	r3, [r7, #4]
 801f8b8:	2200      	movs	r2, #0
 801f8ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801f8be:	2300      	movs	r3, #0
 801f8c0:	e016      	b.n	801f8f0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801f8c2:	bf00      	nop
 801f8c4:	e002      	b.n	801f8cc <tcp_split_unsent_seg+0x248>
    goto memerr;
 801f8c6:	bf00      	nop
 801f8c8:	e000      	b.n	801f8cc <tcp_split_unsent_seg+0x248>
    goto memerr;
 801f8ca:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801f8cc:	69fb      	ldr	r3, [r7, #28]
 801f8ce:	2b00      	cmp	r3, #0
 801f8d0:	d006      	beq.n	801f8e0 <tcp_split_unsent_seg+0x25c>
 801f8d2:	4b09      	ldr	r3, [pc, #36]	; (801f8f8 <tcp_split_unsent_seg+0x274>)
 801f8d4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801f8d8:	490d      	ldr	r1, [pc, #52]	; (801f910 <tcp_split_unsent_seg+0x28c>)
 801f8da:	4809      	ldr	r0, [pc, #36]	; (801f900 <tcp_split_unsent_seg+0x27c>)
 801f8dc:	f004 fb84 	bl	8023fe8 <iprintf>
  if (p != NULL) {
 801f8e0:	693b      	ldr	r3, [r7, #16]
 801f8e2:	2b00      	cmp	r3, #0
 801f8e4:	d002      	beq.n	801f8ec <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801f8e6:	6938      	ldr	r0, [r7, #16]
 801f8e8:	f7fa fa6e 	bl	8019dc8 <pbuf_free>
  }

  return ERR_MEM;
 801f8ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 801f8f0:	4618      	mov	r0, r3
 801f8f2:	3724      	adds	r7, #36	; 0x24
 801f8f4:	46bd      	mov	sp, r7
 801f8f6:	bd90      	pop	{r4, r7, pc}
 801f8f8:	08027bf4 	.word	0x08027bf4
 801f8fc:	08027fa4 	.word	0x08027fa4
 801f900:	08027c64 	.word	0x08027c64
 801f904:	08027fc8 	.word	0x08027fc8
 801f908:	08027fec 	.word	0x08027fec
 801f90c:	08027ffc 	.word	0x08027ffc
 801f910:	0802800c 	.word	0x0802800c

0801f914 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801f914:	b590      	push	{r4, r7, lr}
 801f916:	b085      	sub	sp, #20
 801f918:	af00      	add	r7, sp, #0
 801f91a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801f91c:	687b      	ldr	r3, [r7, #4]
 801f91e:	2b00      	cmp	r3, #0
 801f920:	d106      	bne.n	801f930 <tcp_send_fin+0x1c>
 801f922:	4b21      	ldr	r3, [pc, #132]	; (801f9a8 <tcp_send_fin+0x94>)
 801f924:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801f928:	4920      	ldr	r1, [pc, #128]	; (801f9ac <tcp_send_fin+0x98>)
 801f92a:	4821      	ldr	r0, [pc, #132]	; (801f9b0 <tcp_send_fin+0x9c>)
 801f92c:	f004 fb5c 	bl	8023fe8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801f930:	687b      	ldr	r3, [r7, #4]
 801f932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f934:	2b00      	cmp	r3, #0
 801f936:	d02e      	beq.n	801f996 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f938:	687b      	ldr	r3, [r7, #4]
 801f93a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f93c:	60fb      	str	r3, [r7, #12]
 801f93e:	e002      	b.n	801f946 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801f940:	68fb      	ldr	r3, [r7, #12]
 801f942:	681b      	ldr	r3, [r3, #0]
 801f944:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f946:	68fb      	ldr	r3, [r7, #12]
 801f948:	681b      	ldr	r3, [r3, #0]
 801f94a:	2b00      	cmp	r3, #0
 801f94c:	d1f8      	bne.n	801f940 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801f94e:	68fb      	ldr	r3, [r7, #12]
 801f950:	68db      	ldr	r3, [r3, #12]
 801f952:	899b      	ldrh	r3, [r3, #12]
 801f954:	b29b      	uxth	r3, r3
 801f956:	4618      	mov	r0, r3
 801f958:	f7f4 fa24 	bl	8013da4 <lwip_htons>
 801f95c:	4603      	mov	r3, r0
 801f95e:	b2db      	uxtb	r3, r3
 801f960:	f003 0307 	and.w	r3, r3, #7
 801f964:	2b00      	cmp	r3, #0
 801f966:	d116      	bne.n	801f996 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801f968:	68fb      	ldr	r3, [r7, #12]
 801f96a:	68db      	ldr	r3, [r3, #12]
 801f96c:	899b      	ldrh	r3, [r3, #12]
 801f96e:	b29c      	uxth	r4, r3
 801f970:	2001      	movs	r0, #1
 801f972:	f7f4 fa17 	bl	8013da4 <lwip_htons>
 801f976:	4603      	mov	r3, r0
 801f978:	461a      	mov	r2, r3
 801f97a:	68fb      	ldr	r3, [r7, #12]
 801f97c:	68db      	ldr	r3, [r3, #12]
 801f97e:	4322      	orrs	r2, r4
 801f980:	b292      	uxth	r2, r2
 801f982:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801f984:	687b      	ldr	r3, [r7, #4]
 801f986:	8b5b      	ldrh	r3, [r3, #26]
 801f988:	f043 0320 	orr.w	r3, r3, #32
 801f98c:	b29a      	uxth	r2, r3
 801f98e:	687b      	ldr	r3, [r7, #4]
 801f990:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801f992:	2300      	movs	r3, #0
 801f994:	e004      	b.n	801f9a0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801f996:	2101      	movs	r1, #1
 801f998:	6878      	ldr	r0, [r7, #4]
 801f99a:	f000 f80b 	bl	801f9b4 <tcp_enqueue_flags>
 801f99e:	4603      	mov	r3, r0
}
 801f9a0:	4618      	mov	r0, r3
 801f9a2:	3714      	adds	r7, #20
 801f9a4:	46bd      	mov	sp, r7
 801f9a6:	bd90      	pop	{r4, r7, pc}
 801f9a8:	08027bf4 	.word	0x08027bf4
 801f9ac:	08028018 	.word	0x08028018
 801f9b0:	08027c64 	.word	0x08027c64

0801f9b4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801f9b4:	b580      	push	{r7, lr}
 801f9b6:	b08a      	sub	sp, #40	; 0x28
 801f9b8:	af02      	add	r7, sp, #8
 801f9ba:	6078      	str	r0, [r7, #4]
 801f9bc:	460b      	mov	r3, r1
 801f9be:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801f9c0:	2300      	movs	r3, #0
 801f9c2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801f9c4:	2300      	movs	r3, #0
 801f9c6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801f9c8:	78fb      	ldrb	r3, [r7, #3]
 801f9ca:	f003 0303 	and.w	r3, r3, #3
 801f9ce:	2b00      	cmp	r3, #0
 801f9d0:	d106      	bne.n	801f9e0 <tcp_enqueue_flags+0x2c>
 801f9d2:	4b67      	ldr	r3, [pc, #412]	; (801fb70 <tcp_enqueue_flags+0x1bc>)
 801f9d4:	f240 4212 	movw	r2, #1042	; 0x412
 801f9d8:	4966      	ldr	r1, [pc, #408]	; (801fb74 <tcp_enqueue_flags+0x1c0>)
 801f9da:	4867      	ldr	r0, [pc, #412]	; (801fb78 <tcp_enqueue_flags+0x1c4>)
 801f9dc:	f004 fb04 	bl	8023fe8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801f9e0:	687b      	ldr	r3, [r7, #4]
 801f9e2:	2b00      	cmp	r3, #0
 801f9e4:	d106      	bne.n	801f9f4 <tcp_enqueue_flags+0x40>
 801f9e6:	4b62      	ldr	r3, [pc, #392]	; (801fb70 <tcp_enqueue_flags+0x1bc>)
 801f9e8:	f240 4213 	movw	r2, #1043	; 0x413
 801f9ec:	4963      	ldr	r1, [pc, #396]	; (801fb7c <tcp_enqueue_flags+0x1c8>)
 801f9ee:	4862      	ldr	r0, [pc, #392]	; (801fb78 <tcp_enqueue_flags+0x1c4>)
 801f9f0:	f004 fafa 	bl	8023fe8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801f9f4:	78fb      	ldrb	r3, [r7, #3]
 801f9f6:	f003 0302 	and.w	r3, r3, #2
 801f9fa:	2b00      	cmp	r3, #0
 801f9fc:	d001      	beq.n	801fa02 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801f9fe:	2301      	movs	r3, #1
 801fa00:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801fa02:	7ffb      	ldrb	r3, [r7, #31]
 801fa04:	009b      	lsls	r3, r3, #2
 801fa06:	b2db      	uxtb	r3, r3
 801fa08:	f003 0304 	and.w	r3, r3, #4
 801fa0c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801fa0e:	7dfb      	ldrb	r3, [r7, #23]
 801fa10:	b29b      	uxth	r3, r3
 801fa12:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fa16:	4619      	mov	r1, r3
 801fa18:	2036      	movs	r0, #54	; 0x36
 801fa1a:	f7f9 fef5 	bl	8019808 <pbuf_alloc>
 801fa1e:	6138      	str	r0, [r7, #16]
 801fa20:	693b      	ldr	r3, [r7, #16]
 801fa22:	2b00      	cmp	r3, #0
 801fa24:	d109      	bne.n	801fa3a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801fa26:	687b      	ldr	r3, [r7, #4]
 801fa28:	8b5b      	ldrh	r3, [r3, #26]
 801fa2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fa2e:	b29a      	uxth	r2, r3
 801fa30:	687b      	ldr	r3, [r7, #4]
 801fa32:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801fa34:	f04f 33ff 	mov.w	r3, #4294967295
 801fa38:	e095      	b.n	801fb66 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801fa3a:	693b      	ldr	r3, [r7, #16]
 801fa3c:	895a      	ldrh	r2, [r3, #10]
 801fa3e:	7dfb      	ldrb	r3, [r7, #23]
 801fa40:	b29b      	uxth	r3, r3
 801fa42:	429a      	cmp	r2, r3
 801fa44:	d206      	bcs.n	801fa54 <tcp_enqueue_flags+0xa0>
 801fa46:	4b4a      	ldr	r3, [pc, #296]	; (801fb70 <tcp_enqueue_flags+0x1bc>)
 801fa48:	f240 423a 	movw	r2, #1082	; 0x43a
 801fa4c:	494c      	ldr	r1, [pc, #304]	; (801fb80 <tcp_enqueue_flags+0x1cc>)
 801fa4e:	484a      	ldr	r0, [pc, #296]	; (801fb78 <tcp_enqueue_flags+0x1c4>)
 801fa50:	f004 faca 	bl	8023fe8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801fa54:	687b      	ldr	r3, [r7, #4]
 801fa56:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801fa58:	78fa      	ldrb	r2, [r7, #3]
 801fa5a:	7ffb      	ldrb	r3, [r7, #31]
 801fa5c:	9300      	str	r3, [sp, #0]
 801fa5e:	460b      	mov	r3, r1
 801fa60:	6939      	ldr	r1, [r7, #16]
 801fa62:	6878      	ldr	r0, [r7, #4]
 801fa64:	f7ff f916 	bl	801ec94 <tcp_create_segment>
 801fa68:	60f8      	str	r0, [r7, #12]
 801fa6a:	68fb      	ldr	r3, [r7, #12]
 801fa6c:	2b00      	cmp	r3, #0
 801fa6e:	d109      	bne.n	801fa84 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801fa70:	687b      	ldr	r3, [r7, #4]
 801fa72:	8b5b      	ldrh	r3, [r3, #26]
 801fa74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fa78:	b29a      	uxth	r2, r3
 801fa7a:	687b      	ldr	r3, [r7, #4]
 801fa7c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801fa7e:	f04f 33ff 	mov.w	r3, #4294967295
 801fa82:	e070      	b.n	801fb66 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801fa84:	68fb      	ldr	r3, [r7, #12]
 801fa86:	68db      	ldr	r3, [r3, #12]
 801fa88:	f003 0303 	and.w	r3, r3, #3
 801fa8c:	2b00      	cmp	r3, #0
 801fa8e:	d006      	beq.n	801fa9e <tcp_enqueue_flags+0xea>
 801fa90:	4b37      	ldr	r3, [pc, #220]	; (801fb70 <tcp_enqueue_flags+0x1bc>)
 801fa92:	f240 4242 	movw	r2, #1090	; 0x442
 801fa96:	493b      	ldr	r1, [pc, #236]	; (801fb84 <tcp_enqueue_flags+0x1d0>)
 801fa98:	4837      	ldr	r0, [pc, #220]	; (801fb78 <tcp_enqueue_flags+0x1c4>)
 801fa9a:	f004 faa5 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801fa9e:	68fb      	ldr	r3, [r7, #12]
 801faa0:	891b      	ldrh	r3, [r3, #8]
 801faa2:	2b00      	cmp	r3, #0
 801faa4:	d006      	beq.n	801fab4 <tcp_enqueue_flags+0x100>
 801faa6:	4b32      	ldr	r3, [pc, #200]	; (801fb70 <tcp_enqueue_flags+0x1bc>)
 801faa8:	f240 4243 	movw	r2, #1091	; 0x443
 801faac:	4936      	ldr	r1, [pc, #216]	; (801fb88 <tcp_enqueue_flags+0x1d4>)
 801faae:	4832      	ldr	r0, [pc, #200]	; (801fb78 <tcp_enqueue_flags+0x1c4>)
 801fab0:	f004 fa9a 	bl	8023fe8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801fab4:	687b      	ldr	r3, [r7, #4]
 801fab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fab8:	2b00      	cmp	r3, #0
 801faba:	d103      	bne.n	801fac4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801fabc:	687b      	ldr	r3, [r7, #4]
 801fabe:	68fa      	ldr	r2, [r7, #12]
 801fac0:	66da      	str	r2, [r3, #108]	; 0x6c
 801fac2:	e00d      	b.n	801fae0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801fac4:	687b      	ldr	r3, [r7, #4]
 801fac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fac8:	61bb      	str	r3, [r7, #24]
 801faca:	e002      	b.n	801fad2 <tcp_enqueue_flags+0x11e>
 801facc:	69bb      	ldr	r3, [r7, #24]
 801face:	681b      	ldr	r3, [r3, #0]
 801fad0:	61bb      	str	r3, [r7, #24]
 801fad2:	69bb      	ldr	r3, [r7, #24]
 801fad4:	681b      	ldr	r3, [r3, #0]
 801fad6:	2b00      	cmp	r3, #0
 801fad8:	d1f8      	bne.n	801facc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801fada:	69bb      	ldr	r3, [r7, #24]
 801fadc:	68fa      	ldr	r2, [r7, #12]
 801fade:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801fae0:	687b      	ldr	r3, [r7, #4]
 801fae2:	2200      	movs	r2, #0
 801fae4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801fae8:	78fb      	ldrb	r3, [r7, #3]
 801faea:	f003 0302 	and.w	r3, r3, #2
 801faee:	2b00      	cmp	r3, #0
 801faf0:	d104      	bne.n	801fafc <tcp_enqueue_flags+0x148>
 801faf2:	78fb      	ldrb	r3, [r7, #3]
 801faf4:	f003 0301 	and.w	r3, r3, #1
 801faf8:	2b00      	cmp	r3, #0
 801fafa:	d004      	beq.n	801fb06 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801fafc:	687b      	ldr	r3, [r7, #4]
 801fafe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801fb00:	1c5a      	adds	r2, r3, #1
 801fb02:	687b      	ldr	r3, [r7, #4]
 801fb04:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801fb06:	78fb      	ldrb	r3, [r7, #3]
 801fb08:	f003 0301 	and.w	r3, r3, #1
 801fb0c:	2b00      	cmp	r3, #0
 801fb0e:	d006      	beq.n	801fb1e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801fb10:	687b      	ldr	r3, [r7, #4]
 801fb12:	8b5b      	ldrh	r3, [r3, #26]
 801fb14:	f043 0320 	orr.w	r3, r3, #32
 801fb18:	b29a      	uxth	r2, r3
 801fb1a:	687b      	ldr	r3, [r7, #4]
 801fb1c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801fb1e:	68fb      	ldr	r3, [r7, #12]
 801fb20:	685b      	ldr	r3, [r3, #4]
 801fb22:	4618      	mov	r0, r3
 801fb24:	f7fa f9de 	bl	8019ee4 <pbuf_clen>
 801fb28:	4603      	mov	r3, r0
 801fb2a:	461a      	mov	r2, r3
 801fb2c:	687b      	ldr	r3, [r7, #4]
 801fb2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801fb32:	4413      	add	r3, r2
 801fb34:	b29a      	uxth	r2, r3
 801fb36:	687b      	ldr	r3, [r7, #4]
 801fb38:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801fb3c:	687b      	ldr	r3, [r7, #4]
 801fb3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801fb42:	2b00      	cmp	r3, #0
 801fb44:	d00e      	beq.n	801fb64 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801fb46:	687b      	ldr	r3, [r7, #4]
 801fb48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fb4a:	2b00      	cmp	r3, #0
 801fb4c:	d10a      	bne.n	801fb64 <tcp_enqueue_flags+0x1b0>
 801fb4e:	687b      	ldr	r3, [r7, #4]
 801fb50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fb52:	2b00      	cmp	r3, #0
 801fb54:	d106      	bne.n	801fb64 <tcp_enqueue_flags+0x1b0>
 801fb56:	4b06      	ldr	r3, [pc, #24]	; (801fb70 <tcp_enqueue_flags+0x1bc>)
 801fb58:	f240 4266 	movw	r2, #1126	; 0x466
 801fb5c:	490b      	ldr	r1, [pc, #44]	; (801fb8c <tcp_enqueue_flags+0x1d8>)
 801fb5e:	4806      	ldr	r0, [pc, #24]	; (801fb78 <tcp_enqueue_flags+0x1c4>)
 801fb60:	f004 fa42 	bl	8023fe8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801fb64:	2300      	movs	r3, #0
}
 801fb66:	4618      	mov	r0, r3
 801fb68:	3720      	adds	r7, #32
 801fb6a:	46bd      	mov	sp, r7
 801fb6c:	bd80      	pop	{r7, pc}
 801fb6e:	bf00      	nop
 801fb70:	08027bf4 	.word	0x08027bf4
 801fb74:	08028034 	.word	0x08028034
 801fb78:	08027c64 	.word	0x08027c64
 801fb7c:	0802808c 	.word	0x0802808c
 801fb80:	080280ac 	.word	0x080280ac
 801fb84:	080280e8 	.word	0x080280e8
 801fb88:	08028100 	.word	0x08028100
 801fb8c:	0802812c 	.word	0x0802812c

0801fb90 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801fb90:	b5b0      	push	{r4, r5, r7, lr}
 801fb92:	b08a      	sub	sp, #40	; 0x28
 801fb94:	af00      	add	r7, sp, #0
 801fb96:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801fb98:	687b      	ldr	r3, [r7, #4]
 801fb9a:	2b00      	cmp	r3, #0
 801fb9c:	d106      	bne.n	801fbac <tcp_output+0x1c>
 801fb9e:	4ba0      	ldr	r3, [pc, #640]	; (801fe20 <tcp_output+0x290>)
 801fba0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801fba4:	499f      	ldr	r1, [pc, #636]	; (801fe24 <tcp_output+0x294>)
 801fba6:	48a0      	ldr	r0, [pc, #640]	; (801fe28 <tcp_output+0x298>)
 801fba8:	f004 fa1e 	bl	8023fe8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801fbac:	687b      	ldr	r3, [r7, #4]
 801fbae:	7d1b      	ldrb	r3, [r3, #20]
 801fbb0:	2b01      	cmp	r3, #1
 801fbb2:	d106      	bne.n	801fbc2 <tcp_output+0x32>
 801fbb4:	4b9a      	ldr	r3, [pc, #616]	; (801fe20 <tcp_output+0x290>)
 801fbb6:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801fbba:	499c      	ldr	r1, [pc, #624]	; (801fe2c <tcp_output+0x29c>)
 801fbbc:	489a      	ldr	r0, [pc, #616]	; (801fe28 <tcp_output+0x298>)
 801fbbe:	f004 fa13 	bl	8023fe8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801fbc2:	4b9b      	ldr	r3, [pc, #620]	; (801fe30 <tcp_output+0x2a0>)
 801fbc4:	681b      	ldr	r3, [r3, #0]
 801fbc6:	687a      	ldr	r2, [r7, #4]
 801fbc8:	429a      	cmp	r2, r3
 801fbca:	d101      	bne.n	801fbd0 <tcp_output+0x40>
    return ERR_OK;
 801fbcc:	2300      	movs	r3, #0
 801fbce:	e1d2      	b.n	801ff76 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801fbd0:	687b      	ldr	r3, [r7, #4]
 801fbd2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801fbd6:	687b      	ldr	r3, [r7, #4]
 801fbd8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801fbdc:	429a      	cmp	r2, r3
 801fbde:	d203      	bcs.n	801fbe8 <tcp_output+0x58>
 801fbe0:	687b      	ldr	r3, [r7, #4]
 801fbe2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801fbe6:	e002      	b.n	801fbee <tcp_output+0x5e>
 801fbe8:	687b      	ldr	r3, [r7, #4]
 801fbea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801fbee:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801fbf0:	687b      	ldr	r3, [r7, #4]
 801fbf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fbf4:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801fbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbf8:	2b00      	cmp	r3, #0
 801fbfa:	d10b      	bne.n	801fc14 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801fbfc:	687b      	ldr	r3, [r7, #4]
 801fbfe:	8b5b      	ldrh	r3, [r3, #26]
 801fc00:	f003 0302 	and.w	r3, r3, #2
 801fc04:	2b00      	cmp	r3, #0
 801fc06:	f000 81a9 	beq.w	801ff5c <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801fc0a:	6878      	ldr	r0, [r7, #4]
 801fc0c:	f000 fdd8 	bl	80207c0 <tcp_send_empty_ack>
 801fc10:	4603      	mov	r3, r0
 801fc12:	e1b0      	b.n	801ff76 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801fc14:	6879      	ldr	r1, [r7, #4]
 801fc16:	687b      	ldr	r3, [r7, #4]
 801fc18:	3304      	adds	r3, #4
 801fc1a:	461a      	mov	r2, r3
 801fc1c:	6878      	ldr	r0, [r7, #4]
 801fc1e:	f7ff f81d 	bl	801ec5c <tcp_route>
 801fc22:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801fc24:	697b      	ldr	r3, [r7, #20]
 801fc26:	2b00      	cmp	r3, #0
 801fc28:	d102      	bne.n	801fc30 <tcp_output+0xa0>
    return ERR_RTE;
 801fc2a:	f06f 0303 	mvn.w	r3, #3
 801fc2e:	e1a2      	b.n	801ff76 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801fc30:	687b      	ldr	r3, [r7, #4]
 801fc32:	2b00      	cmp	r3, #0
 801fc34:	d003      	beq.n	801fc3e <tcp_output+0xae>
 801fc36:	687b      	ldr	r3, [r7, #4]
 801fc38:	681b      	ldr	r3, [r3, #0]
 801fc3a:	2b00      	cmp	r3, #0
 801fc3c:	d111      	bne.n	801fc62 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801fc3e:	697b      	ldr	r3, [r7, #20]
 801fc40:	2b00      	cmp	r3, #0
 801fc42:	d002      	beq.n	801fc4a <tcp_output+0xba>
 801fc44:	697b      	ldr	r3, [r7, #20]
 801fc46:	3304      	adds	r3, #4
 801fc48:	e000      	b.n	801fc4c <tcp_output+0xbc>
 801fc4a:	2300      	movs	r3, #0
 801fc4c:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801fc4e:	693b      	ldr	r3, [r7, #16]
 801fc50:	2b00      	cmp	r3, #0
 801fc52:	d102      	bne.n	801fc5a <tcp_output+0xca>
      return ERR_RTE;
 801fc54:	f06f 0303 	mvn.w	r3, #3
 801fc58:	e18d      	b.n	801ff76 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801fc5a:	693b      	ldr	r3, [r7, #16]
 801fc5c:	681a      	ldr	r2, [r3, #0]
 801fc5e:	687b      	ldr	r3, [r7, #4]
 801fc60:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801fc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc64:	68db      	ldr	r3, [r3, #12]
 801fc66:	685b      	ldr	r3, [r3, #4]
 801fc68:	4618      	mov	r0, r3
 801fc6a:	f7f4 f8b0 	bl	8013dce <lwip_htonl>
 801fc6e:	4602      	mov	r2, r0
 801fc70:	687b      	ldr	r3, [r7, #4]
 801fc72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fc74:	1ad3      	subs	r3, r2, r3
 801fc76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fc78:	8912      	ldrh	r2, [r2, #8]
 801fc7a:	4413      	add	r3, r2
 801fc7c:	69ba      	ldr	r2, [r7, #24]
 801fc7e:	429a      	cmp	r2, r3
 801fc80:	d227      	bcs.n	801fcd2 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801fc82:	687b      	ldr	r3, [r7, #4]
 801fc84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801fc88:	461a      	mov	r2, r3
 801fc8a:	69bb      	ldr	r3, [r7, #24]
 801fc8c:	4293      	cmp	r3, r2
 801fc8e:	d114      	bne.n	801fcba <tcp_output+0x12a>
 801fc90:	687b      	ldr	r3, [r7, #4]
 801fc92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fc94:	2b00      	cmp	r3, #0
 801fc96:	d110      	bne.n	801fcba <tcp_output+0x12a>
 801fc98:	687b      	ldr	r3, [r7, #4]
 801fc9a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801fc9e:	2b00      	cmp	r3, #0
 801fca0:	d10b      	bne.n	801fcba <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 801fca2:	687b      	ldr	r3, [r7, #4]
 801fca4:	2200      	movs	r2, #0
 801fca6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801fcaa:	687b      	ldr	r3, [r7, #4]
 801fcac:	2201      	movs	r2, #1
 801fcae:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801fcb2:	687b      	ldr	r3, [r7, #4]
 801fcb4:	2200      	movs	r2, #0
 801fcb6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801fcba:	687b      	ldr	r3, [r7, #4]
 801fcbc:	8b5b      	ldrh	r3, [r3, #26]
 801fcbe:	f003 0302 	and.w	r3, r3, #2
 801fcc2:	2b00      	cmp	r3, #0
 801fcc4:	f000 814c 	beq.w	801ff60 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 801fcc8:	6878      	ldr	r0, [r7, #4]
 801fcca:	f000 fd79 	bl	80207c0 <tcp_send_empty_ack>
 801fcce:	4603      	mov	r3, r0
 801fcd0:	e151      	b.n	801ff76 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801fcd2:	687b      	ldr	r3, [r7, #4]
 801fcd4:	2200      	movs	r2, #0
 801fcd6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801fcda:	687b      	ldr	r3, [r7, #4]
 801fcdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fcde:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801fce0:	6a3b      	ldr	r3, [r7, #32]
 801fce2:	2b00      	cmp	r3, #0
 801fce4:	f000 811b 	beq.w	801ff1e <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 801fce8:	e002      	b.n	801fcf0 <tcp_output+0x160>
 801fcea:	6a3b      	ldr	r3, [r7, #32]
 801fcec:	681b      	ldr	r3, [r3, #0]
 801fcee:	623b      	str	r3, [r7, #32]
 801fcf0:	6a3b      	ldr	r3, [r7, #32]
 801fcf2:	681b      	ldr	r3, [r3, #0]
 801fcf4:	2b00      	cmp	r3, #0
 801fcf6:	d1f8      	bne.n	801fcea <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801fcf8:	e111      	b.n	801ff1e <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801fcfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fcfc:	68db      	ldr	r3, [r3, #12]
 801fcfe:	899b      	ldrh	r3, [r3, #12]
 801fd00:	b29b      	uxth	r3, r3
 801fd02:	4618      	mov	r0, r3
 801fd04:	f7f4 f84e 	bl	8013da4 <lwip_htons>
 801fd08:	4603      	mov	r3, r0
 801fd0a:	b2db      	uxtb	r3, r3
 801fd0c:	f003 0304 	and.w	r3, r3, #4
 801fd10:	2b00      	cmp	r3, #0
 801fd12:	d006      	beq.n	801fd22 <tcp_output+0x192>
 801fd14:	4b42      	ldr	r3, [pc, #264]	; (801fe20 <tcp_output+0x290>)
 801fd16:	f240 5237 	movw	r2, #1335	; 0x537
 801fd1a:	4946      	ldr	r1, [pc, #280]	; (801fe34 <tcp_output+0x2a4>)
 801fd1c:	4842      	ldr	r0, [pc, #264]	; (801fe28 <tcp_output+0x298>)
 801fd1e:	f004 f963 	bl	8023fe8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801fd22:	687b      	ldr	r3, [r7, #4]
 801fd24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fd26:	2b00      	cmp	r3, #0
 801fd28:	d01f      	beq.n	801fd6a <tcp_output+0x1da>
 801fd2a:	687b      	ldr	r3, [r7, #4]
 801fd2c:	8b5b      	ldrh	r3, [r3, #26]
 801fd2e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801fd32:	2b00      	cmp	r3, #0
 801fd34:	d119      	bne.n	801fd6a <tcp_output+0x1da>
 801fd36:	687b      	ldr	r3, [r7, #4]
 801fd38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fd3a:	2b00      	cmp	r3, #0
 801fd3c:	d00b      	beq.n	801fd56 <tcp_output+0x1c6>
 801fd3e:	687b      	ldr	r3, [r7, #4]
 801fd40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fd42:	681b      	ldr	r3, [r3, #0]
 801fd44:	2b00      	cmp	r3, #0
 801fd46:	d110      	bne.n	801fd6a <tcp_output+0x1da>
 801fd48:	687b      	ldr	r3, [r7, #4]
 801fd4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801fd4c:	891a      	ldrh	r2, [r3, #8]
 801fd4e:	687b      	ldr	r3, [r7, #4]
 801fd50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801fd52:	429a      	cmp	r2, r3
 801fd54:	d209      	bcs.n	801fd6a <tcp_output+0x1da>
 801fd56:	687b      	ldr	r3, [r7, #4]
 801fd58:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801fd5c:	2b00      	cmp	r3, #0
 801fd5e:	d004      	beq.n	801fd6a <tcp_output+0x1da>
 801fd60:	687b      	ldr	r3, [r7, #4]
 801fd62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801fd66:	2b08      	cmp	r3, #8
 801fd68:	d901      	bls.n	801fd6e <tcp_output+0x1de>
 801fd6a:	2301      	movs	r3, #1
 801fd6c:	e000      	b.n	801fd70 <tcp_output+0x1e0>
 801fd6e:	2300      	movs	r3, #0
 801fd70:	2b00      	cmp	r3, #0
 801fd72:	d106      	bne.n	801fd82 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801fd74:	687b      	ldr	r3, [r7, #4]
 801fd76:	8b5b      	ldrh	r3, [r3, #26]
 801fd78:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801fd7c:	2b00      	cmp	r3, #0
 801fd7e:	f000 80e3 	beq.w	801ff48 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801fd82:	687b      	ldr	r3, [r7, #4]
 801fd84:	7d1b      	ldrb	r3, [r3, #20]
 801fd86:	2b02      	cmp	r3, #2
 801fd88:	d00d      	beq.n	801fda6 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801fd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd8c:	68db      	ldr	r3, [r3, #12]
 801fd8e:	899b      	ldrh	r3, [r3, #12]
 801fd90:	b29c      	uxth	r4, r3
 801fd92:	2010      	movs	r0, #16
 801fd94:	f7f4 f806 	bl	8013da4 <lwip_htons>
 801fd98:	4603      	mov	r3, r0
 801fd9a:	461a      	mov	r2, r3
 801fd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd9e:	68db      	ldr	r3, [r3, #12]
 801fda0:	4322      	orrs	r2, r4
 801fda2:	b292      	uxth	r2, r2
 801fda4:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801fda6:	697a      	ldr	r2, [r7, #20]
 801fda8:	6879      	ldr	r1, [r7, #4]
 801fdaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801fdac:	f000 f908 	bl	801ffc0 <tcp_output_segment>
 801fdb0:	4603      	mov	r3, r0
 801fdb2:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801fdb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801fdb8:	2b00      	cmp	r3, #0
 801fdba:	d009      	beq.n	801fdd0 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801fdbc:	687b      	ldr	r3, [r7, #4]
 801fdbe:	8b5b      	ldrh	r3, [r3, #26]
 801fdc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fdc4:	b29a      	uxth	r2, r3
 801fdc6:	687b      	ldr	r3, [r7, #4]
 801fdc8:	835a      	strh	r2, [r3, #26]
      return err;
 801fdca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801fdce:	e0d2      	b.n	801ff76 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801fdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fdd2:	681a      	ldr	r2, [r3, #0]
 801fdd4:	687b      	ldr	r3, [r7, #4]
 801fdd6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801fdd8:	687b      	ldr	r3, [r7, #4]
 801fdda:	7d1b      	ldrb	r3, [r3, #20]
 801fddc:	2b02      	cmp	r3, #2
 801fdde:	d006      	beq.n	801fdee <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801fde0:	687b      	ldr	r3, [r7, #4]
 801fde2:	8b5b      	ldrh	r3, [r3, #26]
 801fde4:	f023 0303 	bic.w	r3, r3, #3
 801fde8:	b29a      	uxth	r2, r3
 801fdea:	687b      	ldr	r3, [r7, #4]
 801fdec:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801fdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fdf0:	68db      	ldr	r3, [r3, #12]
 801fdf2:	685b      	ldr	r3, [r3, #4]
 801fdf4:	4618      	mov	r0, r3
 801fdf6:	f7f3 ffea 	bl	8013dce <lwip_htonl>
 801fdfa:	4604      	mov	r4, r0
 801fdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fdfe:	891b      	ldrh	r3, [r3, #8]
 801fe00:	461d      	mov	r5, r3
 801fe02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe04:	68db      	ldr	r3, [r3, #12]
 801fe06:	899b      	ldrh	r3, [r3, #12]
 801fe08:	b29b      	uxth	r3, r3
 801fe0a:	4618      	mov	r0, r3
 801fe0c:	f7f3 ffca 	bl	8013da4 <lwip_htons>
 801fe10:	4603      	mov	r3, r0
 801fe12:	b2db      	uxtb	r3, r3
 801fe14:	f003 0303 	and.w	r3, r3, #3
 801fe18:	2b00      	cmp	r3, #0
 801fe1a:	d00d      	beq.n	801fe38 <tcp_output+0x2a8>
 801fe1c:	2301      	movs	r3, #1
 801fe1e:	e00c      	b.n	801fe3a <tcp_output+0x2aa>
 801fe20:	08027bf4 	.word	0x08027bf4
 801fe24:	08028154 	.word	0x08028154
 801fe28:	08027c64 	.word	0x08027c64
 801fe2c:	0802816c 	.word	0x0802816c
 801fe30:	20011830 	.word	0x20011830
 801fe34:	08028194 	.word	0x08028194
 801fe38:	2300      	movs	r3, #0
 801fe3a:	442b      	add	r3, r5
 801fe3c:	4423      	add	r3, r4
 801fe3e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801fe40:	687b      	ldr	r3, [r7, #4]
 801fe42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801fe44:	68bb      	ldr	r3, [r7, #8]
 801fe46:	1ad3      	subs	r3, r2, r3
 801fe48:	2b00      	cmp	r3, #0
 801fe4a:	da02      	bge.n	801fe52 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 801fe4c:	687b      	ldr	r3, [r7, #4]
 801fe4e:	68ba      	ldr	r2, [r7, #8]
 801fe50:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801fe52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe54:	891b      	ldrh	r3, [r3, #8]
 801fe56:	461c      	mov	r4, r3
 801fe58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe5a:	68db      	ldr	r3, [r3, #12]
 801fe5c:	899b      	ldrh	r3, [r3, #12]
 801fe5e:	b29b      	uxth	r3, r3
 801fe60:	4618      	mov	r0, r3
 801fe62:	f7f3 ff9f 	bl	8013da4 <lwip_htons>
 801fe66:	4603      	mov	r3, r0
 801fe68:	b2db      	uxtb	r3, r3
 801fe6a:	f003 0303 	and.w	r3, r3, #3
 801fe6e:	2b00      	cmp	r3, #0
 801fe70:	d001      	beq.n	801fe76 <tcp_output+0x2e6>
 801fe72:	2301      	movs	r3, #1
 801fe74:	e000      	b.n	801fe78 <tcp_output+0x2e8>
 801fe76:	2300      	movs	r3, #0
 801fe78:	4423      	add	r3, r4
 801fe7a:	2b00      	cmp	r3, #0
 801fe7c:	d049      	beq.n	801ff12 <tcp_output+0x382>
      seg->next = NULL;
 801fe7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe80:	2200      	movs	r2, #0
 801fe82:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801fe84:	687b      	ldr	r3, [r7, #4]
 801fe86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801fe88:	2b00      	cmp	r3, #0
 801fe8a:	d105      	bne.n	801fe98 <tcp_output+0x308>
        pcb->unacked = seg;
 801fe8c:	687b      	ldr	r3, [r7, #4]
 801fe8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fe90:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801fe92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe94:	623b      	str	r3, [r7, #32]
 801fe96:	e03f      	b.n	801ff18 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801fe98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe9a:	68db      	ldr	r3, [r3, #12]
 801fe9c:	685b      	ldr	r3, [r3, #4]
 801fe9e:	4618      	mov	r0, r3
 801fea0:	f7f3 ff95 	bl	8013dce <lwip_htonl>
 801fea4:	4604      	mov	r4, r0
 801fea6:	6a3b      	ldr	r3, [r7, #32]
 801fea8:	68db      	ldr	r3, [r3, #12]
 801feaa:	685b      	ldr	r3, [r3, #4]
 801feac:	4618      	mov	r0, r3
 801feae:	f7f3 ff8e 	bl	8013dce <lwip_htonl>
 801feb2:	4603      	mov	r3, r0
 801feb4:	1ae3      	subs	r3, r4, r3
 801feb6:	2b00      	cmp	r3, #0
 801feb8:	da24      	bge.n	801ff04 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801feba:	687b      	ldr	r3, [r7, #4]
 801febc:	3370      	adds	r3, #112	; 0x70
 801febe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801fec0:	e002      	b.n	801fec8 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801fec2:	69fb      	ldr	r3, [r7, #28]
 801fec4:	681b      	ldr	r3, [r3, #0]
 801fec6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801fec8:	69fb      	ldr	r3, [r7, #28]
 801feca:	681b      	ldr	r3, [r3, #0]
 801fecc:	2b00      	cmp	r3, #0
 801fece:	d011      	beq.n	801fef4 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801fed0:	69fb      	ldr	r3, [r7, #28]
 801fed2:	681b      	ldr	r3, [r3, #0]
 801fed4:	68db      	ldr	r3, [r3, #12]
 801fed6:	685b      	ldr	r3, [r3, #4]
 801fed8:	4618      	mov	r0, r3
 801feda:	f7f3 ff78 	bl	8013dce <lwip_htonl>
 801fede:	4604      	mov	r4, r0
 801fee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fee2:	68db      	ldr	r3, [r3, #12]
 801fee4:	685b      	ldr	r3, [r3, #4]
 801fee6:	4618      	mov	r0, r3
 801fee8:	f7f3 ff71 	bl	8013dce <lwip_htonl>
 801feec:	4603      	mov	r3, r0
 801feee:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801fef0:	2b00      	cmp	r3, #0
 801fef2:	dbe6      	blt.n	801fec2 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 801fef4:	69fb      	ldr	r3, [r7, #28]
 801fef6:	681a      	ldr	r2, [r3, #0]
 801fef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fefa:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801fefc:	69fb      	ldr	r3, [r7, #28]
 801fefe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ff00:	601a      	str	r2, [r3, #0]
 801ff02:	e009      	b.n	801ff18 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801ff04:	6a3b      	ldr	r3, [r7, #32]
 801ff06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ff08:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801ff0a:	6a3b      	ldr	r3, [r7, #32]
 801ff0c:	681b      	ldr	r3, [r3, #0]
 801ff0e:	623b      	str	r3, [r7, #32]
 801ff10:	e002      	b.n	801ff18 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801ff12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ff14:	f7fb ff1a 	bl	801bd4c <tcp_seg_free>
    }
    seg = pcb->unsent;
 801ff18:	687b      	ldr	r3, [r7, #4]
 801ff1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ff1c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801ff1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ff20:	2b00      	cmp	r3, #0
 801ff22:	d012      	beq.n	801ff4a <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801ff24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ff26:	68db      	ldr	r3, [r3, #12]
 801ff28:	685b      	ldr	r3, [r3, #4]
 801ff2a:	4618      	mov	r0, r3
 801ff2c:	f7f3 ff4f 	bl	8013dce <lwip_htonl>
 801ff30:	4602      	mov	r2, r0
 801ff32:	687b      	ldr	r3, [r7, #4]
 801ff34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ff36:	1ad3      	subs	r3, r2, r3
 801ff38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ff3a:	8912      	ldrh	r2, [r2, #8]
 801ff3c:	4413      	add	r3, r2
  while (seg != NULL &&
 801ff3e:	69ba      	ldr	r2, [r7, #24]
 801ff40:	429a      	cmp	r2, r3
 801ff42:	f4bf aeda 	bcs.w	801fcfa <tcp_output+0x16a>
 801ff46:	e000      	b.n	801ff4a <tcp_output+0x3ba>
      break;
 801ff48:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801ff4a:	687b      	ldr	r3, [r7, #4]
 801ff4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ff4e:	2b00      	cmp	r3, #0
 801ff50:	d108      	bne.n	801ff64 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801ff52:	687b      	ldr	r3, [r7, #4]
 801ff54:	2200      	movs	r2, #0
 801ff56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801ff5a:	e004      	b.n	801ff66 <tcp_output+0x3d6>
    goto output_done;
 801ff5c:	bf00      	nop
 801ff5e:	e002      	b.n	801ff66 <tcp_output+0x3d6>
    goto output_done;
 801ff60:	bf00      	nop
 801ff62:	e000      	b.n	801ff66 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801ff64:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801ff66:	687b      	ldr	r3, [r7, #4]
 801ff68:	8b5b      	ldrh	r3, [r3, #26]
 801ff6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801ff6e:	b29a      	uxth	r2, r3
 801ff70:	687b      	ldr	r3, [r7, #4]
 801ff72:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801ff74:	2300      	movs	r3, #0
}
 801ff76:	4618      	mov	r0, r3
 801ff78:	3728      	adds	r7, #40	; 0x28
 801ff7a:	46bd      	mov	sp, r7
 801ff7c:	bdb0      	pop	{r4, r5, r7, pc}
 801ff7e:	bf00      	nop

0801ff80 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801ff80:	b580      	push	{r7, lr}
 801ff82:	b082      	sub	sp, #8
 801ff84:	af00      	add	r7, sp, #0
 801ff86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801ff88:	687b      	ldr	r3, [r7, #4]
 801ff8a:	2b00      	cmp	r3, #0
 801ff8c:	d106      	bne.n	801ff9c <tcp_output_segment_busy+0x1c>
 801ff8e:	4b09      	ldr	r3, [pc, #36]	; (801ffb4 <tcp_output_segment_busy+0x34>)
 801ff90:	f240 529a 	movw	r2, #1434	; 0x59a
 801ff94:	4908      	ldr	r1, [pc, #32]	; (801ffb8 <tcp_output_segment_busy+0x38>)
 801ff96:	4809      	ldr	r0, [pc, #36]	; (801ffbc <tcp_output_segment_busy+0x3c>)
 801ff98:	f004 f826 	bl	8023fe8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801ff9c:	687b      	ldr	r3, [r7, #4]
 801ff9e:	685b      	ldr	r3, [r3, #4]
 801ffa0:	7b9b      	ldrb	r3, [r3, #14]
 801ffa2:	2b01      	cmp	r3, #1
 801ffa4:	d001      	beq.n	801ffaa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801ffa6:	2301      	movs	r3, #1
 801ffa8:	e000      	b.n	801ffac <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801ffaa:	2300      	movs	r3, #0
}
 801ffac:	4618      	mov	r0, r3
 801ffae:	3708      	adds	r7, #8
 801ffb0:	46bd      	mov	sp, r7
 801ffb2:	bd80      	pop	{r7, pc}
 801ffb4:	08027bf4 	.word	0x08027bf4
 801ffb8:	080281ac 	.word	0x080281ac
 801ffbc:	08027c64 	.word	0x08027c64

0801ffc0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801ffc0:	b5b0      	push	{r4, r5, r7, lr}
 801ffc2:	b08c      	sub	sp, #48	; 0x30
 801ffc4:	af04      	add	r7, sp, #16
 801ffc6:	60f8      	str	r0, [r7, #12]
 801ffc8:	60b9      	str	r1, [r7, #8]
 801ffca:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801ffcc:	68fb      	ldr	r3, [r7, #12]
 801ffce:	2b00      	cmp	r3, #0
 801ffd0:	d106      	bne.n	801ffe0 <tcp_output_segment+0x20>
 801ffd2:	4b64      	ldr	r3, [pc, #400]	; (8020164 <tcp_output_segment+0x1a4>)
 801ffd4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801ffd8:	4963      	ldr	r1, [pc, #396]	; (8020168 <tcp_output_segment+0x1a8>)
 801ffda:	4864      	ldr	r0, [pc, #400]	; (802016c <tcp_output_segment+0x1ac>)
 801ffdc:	f004 f804 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801ffe0:	68bb      	ldr	r3, [r7, #8]
 801ffe2:	2b00      	cmp	r3, #0
 801ffe4:	d106      	bne.n	801fff4 <tcp_output_segment+0x34>
 801ffe6:	4b5f      	ldr	r3, [pc, #380]	; (8020164 <tcp_output_segment+0x1a4>)
 801ffe8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801ffec:	4960      	ldr	r1, [pc, #384]	; (8020170 <tcp_output_segment+0x1b0>)
 801ffee:	485f      	ldr	r0, [pc, #380]	; (802016c <tcp_output_segment+0x1ac>)
 801fff0:	f003 fffa 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801fff4:	687b      	ldr	r3, [r7, #4]
 801fff6:	2b00      	cmp	r3, #0
 801fff8:	d106      	bne.n	8020008 <tcp_output_segment+0x48>
 801fffa:	4b5a      	ldr	r3, [pc, #360]	; (8020164 <tcp_output_segment+0x1a4>)
 801fffc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8020000:	495c      	ldr	r1, [pc, #368]	; (8020174 <tcp_output_segment+0x1b4>)
 8020002:	485a      	ldr	r0, [pc, #360]	; (802016c <tcp_output_segment+0x1ac>)
 8020004:	f003 fff0 	bl	8023fe8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8020008:	68f8      	ldr	r0, [r7, #12]
 802000a:	f7ff ffb9 	bl	801ff80 <tcp_output_segment_busy>
 802000e:	4603      	mov	r3, r0
 8020010:	2b00      	cmp	r3, #0
 8020012:	d001      	beq.n	8020018 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8020014:	2300      	movs	r3, #0
 8020016:	e0a0      	b.n	802015a <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8020018:	68bb      	ldr	r3, [r7, #8]
 802001a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802001c:	68fb      	ldr	r3, [r7, #12]
 802001e:	68dc      	ldr	r4, [r3, #12]
 8020020:	4610      	mov	r0, r2
 8020022:	f7f3 fed4 	bl	8013dce <lwip_htonl>
 8020026:	4603      	mov	r3, r0
 8020028:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 802002a:	68bb      	ldr	r3, [r7, #8]
 802002c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 802002e:	68fb      	ldr	r3, [r7, #12]
 8020030:	68dc      	ldr	r4, [r3, #12]
 8020032:	4610      	mov	r0, r2
 8020034:	f7f3 feb6 	bl	8013da4 <lwip_htons>
 8020038:	4603      	mov	r3, r0
 802003a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 802003c:	68bb      	ldr	r3, [r7, #8]
 802003e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020040:	68ba      	ldr	r2, [r7, #8]
 8020042:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8020044:	441a      	add	r2, r3
 8020046:	68bb      	ldr	r3, [r7, #8]
 8020048:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 802004a:	68fb      	ldr	r3, [r7, #12]
 802004c:	68db      	ldr	r3, [r3, #12]
 802004e:	3314      	adds	r3, #20
 8020050:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8020052:	68fb      	ldr	r3, [r7, #12]
 8020054:	7a9b      	ldrb	r3, [r3, #10]
 8020056:	f003 0301 	and.w	r3, r3, #1
 802005a:	2b00      	cmp	r3, #0
 802005c:	d015      	beq.n	802008a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 802005e:	68bb      	ldr	r3, [r7, #8]
 8020060:	3304      	adds	r3, #4
 8020062:	461a      	mov	r2, r3
 8020064:	6879      	ldr	r1, [r7, #4]
 8020066:	f44f 7006 	mov.w	r0, #536	; 0x218
 802006a:	f7fc fa33 	bl	801c4d4 <tcp_eff_send_mss_netif>
 802006e:	4603      	mov	r3, r0
 8020070:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8020072:	8b7b      	ldrh	r3, [r7, #26]
 8020074:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8020078:	4618      	mov	r0, r3
 802007a:	f7f3 fea8 	bl	8013dce <lwip_htonl>
 802007e:	4602      	mov	r2, r0
 8020080:	69fb      	ldr	r3, [r7, #28]
 8020082:	601a      	str	r2, [r3, #0]
    opts += 1;
 8020084:	69fb      	ldr	r3, [r7, #28]
 8020086:	3304      	adds	r3, #4
 8020088:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 802008a:	68bb      	ldr	r3, [r7, #8]
 802008c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8020090:	2b00      	cmp	r3, #0
 8020092:	da02      	bge.n	802009a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8020094:	68bb      	ldr	r3, [r7, #8]
 8020096:	2200      	movs	r2, #0
 8020098:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 802009a:	68bb      	ldr	r3, [r7, #8]
 802009c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802009e:	2b00      	cmp	r3, #0
 80200a0:	d10c      	bne.n	80200bc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80200a2:	4b35      	ldr	r3, [pc, #212]	; (8020178 <tcp_output_segment+0x1b8>)
 80200a4:	681a      	ldr	r2, [r3, #0]
 80200a6:	68bb      	ldr	r3, [r7, #8]
 80200a8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80200aa:	68fb      	ldr	r3, [r7, #12]
 80200ac:	68db      	ldr	r3, [r3, #12]
 80200ae:	685b      	ldr	r3, [r3, #4]
 80200b0:	4618      	mov	r0, r3
 80200b2:	f7f3 fe8c 	bl	8013dce <lwip_htonl>
 80200b6:	4602      	mov	r2, r0
 80200b8:	68bb      	ldr	r3, [r7, #8]
 80200ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80200bc:	68fb      	ldr	r3, [r7, #12]
 80200be:	68db      	ldr	r3, [r3, #12]
 80200c0:	461a      	mov	r2, r3
 80200c2:	68fb      	ldr	r3, [r7, #12]
 80200c4:	685b      	ldr	r3, [r3, #4]
 80200c6:	685b      	ldr	r3, [r3, #4]
 80200c8:	1ad3      	subs	r3, r2, r3
 80200ca:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80200cc:	68fb      	ldr	r3, [r7, #12]
 80200ce:	685b      	ldr	r3, [r3, #4]
 80200d0:	8959      	ldrh	r1, [r3, #10]
 80200d2:	68fb      	ldr	r3, [r7, #12]
 80200d4:	685b      	ldr	r3, [r3, #4]
 80200d6:	8b3a      	ldrh	r2, [r7, #24]
 80200d8:	1a8a      	subs	r2, r1, r2
 80200da:	b292      	uxth	r2, r2
 80200dc:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80200de:	68fb      	ldr	r3, [r7, #12]
 80200e0:	685b      	ldr	r3, [r3, #4]
 80200e2:	8919      	ldrh	r1, [r3, #8]
 80200e4:	68fb      	ldr	r3, [r7, #12]
 80200e6:	685b      	ldr	r3, [r3, #4]
 80200e8:	8b3a      	ldrh	r2, [r7, #24]
 80200ea:	1a8a      	subs	r2, r1, r2
 80200ec:	b292      	uxth	r2, r2
 80200ee:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80200f0:	68fb      	ldr	r3, [r7, #12]
 80200f2:	685b      	ldr	r3, [r3, #4]
 80200f4:	68fa      	ldr	r2, [r7, #12]
 80200f6:	68d2      	ldr	r2, [r2, #12]
 80200f8:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80200fa:	68fb      	ldr	r3, [r7, #12]
 80200fc:	68db      	ldr	r3, [r3, #12]
 80200fe:	2200      	movs	r2, #0
 8020100:	741a      	strb	r2, [r3, #16]
 8020102:	2200      	movs	r2, #0
 8020104:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8020106:	68fb      	ldr	r3, [r7, #12]
 8020108:	68db      	ldr	r3, [r3, #12]
 802010a:	f103 0214 	add.w	r2, r3, #20
 802010e:	68fb      	ldr	r3, [r7, #12]
 8020110:	7a9b      	ldrb	r3, [r3, #10]
 8020112:	009b      	lsls	r3, r3, #2
 8020114:	f003 0304 	and.w	r3, r3, #4
 8020118:	4413      	add	r3, r2
 802011a:	69fa      	ldr	r2, [r7, #28]
 802011c:	429a      	cmp	r2, r3
 802011e:	d006      	beq.n	802012e <tcp_output_segment+0x16e>
 8020120:	4b10      	ldr	r3, [pc, #64]	; (8020164 <tcp_output_segment+0x1a4>)
 8020122:	f240 621c 	movw	r2, #1564	; 0x61c
 8020126:	4915      	ldr	r1, [pc, #84]	; (802017c <tcp_output_segment+0x1bc>)
 8020128:	4810      	ldr	r0, [pc, #64]	; (802016c <tcp_output_segment+0x1ac>)
 802012a:	f003 ff5d 	bl	8023fe8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 802012e:	68fb      	ldr	r3, [r7, #12]
 8020130:	6858      	ldr	r0, [r3, #4]
 8020132:	68b9      	ldr	r1, [r7, #8]
 8020134:	68bb      	ldr	r3, [r7, #8]
 8020136:	1d1c      	adds	r4, r3, #4
 8020138:	68bb      	ldr	r3, [r7, #8]
 802013a:	7add      	ldrb	r5, [r3, #11]
 802013c:	68bb      	ldr	r3, [r7, #8]
 802013e:	7a9b      	ldrb	r3, [r3, #10]
 8020140:	687a      	ldr	r2, [r7, #4]
 8020142:	9202      	str	r2, [sp, #8]
 8020144:	2206      	movs	r2, #6
 8020146:	9201      	str	r2, [sp, #4]
 8020148:	9300      	str	r3, [sp, #0]
 802014a:	462b      	mov	r3, r5
 802014c:	4622      	mov	r2, r4
 802014e:	f7f7 fb93 	bl	8017878 <ip4_output_if>
 8020152:	4603      	mov	r3, r0
 8020154:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8020156:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 802015a:	4618      	mov	r0, r3
 802015c:	3720      	adds	r7, #32
 802015e:	46bd      	mov	sp, r7
 8020160:	bdb0      	pop	{r4, r5, r7, pc}
 8020162:	bf00      	nop
 8020164:	08027bf4 	.word	0x08027bf4
 8020168:	080281d4 	.word	0x080281d4
 802016c:	08027c64 	.word	0x08027c64
 8020170:	080281f4 	.word	0x080281f4
 8020174:	08028214 	.word	0x08028214
 8020178:	20011820 	.word	0x20011820
 802017c:	08028238 	.word	0x08028238

08020180 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8020180:	b5b0      	push	{r4, r5, r7, lr}
 8020182:	b084      	sub	sp, #16
 8020184:	af00      	add	r7, sp, #0
 8020186:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8020188:	687b      	ldr	r3, [r7, #4]
 802018a:	2b00      	cmp	r3, #0
 802018c:	d106      	bne.n	802019c <tcp_rexmit_rto_prepare+0x1c>
 802018e:	4b31      	ldr	r3, [pc, #196]	; (8020254 <tcp_rexmit_rto_prepare+0xd4>)
 8020190:	f240 6263 	movw	r2, #1635	; 0x663
 8020194:	4930      	ldr	r1, [pc, #192]	; (8020258 <tcp_rexmit_rto_prepare+0xd8>)
 8020196:	4831      	ldr	r0, [pc, #196]	; (802025c <tcp_rexmit_rto_prepare+0xdc>)
 8020198:	f003 ff26 	bl	8023fe8 <iprintf>

  if (pcb->unacked == NULL) {
 802019c:	687b      	ldr	r3, [r7, #4]
 802019e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80201a0:	2b00      	cmp	r3, #0
 80201a2:	d102      	bne.n	80201aa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80201a4:	f06f 0305 	mvn.w	r3, #5
 80201a8:	e050      	b.n	802024c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80201aa:	687b      	ldr	r3, [r7, #4]
 80201ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80201ae:	60fb      	str	r3, [r7, #12]
 80201b0:	e00b      	b.n	80201ca <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80201b2:	68f8      	ldr	r0, [r7, #12]
 80201b4:	f7ff fee4 	bl	801ff80 <tcp_output_segment_busy>
 80201b8:	4603      	mov	r3, r0
 80201ba:	2b00      	cmp	r3, #0
 80201bc:	d002      	beq.n	80201c4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80201be:	f06f 0305 	mvn.w	r3, #5
 80201c2:	e043      	b.n	802024c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80201c4:	68fb      	ldr	r3, [r7, #12]
 80201c6:	681b      	ldr	r3, [r3, #0]
 80201c8:	60fb      	str	r3, [r7, #12]
 80201ca:	68fb      	ldr	r3, [r7, #12]
 80201cc:	681b      	ldr	r3, [r3, #0]
 80201ce:	2b00      	cmp	r3, #0
 80201d0:	d1ef      	bne.n	80201b2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80201d2:	68f8      	ldr	r0, [r7, #12]
 80201d4:	f7ff fed4 	bl	801ff80 <tcp_output_segment_busy>
 80201d8:	4603      	mov	r3, r0
 80201da:	2b00      	cmp	r3, #0
 80201dc:	d002      	beq.n	80201e4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80201de:	f06f 0305 	mvn.w	r3, #5
 80201e2:	e033      	b.n	802024c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80201e4:	687b      	ldr	r3, [r7, #4]
 80201e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80201e8:	68fb      	ldr	r3, [r7, #12]
 80201ea:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80201ec:	687b      	ldr	r3, [r7, #4]
 80201ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80201f0:	687b      	ldr	r3, [r7, #4]
 80201f2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80201f4:	687b      	ldr	r3, [r7, #4]
 80201f6:	2200      	movs	r2, #0
 80201f8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80201fa:	687b      	ldr	r3, [r7, #4]
 80201fc:	8b5b      	ldrh	r3, [r3, #26]
 80201fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8020202:	b29a      	uxth	r2, r3
 8020204:	687b      	ldr	r3, [r7, #4]
 8020206:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8020208:	68fb      	ldr	r3, [r7, #12]
 802020a:	68db      	ldr	r3, [r3, #12]
 802020c:	685b      	ldr	r3, [r3, #4]
 802020e:	4618      	mov	r0, r3
 8020210:	f7f3 fddd 	bl	8013dce <lwip_htonl>
 8020214:	4604      	mov	r4, r0
 8020216:	68fb      	ldr	r3, [r7, #12]
 8020218:	891b      	ldrh	r3, [r3, #8]
 802021a:	461d      	mov	r5, r3
 802021c:	68fb      	ldr	r3, [r7, #12]
 802021e:	68db      	ldr	r3, [r3, #12]
 8020220:	899b      	ldrh	r3, [r3, #12]
 8020222:	b29b      	uxth	r3, r3
 8020224:	4618      	mov	r0, r3
 8020226:	f7f3 fdbd 	bl	8013da4 <lwip_htons>
 802022a:	4603      	mov	r3, r0
 802022c:	b2db      	uxtb	r3, r3
 802022e:	f003 0303 	and.w	r3, r3, #3
 8020232:	2b00      	cmp	r3, #0
 8020234:	d001      	beq.n	802023a <tcp_rexmit_rto_prepare+0xba>
 8020236:	2301      	movs	r3, #1
 8020238:	e000      	b.n	802023c <tcp_rexmit_rto_prepare+0xbc>
 802023a:	2300      	movs	r3, #0
 802023c:	442b      	add	r3, r5
 802023e:	18e2      	adds	r2, r4, r3
 8020240:	687b      	ldr	r3, [r7, #4]
 8020242:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8020244:	687b      	ldr	r3, [r7, #4]
 8020246:	2200      	movs	r2, #0
 8020248:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 802024a:	2300      	movs	r3, #0
}
 802024c:	4618      	mov	r0, r3
 802024e:	3710      	adds	r7, #16
 8020250:	46bd      	mov	sp, r7
 8020252:	bdb0      	pop	{r4, r5, r7, pc}
 8020254:	08027bf4 	.word	0x08027bf4
 8020258:	0802824c 	.word	0x0802824c
 802025c:	08027c64 	.word	0x08027c64

08020260 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8020260:	b580      	push	{r7, lr}
 8020262:	b082      	sub	sp, #8
 8020264:	af00      	add	r7, sp, #0
 8020266:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8020268:	687b      	ldr	r3, [r7, #4]
 802026a:	2b00      	cmp	r3, #0
 802026c:	d106      	bne.n	802027c <tcp_rexmit_rto_commit+0x1c>
 802026e:	4b0d      	ldr	r3, [pc, #52]	; (80202a4 <tcp_rexmit_rto_commit+0x44>)
 8020270:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8020274:	490c      	ldr	r1, [pc, #48]	; (80202a8 <tcp_rexmit_rto_commit+0x48>)
 8020276:	480d      	ldr	r0, [pc, #52]	; (80202ac <tcp_rexmit_rto_commit+0x4c>)
 8020278:	f003 feb6 	bl	8023fe8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 802027c:	687b      	ldr	r3, [r7, #4]
 802027e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8020282:	2bff      	cmp	r3, #255	; 0xff
 8020284:	d007      	beq.n	8020296 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8020286:	687b      	ldr	r3, [r7, #4]
 8020288:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802028c:	3301      	adds	r3, #1
 802028e:	b2da      	uxtb	r2, r3
 8020290:	687b      	ldr	r3, [r7, #4]
 8020292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8020296:	6878      	ldr	r0, [r7, #4]
 8020298:	f7ff fc7a 	bl	801fb90 <tcp_output>
}
 802029c:	bf00      	nop
 802029e:	3708      	adds	r7, #8
 80202a0:	46bd      	mov	sp, r7
 80202a2:	bd80      	pop	{r7, pc}
 80202a4:	08027bf4 	.word	0x08027bf4
 80202a8:	08028270 	.word	0x08028270
 80202ac:	08027c64 	.word	0x08027c64

080202b0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80202b0:	b580      	push	{r7, lr}
 80202b2:	b082      	sub	sp, #8
 80202b4:	af00      	add	r7, sp, #0
 80202b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80202b8:	687b      	ldr	r3, [r7, #4]
 80202ba:	2b00      	cmp	r3, #0
 80202bc:	d106      	bne.n	80202cc <tcp_rexmit_rto+0x1c>
 80202be:	4b0a      	ldr	r3, [pc, #40]	; (80202e8 <tcp_rexmit_rto+0x38>)
 80202c0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80202c4:	4909      	ldr	r1, [pc, #36]	; (80202ec <tcp_rexmit_rto+0x3c>)
 80202c6:	480a      	ldr	r0, [pc, #40]	; (80202f0 <tcp_rexmit_rto+0x40>)
 80202c8:	f003 fe8e 	bl	8023fe8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80202cc:	6878      	ldr	r0, [r7, #4]
 80202ce:	f7ff ff57 	bl	8020180 <tcp_rexmit_rto_prepare>
 80202d2:	4603      	mov	r3, r0
 80202d4:	2b00      	cmp	r3, #0
 80202d6:	d102      	bne.n	80202de <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80202d8:	6878      	ldr	r0, [r7, #4]
 80202da:	f7ff ffc1 	bl	8020260 <tcp_rexmit_rto_commit>
  }
}
 80202de:	bf00      	nop
 80202e0:	3708      	adds	r7, #8
 80202e2:	46bd      	mov	sp, r7
 80202e4:	bd80      	pop	{r7, pc}
 80202e6:	bf00      	nop
 80202e8:	08027bf4 	.word	0x08027bf4
 80202ec:	08028294 	.word	0x08028294
 80202f0:	08027c64 	.word	0x08027c64

080202f4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80202f4:	b590      	push	{r4, r7, lr}
 80202f6:	b085      	sub	sp, #20
 80202f8:	af00      	add	r7, sp, #0
 80202fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80202fc:	687b      	ldr	r3, [r7, #4]
 80202fe:	2b00      	cmp	r3, #0
 8020300:	d106      	bne.n	8020310 <tcp_rexmit+0x1c>
 8020302:	4b2f      	ldr	r3, [pc, #188]	; (80203c0 <tcp_rexmit+0xcc>)
 8020304:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8020308:	492e      	ldr	r1, [pc, #184]	; (80203c4 <tcp_rexmit+0xd0>)
 802030a:	482f      	ldr	r0, [pc, #188]	; (80203c8 <tcp_rexmit+0xd4>)
 802030c:	f003 fe6c 	bl	8023fe8 <iprintf>

  if (pcb->unacked == NULL) {
 8020310:	687b      	ldr	r3, [r7, #4]
 8020312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020314:	2b00      	cmp	r3, #0
 8020316:	d102      	bne.n	802031e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8020318:	f06f 0305 	mvn.w	r3, #5
 802031c:	e04c      	b.n	80203b8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 802031e:	687b      	ldr	r3, [r7, #4]
 8020320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8020322:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8020324:	68b8      	ldr	r0, [r7, #8]
 8020326:	f7ff fe2b 	bl	801ff80 <tcp_output_segment_busy>
 802032a:	4603      	mov	r3, r0
 802032c:	2b00      	cmp	r3, #0
 802032e:	d002      	beq.n	8020336 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8020330:	f06f 0305 	mvn.w	r3, #5
 8020334:	e040      	b.n	80203b8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8020336:	68bb      	ldr	r3, [r7, #8]
 8020338:	681a      	ldr	r2, [r3, #0]
 802033a:	687b      	ldr	r3, [r7, #4]
 802033c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 802033e:	687b      	ldr	r3, [r7, #4]
 8020340:	336c      	adds	r3, #108	; 0x6c
 8020342:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8020344:	e002      	b.n	802034c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8020346:	68fb      	ldr	r3, [r7, #12]
 8020348:	681b      	ldr	r3, [r3, #0]
 802034a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 802034c:	68fb      	ldr	r3, [r7, #12]
 802034e:	681b      	ldr	r3, [r3, #0]
 8020350:	2b00      	cmp	r3, #0
 8020352:	d011      	beq.n	8020378 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8020354:	68fb      	ldr	r3, [r7, #12]
 8020356:	681b      	ldr	r3, [r3, #0]
 8020358:	68db      	ldr	r3, [r3, #12]
 802035a:	685b      	ldr	r3, [r3, #4]
 802035c:	4618      	mov	r0, r3
 802035e:	f7f3 fd36 	bl	8013dce <lwip_htonl>
 8020362:	4604      	mov	r4, r0
 8020364:	68bb      	ldr	r3, [r7, #8]
 8020366:	68db      	ldr	r3, [r3, #12]
 8020368:	685b      	ldr	r3, [r3, #4]
 802036a:	4618      	mov	r0, r3
 802036c:	f7f3 fd2f 	bl	8013dce <lwip_htonl>
 8020370:	4603      	mov	r3, r0
 8020372:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8020374:	2b00      	cmp	r3, #0
 8020376:	dbe6      	blt.n	8020346 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8020378:	68fb      	ldr	r3, [r7, #12]
 802037a:	681a      	ldr	r2, [r3, #0]
 802037c:	68bb      	ldr	r3, [r7, #8]
 802037e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8020380:	68fb      	ldr	r3, [r7, #12]
 8020382:	68ba      	ldr	r2, [r7, #8]
 8020384:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8020386:	68bb      	ldr	r3, [r7, #8]
 8020388:	681b      	ldr	r3, [r3, #0]
 802038a:	2b00      	cmp	r3, #0
 802038c:	d103      	bne.n	8020396 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 802038e:	687b      	ldr	r3, [r7, #4]
 8020390:	2200      	movs	r2, #0
 8020392:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8020396:	687b      	ldr	r3, [r7, #4]
 8020398:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 802039c:	2bff      	cmp	r3, #255	; 0xff
 802039e:	d007      	beq.n	80203b0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80203a0:	687b      	ldr	r3, [r7, #4]
 80203a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80203a6:	3301      	adds	r3, #1
 80203a8:	b2da      	uxtb	r2, r3
 80203aa:	687b      	ldr	r3, [r7, #4]
 80203ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80203b0:	687b      	ldr	r3, [r7, #4]
 80203b2:	2200      	movs	r2, #0
 80203b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80203b6:	2300      	movs	r3, #0
}
 80203b8:	4618      	mov	r0, r3
 80203ba:	3714      	adds	r7, #20
 80203bc:	46bd      	mov	sp, r7
 80203be:	bd90      	pop	{r4, r7, pc}
 80203c0:	08027bf4 	.word	0x08027bf4
 80203c4:	080282b0 	.word	0x080282b0
 80203c8:	08027c64 	.word	0x08027c64

080203cc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80203cc:	b580      	push	{r7, lr}
 80203ce:	b082      	sub	sp, #8
 80203d0:	af00      	add	r7, sp, #0
 80203d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80203d4:	687b      	ldr	r3, [r7, #4]
 80203d6:	2b00      	cmp	r3, #0
 80203d8:	d106      	bne.n	80203e8 <tcp_rexmit_fast+0x1c>
 80203da:	4b2f      	ldr	r3, [pc, #188]	; (8020498 <tcp_rexmit_fast+0xcc>)
 80203dc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80203e0:	492e      	ldr	r1, [pc, #184]	; (802049c <tcp_rexmit_fast+0xd0>)
 80203e2:	482f      	ldr	r0, [pc, #188]	; (80204a0 <tcp_rexmit_fast+0xd4>)
 80203e4:	f003 fe00 	bl	8023fe8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80203e8:	687b      	ldr	r3, [r7, #4]
 80203ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80203ec:	2b00      	cmp	r3, #0
 80203ee:	d04f      	beq.n	8020490 <tcp_rexmit_fast+0xc4>
 80203f0:	687b      	ldr	r3, [r7, #4]
 80203f2:	8b5b      	ldrh	r3, [r3, #26]
 80203f4:	f003 0304 	and.w	r3, r3, #4
 80203f8:	2b00      	cmp	r3, #0
 80203fa:	d149      	bne.n	8020490 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80203fc:	6878      	ldr	r0, [r7, #4]
 80203fe:	f7ff ff79 	bl	80202f4 <tcp_rexmit>
 8020402:	4603      	mov	r3, r0
 8020404:	2b00      	cmp	r3, #0
 8020406:	d143      	bne.n	8020490 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8020408:	687b      	ldr	r3, [r7, #4]
 802040a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 802040e:	687b      	ldr	r3, [r7, #4]
 8020410:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8020414:	429a      	cmp	r2, r3
 8020416:	d208      	bcs.n	802042a <tcp_rexmit_fast+0x5e>
 8020418:	687b      	ldr	r3, [r7, #4]
 802041a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 802041e:	2b00      	cmp	r3, #0
 8020420:	da00      	bge.n	8020424 <tcp_rexmit_fast+0x58>
 8020422:	3301      	adds	r3, #1
 8020424:	105b      	asrs	r3, r3, #1
 8020426:	b29b      	uxth	r3, r3
 8020428:	e007      	b.n	802043a <tcp_rexmit_fast+0x6e>
 802042a:	687b      	ldr	r3, [r7, #4]
 802042c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8020430:	2b00      	cmp	r3, #0
 8020432:	da00      	bge.n	8020436 <tcp_rexmit_fast+0x6a>
 8020434:	3301      	adds	r3, #1
 8020436:	105b      	asrs	r3, r3, #1
 8020438:	b29b      	uxth	r3, r3
 802043a:	687a      	ldr	r2, [r7, #4]
 802043c:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8020440:	687b      	ldr	r3, [r7, #4]
 8020442:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8020446:	461a      	mov	r2, r3
 8020448:	687b      	ldr	r3, [r7, #4]
 802044a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802044c:	005b      	lsls	r3, r3, #1
 802044e:	429a      	cmp	r2, r3
 8020450:	d206      	bcs.n	8020460 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8020452:	687b      	ldr	r3, [r7, #4]
 8020454:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8020456:	005b      	lsls	r3, r3, #1
 8020458:	b29a      	uxth	r2, r3
 802045a:	687b      	ldr	r3, [r7, #4]
 802045c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8020460:	687b      	ldr	r3, [r7, #4]
 8020462:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8020466:	687b      	ldr	r3, [r7, #4]
 8020468:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 802046a:	4619      	mov	r1, r3
 802046c:	0049      	lsls	r1, r1, #1
 802046e:	440b      	add	r3, r1
 8020470:	b29b      	uxth	r3, r3
 8020472:	4413      	add	r3, r2
 8020474:	b29a      	uxth	r2, r3
 8020476:	687b      	ldr	r3, [r7, #4]
 8020478:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 802047c:	687b      	ldr	r3, [r7, #4]
 802047e:	8b5b      	ldrh	r3, [r3, #26]
 8020480:	f043 0304 	orr.w	r3, r3, #4
 8020484:	b29a      	uxth	r2, r3
 8020486:	687b      	ldr	r3, [r7, #4]
 8020488:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 802048a:	687b      	ldr	r3, [r7, #4]
 802048c:	2200      	movs	r2, #0
 802048e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8020490:	bf00      	nop
 8020492:	3708      	adds	r7, #8
 8020494:	46bd      	mov	sp, r7
 8020496:	bd80      	pop	{r7, pc}
 8020498:	08027bf4 	.word	0x08027bf4
 802049c:	080282c8 	.word	0x080282c8
 80204a0:	08027c64 	.word	0x08027c64

080204a4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80204a4:	b580      	push	{r7, lr}
 80204a6:	b086      	sub	sp, #24
 80204a8:	af00      	add	r7, sp, #0
 80204aa:	60f8      	str	r0, [r7, #12]
 80204ac:	607b      	str	r3, [r7, #4]
 80204ae:	460b      	mov	r3, r1
 80204b0:	817b      	strh	r3, [r7, #10]
 80204b2:	4613      	mov	r3, r2
 80204b4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80204b6:	897a      	ldrh	r2, [r7, #10]
 80204b8:	893b      	ldrh	r3, [r7, #8]
 80204ba:	4413      	add	r3, r2
 80204bc:	b29b      	uxth	r3, r3
 80204be:	3314      	adds	r3, #20
 80204c0:	b29b      	uxth	r3, r3
 80204c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80204c6:	4619      	mov	r1, r3
 80204c8:	2022      	movs	r0, #34	; 0x22
 80204ca:	f7f9 f99d 	bl	8019808 <pbuf_alloc>
 80204ce:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80204d0:	697b      	ldr	r3, [r7, #20]
 80204d2:	2b00      	cmp	r3, #0
 80204d4:	d04e      	beq.n	8020574 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80204d6:	697b      	ldr	r3, [r7, #20]
 80204d8:	895b      	ldrh	r3, [r3, #10]
 80204da:	461a      	mov	r2, r3
 80204dc:	897b      	ldrh	r3, [r7, #10]
 80204de:	3314      	adds	r3, #20
 80204e0:	429a      	cmp	r2, r3
 80204e2:	da06      	bge.n	80204f2 <tcp_output_alloc_header_common+0x4e>
 80204e4:	4b26      	ldr	r3, [pc, #152]	; (8020580 <tcp_output_alloc_header_common+0xdc>)
 80204e6:	f240 7224 	movw	r2, #1828	; 0x724
 80204ea:	4926      	ldr	r1, [pc, #152]	; (8020584 <tcp_output_alloc_header_common+0xe0>)
 80204ec:	4826      	ldr	r0, [pc, #152]	; (8020588 <tcp_output_alloc_header_common+0xe4>)
 80204ee:	f003 fd7b 	bl	8023fe8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80204f2:	697b      	ldr	r3, [r7, #20]
 80204f4:	685b      	ldr	r3, [r3, #4]
 80204f6:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80204f8:	8c3b      	ldrh	r3, [r7, #32]
 80204fa:	4618      	mov	r0, r3
 80204fc:	f7f3 fc52 	bl	8013da4 <lwip_htons>
 8020500:	4603      	mov	r3, r0
 8020502:	461a      	mov	r2, r3
 8020504:	693b      	ldr	r3, [r7, #16]
 8020506:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8020508:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802050a:	4618      	mov	r0, r3
 802050c:	f7f3 fc4a 	bl	8013da4 <lwip_htons>
 8020510:	4603      	mov	r3, r0
 8020512:	461a      	mov	r2, r3
 8020514:	693b      	ldr	r3, [r7, #16]
 8020516:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8020518:	693b      	ldr	r3, [r7, #16]
 802051a:	687a      	ldr	r2, [r7, #4]
 802051c:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 802051e:	68f8      	ldr	r0, [r7, #12]
 8020520:	f7f3 fc55 	bl	8013dce <lwip_htonl>
 8020524:	4602      	mov	r2, r0
 8020526:	693b      	ldr	r3, [r7, #16]
 8020528:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 802052a:	897b      	ldrh	r3, [r7, #10]
 802052c:	089b      	lsrs	r3, r3, #2
 802052e:	b29b      	uxth	r3, r3
 8020530:	3305      	adds	r3, #5
 8020532:	b29b      	uxth	r3, r3
 8020534:	031b      	lsls	r3, r3, #12
 8020536:	b29a      	uxth	r2, r3
 8020538:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 802053c:	b29b      	uxth	r3, r3
 802053e:	4313      	orrs	r3, r2
 8020540:	b29b      	uxth	r3, r3
 8020542:	4618      	mov	r0, r3
 8020544:	f7f3 fc2e 	bl	8013da4 <lwip_htons>
 8020548:	4603      	mov	r3, r0
 802054a:	461a      	mov	r2, r3
 802054c:	693b      	ldr	r3, [r7, #16]
 802054e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8020550:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8020552:	4618      	mov	r0, r3
 8020554:	f7f3 fc26 	bl	8013da4 <lwip_htons>
 8020558:	4603      	mov	r3, r0
 802055a:	461a      	mov	r2, r3
 802055c:	693b      	ldr	r3, [r7, #16]
 802055e:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8020560:	693b      	ldr	r3, [r7, #16]
 8020562:	2200      	movs	r2, #0
 8020564:	741a      	strb	r2, [r3, #16]
 8020566:	2200      	movs	r2, #0
 8020568:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 802056a:	693b      	ldr	r3, [r7, #16]
 802056c:	2200      	movs	r2, #0
 802056e:	749a      	strb	r2, [r3, #18]
 8020570:	2200      	movs	r2, #0
 8020572:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8020574:	697b      	ldr	r3, [r7, #20]
}
 8020576:	4618      	mov	r0, r3
 8020578:	3718      	adds	r7, #24
 802057a:	46bd      	mov	sp, r7
 802057c:	bd80      	pop	{r7, pc}
 802057e:	bf00      	nop
 8020580:	08027bf4 	.word	0x08027bf4
 8020584:	080282e8 	.word	0x080282e8
 8020588:	08027c64 	.word	0x08027c64

0802058c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 802058c:	b5b0      	push	{r4, r5, r7, lr}
 802058e:	b08a      	sub	sp, #40	; 0x28
 8020590:	af04      	add	r7, sp, #16
 8020592:	60f8      	str	r0, [r7, #12]
 8020594:	607b      	str	r3, [r7, #4]
 8020596:	460b      	mov	r3, r1
 8020598:	817b      	strh	r3, [r7, #10]
 802059a:	4613      	mov	r3, r2
 802059c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 802059e:	68fb      	ldr	r3, [r7, #12]
 80205a0:	2b00      	cmp	r3, #0
 80205a2:	d106      	bne.n	80205b2 <tcp_output_alloc_header+0x26>
 80205a4:	4b15      	ldr	r3, [pc, #84]	; (80205fc <tcp_output_alloc_header+0x70>)
 80205a6:	f240 7242 	movw	r2, #1858	; 0x742
 80205aa:	4915      	ldr	r1, [pc, #84]	; (8020600 <tcp_output_alloc_header+0x74>)
 80205ac:	4815      	ldr	r0, [pc, #84]	; (8020604 <tcp_output_alloc_header+0x78>)
 80205ae:	f003 fd1b 	bl	8023fe8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80205b2:	68fb      	ldr	r3, [r7, #12]
 80205b4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80205b6:	68fb      	ldr	r3, [r7, #12]
 80205b8:	8adb      	ldrh	r3, [r3, #22]
 80205ba:	68fa      	ldr	r2, [r7, #12]
 80205bc:	8b12      	ldrh	r2, [r2, #24]
 80205be:	68f9      	ldr	r1, [r7, #12]
 80205c0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80205c2:	893d      	ldrh	r5, [r7, #8]
 80205c4:	897c      	ldrh	r4, [r7, #10]
 80205c6:	9103      	str	r1, [sp, #12]
 80205c8:	2110      	movs	r1, #16
 80205ca:	9102      	str	r1, [sp, #8]
 80205cc:	9201      	str	r2, [sp, #4]
 80205ce:	9300      	str	r3, [sp, #0]
 80205d0:	687b      	ldr	r3, [r7, #4]
 80205d2:	462a      	mov	r2, r5
 80205d4:	4621      	mov	r1, r4
 80205d6:	f7ff ff65 	bl	80204a4 <tcp_output_alloc_header_common>
 80205da:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80205dc:	697b      	ldr	r3, [r7, #20]
 80205de:	2b00      	cmp	r3, #0
 80205e0:	d006      	beq.n	80205f0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80205e2:	68fb      	ldr	r3, [r7, #12]
 80205e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80205e6:	68fa      	ldr	r2, [r7, #12]
 80205e8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80205ea:	441a      	add	r2, r3
 80205ec:	68fb      	ldr	r3, [r7, #12]
 80205ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80205f0:	697b      	ldr	r3, [r7, #20]
}
 80205f2:	4618      	mov	r0, r3
 80205f4:	3718      	adds	r7, #24
 80205f6:	46bd      	mov	sp, r7
 80205f8:	bdb0      	pop	{r4, r5, r7, pc}
 80205fa:	bf00      	nop
 80205fc:	08027bf4 	.word	0x08027bf4
 8020600:	08028318 	.word	0x08028318
 8020604:	08027c64 	.word	0x08027c64

08020608 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8020608:	b580      	push	{r7, lr}
 802060a:	b088      	sub	sp, #32
 802060c:	af00      	add	r7, sp, #0
 802060e:	60f8      	str	r0, [r7, #12]
 8020610:	60b9      	str	r1, [r7, #8]
 8020612:	4611      	mov	r1, r2
 8020614:	461a      	mov	r2, r3
 8020616:	460b      	mov	r3, r1
 8020618:	71fb      	strb	r3, [r7, #7]
 802061a:	4613      	mov	r3, r2
 802061c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 802061e:	2300      	movs	r3, #0
 8020620:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8020622:	68bb      	ldr	r3, [r7, #8]
 8020624:	2b00      	cmp	r3, #0
 8020626:	d106      	bne.n	8020636 <tcp_output_fill_options+0x2e>
 8020628:	4b13      	ldr	r3, [pc, #76]	; (8020678 <tcp_output_fill_options+0x70>)
 802062a:	f240 7256 	movw	r2, #1878	; 0x756
 802062e:	4913      	ldr	r1, [pc, #76]	; (802067c <tcp_output_fill_options+0x74>)
 8020630:	4813      	ldr	r0, [pc, #76]	; (8020680 <tcp_output_fill_options+0x78>)
 8020632:	f003 fcd9 	bl	8023fe8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8020636:	68bb      	ldr	r3, [r7, #8]
 8020638:	685b      	ldr	r3, [r3, #4]
 802063a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 802063c:	69bb      	ldr	r3, [r7, #24]
 802063e:	3314      	adds	r3, #20
 8020640:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8020642:	69bb      	ldr	r3, [r7, #24]
 8020644:	f103 0214 	add.w	r2, r3, #20
 8020648:	8bfb      	ldrh	r3, [r7, #30]
 802064a:	009b      	lsls	r3, r3, #2
 802064c:	4619      	mov	r1, r3
 802064e:	79fb      	ldrb	r3, [r7, #7]
 8020650:	009b      	lsls	r3, r3, #2
 8020652:	f003 0304 	and.w	r3, r3, #4
 8020656:	440b      	add	r3, r1
 8020658:	4413      	add	r3, r2
 802065a:	697a      	ldr	r2, [r7, #20]
 802065c:	429a      	cmp	r2, r3
 802065e:	d006      	beq.n	802066e <tcp_output_fill_options+0x66>
 8020660:	4b05      	ldr	r3, [pc, #20]	; (8020678 <tcp_output_fill_options+0x70>)
 8020662:	f240 7275 	movw	r2, #1909	; 0x775
 8020666:	4907      	ldr	r1, [pc, #28]	; (8020684 <tcp_output_fill_options+0x7c>)
 8020668:	4805      	ldr	r0, [pc, #20]	; (8020680 <tcp_output_fill_options+0x78>)
 802066a:	f003 fcbd 	bl	8023fe8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 802066e:	bf00      	nop
 8020670:	3720      	adds	r7, #32
 8020672:	46bd      	mov	sp, r7
 8020674:	bd80      	pop	{r7, pc}
 8020676:	bf00      	nop
 8020678:	08027bf4 	.word	0x08027bf4
 802067c:	08028340 	.word	0x08028340
 8020680:	08027c64 	.word	0x08027c64
 8020684:	08028238 	.word	0x08028238

08020688 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8020688:	b580      	push	{r7, lr}
 802068a:	b08a      	sub	sp, #40	; 0x28
 802068c:	af04      	add	r7, sp, #16
 802068e:	60f8      	str	r0, [r7, #12]
 8020690:	60b9      	str	r1, [r7, #8]
 8020692:	607a      	str	r2, [r7, #4]
 8020694:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8020696:	68bb      	ldr	r3, [r7, #8]
 8020698:	2b00      	cmp	r3, #0
 802069a:	d106      	bne.n	80206aa <tcp_output_control_segment+0x22>
 802069c:	4b1c      	ldr	r3, [pc, #112]	; (8020710 <tcp_output_control_segment+0x88>)
 802069e:	f240 7287 	movw	r2, #1927	; 0x787
 80206a2:	491c      	ldr	r1, [pc, #112]	; (8020714 <tcp_output_control_segment+0x8c>)
 80206a4:	481c      	ldr	r0, [pc, #112]	; (8020718 <tcp_output_control_segment+0x90>)
 80206a6:	f003 fc9f 	bl	8023fe8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80206aa:	683a      	ldr	r2, [r7, #0]
 80206ac:	6879      	ldr	r1, [r7, #4]
 80206ae:	68f8      	ldr	r0, [r7, #12]
 80206b0:	f7fe fad4 	bl	801ec5c <tcp_route>
 80206b4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80206b6:	693b      	ldr	r3, [r7, #16]
 80206b8:	2b00      	cmp	r3, #0
 80206ba:	d102      	bne.n	80206c2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80206bc:	23fc      	movs	r3, #252	; 0xfc
 80206be:	75fb      	strb	r3, [r7, #23]
 80206c0:	e01c      	b.n	80206fc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80206c2:	68fb      	ldr	r3, [r7, #12]
 80206c4:	2b00      	cmp	r3, #0
 80206c6:	d006      	beq.n	80206d6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80206c8:	68fb      	ldr	r3, [r7, #12]
 80206ca:	7adb      	ldrb	r3, [r3, #11]
 80206cc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80206ce:	68fb      	ldr	r3, [r7, #12]
 80206d0:	7a9b      	ldrb	r3, [r3, #10]
 80206d2:	757b      	strb	r3, [r7, #21]
 80206d4:	e003      	b.n	80206de <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80206d6:	23ff      	movs	r3, #255	; 0xff
 80206d8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80206da:	2300      	movs	r3, #0
 80206dc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80206de:	7dba      	ldrb	r2, [r7, #22]
 80206e0:	693b      	ldr	r3, [r7, #16]
 80206e2:	9302      	str	r3, [sp, #8]
 80206e4:	2306      	movs	r3, #6
 80206e6:	9301      	str	r3, [sp, #4]
 80206e8:	7d7b      	ldrb	r3, [r7, #21]
 80206ea:	9300      	str	r3, [sp, #0]
 80206ec:	4613      	mov	r3, r2
 80206ee:	683a      	ldr	r2, [r7, #0]
 80206f0:	6879      	ldr	r1, [r7, #4]
 80206f2:	68b8      	ldr	r0, [r7, #8]
 80206f4:	f7f7 f8c0 	bl	8017878 <ip4_output_if>
 80206f8:	4603      	mov	r3, r0
 80206fa:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80206fc:	68b8      	ldr	r0, [r7, #8]
 80206fe:	f7f9 fb63 	bl	8019dc8 <pbuf_free>
  return err;
 8020702:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8020706:	4618      	mov	r0, r3
 8020708:	3718      	adds	r7, #24
 802070a:	46bd      	mov	sp, r7
 802070c:	bd80      	pop	{r7, pc}
 802070e:	bf00      	nop
 8020710:	08027bf4 	.word	0x08027bf4
 8020714:	08028368 	.word	0x08028368
 8020718:	08027c64 	.word	0x08027c64

0802071c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 802071c:	b590      	push	{r4, r7, lr}
 802071e:	b08b      	sub	sp, #44	; 0x2c
 8020720:	af04      	add	r7, sp, #16
 8020722:	60f8      	str	r0, [r7, #12]
 8020724:	60b9      	str	r1, [r7, #8]
 8020726:	607a      	str	r2, [r7, #4]
 8020728:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 802072a:	683b      	ldr	r3, [r7, #0]
 802072c:	2b00      	cmp	r3, #0
 802072e:	d106      	bne.n	802073e <tcp_rst+0x22>
 8020730:	4b1f      	ldr	r3, [pc, #124]	; (80207b0 <tcp_rst+0x94>)
 8020732:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8020736:	491f      	ldr	r1, [pc, #124]	; (80207b4 <tcp_rst+0x98>)
 8020738:	481f      	ldr	r0, [pc, #124]	; (80207b8 <tcp_rst+0x9c>)
 802073a:	f003 fc55 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 802073e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020740:	2b00      	cmp	r3, #0
 8020742:	d106      	bne.n	8020752 <tcp_rst+0x36>
 8020744:	4b1a      	ldr	r3, [pc, #104]	; (80207b0 <tcp_rst+0x94>)
 8020746:	f240 72c5 	movw	r2, #1989	; 0x7c5
 802074a:	491c      	ldr	r1, [pc, #112]	; (80207bc <tcp_rst+0xa0>)
 802074c:	481a      	ldr	r0, [pc, #104]	; (80207b8 <tcp_rst+0x9c>)
 802074e:	f003 fc4b 	bl	8023fe8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8020752:	2300      	movs	r3, #0
 8020754:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8020756:	f246 0308 	movw	r3, #24584	; 0x6008
 802075a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 802075c:	7dfb      	ldrb	r3, [r7, #23]
 802075e:	b29c      	uxth	r4, r3
 8020760:	68b8      	ldr	r0, [r7, #8]
 8020762:	f7f3 fb34 	bl	8013dce <lwip_htonl>
 8020766:	4602      	mov	r2, r0
 8020768:	8abb      	ldrh	r3, [r7, #20]
 802076a:	9303      	str	r3, [sp, #12]
 802076c:	2314      	movs	r3, #20
 802076e:	9302      	str	r3, [sp, #8]
 8020770:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8020772:	9301      	str	r3, [sp, #4]
 8020774:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8020776:	9300      	str	r3, [sp, #0]
 8020778:	4613      	mov	r3, r2
 802077a:	2200      	movs	r2, #0
 802077c:	4621      	mov	r1, r4
 802077e:	6878      	ldr	r0, [r7, #4]
 8020780:	f7ff fe90 	bl	80204a4 <tcp_output_alloc_header_common>
 8020784:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8020786:	693b      	ldr	r3, [r7, #16]
 8020788:	2b00      	cmp	r3, #0
 802078a:	d00c      	beq.n	80207a6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 802078c:	7dfb      	ldrb	r3, [r7, #23]
 802078e:	2200      	movs	r2, #0
 8020790:	6939      	ldr	r1, [r7, #16]
 8020792:	68f8      	ldr	r0, [r7, #12]
 8020794:	f7ff ff38 	bl	8020608 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8020798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802079a:	683a      	ldr	r2, [r7, #0]
 802079c:	6939      	ldr	r1, [r7, #16]
 802079e:	68f8      	ldr	r0, [r7, #12]
 80207a0:	f7ff ff72 	bl	8020688 <tcp_output_control_segment>
 80207a4:	e000      	b.n	80207a8 <tcp_rst+0x8c>
    return;
 80207a6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80207a8:	371c      	adds	r7, #28
 80207aa:	46bd      	mov	sp, r7
 80207ac:	bd90      	pop	{r4, r7, pc}
 80207ae:	bf00      	nop
 80207b0:	08027bf4 	.word	0x08027bf4
 80207b4:	08028394 	.word	0x08028394
 80207b8:	08027c64 	.word	0x08027c64
 80207bc:	080283b0 	.word	0x080283b0

080207c0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80207c0:	b590      	push	{r4, r7, lr}
 80207c2:	b087      	sub	sp, #28
 80207c4:	af00      	add	r7, sp, #0
 80207c6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80207c8:	2300      	movs	r3, #0
 80207ca:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80207cc:	2300      	movs	r3, #0
 80207ce:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80207d0:	687b      	ldr	r3, [r7, #4]
 80207d2:	2b00      	cmp	r3, #0
 80207d4:	d106      	bne.n	80207e4 <tcp_send_empty_ack+0x24>
 80207d6:	4b28      	ldr	r3, [pc, #160]	; (8020878 <tcp_send_empty_ack+0xb8>)
 80207d8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80207dc:	4927      	ldr	r1, [pc, #156]	; (802087c <tcp_send_empty_ack+0xbc>)
 80207de:	4828      	ldr	r0, [pc, #160]	; (8020880 <tcp_send_empty_ack+0xc0>)
 80207e0:	f003 fc02 	bl	8023fe8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80207e4:	7dfb      	ldrb	r3, [r7, #23]
 80207e6:	009b      	lsls	r3, r3, #2
 80207e8:	b2db      	uxtb	r3, r3
 80207ea:	f003 0304 	and.w	r3, r3, #4
 80207ee:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80207f0:	7d7b      	ldrb	r3, [r7, #21]
 80207f2:	b29c      	uxth	r4, r3
 80207f4:	687b      	ldr	r3, [r7, #4]
 80207f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80207f8:	4618      	mov	r0, r3
 80207fa:	f7f3 fae8 	bl	8013dce <lwip_htonl>
 80207fe:	4603      	mov	r3, r0
 8020800:	2200      	movs	r2, #0
 8020802:	4621      	mov	r1, r4
 8020804:	6878      	ldr	r0, [r7, #4]
 8020806:	f7ff fec1 	bl	802058c <tcp_output_alloc_header>
 802080a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 802080c:	693b      	ldr	r3, [r7, #16]
 802080e:	2b00      	cmp	r3, #0
 8020810:	d109      	bne.n	8020826 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8020812:	687b      	ldr	r3, [r7, #4]
 8020814:	8b5b      	ldrh	r3, [r3, #26]
 8020816:	f043 0303 	orr.w	r3, r3, #3
 802081a:	b29a      	uxth	r2, r3
 802081c:	687b      	ldr	r3, [r7, #4]
 802081e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8020820:	f06f 0301 	mvn.w	r3, #1
 8020824:	e023      	b.n	802086e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8020826:	7dbb      	ldrb	r3, [r7, #22]
 8020828:	7dfa      	ldrb	r2, [r7, #23]
 802082a:	6939      	ldr	r1, [r7, #16]
 802082c:	6878      	ldr	r0, [r7, #4]
 802082e:	f7ff feeb 	bl	8020608 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020832:	687a      	ldr	r2, [r7, #4]
 8020834:	687b      	ldr	r3, [r7, #4]
 8020836:	3304      	adds	r3, #4
 8020838:	6939      	ldr	r1, [r7, #16]
 802083a:	6878      	ldr	r0, [r7, #4]
 802083c:	f7ff ff24 	bl	8020688 <tcp_output_control_segment>
 8020840:	4603      	mov	r3, r0
 8020842:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8020844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8020848:	2b00      	cmp	r3, #0
 802084a:	d007      	beq.n	802085c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 802084c:	687b      	ldr	r3, [r7, #4]
 802084e:	8b5b      	ldrh	r3, [r3, #26]
 8020850:	f043 0303 	orr.w	r3, r3, #3
 8020854:	b29a      	uxth	r2, r3
 8020856:	687b      	ldr	r3, [r7, #4]
 8020858:	835a      	strh	r2, [r3, #26]
 802085a:	e006      	b.n	802086a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 802085c:	687b      	ldr	r3, [r7, #4]
 802085e:	8b5b      	ldrh	r3, [r3, #26]
 8020860:	f023 0303 	bic.w	r3, r3, #3
 8020864:	b29a      	uxth	r2, r3
 8020866:	687b      	ldr	r3, [r7, #4]
 8020868:	835a      	strh	r2, [r3, #26]
  }

  return err;
 802086a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 802086e:	4618      	mov	r0, r3
 8020870:	371c      	adds	r7, #28
 8020872:	46bd      	mov	sp, r7
 8020874:	bd90      	pop	{r4, r7, pc}
 8020876:	bf00      	nop
 8020878:	08027bf4 	.word	0x08027bf4
 802087c:	080283cc 	.word	0x080283cc
 8020880:	08027c64 	.word	0x08027c64

08020884 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8020884:	b590      	push	{r4, r7, lr}
 8020886:	b087      	sub	sp, #28
 8020888:	af00      	add	r7, sp, #0
 802088a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 802088c:	2300      	movs	r3, #0
 802088e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8020890:	687b      	ldr	r3, [r7, #4]
 8020892:	2b00      	cmp	r3, #0
 8020894:	d106      	bne.n	80208a4 <tcp_keepalive+0x20>
 8020896:	4b18      	ldr	r3, [pc, #96]	; (80208f8 <tcp_keepalive+0x74>)
 8020898:	f640 0224 	movw	r2, #2084	; 0x824
 802089c:	4917      	ldr	r1, [pc, #92]	; (80208fc <tcp_keepalive+0x78>)
 802089e:	4818      	ldr	r0, [pc, #96]	; (8020900 <tcp_keepalive+0x7c>)
 80208a0:	f003 fba2 	bl	8023fe8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80208a4:	7dfb      	ldrb	r3, [r7, #23]
 80208a6:	b29c      	uxth	r4, r3
 80208a8:	687b      	ldr	r3, [r7, #4]
 80208aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80208ac:	3b01      	subs	r3, #1
 80208ae:	4618      	mov	r0, r3
 80208b0:	f7f3 fa8d 	bl	8013dce <lwip_htonl>
 80208b4:	4603      	mov	r3, r0
 80208b6:	2200      	movs	r2, #0
 80208b8:	4621      	mov	r1, r4
 80208ba:	6878      	ldr	r0, [r7, #4]
 80208bc:	f7ff fe66 	bl	802058c <tcp_output_alloc_header>
 80208c0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80208c2:	693b      	ldr	r3, [r7, #16]
 80208c4:	2b00      	cmp	r3, #0
 80208c6:	d102      	bne.n	80208ce <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80208c8:	f04f 33ff 	mov.w	r3, #4294967295
 80208cc:	e010      	b.n	80208f0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80208ce:	7dfb      	ldrb	r3, [r7, #23]
 80208d0:	2200      	movs	r2, #0
 80208d2:	6939      	ldr	r1, [r7, #16]
 80208d4:	6878      	ldr	r0, [r7, #4]
 80208d6:	f7ff fe97 	bl	8020608 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80208da:	687a      	ldr	r2, [r7, #4]
 80208dc:	687b      	ldr	r3, [r7, #4]
 80208de:	3304      	adds	r3, #4
 80208e0:	6939      	ldr	r1, [r7, #16]
 80208e2:	6878      	ldr	r0, [r7, #4]
 80208e4:	f7ff fed0 	bl	8020688 <tcp_output_control_segment>
 80208e8:	4603      	mov	r3, r0
 80208ea:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80208ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80208f0:	4618      	mov	r0, r3
 80208f2:	371c      	adds	r7, #28
 80208f4:	46bd      	mov	sp, r7
 80208f6:	bd90      	pop	{r4, r7, pc}
 80208f8:	08027bf4 	.word	0x08027bf4
 80208fc:	080283ec 	.word	0x080283ec
 8020900:	08027c64 	.word	0x08027c64

08020904 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8020904:	b590      	push	{r4, r7, lr}
 8020906:	b08b      	sub	sp, #44	; 0x2c
 8020908:	af00      	add	r7, sp, #0
 802090a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 802090c:	2300      	movs	r3, #0
 802090e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8020912:	687b      	ldr	r3, [r7, #4]
 8020914:	2b00      	cmp	r3, #0
 8020916:	d106      	bne.n	8020926 <tcp_zero_window_probe+0x22>
 8020918:	4b4c      	ldr	r3, [pc, #304]	; (8020a4c <tcp_zero_window_probe+0x148>)
 802091a:	f640 024f 	movw	r2, #2127	; 0x84f
 802091e:	494c      	ldr	r1, [pc, #304]	; (8020a50 <tcp_zero_window_probe+0x14c>)
 8020920:	484c      	ldr	r0, [pc, #304]	; (8020a54 <tcp_zero_window_probe+0x150>)
 8020922:	f003 fb61 	bl	8023fe8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8020926:	687b      	ldr	r3, [r7, #4]
 8020928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802092a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 802092c:	6a3b      	ldr	r3, [r7, #32]
 802092e:	2b00      	cmp	r3, #0
 8020930:	d101      	bne.n	8020936 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8020932:	2300      	movs	r3, #0
 8020934:	e086      	b.n	8020a44 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8020936:	687b      	ldr	r3, [r7, #4]
 8020938:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 802093c:	2bff      	cmp	r3, #255	; 0xff
 802093e:	d007      	beq.n	8020950 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8020940:	687b      	ldr	r3, [r7, #4]
 8020942:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8020946:	3301      	adds	r3, #1
 8020948:	b2da      	uxtb	r2, r3
 802094a:	687b      	ldr	r3, [r7, #4]
 802094c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8020950:	6a3b      	ldr	r3, [r7, #32]
 8020952:	68db      	ldr	r3, [r3, #12]
 8020954:	899b      	ldrh	r3, [r3, #12]
 8020956:	b29b      	uxth	r3, r3
 8020958:	4618      	mov	r0, r3
 802095a:	f7f3 fa23 	bl	8013da4 <lwip_htons>
 802095e:	4603      	mov	r3, r0
 8020960:	b2db      	uxtb	r3, r3
 8020962:	f003 0301 	and.w	r3, r3, #1
 8020966:	2b00      	cmp	r3, #0
 8020968:	d005      	beq.n	8020976 <tcp_zero_window_probe+0x72>
 802096a:	6a3b      	ldr	r3, [r7, #32]
 802096c:	891b      	ldrh	r3, [r3, #8]
 802096e:	2b00      	cmp	r3, #0
 8020970:	d101      	bne.n	8020976 <tcp_zero_window_probe+0x72>
 8020972:	2301      	movs	r3, #1
 8020974:	e000      	b.n	8020978 <tcp_zero_window_probe+0x74>
 8020976:	2300      	movs	r3, #0
 8020978:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 802097a:	7ffb      	ldrb	r3, [r7, #31]
 802097c:	2b00      	cmp	r3, #0
 802097e:	bf0c      	ite	eq
 8020980:	2301      	moveq	r3, #1
 8020982:	2300      	movne	r3, #0
 8020984:	b2db      	uxtb	r3, r3
 8020986:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8020988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802098c:	b299      	uxth	r1, r3
 802098e:	6a3b      	ldr	r3, [r7, #32]
 8020990:	68db      	ldr	r3, [r3, #12]
 8020992:	685b      	ldr	r3, [r3, #4]
 8020994:	8bba      	ldrh	r2, [r7, #28]
 8020996:	6878      	ldr	r0, [r7, #4]
 8020998:	f7ff fdf8 	bl	802058c <tcp_output_alloc_header>
 802099c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 802099e:	69bb      	ldr	r3, [r7, #24]
 80209a0:	2b00      	cmp	r3, #0
 80209a2:	d102      	bne.n	80209aa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80209a4:	f04f 33ff 	mov.w	r3, #4294967295
 80209a8:	e04c      	b.n	8020a44 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80209aa:	69bb      	ldr	r3, [r7, #24]
 80209ac:	685b      	ldr	r3, [r3, #4]
 80209ae:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80209b0:	7ffb      	ldrb	r3, [r7, #31]
 80209b2:	2b00      	cmp	r3, #0
 80209b4:	d011      	beq.n	80209da <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80209b6:	697b      	ldr	r3, [r7, #20]
 80209b8:	899b      	ldrh	r3, [r3, #12]
 80209ba:	b29b      	uxth	r3, r3
 80209bc:	b21b      	sxth	r3, r3
 80209be:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80209c2:	b21c      	sxth	r4, r3
 80209c4:	2011      	movs	r0, #17
 80209c6:	f7f3 f9ed 	bl	8013da4 <lwip_htons>
 80209ca:	4603      	mov	r3, r0
 80209cc:	b21b      	sxth	r3, r3
 80209ce:	4323      	orrs	r3, r4
 80209d0:	b21b      	sxth	r3, r3
 80209d2:	b29a      	uxth	r2, r3
 80209d4:	697b      	ldr	r3, [r7, #20]
 80209d6:	819a      	strh	r2, [r3, #12]
 80209d8:	e010      	b.n	80209fc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80209da:	69bb      	ldr	r3, [r7, #24]
 80209dc:	685b      	ldr	r3, [r3, #4]
 80209de:	3314      	adds	r3, #20
 80209e0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80209e2:	6a3b      	ldr	r3, [r7, #32]
 80209e4:	6858      	ldr	r0, [r3, #4]
 80209e6:	6a3b      	ldr	r3, [r7, #32]
 80209e8:	685b      	ldr	r3, [r3, #4]
 80209ea:	891a      	ldrh	r2, [r3, #8]
 80209ec:	6a3b      	ldr	r3, [r7, #32]
 80209ee:	891b      	ldrh	r3, [r3, #8]
 80209f0:	1ad3      	subs	r3, r2, r3
 80209f2:	b29b      	uxth	r3, r3
 80209f4:	2201      	movs	r2, #1
 80209f6:	6939      	ldr	r1, [r7, #16]
 80209f8:	f7f9 fbec 	bl	801a1d4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80209fc:	6a3b      	ldr	r3, [r7, #32]
 80209fe:	68db      	ldr	r3, [r3, #12]
 8020a00:	685b      	ldr	r3, [r3, #4]
 8020a02:	4618      	mov	r0, r3
 8020a04:	f7f3 f9e3 	bl	8013dce <lwip_htonl>
 8020a08:	4603      	mov	r3, r0
 8020a0a:	3301      	adds	r3, #1
 8020a0c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8020a0e:	687b      	ldr	r3, [r7, #4]
 8020a10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8020a12:	68fb      	ldr	r3, [r7, #12]
 8020a14:	1ad3      	subs	r3, r2, r3
 8020a16:	2b00      	cmp	r3, #0
 8020a18:	da02      	bge.n	8020a20 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8020a1a:	687b      	ldr	r3, [r7, #4]
 8020a1c:	68fa      	ldr	r2, [r7, #12]
 8020a1e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8020a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020a24:	2200      	movs	r2, #0
 8020a26:	69b9      	ldr	r1, [r7, #24]
 8020a28:	6878      	ldr	r0, [r7, #4]
 8020a2a:	f7ff fded 	bl	8020608 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8020a2e:	687a      	ldr	r2, [r7, #4]
 8020a30:	687b      	ldr	r3, [r7, #4]
 8020a32:	3304      	adds	r3, #4
 8020a34:	69b9      	ldr	r1, [r7, #24]
 8020a36:	6878      	ldr	r0, [r7, #4]
 8020a38:	f7ff fe26 	bl	8020688 <tcp_output_control_segment>
 8020a3c:	4603      	mov	r3, r0
 8020a3e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8020a40:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8020a44:	4618      	mov	r0, r3
 8020a46:	372c      	adds	r7, #44	; 0x2c
 8020a48:	46bd      	mov	sp, r7
 8020a4a:	bd90      	pop	{r4, r7, pc}
 8020a4c:	08027bf4 	.word	0x08027bf4
 8020a50:	08028408 	.word	0x08028408
 8020a54:	08027c64 	.word	0x08027c64

08020a58 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8020a58:	b580      	push	{r7, lr}
 8020a5a:	b084      	sub	sp, #16
 8020a5c:	af00      	add	r7, sp, #0
 8020a5e:	6078      	str	r0, [r7, #4]
 8020a60:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8020a62:	f000 fb11 	bl	8021088 <sys_timeouts_sleeptime>
 8020a66:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8020a68:	68fb      	ldr	r3, [r7, #12]
 8020a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020a6e:	d10b      	bne.n	8020a88 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8020a70:	4813      	ldr	r0, [pc, #76]	; (8020ac0 <tcpip_timeouts_mbox_fetch+0x68>)
 8020a72:	f7f9 ff3e 	bl	801a8f2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8020a76:	2200      	movs	r2, #0
 8020a78:	6839      	ldr	r1, [r7, #0]
 8020a7a:	6878      	ldr	r0, [r7, #4]
 8020a7c:	f7f9 fdf6 	bl	801a66c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8020a80:	480f      	ldr	r0, [pc, #60]	; (8020ac0 <tcpip_timeouts_mbox_fetch+0x68>)
 8020a82:	f7f9 ff27 	bl	801a8d4 <sys_mutex_lock>
    return;
 8020a86:	e018      	b.n	8020aba <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8020a88:	68fb      	ldr	r3, [r7, #12]
 8020a8a:	2b00      	cmp	r3, #0
 8020a8c:	d102      	bne.n	8020a94 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8020a8e:	f000 fac1 	bl	8021014 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8020a92:	e7e6      	b.n	8020a62 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8020a94:	480a      	ldr	r0, [pc, #40]	; (8020ac0 <tcpip_timeouts_mbox_fetch+0x68>)
 8020a96:	f7f9 ff2c 	bl	801a8f2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8020a9a:	68fa      	ldr	r2, [r7, #12]
 8020a9c:	6839      	ldr	r1, [r7, #0]
 8020a9e:	6878      	ldr	r0, [r7, #4]
 8020aa0:	f7f9 fde4 	bl	801a66c <sys_arch_mbox_fetch>
 8020aa4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8020aa6:	4806      	ldr	r0, [pc, #24]	; (8020ac0 <tcpip_timeouts_mbox_fetch+0x68>)
 8020aa8:	f7f9 ff14 	bl	801a8d4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8020aac:	68bb      	ldr	r3, [r7, #8]
 8020aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020ab2:	d102      	bne.n	8020aba <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8020ab4:	f000 faae 	bl	8021014 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8020ab8:	e7d3      	b.n	8020a62 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8020aba:	3710      	adds	r7, #16
 8020abc:	46bd      	mov	sp, r7
 8020abe:	bd80      	pop	{r7, pc}
 8020ac0:	20011834 	.word	0x20011834

08020ac4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8020ac4:	b580      	push	{r7, lr}
 8020ac6:	b084      	sub	sp, #16
 8020ac8:	af00      	add	r7, sp, #0
 8020aca:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8020acc:	4810      	ldr	r0, [pc, #64]	; (8020b10 <tcpip_thread+0x4c>)
 8020ace:	f7f9 ff01 	bl	801a8d4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8020ad2:	4b10      	ldr	r3, [pc, #64]	; (8020b14 <tcpip_thread+0x50>)
 8020ad4:	681b      	ldr	r3, [r3, #0]
 8020ad6:	2b00      	cmp	r3, #0
 8020ad8:	d005      	beq.n	8020ae6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8020ada:	4b0e      	ldr	r3, [pc, #56]	; (8020b14 <tcpip_thread+0x50>)
 8020adc:	681b      	ldr	r3, [r3, #0]
 8020ade:	4a0e      	ldr	r2, [pc, #56]	; (8020b18 <tcpip_thread+0x54>)
 8020ae0:	6812      	ldr	r2, [r2, #0]
 8020ae2:	4610      	mov	r0, r2
 8020ae4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8020ae6:	f107 030c 	add.w	r3, r7, #12
 8020aea:	4619      	mov	r1, r3
 8020aec:	480b      	ldr	r0, [pc, #44]	; (8020b1c <tcpip_thread+0x58>)
 8020aee:	f7ff ffb3 	bl	8020a58 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8020af2:	68fb      	ldr	r3, [r7, #12]
 8020af4:	2b00      	cmp	r3, #0
 8020af6:	d106      	bne.n	8020b06 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8020af8:	4b09      	ldr	r3, [pc, #36]	; (8020b20 <tcpip_thread+0x5c>)
 8020afa:	2291      	movs	r2, #145	; 0x91
 8020afc:	4909      	ldr	r1, [pc, #36]	; (8020b24 <tcpip_thread+0x60>)
 8020afe:	480a      	ldr	r0, [pc, #40]	; (8020b28 <tcpip_thread+0x64>)
 8020b00:	f003 fa72 	bl	8023fe8 <iprintf>
      continue;
 8020b04:	e003      	b.n	8020b0e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8020b06:	68fb      	ldr	r3, [r7, #12]
 8020b08:	4618      	mov	r0, r3
 8020b0a:	f000 f80f 	bl	8020b2c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8020b0e:	e7ea      	b.n	8020ae6 <tcpip_thread+0x22>
 8020b10:	20011834 	.word	0x20011834
 8020b14:	20008aa0 	.word	0x20008aa0
 8020b18:	20008aa4 	.word	0x20008aa4
 8020b1c:	20008aa8 	.word	0x20008aa8
 8020b20:	0802842c 	.word	0x0802842c
 8020b24:	08028478 	.word	0x08028478
 8020b28:	08028498 	.word	0x08028498

08020b2c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8020b2c:	b580      	push	{r7, lr}
 8020b2e:	b082      	sub	sp, #8
 8020b30:	af00      	add	r7, sp, #0
 8020b32:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8020b34:	687b      	ldr	r3, [r7, #4]
 8020b36:	781b      	ldrb	r3, [r3, #0]
 8020b38:	2b01      	cmp	r3, #1
 8020b3a:	d018      	beq.n	8020b6e <tcpip_thread_handle_msg+0x42>
 8020b3c:	2b02      	cmp	r3, #2
 8020b3e:	d021      	beq.n	8020b84 <tcpip_thread_handle_msg+0x58>
 8020b40:	2b00      	cmp	r3, #0
 8020b42:	d126      	bne.n	8020b92 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8020b44:	687b      	ldr	r3, [r7, #4]
 8020b46:	68db      	ldr	r3, [r3, #12]
 8020b48:	687a      	ldr	r2, [r7, #4]
 8020b4a:	6850      	ldr	r0, [r2, #4]
 8020b4c:	687a      	ldr	r2, [r7, #4]
 8020b4e:	6892      	ldr	r2, [r2, #8]
 8020b50:	4611      	mov	r1, r2
 8020b52:	4798      	blx	r3
 8020b54:	4603      	mov	r3, r0
 8020b56:	2b00      	cmp	r3, #0
 8020b58:	d004      	beq.n	8020b64 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 8020b5a:	687b      	ldr	r3, [r7, #4]
 8020b5c:	685b      	ldr	r3, [r3, #4]
 8020b5e:	4618      	mov	r0, r3
 8020b60:	f7f9 f932 	bl	8019dc8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8020b64:	6879      	ldr	r1, [r7, #4]
 8020b66:	2009      	movs	r0, #9
 8020b68:	f7f8 fa96 	bl	8019098 <memp_free>
      break;
 8020b6c:	e018      	b.n	8020ba0 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8020b6e:	687b      	ldr	r3, [r7, #4]
 8020b70:	685b      	ldr	r3, [r3, #4]
 8020b72:	687a      	ldr	r2, [r7, #4]
 8020b74:	6892      	ldr	r2, [r2, #8]
 8020b76:	4610      	mov	r0, r2
 8020b78:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8020b7a:	6879      	ldr	r1, [r7, #4]
 8020b7c:	2008      	movs	r0, #8
 8020b7e:	f7f8 fa8b 	bl	8019098 <memp_free>
      break;
 8020b82:	e00d      	b.n	8020ba0 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8020b84:	687b      	ldr	r3, [r7, #4]
 8020b86:	685b      	ldr	r3, [r3, #4]
 8020b88:	687a      	ldr	r2, [r7, #4]
 8020b8a:	6892      	ldr	r2, [r2, #8]
 8020b8c:	4610      	mov	r0, r2
 8020b8e:	4798      	blx	r3
      break;
 8020b90:	e006      	b.n	8020ba0 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8020b92:	4b05      	ldr	r3, [pc, #20]	; (8020ba8 <tcpip_thread_handle_msg+0x7c>)
 8020b94:	22cf      	movs	r2, #207	; 0xcf
 8020b96:	4905      	ldr	r1, [pc, #20]	; (8020bac <tcpip_thread_handle_msg+0x80>)
 8020b98:	4805      	ldr	r0, [pc, #20]	; (8020bb0 <tcpip_thread_handle_msg+0x84>)
 8020b9a:	f003 fa25 	bl	8023fe8 <iprintf>
      break;
 8020b9e:	bf00      	nop
  }
}
 8020ba0:	bf00      	nop
 8020ba2:	3708      	adds	r7, #8
 8020ba4:	46bd      	mov	sp, r7
 8020ba6:	bd80      	pop	{r7, pc}
 8020ba8:	0802842c 	.word	0x0802842c
 8020bac:	08028478 	.word	0x08028478
 8020bb0:	08028498 	.word	0x08028498

08020bb4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8020bb4:	b580      	push	{r7, lr}
 8020bb6:	b086      	sub	sp, #24
 8020bb8:	af00      	add	r7, sp, #0
 8020bba:	60f8      	str	r0, [r7, #12]
 8020bbc:	60b9      	str	r1, [r7, #8]
 8020bbe:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8020bc0:	481a      	ldr	r0, [pc, #104]	; (8020c2c <tcpip_inpkt+0x78>)
 8020bc2:	f7f9 fdae 	bl	801a722 <sys_mbox_valid>
 8020bc6:	4603      	mov	r3, r0
 8020bc8:	2b00      	cmp	r3, #0
 8020bca:	d105      	bne.n	8020bd8 <tcpip_inpkt+0x24>
 8020bcc:	4b18      	ldr	r3, [pc, #96]	; (8020c30 <tcpip_inpkt+0x7c>)
 8020bce:	22fc      	movs	r2, #252	; 0xfc
 8020bd0:	4918      	ldr	r1, [pc, #96]	; (8020c34 <tcpip_inpkt+0x80>)
 8020bd2:	4819      	ldr	r0, [pc, #100]	; (8020c38 <tcpip_inpkt+0x84>)
 8020bd4:	f003 fa08 	bl	8023fe8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8020bd8:	2009      	movs	r0, #9
 8020bda:	f7f8 fa0b 	bl	8018ff4 <memp_malloc>
 8020bde:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8020be0:	697b      	ldr	r3, [r7, #20]
 8020be2:	2b00      	cmp	r3, #0
 8020be4:	d102      	bne.n	8020bec <tcpip_inpkt+0x38>
    return ERR_MEM;
 8020be6:	f04f 33ff 	mov.w	r3, #4294967295
 8020bea:	e01a      	b.n	8020c22 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8020bec:	697b      	ldr	r3, [r7, #20]
 8020bee:	2200      	movs	r2, #0
 8020bf0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8020bf2:	697b      	ldr	r3, [r7, #20]
 8020bf4:	68fa      	ldr	r2, [r7, #12]
 8020bf6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8020bf8:	697b      	ldr	r3, [r7, #20]
 8020bfa:	68ba      	ldr	r2, [r7, #8]
 8020bfc:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8020bfe:	697b      	ldr	r3, [r7, #20]
 8020c00:	687a      	ldr	r2, [r7, #4]
 8020c02:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8020c04:	6979      	ldr	r1, [r7, #20]
 8020c06:	4809      	ldr	r0, [pc, #36]	; (8020c2c <tcpip_inpkt+0x78>)
 8020c08:	f7f9 fd16 	bl	801a638 <sys_mbox_trypost>
 8020c0c:	4603      	mov	r3, r0
 8020c0e:	2b00      	cmp	r3, #0
 8020c10:	d006      	beq.n	8020c20 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8020c12:	6979      	ldr	r1, [r7, #20]
 8020c14:	2009      	movs	r0, #9
 8020c16:	f7f8 fa3f 	bl	8019098 <memp_free>
    return ERR_MEM;
 8020c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8020c1e:	e000      	b.n	8020c22 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8020c20:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8020c22:	4618      	mov	r0, r3
 8020c24:	3718      	adds	r7, #24
 8020c26:	46bd      	mov	sp, r7
 8020c28:	bd80      	pop	{r7, pc}
 8020c2a:	bf00      	nop
 8020c2c:	20008aa8 	.word	0x20008aa8
 8020c30:	0802842c 	.word	0x0802842c
 8020c34:	080284c0 	.word	0x080284c0
 8020c38:	08028498 	.word	0x08028498

08020c3c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8020c3c:	b580      	push	{r7, lr}
 8020c3e:	b082      	sub	sp, #8
 8020c40:	af00      	add	r7, sp, #0
 8020c42:	6078      	str	r0, [r7, #4]
 8020c44:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8020c46:	683b      	ldr	r3, [r7, #0]
 8020c48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8020c4c:	f003 0318 	and.w	r3, r3, #24
 8020c50:	2b00      	cmp	r3, #0
 8020c52:	d006      	beq.n	8020c62 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8020c54:	4a08      	ldr	r2, [pc, #32]	; (8020c78 <tcpip_input+0x3c>)
 8020c56:	6839      	ldr	r1, [r7, #0]
 8020c58:	6878      	ldr	r0, [r7, #4]
 8020c5a:	f7ff ffab 	bl	8020bb4 <tcpip_inpkt>
 8020c5e:	4603      	mov	r3, r0
 8020c60:	e005      	b.n	8020c6e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8020c62:	4a06      	ldr	r2, [pc, #24]	; (8020c7c <tcpip_input+0x40>)
 8020c64:	6839      	ldr	r1, [r7, #0]
 8020c66:	6878      	ldr	r0, [r7, #4]
 8020c68:	f7ff ffa4 	bl	8020bb4 <tcpip_inpkt>
 8020c6c:	4603      	mov	r3, r0
}
 8020c6e:	4618      	mov	r0, r3
 8020c70:	3708      	adds	r7, #8
 8020c72:	46bd      	mov	sp, r7
 8020c74:	bd80      	pop	{r7, pc}
 8020c76:	bf00      	nop
 8020c78:	08016fc9 	.word	0x08016fc9
 8020c7c:	080175f9 	.word	0x080175f9

08020c80 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8020c80:	b580      	push	{r7, lr}
 8020c82:	b084      	sub	sp, #16
 8020c84:	af00      	add	r7, sp, #0
 8020c86:	6078      	str	r0, [r7, #4]
 8020c88:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8020c8a:	4819      	ldr	r0, [pc, #100]	; (8020cf0 <tcpip_try_callback+0x70>)
 8020c8c:	f7f9 fd49 	bl	801a722 <sys_mbox_valid>
 8020c90:	4603      	mov	r3, r0
 8020c92:	2b00      	cmp	r3, #0
 8020c94:	d106      	bne.n	8020ca4 <tcpip_try_callback+0x24>
 8020c96:	4b17      	ldr	r3, [pc, #92]	; (8020cf4 <tcpip_try_callback+0x74>)
 8020c98:	f240 125d 	movw	r2, #349	; 0x15d
 8020c9c:	4916      	ldr	r1, [pc, #88]	; (8020cf8 <tcpip_try_callback+0x78>)
 8020c9e:	4817      	ldr	r0, [pc, #92]	; (8020cfc <tcpip_try_callback+0x7c>)
 8020ca0:	f003 f9a2 	bl	8023fe8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8020ca4:	2008      	movs	r0, #8
 8020ca6:	f7f8 f9a5 	bl	8018ff4 <memp_malloc>
 8020caa:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8020cac:	68fb      	ldr	r3, [r7, #12]
 8020cae:	2b00      	cmp	r3, #0
 8020cb0:	d102      	bne.n	8020cb8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8020cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8020cb6:	e017      	b.n	8020ce8 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8020cb8:	68fb      	ldr	r3, [r7, #12]
 8020cba:	2201      	movs	r2, #1
 8020cbc:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8020cbe:	68fb      	ldr	r3, [r7, #12]
 8020cc0:	687a      	ldr	r2, [r7, #4]
 8020cc2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8020cc4:	68fb      	ldr	r3, [r7, #12]
 8020cc6:	683a      	ldr	r2, [r7, #0]
 8020cc8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8020cca:	68f9      	ldr	r1, [r7, #12]
 8020ccc:	4808      	ldr	r0, [pc, #32]	; (8020cf0 <tcpip_try_callback+0x70>)
 8020cce:	f7f9 fcb3 	bl	801a638 <sys_mbox_trypost>
 8020cd2:	4603      	mov	r3, r0
 8020cd4:	2b00      	cmp	r3, #0
 8020cd6:	d006      	beq.n	8020ce6 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8020cd8:	68f9      	ldr	r1, [r7, #12]
 8020cda:	2008      	movs	r0, #8
 8020cdc:	f7f8 f9dc 	bl	8019098 <memp_free>
    return ERR_MEM;
 8020ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8020ce4:	e000      	b.n	8020ce8 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8020ce6:	2300      	movs	r3, #0
}
 8020ce8:	4618      	mov	r0, r3
 8020cea:	3710      	adds	r7, #16
 8020cec:	46bd      	mov	sp, r7
 8020cee:	bd80      	pop	{r7, pc}
 8020cf0:	20008aa8 	.word	0x20008aa8
 8020cf4:	0802842c 	.word	0x0802842c
 8020cf8:	080284c0 	.word	0x080284c0
 8020cfc:	08028498 	.word	0x08028498

08020d00 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8020d00:	b580      	push	{r7, lr}
 8020d02:	b084      	sub	sp, #16
 8020d04:	af00      	add	r7, sp, #0
 8020d06:	60f8      	str	r0, [r7, #12]
 8020d08:	60b9      	str	r1, [r7, #8]
 8020d0a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8020d0c:	4806      	ldr	r0, [pc, #24]	; (8020d28 <tcpip_send_msg_wait_sem+0x28>)
 8020d0e:	f7f9 fde1 	bl	801a8d4 <sys_mutex_lock>
  fn(apimsg);
 8020d12:	68fb      	ldr	r3, [r7, #12]
 8020d14:	68b8      	ldr	r0, [r7, #8]
 8020d16:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8020d18:	4803      	ldr	r0, [pc, #12]	; (8020d28 <tcpip_send_msg_wait_sem+0x28>)
 8020d1a:	f7f9 fdea 	bl	801a8f2 <sys_mutex_unlock>
  return ERR_OK;
 8020d1e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8020d20:	4618      	mov	r0, r3
 8020d22:	3710      	adds	r7, #16
 8020d24:	46bd      	mov	sp, r7
 8020d26:	bd80      	pop	{r7, pc}
 8020d28:	20011834 	.word	0x20011834

08020d2c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8020d2c:	b580      	push	{r7, lr}
 8020d2e:	b084      	sub	sp, #16
 8020d30:	af02      	add	r7, sp, #8
 8020d32:	6078      	str	r0, [r7, #4]
 8020d34:	6039      	str	r1, [r7, #0]
  lwip_init();
 8020d36:	f7f6 fbab 	bl	8017490 <lwip_init>

  tcpip_init_done = initfunc;
 8020d3a:	4a17      	ldr	r2, [pc, #92]	; (8020d98 <tcpip_init+0x6c>)
 8020d3c:	687b      	ldr	r3, [r7, #4]
 8020d3e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8020d40:	4a16      	ldr	r2, [pc, #88]	; (8020d9c <tcpip_init+0x70>)
 8020d42:	683b      	ldr	r3, [r7, #0]
 8020d44:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8020d46:	2106      	movs	r1, #6
 8020d48:	4815      	ldr	r0, [pc, #84]	; (8020da0 <tcpip_init+0x74>)
 8020d4a:	f7f9 fc41 	bl	801a5d0 <sys_mbox_new>
 8020d4e:	4603      	mov	r3, r0
 8020d50:	2b00      	cmp	r3, #0
 8020d52:	d006      	beq.n	8020d62 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8020d54:	4b13      	ldr	r3, [pc, #76]	; (8020da4 <tcpip_init+0x78>)
 8020d56:	f240 2261 	movw	r2, #609	; 0x261
 8020d5a:	4913      	ldr	r1, [pc, #76]	; (8020da8 <tcpip_init+0x7c>)
 8020d5c:	4813      	ldr	r0, [pc, #76]	; (8020dac <tcpip_init+0x80>)
 8020d5e:	f003 f943 	bl	8023fe8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8020d62:	4813      	ldr	r0, [pc, #76]	; (8020db0 <tcpip_init+0x84>)
 8020d64:	f7f9 fd9a 	bl	801a89c <sys_mutex_new>
 8020d68:	4603      	mov	r3, r0
 8020d6a:	2b00      	cmp	r3, #0
 8020d6c:	d006      	beq.n	8020d7c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8020d6e:	4b0d      	ldr	r3, [pc, #52]	; (8020da4 <tcpip_init+0x78>)
 8020d70:	f240 2265 	movw	r2, #613	; 0x265
 8020d74:	490f      	ldr	r1, [pc, #60]	; (8020db4 <tcpip_init+0x88>)
 8020d76:	480d      	ldr	r0, [pc, #52]	; (8020dac <tcpip_init+0x80>)
 8020d78:	f003 f936 	bl	8023fe8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8020d7c:	2300      	movs	r3, #0
 8020d7e:	9300      	str	r3, [sp, #0]
 8020d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020d84:	2200      	movs	r2, #0
 8020d86:	490c      	ldr	r1, [pc, #48]	; (8020db8 <tcpip_init+0x8c>)
 8020d88:	480c      	ldr	r0, [pc, #48]	; (8020dbc <tcpip_init+0x90>)
 8020d8a:	f7f9 fdbf 	bl	801a90c <sys_thread_new>
}
 8020d8e:	bf00      	nop
 8020d90:	3708      	adds	r7, #8
 8020d92:	46bd      	mov	sp, r7
 8020d94:	bd80      	pop	{r7, pc}
 8020d96:	bf00      	nop
 8020d98:	20008aa0 	.word	0x20008aa0
 8020d9c:	20008aa4 	.word	0x20008aa4
 8020da0:	20008aa8 	.word	0x20008aa8
 8020da4:	0802842c 	.word	0x0802842c
 8020da8:	080284d0 	.word	0x080284d0
 8020dac:	08028498 	.word	0x08028498
 8020db0:	20011834 	.word	0x20011834
 8020db4:	080284f4 	.word	0x080284f4
 8020db8:	08020ac5 	.word	0x08020ac5
 8020dbc:	08028518 	.word	0x08028518

08020dc0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8020dc0:	b580      	push	{r7, lr}
 8020dc2:	b082      	sub	sp, #8
 8020dc4:	af00      	add	r7, sp, #0
 8020dc6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8020dc8:	f7f9 fe2e 	bl	801aa28 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8020dcc:	4b0a      	ldr	r3, [pc, #40]	; (8020df8 <tcpip_tcp_timer+0x38>)
 8020dce:	681b      	ldr	r3, [r3, #0]
 8020dd0:	2b00      	cmp	r3, #0
 8020dd2:	d103      	bne.n	8020ddc <tcpip_tcp_timer+0x1c>
 8020dd4:	4b09      	ldr	r3, [pc, #36]	; (8020dfc <tcpip_tcp_timer+0x3c>)
 8020dd6:	681b      	ldr	r3, [r3, #0]
 8020dd8:	2b00      	cmp	r3, #0
 8020dda:	d005      	beq.n	8020de8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8020ddc:	2200      	movs	r2, #0
 8020dde:	4908      	ldr	r1, [pc, #32]	; (8020e00 <tcpip_tcp_timer+0x40>)
 8020de0:	20fa      	movs	r0, #250	; 0xfa
 8020de2:	f000 f8f1 	bl	8020fc8 <sys_timeout>
 8020de6:	e002      	b.n	8020dee <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8020de8:	4b06      	ldr	r3, [pc, #24]	; (8020e04 <tcpip_tcp_timer+0x44>)
 8020dea:	2200      	movs	r2, #0
 8020dec:	601a      	str	r2, [r3, #0]
  }
}
 8020dee:	bf00      	nop
 8020df0:	3708      	adds	r7, #8
 8020df2:	46bd      	mov	sp, r7
 8020df4:	bd80      	pop	{r7, pc}
 8020df6:	bf00      	nop
 8020df8:	2001181c 	.word	0x2001181c
 8020dfc:	2001182c 	.word	0x2001182c
 8020e00:	08020dc1 	.word	0x08020dc1
 8020e04:	20008ab4 	.word	0x20008ab4

08020e08 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8020e08:	b580      	push	{r7, lr}
 8020e0a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8020e0c:	4b0a      	ldr	r3, [pc, #40]	; (8020e38 <tcp_timer_needed+0x30>)
 8020e0e:	681b      	ldr	r3, [r3, #0]
 8020e10:	2b00      	cmp	r3, #0
 8020e12:	d10f      	bne.n	8020e34 <tcp_timer_needed+0x2c>
 8020e14:	4b09      	ldr	r3, [pc, #36]	; (8020e3c <tcp_timer_needed+0x34>)
 8020e16:	681b      	ldr	r3, [r3, #0]
 8020e18:	2b00      	cmp	r3, #0
 8020e1a:	d103      	bne.n	8020e24 <tcp_timer_needed+0x1c>
 8020e1c:	4b08      	ldr	r3, [pc, #32]	; (8020e40 <tcp_timer_needed+0x38>)
 8020e1e:	681b      	ldr	r3, [r3, #0]
 8020e20:	2b00      	cmp	r3, #0
 8020e22:	d007      	beq.n	8020e34 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8020e24:	4b04      	ldr	r3, [pc, #16]	; (8020e38 <tcp_timer_needed+0x30>)
 8020e26:	2201      	movs	r2, #1
 8020e28:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8020e2a:	2200      	movs	r2, #0
 8020e2c:	4905      	ldr	r1, [pc, #20]	; (8020e44 <tcp_timer_needed+0x3c>)
 8020e2e:	20fa      	movs	r0, #250	; 0xfa
 8020e30:	f000 f8ca 	bl	8020fc8 <sys_timeout>
  }
}
 8020e34:	bf00      	nop
 8020e36:	bd80      	pop	{r7, pc}
 8020e38:	20008ab4 	.word	0x20008ab4
 8020e3c:	2001181c 	.word	0x2001181c
 8020e40:	2001182c 	.word	0x2001182c
 8020e44:	08020dc1 	.word	0x08020dc1

08020e48 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8020e48:	b580      	push	{r7, lr}
 8020e4a:	b086      	sub	sp, #24
 8020e4c:	af00      	add	r7, sp, #0
 8020e4e:	60f8      	str	r0, [r7, #12]
 8020e50:	60b9      	str	r1, [r7, #8]
 8020e52:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8020e54:	200a      	movs	r0, #10
 8020e56:	f7f8 f8cd 	bl	8018ff4 <memp_malloc>
 8020e5a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8020e5c:	693b      	ldr	r3, [r7, #16]
 8020e5e:	2b00      	cmp	r3, #0
 8020e60:	d109      	bne.n	8020e76 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8020e62:	693b      	ldr	r3, [r7, #16]
 8020e64:	2b00      	cmp	r3, #0
 8020e66:	d151      	bne.n	8020f0c <sys_timeout_abs+0xc4>
 8020e68:	4b2a      	ldr	r3, [pc, #168]	; (8020f14 <sys_timeout_abs+0xcc>)
 8020e6a:	22be      	movs	r2, #190	; 0xbe
 8020e6c:	492a      	ldr	r1, [pc, #168]	; (8020f18 <sys_timeout_abs+0xd0>)
 8020e6e:	482b      	ldr	r0, [pc, #172]	; (8020f1c <sys_timeout_abs+0xd4>)
 8020e70:	f003 f8ba 	bl	8023fe8 <iprintf>
    return;
 8020e74:	e04a      	b.n	8020f0c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8020e76:	693b      	ldr	r3, [r7, #16]
 8020e78:	2200      	movs	r2, #0
 8020e7a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8020e7c:	693b      	ldr	r3, [r7, #16]
 8020e7e:	68ba      	ldr	r2, [r7, #8]
 8020e80:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8020e82:	693b      	ldr	r3, [r7, #16]
 8020e84:	687a      	ldr	r2, [r7, #4]
 8020e86:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8020e88:	693b      	ldr	r3, [r7, #16]
 8020e8a:	68fa      	ldr	r2, [r7, #12]
 8020e8c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8020e8e:	4b24      	ldr	r3, [pc, #144]	; (8020f20 <sys_timeout_abs+0xd8>)
 8020e90:	681b      	ldr	r3, [r3, #0]
 8020e92:	2b00      	cmp	r3, #0
 8020e94:	d103      	bne.n	8020e9e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8020e96:	4a22      	ldr	r2, [pc, #136]	; (8020f20 <sys_timeout_abs+0xd8>)
 8020e98:	693b      	ldr	r3, [r7, #16]
 8020e9a:	6013      	str	r3, [r2, #0]
    return;
 8020e9c:	e037      	b.n	8020f0e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8020e9e:	693b      	ldr	r3, [r7, #16]
 8020ea0:	685a      	ldr	r2, [r3, #4]
 8020ea2:	4b1f      	ldr	r3, [pc, #124]	; (8020f20 <sys_timeout_abs+0xd8>)
 8020ea4:	681b      	ldr	r3, [r3, #0]
 8020ea6:	685b      	ldr	r3, [r3, #4]
 8020ea8:	1ad3      	subs	r3, r2, r3
 8020eaa:	0fdb      	lsrs	r3, r3, #31
 8020eac:	f003 0301 	and.w	r3, r3, #1
 8020eb0:	b2db      	uxtb	r3, r3
 8020eb2:	2b00      	cmp	r3, #0
 8020eb4:	d007      	beq.n	8020ec6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8020eb6:	4b1a      	ldr	r3, [pc, #104]	; (8020f20 <sys_timeout_abs+0xd8>)
 8020eb8:	681a      	ldr	r2, [r3, #0]
 8020eba:	693b      	ldr	r3, [r7, #16]
 8020ebc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8020ebe:	4a18      	ldr	r2, [pc, #96]	; (8020f20 <sys_timeout_abs+0xd8>)
 8020ec0:	693b      	ldr	r3, [r7, #16]
 8020ec2:	6013      	str	r3, [r2, #0]
 8020ec4:	e023      	b.n	8020f0e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8020ec6:	4b16      	ldr	r3, [pc, #88]	; (8020f20 <sys_timeout_abs+0xd8>)
 8020ec8:	681b      	ldr	r3, [r3, #0]
 8020eca:	617b      	str	r3, [r7, #20]
 8020ecc:	e01a      	b.n	8020f04 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8020ece:	697b      	ldr	r3, [r7, #20]
 8020ed0:	681b      	ldr	r3, [r3, #0]
 8020ed2:	2b00      	cmp	r3, #0
 8020ed4:	d00b      	beq.n	8020eee <sys_timeout_abs+0xa6>
 8020ed6:	693b      	ldr	r3, [r7, #16]
 8020ed8:	685a      	ldr	r2, [r3, #4]
 8020eda:	697b      	ldr	r3, [r7, #20]
 8020edc:	681b      	ldr	r3, [r3, #0]
 8020ede:	685b      	ldr	r3, [r3, #4]
 8020ee0:	1ad3      	subs	r3, r2, r3
 8020ee2:	0fdb      	lsrs	r3, r3, #31
 8020ee4:	f003 0301 	and.w	r3, r3, #1
 8020ee8:	b2db      	uxtb	r3, r3
 8020eea:	2b00      	cmp	r3, #0
 8020eec:	d007      	beq.n	8020efe <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8020eee:	697b      	ldr	r3, [r7, #20]
 8020ef0:	681a      	ldr	r2, [r3, #0]
 8020ef2:	693b      	ldr	r3, [r7, #16]
 8020ef4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8020ef6:	697b      	ldr	r3, [r7, #20]
 8020ef8:	693a      	ldr	r2, [r7, #16]
 8020efa:	601a      	str	r2, [r3, #0]
        break;
 8020efc:	e007      	b.n	8020f0e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8020efe:	697b      	ldr	r3, [r7, #20]
 8020f00:	681b      	ldr	r3, [r3, #0]
 8020f02:	617b      	str	r3, [r7, #20]
 8020f04:	697b      	ldr	r3, [r7, #20]
 8020f06:	2b00      	cmp	r3, #0
 8020f08:	d1e1      	bne.n	8020ece <sys_timeout_abs+0x86>
 8020f0a:	e000      	b.n	8020f0e <sys_timeout_abs+0xc6>
    return;
 8020f0c:	bf00      	nop
      }
    }
  }
}
 8020f0e:	3718      	adds	r7, #24
 8020f10:	46bd      	mov	sp, r7
 8020f12:	bd80      	pop	{r7, pc}
 8020f14:	08028528 	.word	0x08028528
 8020f18:	08028578 	.word	0x08028578
 8020f1c:	080285b8 	.word	0x080285b8
 8020f20:	20008aac 	.word	0x20008aac

08020f24 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8020f24:	b580      	push	{r7, lr}
 8020f26:	b086      	sub	sp, #24
 8020f28:	af00      	add	r7, sp, #0
 8020f2a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8020f2c:	687b      	ldr	r3, [r7, #4]
 8020f2e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8020f30:	697b      	ldr	r3, [r7, #20]
 8020f32:	685b      	ldr	r3, [r3, #4]
 8020f34:	4798      	blx	r3

  now = sys_now();
 8020f36:	f7df ff33 	bl	8000da0 <sys_now>
 8020f3a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8020f3c:	697b      	ldr	r3, [r7, #20]
 8020f3e:	681a      	ldr	r2, [r3, #0]
 8020f40:	4b0f      	ldr	r3, [pc, #60]	; (8020f80 <lwip_cyclic_timer+0x5c>)
 8020f42:	681b      	ldr	r3, [r3, #0]
 8020f44:	4413      	add	r3, r2
 8020f46:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8020f48:	68fa      	ldr	r2, [r7, #12]
 8020f4a:	693b      	ldr	r3, [r7, #16]
 8020f4c:	1ad3      	subs	r3, r2, r3
 8020f4e:	0fdb      	lsrs	r3, r3, #31
 8020f50:	f003 0301 	and.w	r3, r3, #1
 8020f54:	b2db      	uxtb	r3, r3
 8020f56:	2b00      	cmp	r3, #0
 8020f58:	d009      	beq.n	8020f6e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8020f5a:	697b      	ldr	r3, [r7, #20]
 8020f5c:	681a      	ldr	r2, [r3, #0]
 8020f5e:	693b      	ldr	r3, [r7, #16]
 8020f60:	4413      	add	r3, r2
 8020f62:	687a      	ldr	r2, [r7, #4]
 8020f64:	4907      	ldr	r1, [pc, #28]	; (8020f84 <lwip_cyclic_timer+0x60>)
 8020f66:	4618      	mov	r0, r3
 8020f68:	f7ff ff6e 	bl	8020e48 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8020f6c:	e004      	b.n	8020f78 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8020f6e:	687a      	ldr	r2, [r7, #4]
 8020f70:	4904      	ldr	r1, [pc, #16]	; (8020f84 <lwip_cyclic_timer+0x60>)
 8020f72:	68f8      	ldr	r0, [r7, #12]
 8020f74:	f7ff ff68 	bl	8020e48 <sys_timeout_abs>
}
 8020f78:	bf00      	nop
 8020f7a:	3718      	adds	r7, #24
 8020f7c:	46bd      	mov	sp, r7
 8020f7e:	bd80      	pop	{r7, pc}
 8020f80:	20008ab0 	.word	0x20008ab0
 8020f84:	08020f25 	.word	0x08020f25

08020f88 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8020f88:	b580      	push	{r7, lr}
 8020f8a:	b082      	sub	sp, #8
 8020f8c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8020f8e:	2301      	movs	r3, #1
 8020f90:	607b      	str	r3, [r7, #4]
 8020f92:	e00e      	b.n	8020fb2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8020f94:	4a0a      	ldr	r2, [pc, #40]	; (8020fc0 <sys_timeouts_init+0x38>)
 8020f96:	687b      	ldr	r3, [r7, #4]
 8020f98:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8020f9c:	687b      	ldr	r3, [r7, #4]
 8020f9e:	00db      	lsls	r3, r3, #3
 8020fa0:	4a07      	ldr	r2, [pc, #28]	; (8020fc0 <sys_timeouts_init+0x38>)
 8020fa2:	4413      	add	r3, r2
 8020fa4:	461a      	mov	r2, r3
 8020fa6:	4907      	ldr	r1, [pc, #28]	; (8020fc4 <sys_timeouts_init+0x3c>)
 8020fa8:	f000 f80e 	bl	8020fc8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8020fac:	687b      	ldr	r3, [r7, #4]
 8020fae:	3301      	adds	r3, #1
 8020fb0:	607b      	str	r3, [r7, #4]
 8020fb2:	687b      	ldr	r3, [r7, #4]
 8020fb4:	2b05      	cmp	r3, #5
 8020fb6:	d9ed      	bls.n	8020f94 <sys_timeouts_init+0xc>
  }
}
 8020fb8:	bf00      	nop
 8020fba:	3708      	adds	r7, #8
 8020fbc:	46bd      	mov	sp, r7
 8020fbe:	bd80      	pop	{r7, pc}
 8020fc0:	08028b40 	.word	0x08028b40
 8020fc4:	08020f25 	.word	0x08020f25

08020fc8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8020fc8:	b580      	push	{r7, lr}
 8020fca:	b086      	sub	sp, #24
 8020fcc:	af00      	add	r7, sp, #0
 8020fce:	60f8      	str	r0, [r7, #12]
 8020fd0:	60b9      	str	r1, [r7, #8]
 8020fd2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8020fd4:	68fb      	ldr	r3, [r7, #12]
 8020fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8020fda:	d306      	bcc.n	8020fea <sys_timeout+0x22>
 8020fdc:	4b0a      	ldr	r3, [pc, #40]	; (8021008 <sys_timeout+0x40>)
 8020fde:	f240 1229 	movw	r2, #297	; 0x129
 8020fe2:	490a      	ldr	r1, [pc, #40]	; (802100c <sys_timeout+0x44>)
 8020fe4:	480a      	ldr	r0, [pc, #40]	; (8021010 <sys_timeout+0x48>)
 8020fe6:	f002 ffff 	bl	8023fe8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8020fea:	f7df fed9 	bl	8000da0 <sys_now>
 8020fee:	4602      	mov	r2, r0
 8020ff0:	68fb      	ldr	r3, [r7, #12]
 8020ff2:	4413      	add	r3, r2
 8020ff4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8020ff6:	687a      	ldr	r2, [r7, #4]
 8020ff8:	68b9      	ldr	r1, [r7, #8]
 8020ffa:	6978      	ldr	r0, [r7, #20]
 8020ffc:	f7ff ff24 	bl	8020e48 <sys_timeout_abs>
#endif
}
 8021000:	bf00      	nop
 8021002:	3718      	adds	r7, #24
 8021004:	46bd      	mov	sp, r7
 8021006:	bd80      	pop	{r7, pc}
 8021008:	08028528 	.word	0x08028528
 802100c:	080285e0 	.word	0x080285e0
 8021010:	080285b8 	.word	0x080285b8

08021014 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8021014:	b580      	push	{r7, lr}
 8021016:	b084      	sub	sp, #16
 8021018:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 802101a:	f7df fec1 	bl	8000da0 <sys_now>
 802101e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8021020:	4b17      	ldr	r3, [pc, #92]	; (8021080 <sys_check_timeouts+0x6c>)
 8021022:	681b      	ldr	r3, [r3, #0]
 8021024:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8021026:	68bb      	ldr	r3, [r7, #8]
 8021028:	2b00      	cmp	r3, #0
 802102a:	d022      	beq.n	8021072 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 802102c:	68bb      	ldr	r3, [r7, #8]
 802102e:	685b      	ldr	r3, [r3, #4]
 8021030:	68fa      	ldr	r2, [r7, #12]
 8021032:	1ad3      	subs	r3, r2, r3
 8021034:	0fdb      	lsrs	r3, r3, #31
 8021036:	f003 0301 	and.w	r3, r3, #1
 802103a:	b2db      	uxtb	r3, r3
 802103c:	2b00      	cmp	r3, #0
 802103e:	d11a      	bne.n	8021076 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8021040:	68bb      	ldr	r3, [r7, #8]
 8021042:	681b      	ldr	r3, [r3, #0]
 8021044:	4a0e      	ldr	r2, [pc, #56]	; (8021080 <sys_check_timeouts+0x6c>)
 8021046:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8021048:	68bb      	ldr	r3, [r7, #8]
 802104a:	689b      	ldr	r3, [r3, #8]
 802104c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 802104e:	68bb      	ldr	r3, [r7, #8]
 8021050:	68db      	ldr	r3, [r3, #12]
 8021052:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8021054:	68bb      	ldr	r3, [r7, #8]
 8021056:	685b      	ldr	r3, [r3, #4]
 8021058:	4a0a      	ldr	r2, [pc, #40]	; (8021084 <sys_check_timeouts+0x70>)
 802105a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 802105c:	68b9      	ldr	r1, [r7, #8]
 802105e:	200a      	movs	r0, #10
 8021060:	f7f8 f81a 	bl	8019098 <memp_free>
    if (handler != NULL) {
 8021064:	687b      	ldr	r3, [r7, #4]
 8021066:	2b00      	cmp	r3, #0
 8021068:	d0da      	beq.n	8021020 <sys_check_timeouts+0xc>
      handler(arg);
 802106a:	687b      	ldr	r3, [r7, #4]
 802106c:	6838      	ldr	r0, [r7, #0]
 802106e:	4798      	blx	r3
  do {
 8021070:	e7d6      	b.n	8021020 <sys_check_timeouts+0xc>
      return;
 8021072:	bf00      	nop
 8021074:	e000      	b.n	8021078 <sys_check_timeouts+0x64>
      return;
 8021076:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8021078:	3710      	adds	r7, #16
 802107a:	46bd      	mov	sp, r7
 802107c:	bd80      	pop	{r7, pc}
 802107e:	bf00      	nop
 8021080:	20008aac 	.word	0x20008aac
 8021084:	20008ab0 	.word	0x20008ab0

08021088 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8021088:	b580      	push	{r7, lr}
 802108a:	b082      	sub	sp, #8
 802108c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 802108e:	4b16      	ldr	r3, [pc, #88]	; (80210e8 <sys_timeouts_sleeptime+0x60>)
 8021090:	681b      	ldr	r3, [r3, #0]
 8021092:	2b00      	cmp	r3, #0
 8021094:	d102      	bne.n	802109c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8021096:	f04f 33ff 	mov.w	r3, #4294967295
 802109a:	e020      	b.n	80210de <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 802109c:	f7df fe80 	bl	8000da0 <sys_now>
 80210a0:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80210a2:	4b11      	ldr	r3, [pc, #68]	; (80210e8 <sys_timeouts_sleeptime+0x60>)
 80210a4:	681b      	ldr	r3, [r3, #0]
 80210a6:	685a      	ldr	r2, [r3, #4]
 80210a8:	687b      	ldr	r3, [r7, #4]
 80210aa:	1ad3      	subs	r3, r2, r3
 80210ac:	0fdb      	lsrs	r3, r3, #31
 80210ae:	f003 0301 	and.w	r3, r3, #1
 80210b2:	b2db      	uxtb	r3, r3
 80210b4:	2b00      	cmp	r3, #0
 80210b6:	d001      	beq.n	80210bc <sys_timeouts_sleeptime+0x34>
    return 0;
 80210b8:	2300      	movs	r3, #0
 80210ba:	e010      	b.n	80210de <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80210bc:	4b0a      	ldr	r3, [pc, #40]	; (80210e8 <sys_timeouts_sleeptime+0x60>)
 80210be:	681b      	ldr	r3, [r3, #0]
 80210c0:	685a      	ldr	r2, [r3, #4]
 80210c2:	687b      	ldr	r3, [r7, #4]
 80210c4:	1ad3      	subs	r3, r2, r3
 80210c6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80210c8:	683b      	ldr	r3, [r7, #0]
 80210ca:	2b00      	cmp	r3, #0
 80210cc:	da06      	bge.n	80210dc <sys_timeouts_sleeptime+0x54>
 80210ce:	4b07      	ldr	r3, [pc, #28]	; (80210ec <sys_timeouts_sleeptime+0x64>)
 80210d0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80210d4:	4906      	ldr	r1, [pc, #24]	; (80210f0 <sys_timeouts_sleeptime+0x68>)
 80210d6:	4807      	ldr	r0, [pc, #28]	; (80210f4 <sys_timeouts_sleeptime+0x6c>)
 80210d8:	f002 ff86 	bl	8023fe8 <iprintf>
    return ret;
 80210dc:	683b      	ldr	r3, [r7, #0]
  }
}
 80210de:	4618      	mov	r0, r3
 80210e0:	3708      	adds	r7, #8
 80210e2:	46bd      	mov	sp, r7
 80210e4:	bd80      	pop	{r7, pc}
 80210e6:	bf00      	nop
 80210e8:	20008aac 	.word	0x20008aac
 80210ec:	08028528 	.word	0x08028528
 80210f0:	08028618 	.word	0x08028618
 80210f4:	080285b8 	.word	0x080285b8

080210f8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80210f8:	b580      	push	{r7, lr}
 80210fa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80210fc:	f002 ff8c 	bl	8024018 <rand>
 8021100:	4603      	mov	r3, r0
 8021102:	b29b      	uxth	r3, r3
 8021104:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8021108:	b29b      	uxth	r3, r3
 802110a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 802110e:	b29a      	uxth	r2, r3
 8021110:	4b01      	ldr	r3, [pc, #4]	; (8021118 <udp_init+0x20>)
 8021112:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8021114:	bf00      	nop
 8021116:	bd80      	pop	{r7, pc}
 8021118:	20000020 	.word	0x20000020

0802111c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 802111c:	b480      	push	{r7}
 802111e:	b083      	sub	sp, #12
 8021120:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8021122:	2300      	movs	r3, #0
 8021124:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8021126:	4b17      	ldr	r3, [pc, #92]	; (8021184 <udp_new_port+0x68>)
 8021128:	881b      	ldrh	r3, [r3, #0]
 802112a:	1c5a      	adds	r2, r3, #1
 802112c:	b291      	uxth	r1, r2
 802112e:	4a15      	ldr	r2, [pc, #84]	; (8021184 <udp_new_port+0x68>)
 8021130:	8011      	strh	r1, [r2, #0]
 8021132:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8021136:	4293      	cmp	r3, r2
 8021138:	d103      	bne.n	8021142 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 802113a:	4b12      	ldr	r3, [pc, #72]	; (8021184 <udp_new_port+0x68>)
 802113c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8021140:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8021142:	4b11      	ldr	r3, [pc, #68]	; (8021188 <udp_new_port+0x6c>)
 8021144:	681b      	ldr	r3, [r3, #0]
 8021146:	603b      	str	r3, [r7, #0]
 8021148:	e011      	b.n	802116e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 802114a:	683b      	ldr	r3, [r7, #0]
 802114c:	8a5a      	ldrh	r2, [r3, #18]
 802114e:	4b0d      	ldr	r3, [pc, #52]	; (8021184 <udp_new_port+0x68>)
 8021150:	881b      	ldrh	r3, [r3, #0]
 8021152:	429a      	cmp	r2, r3
 8021154:	d108      	bne.n	8021168 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8021156:	88fb      	ldrh	r3, [r7, #6]
 8021158:	3301      	adds	r3, #1
 802115a:	80fb      	strh	r3, [r7, #6]
 802115c:	88fb      	ldrh	r3, [r7, #6]
 802115e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8021162:	d3e0      	bcc.n	8021126 <udp_new_port+0xa>
        return 0;
 8021164:	2300      	movs	r3, #0
 8021166:	e007      	b.n	8021178 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8021168:	683b      	ldr	r3, [r7, #0]
 802116a:	68db      	ldr	r3, [r3, #12]
 802116c:	603b      	str	r3, [r7, #0]
 802116e:	683b      	ldr	r3, [r7, #0]
 8021170:	2b00      	cmp	r3, #0
 8021172:	d1ea      	bne.n	802114a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8021174:	4b03      	ldr	r3, [pc, #12]	; (8021184 <udp_new_port+0x68>)
 8021176:	881b      	ldrh	r3, [r3, #0]
}
 8021178:	4618      	mov	r0, r3
 802117a:	370c      	adds	r7, #12
 802117c:	46bd      	mov	sp, r7
 802117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021182:	4770      	bx	lr
 8021184:	20000020 	.word	0x20000020
 8021188:	20011838 	.word	0x20011838

0802118c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 802118c:	b580      	push	{r7, lr}
 802118e:	b084      	sub	sp, #16
 8021190:	af00      	add	r7, sp, #0
 8021192:	60f8      	str	r0, [r7, #12]
 8021194:	60b9      	str	r1, [r7, #8]
 8021196:	4613      	mov	r3, r2
 8021198:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 802119a:	68fb      	ldr	r3, [r7, #12]
 802119c:	2b00      	cmp	r3, #0
 802119e:	d105      	bne.n	80211ac <udp_input_local_match+0x20>
 80211a0:	4b27      	ldr	r3, [pc, #156]	; (8021240 <udp_input_local_match+0xb4>)
 80211a2:	2287      	movs	r2, #135	; 0x87
 80211a4:	4927      	ldr	r1, [pc, #156]	; (8021244 <udp_input_local_match+0xb8>)
 80211a6:	4828      	ldr	r0, [pc, #160]	; (8021248 <udp_input_local_match+0xbc>)
 80211a8:	f002 ff1e 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80211ac:	68bb      	ldr	r3, [r7, #8]
 80211ae:	2b00      	cmp	r3, #0
 80211b0:	d105      	bne.n	80211be <udp_input_local_match+0x32>
 80211b2:	4b23      	ldr	r3, [pc, #140]	; (8021240 <udp_input_local_match+0xb4>)
 80211b4:	2288      	movs	r2, #136	; 0x88
 80211b6:	4925      	ldr	r1, [pc, #148]	; (802124c <udp_input_local_match+0xc0>)
 80211b8:	4823      	ldr	r0, [pc, #140]	; (8021248 <udp_input_local_match+0xbc>)
 80211ba:	f002 ff15 	bl	8023fe8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80211be:	68fb      	ldr	r3, [r7, #12]
 80211c0:	7a1b      	ldrb	r3, [r3, #8]
 80211c2:	2b00      	cmp	r3, #0
 80211c4:	d00b      	beq.n	80211de <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80211c6:	68fb      	ldr	r3, [r7, #12]
 80211c8:	7a1a      	ldrb	r2, [r3, #8]
 80211ca:	4b21      	ldr	r3, [pc, #132]	; (8021250 <udp_input_local_match+0xc4>)
 80211cc:	685b      	ldr	r3, [r3, #4]
 80211ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80211d2:	3301      	adds	r3, #1
 80211d4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80211d6:	429a      	cmp	r2, r3
 80211d8:	d001      	beq.n	80211de <udp_input_local_match+0x52>
    return 0;
 80211da:	2300      	movs	r3, #0
 80211dc:	e02b      	b.n	8021236 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80211de:	79fb      	ldrb	r3, [r7, #7]
 80211e0:	2b00      	cmp	r3, #0
 80211e2:	d018      	beq.n	8021216 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80211e4:	68fb      	ldr	r3, [r7, #12]
 80211e6:	2b00      	cmp	r3, #0
 80211e8:	d013      	beq.n	8021212 <udp_input_local_match+0x86>
 80211ea:	68fb      	ldr	r3, [r7, #12]
 80211ec:	681b      	ldr	r3, [r3, #0]
 80211ee:	2b00      	cmp	r3, #0
 80211f0:	d00f      	beq.n	8021212 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80211f2:	4b17      	ldr	r3, [pc, #92]	; (8021250 <udp_input_local_match+0xc4>)
 80211f4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80211f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80211fa:	d00a      	beq.n	8021212 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80211fc:	68fb      	ldr	r3, [r7, #12]
 80211fe:	681a      	ldr	r2, [r3, #0]
 8021200:	4b13      	ldr	r3, [pc, #76]	; (8021250 <udp_input_local_match+0xc4>)
 8021202:	695b      	ldr	r3, [r3, #20]
 8021204:	405a      	eors	r2, r3
 8021206:	68bb      	ldr	r3, [r7, #8]
 8021208:	3308      	adds	r3, #8
 802120a:	681b      	ldr	r3, [r3, #0]
 802120c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 802120e:	2b00      	cmp	r3, #0
 8021210:	d110      	bne.n	8021234 <udp_input_local_match+0xa8>
          return 1;
 8021212:	2301      	movs	r3, #1
 8021214:	e00f      	b.n	8021236 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8021216:	68fb      	ldr	r3, [r7, #12]
 8021218:	2b00      	cmp	r3, #0
 802121a:	d009      	beq.n	8021230 <udp_input_local_match+0xa4>
 802121c:	68fb      	ldr	r3, [r7, #12]
 802121e:	681b      	ldr	r3, [r3, #0]
 8021220:	2b00      	cmp	r3, #0
 8021222:	d005      	beq.n	8021230 <udp_input_local_match+0xa4>
 8021224:	68fb      	ldr	r3, [r7, #12]
 8021226:	681a      	ldr	r2, [r3, #0]
 8021228:	4b09      	ldr	r3, [pc, #36]	; (8021250 <udp_input_local_match+0xc4>)
 802122a:	695b      	ldr	r3, [r3, #20]
 802122c:	429a      	cmp	r2, r3
 802122e:	d101      	bne.n	8021234 <udp_input_local_match+0xa8>
        return 1;
 8021230:	2301      	movs	r3, #1
 8021232:	e000      	b.n	8021236 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8021234:	2300      	movs	r3, #0
}
 8021236:	4618      	mov	r0, r3
 8021238:	3710      	adds	r7, #16
 802123a:	46bd      	mov	sp, r7
 802123c:	bd80      	pop	{r7, pc}
 802123e:	bf00      	nop
 8021240:	0802862c 	.word	0x0802862c
 8021244:	08028678 	.word	0x08028678
 8021248:	0802869c 	.word	0x0802869c
 802124c:	080286c4 	.word	0x080286c4
 8021250:	2000df98 	.word	0x2000df98

08021254 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8021254:	b590      	push	{r4, r7, lr}
 8021256:	b08d      	sub	sp, #52	; 0x34
 8021258:	af02      	add	r7, sp, #8
 802125a:	6078      	str	r0, [r7, #4]
 802125c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 802125e:	2300      	movs	r3, #0
 8021260:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8021262:	687b      	ldr	r3, [r7, #4]
 8021264:	2b00      	cmp	r3, #0
 8021266:	d105      	bne.n	8021274 <udp_input+0x20>
 8021268:	4b7c      	ldr	r3, [pc, #496]	; (802145c <udp_input+0x208>)
 802126a:	22cf      	movs	r2, #207	; 0xcf
 802126c:	497c      	ldr	r1, [pc, #496]	; (8021460 <udp_input+0x20c>)
 802126e:	487d      	ldr	r0, [pc, #500]	; (8021464 <udp_input+0x210>)
 8021270:	f002 feba 	bl	8023fe8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8021274:	683b      	ldr	r3, [r7, #0]
 8021276:	2b00      	cmp	r3, #0
 8021278:	d105      	bne.n	8021286 <udp_input+0x32>
 802127a:	4b78      	ldr	r3, [pc, #480]	; (802145c <udp_input+0x208>)
 802127c:	22d0      	movs	r2, #208	; 0xd0
 802127e:	497a      	ldr	r1, [pc, #488]	; (8021468 <udp_input+0x214>)
 8021280:	4878      	ldr	r0, [pc, #480]	; (8021464 <udp_input+0x210>)
 8021282:	f002 feb1 	bl	8023fe8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8021286:	687b      	ldr	r3, [r7, #4]
 8021288:	895b      	ldrh	r3, [r3, #10]
 802128a:	2b07      	cmp	r3, #7
 802128c:	d803      	bhi.n	8021296 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 802128e:	6878      	ldr	r0, [r7, #4]
 8021290:	f7f8 fd9a 	bl	8019dc8 <pbuf_free>
    goto end;
 8021294:	e0de      	b.n	8021454 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8021296:	687b      	ldr	r3, [r7, #4]
 8021298:	685b      	ldr	r3, [r3, #4]
 802129a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 802129c:	4b73      	ldr	r3, [pc, #460]	; (802146c <udp_input+0x218>)
 802129e:	695a      	ldr	r2, [r3, #20]
 80212a0:	4b72      	ldr	r3, [pc, #456]	; (802146c <udp_input+0x218>)
 80212a2:	681b      	ldr	r3, [r3, #0]
 80212a4:	4619      	mov	r1, r3
 80212a6:	4610      	mov	r0, r2
 80212a8:	f7f6 fbbe 	bl	8017a28 <ip4_addr_isbroadcast_u32>
 80212ac:	4603      	mov	r3, r0
 80212ae:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80212b0:	697b      	ldr	r3, [r7, #20]
 80212b2:	881b      	ldrh	r3, [r3, #0]
 80212b4:	b29b      	uxth	r3, r3
 80212b6:	4618      	mov	r0, r3
 80212b8:	f7f2 fd74 	bl	8013da4 <lwip_htons>
 80212bc:	4603      	mov	r3, r0
 80212be:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80212c0:	697b      	ldr	r3, [r7, #20]
 80212c2:	885b      	ldrh	r3, [r3, #2]
 80212c4:	b29b      	uxth	r3, r3
 80212c6:	4618      	mov	r0, r3
 80212c8:	f7f2 fd6c 	bl	8013da4 <lwip_htons>
 80212cc:	4603      	mov	r3, r0
 80212ce:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80212d0:	2300      	movs	r3, #0
 80212d2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80212d4:	2300      	movs	r3, #0
 80212d6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80212d8:	2300      	movs	r3, #0
 80212da:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80212dc:	4b64      	ldr	r3, [pc, #400]	; (8021470 <udp_input+0x21c>)
 80212de:	681b      	ldr	r3, [r3, #0]
 80212e0:	627b      	str	r3, [r7, #36]	; 0x24
 80212e2:	e054      	b.n	802138e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80212e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80212e6:	8a5b      	ldrh	r3, [r3, #18]
 80212e8:	89fa      	ldrh	r2, [r7, #14]
 80212ea:	429a      	cmp	r2, r3
 80212ec:	d14a      	bne.n	8021384 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80212ee:	7cfb      	ldrb	r3, [r7, #19]
 80212f0:	461a      	mov	r2, r3
 80212f2:	6839      	ldr	r1, [r7, #0]
 80212f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80212f6:	f7ff ff49 	bl	802118c <udp_input_local_match>
 80212fa:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80212fc:	2b00      	cmp	r3, #0
 80212fe:	d041      	beq.n	8021384 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8021300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021302:	7c1b      	ldrb	r3, [r3, #16]
 8021304:	f003 0304 	and.w	r3, r3, #4
 8021308:	2b00      	cmp	r3, #0
 802130a:	d11d      	bne.n	8021348 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 802130c:	69fb      	ldr	r3, [r7, #28]
 802130e:	2b00      	cmp	r3, #0
 8021310:	d102      	bne.n	8021318 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8021312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021314:	61fb      	str	r3, [r7, #28]
 8021316:	e017      	b.n	8021348 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8021318:	7cfb      	ldrb	r3, [r7, #19]
 802131a:	2b00      	cmp	r3, #0
 802131c:	d014      	beq.n	8021348 <udp_input+0xf4>
 802131e:	4b53      	ldr	r3, [pc, #332]	; (802146c <udp_input+0x218>)
 8021320:	695b      	ldr	r3, [r3, #20]
 8021322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021326:	d10f      	bne.n	8021348 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8021328:	69fb      	ldr	r3, [r7, #28]
 802132a:	681a      	ldr	r2, [r3, #0]
 802132c:	683b      	ldr	r3, [r7, #0]
 802132e:	3304      	adds	r3, #4
 8021330:	681b      	ldr	r3, [r3, #0]
 8021332:	429a      	cmp	r2, r3
 8021334:	d008      	beq.n	8021348 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8021336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021338:	681a      	ldr	r2, [r3, #0]
 802133a:	683b      	ldr	r3, [r7, #0]
 802133c:	3304      	adds	r3, #4
 802133e:	681b      	ldr	r3, [r3, #0]
 8021340:	429a      	cmp	r2, r3
 8021342:	d101      	bne.n	8021348 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8021344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021346:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8021348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802134a:	8a9b      	ldrh	r3, [r3, #20]
 802134c:	8a3a      	ldrh	r2, [r7, #16]
 802134e:	429a      	cmp	r2, r3
 8021350:	d118      	bne.n	8021384 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8021352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021354:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8021356:	2b00      	cmp	r3, #0
 8021358:	d005      	beq.n	8021366 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 802135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802135c:	685a      	ldr	r2, [r3, #4]
 802135e:	4b43      	ldr	r3, [pc, #268]	; (802146c <udp_input+0x218>)
 8021360:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8021362:	429a      	cmp	r2, r3
 8021364:	d10e      	bne.n	8021384 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8021366:	6a3b      	ldr	r3, [r7, #32]
 8021368:	2b00      	cmp	r3, #0
 802136a:	d014      	beq.n	8021396 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 802136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802136e:	68da      	ldr	r2, [r3, #12]
 8021370:	6a3b      	ldr	r3, [r7, #32]
 8021372:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8021374:	4b3e      	ldr	r3, [pc, #248]	; (8021470 <udp_input+0x21c>)
 8021376:	681a      	ldr	r2, [r3, #0]
 8021378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802137a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 802137c:	4a3c      	ldr	r2, [pc, #240]	; (8021470 <udp_input+0x21c>)
 802137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021380:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8021382:	e008      	b.n	8021396 <udp_input+0x142>
      }
    }

    prev = pcb;
 8021384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021386:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8021388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802138a:	68db      	ldr	r3, [r3, #12]
 802138c:	627b      	str	r3, [r7, #36]	; 0x24
 802138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021390:	2b00      	cmp	r3, #0
 8021392:	d1a7      	bne.n	80212e4 <udp_input+0x90>
 8021394:	e000      	b.n	8021398 <udp_input+0x144>
        break;
 8021396:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8021398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802139a:	2b00      	cmp	r3, #0
 802139c:	d101      	bne.n	80213a2 <udp_input+0x14e>
    pcb = uncon_pcb;
 802139e:	69fb      	ldr	r3, [r7, #28]
 80213a0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80213a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213a4:	2b00      	cmp	r3, #0
 80213a6:	d002      	beq.n	80213ae <udp_input+0x15a>
    for_us = 1;
 80213a8:	2301      	movs	r3, #1
 80213aa:	76fb      	strb	r3, [r7, #27]
 80213ac:	e00a      	b.n	80213c4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80213ae:	683b      	ldr	r3, [r7, #0]
 80213b0:	3304      	adds	r3, #4
 80213b2:	681a      	ldr	r2, [r3, #0]
 80213b4:	4b2d      	ldr	r3, [pc, #180]	; (802146c <udp_input+0x218>)
 80213b6:	695b      	ldr	r3, [r3, #20]
 80213b8:	429a      	cmp	r2, r3
 80213ba:	bf0c      	ite	eq
 80213bc:	2301      	moveq	r3, #1
 80213be:	2300      	movne	r3, #0
 80213c0:	b2db      	uxtb	r3, r3
 80213c2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80213c4:	7efb      	ldrb	r3, [r7, #27]
 80213c6:	2b00      	cmp	r3, #0
 80213c8:	d041      	beq.n	802144e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80213ca:	2108      	movs	r1, #8
 80213cc:	6878      	ldr	r0, [r7, #4]
 80213ce:	f7f8 fc75 	bl	8019cbc <pbuf_remove_header>
 80213d2:	4603      	mov	r3, r0
 80213d4:	2b00      	cmp	r3, #0
 80213d6:	d00a      	beq.n	80213ee <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80213d8:	4b20      	ldr	r3, [pc, #128]	; (802145c <udp_input+0x208>)
 80213da:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80213de:	4925      	ldr	r1, [pc, #148]	; (8021474 <udp_input+0x220>)
 80213e0:	4820      	ldr	r0, [pc, #128]	; (8021464 <udp_input+0x210>)
 80213e2:	f002 fe01 	bl	8023fe8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80213e6:	6878      	ldr	r0, [r7, #4]
 80213e8:	f7f8 fcee 	bl	8019dc8 <pbuf_free>
      goto end;
 80213ec:	e032      	b.n	8021454 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80213ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213f0:	2b00      	cmp	r3, #0
 80213f2:	d012      	beq.n	802141a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80213f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213f6:	699b      	ldr	r3, [r3, #24]
 80213f8:	2b00      	cmp	r3, #0
 80213fa:	d00a      	beq.n	8021412 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80213fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213fe:	699c      	ldr	r4, [r3, #24]
 8021400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021402:	69d8      	ldr	r0, [r3, #28]
 8021404:	8a3b      	ldrh	r3, [r7, #16]
 8021406:	9300      	str	r3, [sp, #0]
 8021408:	4b1b      	ldr	r3, [pc, #108]	; (8021478 <udp_input+0x224>)
 802140a:	687a      	ldr	r2, [r7, #4]
 802140c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802140e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8021410:	e021      	b.n	8021456 <udp_input+0x202>
        pbuf_free(p);
 8021412:	6878      	ldr	r0, [r7, #4]
 8021414:	f7f8 fcd8 	bl	8019dc8 <pbuf_free>
        goto end;
 8021418:	e01c      	b.n	8021454 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 802141a:	7cfb      	ldrb	r3, [r7, #19]
 802141c:	2b00      	cmp	r3, #0
 802141e:	d112      	bne.n	8021446 <udp_input+0x1f2>
 8021420:	4b12      	ldr	r3, [pc, #72]	; (802146c <udp_input+0x218>)
 8021422:	695b      	ldr	r3, [r3, #20]
 8021424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021428:	2be0      	cmp	r3, #224	; 0xe0
 802142a:	d00c      	beq.n	8021446 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 802142c:	4b0f      	ldr	r3, [pc, #60]	; (802146c <udp_input+0x218>)
 802142e:	899b      	ldrh	r3, [r3, #12]
 8021430:	3308      	adds	r3, #8
 8021432:	b29b      	uxth	r3, r3
 8021434:	b21b      	sxth	r3, r3
 8021436:	4619      	mov	r1, r3
 8021438:	6878      	ldr	r0, [r7, #4]
 802143a:	f7f8 fcb2 	bl	8019da2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 802143e:	2103      	movs	r1, #3
 8021440:	6878      	ldr	r0, [r7, #4]
 8021442:	f7f5 ff9b 	bl	801737c <icmp_dest_unreach>
      pbuf_free(p);
 8021446:	6878      	ldr	r0, [r7, #4]
 8021448:	f7f8 fcbe 	bl	8019dc8 <pbuf_free>
  return;
 802144c:	e003      	b.n	8021456 <udp_input+0x202>
    pbuf_free(p);
 802144e:	6878      	ldr	r0, [r7, #4]
 8021450:	f7f8 fcba 	bl	8019dc8 <pbuf_free>
  return;
 8021454:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8021456:	372c      	adds	r7, #44	; 0x2c
 8021458:	46bd      	mov	sp, r7
 802145a:	bd90      	pop	{r4, r7, pc}
 802145c:	0802862c 	.word	0x0802862c
 8021460:	080286ec 	.word	0x080286ec
 8021464:	0802869c 	.word	0x0802869c
 8021468:	08028704 	.word	0x08028704
 802146c:	2000df98 	.word	0x2000df98
 8021470:	20011838 	.word	0x20011838
 8021474:	08028720 	.word	0x08028720
 8021478:	2000dfa8 	.word	0x2000dfa8

0802147c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 802147c:	b580      	push	{r7, lr}
 802147e:	b088      	sub	sp, #32
 8021480:	af02      	add	r7, sp, #8
 8021482:	60f8      	str	r0, [r7, #12]
 8021484:	60b9      	str	r1, [r7, #8]
 8021486:	607a      	str	r2, [r7, #4]
 8021488:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 802148a:	68fb      	ldr	r3, [r7, #12]
 802148c:	2b00      	cmp	r3, #0
 802148e:	d109      	bne.n	80214a4 <udp_sendto+0x28>
 8021490:	4b23      	ldr	r3, [pc, #140]	; (8021520 <udp_sendto+0xa4>)
 8021492:	f44f 7206 	mov.w	r2, #536	; 0x218
 8021496:	4923      	ldr	r1, [pc, #140]	; (8021524 <udp_sendto+0xa8>)
 8021498:	4823      	ldr	r0, [pc, #140]	; (8021528 <udp_sendto+0xac>)
 802149a:	f002 fda5 	bl	8023fe8 <iprintf>
 802149e:	f06f 030f 	mvn.w	r3, #15
 80214a2:	e038      	b.n	8021516 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80214a4:	68bb      	ldr	r3, [r7, #8]
 80214a6:	2b00      	cmp	r3, #0
 80214a8:	d109      	bne.n	80214be <udp_sendto+0x42>
 80214aa:	4b1d      	ldr	r3, [pc, #116]	; (8021520 <udp_sendto+0xa4>)
 80214ac:	f240 2219 	movw	r2, #537	; 0x219
 80214b0:	491e      	ldr	r1, [pc, #120]	; (802152c <udp_sendto+0xb0>)
 80214b2:	481d      	ldr	r0, [pc, #116]	; (8021528 <udp_sendto+0xac>)
 80214b4:	f002 fd98 	bl	8023fe8 <iprintf>
 80214b8:	f06f 030f 	mvn.w	r3, #15
 80214bc:	e02b      	b.n	8021516 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80214be:	687b      	ldr	r3, [r7, #4]
 80214c0:	2b00      	cmp	r3, #0
 80214c2:	d109      	bne.n	80214d8 <udp_sendto+0x5c>
 80214c4:	4b16      	ldr	r3, [pc, #88]	; (8021520 <udp_sendto+0xa4>)
 80214c6:	f240 221a 	movw	r2, #538	; 0x21a
 80214ca:	4919      	ldr	r1, [pc, #100]	; (8021530 <udp_sendto+0xb4>)
 80214cc:	4816      	ldr	r0, [pc, #88]	; (8021528 <udp_sendto+0xac>)
 80214ce:	f002 fd8b 	bl	8023fe8 <iprintf>
 80214d2:	f06f 030f 	mvn.w	r3, #15
 80214d6:	e01e      	b.n	8021516 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80214d8:	68fb      	ldr	r3, [r7, #12]
 80214da:	7a1b      	ldrb	r3, [r3, #8]
 80214dc:	2b00      	cmp	r3, #0
 80214de:	d006      	beq.n	80214ee <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80214e0:	68fb      	ldr	r3, [r7, #12]
 80214e2:	7a1b      	ldrb	r3, [r3, #8]
 80214e4:	4618      	mov	r0, r3
 80214e6:	f7f8 f8e5 	bl	80196b4 <netif_get_by_index>
 80214ea:	6178      	str	r0, [r7, #20]
 80214ec:	e003      	b.n	80214f6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80214ee:	6878      	ldr	r0, [r7, #4]
 80214f0:	f7f5 ffe8 	bl	80174c4 <ip4_route>
 80214f4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80214f6:	697b      	ldr	r3, [r7, #20]
 80214f8:	2b00      	cmp	r3, #0
 80214fa:	d102      	bne.n	8021502 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80214fc:	f06f 0303 	mvn.w	r3, #3
 8021500:	e009      	b.n	8021516 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8021502:	887a      	ldrh	r2, [r7, #2]
 8021504:	697b      	ldr	r3, [r7, #20]
 8021506:	9300      	str	r3, [sp, #0]
 8021508:	4613      	mov	r3, r2
 802150a:	687a      	ldr	r2, [r7, #4]
 802150c:	68b9      	ldr	r1, [r7, #8]
 802150e:	68f8      	ldr	r0, [r7, #12]
 8021510:	f000 f810 	bl	8021534 <udp_sendto_if>
 8021514:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8021516:	4618      	mov	r0, r3
 8021518:	3718      	adds	r7, #24
 802151a:	46bd      	mov	sp, r7
 802151c:	bd80      	pop	{r7, pc}
 802151e:	bf00      	nop
 8021520:	0802862c 	.word	0x0802862c
 8021524:	0802876c 	.word	0x0802876c
 8021528:	0802869c 	.word	0x0802869c
 802152c:	08028784 	.word	0x08028784
 8021530:	080287a0 	.word	0x080287a0

08021534 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8021534:	b580      	push	{r7, lr}
 8021536:	b088      	sub	sp, #32
 8021538:	af02      	add	r7, sp, #8
 802153a:	60f8      	str	r0, [r7, #12]
 802153c:	60b9      	str	r1, [r7, #8]
 802153e:	607a      	str	r2, [r7, #4]
 8021540:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8021542:	68fb      	ldr	r3, [r7, #12]
 8021544:	2b00      	cmp	r3, #0
 8021546:	d109      	bne.n	802155c <udp_sendto_if+0x28>
 8021548:	4b2e      	ldr	r3, [pc, #184]	; (8021604 <udp_sendto_if+0xd0>)
 802154a:	f44f 7220 	mov.w	r2, #640	; 0x280
 802154e:	492e      	ldr	r1, [pc, #184]	; (8021608 <udp_sendto_if+0xd4>)
 8021550:	482e      	ldr	r0, [pc, #184]	; (802160c <udp_sendto_if+0xd8>)
 8021552:	f002 fd49 	bl	8023fe8 <iprintf>
 8021556:	f06f 030f 	mvn.w	r3, #15
 802155a:	e04f      	b.n	80215fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 802155c:	68bb      	ldr	r3, [r7, #8]
 802155e:	2b00      	cmp	r3, #0
 8021560:	d109      	bne.n	8021576 <udp_sendto_if+0x42>
 8021562:	4b28      	ldr	r3, [pc, #160]	; (8021604 <udp_sendto_if+0xd0>)
 8021564:	f240 2281 	movw	r2, #641	; 0x281
 8021568:	4929      	ldr	r1, [pc, #164]	; (8021610 <udp_sendto_if+0xdc>)
 802156a:	4828      	ldr	r0, [pc, #160]	; (802160c <udp_sendto_if+0xd8>)
 802156c:	f002 fd3c 	bl	8023fe8 <iprintf>
 8021570:	f06f 030f 	mvn.w	r3, #15
 8021574:	e042      	b.n	80215fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8021576:	687b      	ldr	r3, [r7, #4]
 8021578:	2b00      	cmp	r3, #0
 802157a:	d109      	bne.n	8021590 <udp_sendto_if+0x5c>
 802157c:	4b21      	ldr	r3, [pc, #132]	; (8021604 <udp_sendto_if+0xd0>)
 802157e:	f240 2282 	movw	r2, #642	; 0x282
 8021582:	4924      	ldr	r1, [pc, #144]	; (8021614 <udp_sendto_if+0xe0>)
 8021584:	4821      	ldr	r0, [pc, #132]	; (802160c <udp_sendto_if+0xd8>)
 8021586:	f002 fd2f 	bl	8023fe8 <iprintf>
 802158a:	f06f 030f 	mvn.w	r3, #15
 802158e:	e035      	b.n	80215fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8021590:	6a3b      	ldr	r3, [r7, #32]
 8021592:	2b00      	cmp	r3, #0
 8021594:	d109      	bne.n	80215aa <udp_sendto_if+0x76>
 8021596:	4b1b      	ldr	r3, [pc, #108]	; (8021604 <udp_sendto_if+0xd0>)
 8021598:	f240 2283 	movw	r2, #643	; 0x283
 802159c:	491e      	ldr	r1, [pc, #120]	; (8021618 <udp_sendto_if+0xe4>)
 802159e:	481b      	ldr	r0, [pc, #108]	; (802160c <udp_sendto_if+0xd8>)
 80215a0:	f002 fd22 	bl	8023fe8 <iprintf>
 80215a4:	f06f 030f 	mvn.w	r3, #15
 80215a8:	e028      	b.n	80215fc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80215aa:	68fb      	ldr	r3, [r7, #12]
 80215ac:	2b00      	cmp	r3, #0
 80215ae:	d009      	beq.n	80215c4 <udp_sendto_if+0x90>
 80215b0:	68fb      	ldr	r3, [r7, #12]
 80215b2:	681b      	ldr	r3, [r3, #0]
 80215b4:	2b00      	cmp	r3, #0
 80215b6:	d005      	beq.n	80215c4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80215b8:	68fb      	ldr	r3, [r7, #12]
 80215ba:	681b      	ldr	r3, [r3, #0]
 80215bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80215c0:	2be0      	cmp	r3, #224	; 0xe0
 80215c2:	d103      	bne.n	80215cc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80215c4:	6a3b      	ldr	r3, [r7, #32]
 80215c6:	3304      	adds	r3, #4
 80215c8:	617b      	str	r3, [r7, #20]
 80215ca:	e00b      	b.n	80215e4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80215cc:	68fb      	ldr	r3, [r7, #12]
 80215ce:	681a      	ldr	r2, [r3, #0]
 80215d0:	6a3b      	ldr	r3, [r7, #32]
 80215d2:	3304      	adds	r3, #4
 80215d4:	681b      	ldr	r3, [r3, #0]
 80215d6:	429a      	cmp	r2, r3
 80215d8:	d002      	beq.n	80215e0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80215da:	f06f 0303 	mvn.w	r3, #3
 80215de:	e00d      	b.n	80215fc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80215e0:	68fb      	ldr	r3, [r7, #12]
 80215e2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80215e4:	887a      	ldrh	r2, [r7, #2]
 80215e6:	697b      	ldr	r3, [r7, #20]
 80215e8:	9301      	str	r3, [sp, #4]
 80215ea:	6a3b      	ldr	r3, [r7, #32]
 80215ec:	9300      	str	r3, [sp, #0]
 80215ee:	4613      	mov	r3, r2
 80215f0:	687a      	ldr	r2, [r7, #4]
 80215f2:	68b9      	ldr	r1, [r7, #8]
 80215f4:	68f8      	ldr	r0, [r7, #12]
 80215f6:	f000 f811 	bl	802161c <udp_sendto_if_src>
 80215fa:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80215fc:	4618      	mov	r0, r3
 80215fe:	3718      	adds	r7, #24
 8021600:	46bd      	mov	sp, r7
 8021602:	bd80      	pop	{r7, pc}
 8021604:	0802862c 	.word	0x0802862c
 8021608:	080287bc 	.word	0x080287bc
 802160c:	0802869c 	.word	0x0802869c
 8021610:	080287d8 	.word	0x080287d8
 8021614:	080287f4 	.word	0x080287f4
 8021618:	08028814 	.word	0x08028814

0802161c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 802161c:	b580      	push	{r7, lr}
 802161e:	b08c      	sub	sp, #48	; 0x30
 8021620:	af04      	add	r7, sp, #16
 8021622:	60f8      	str	r0, [r7, #12]
 8021624:	60b9      	str	r1, [r7, #8]
 8021626:	607a      	str	r2, [r7, #4]
 8021628:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 802162a:	68fb      	ldr	r3, [r7, #12]
 802162c:	2b00      	cmp	r3, #0
 802162e:	d109      	bne.n	8021644 <udp_sendto_if_src+0x28>
 8021630:	4b65      	ldr	r3, [pc, #404]	; (80217c8 <udp_sendto_if_src+0x1ac>)
 8021632:	f240 22d1 	movw	r2, #721	; 0x2d1
 8021636:	4965      	ldr	r1, [pc, #404]	; (80217cc <udp_sendto_if_src+0x1b0>)
 8021638:	4865      	ldr	r0, [pc, #404]	; (80217d0 <udp_sendto_if_src+0x1b4>)
 802163a:	f002 fcd5 	bl	8023fe8 <iprintf>
 802163e:	f06f 030f 	mvn.w	r3, #15
 8021642:	e0bc      	b.n	80217be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8021644:	68bb      	ldr	r3, [r7, #8]
 8021646:	2b00      	cmp	r3, #0
 8021648:	d109      	bne.n	802165e <udp_sendto_if_src+0x42>
 802164a:	4b5f      	ldr	r3, [pc, #380]	; (80217c8 <udp_sendto_if_src+0x1ac>)
 802164c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8021650:	4960      	ldr	r1, [pc, #384]	; (80217d4 <udp_sendto_if_src+0x1b8>)
 8021652:	485f      	ldr	r0, [pc, #380]	; (80217d0 <udp_sendto_if_src+0x1b4>)
 8021654:	f002 fcc8 	bl	8023fe8 <iprintf>
 8021658:	f06f 030f 	mvn.w	r3, #15
 802165c:	e0af      	b.n	80217be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 802165e:	687b      	ldr	r3, [r7, #4]
 8021660:	2b00      	cmp	r3, #0
 8021662:	d109      	bne.n	8021678 <udp_sendto_if_src+0x5c>
 8021664:	4b58      	ldr	r3, [pc, #352]	; (80217c8 <udp_sendto_if_src+0x1ac>)
 8021666:	f240 22d3 	movw	r2, #723	; 0x2d3
 802166a:	495b      	ldr	r1, [pc, #364]	; (80217d8 <udp_sendto_if_src+0x1bc>)
 802166c:	4858      	ldr	r0, [pc, #352]	; (80217d0 <udp_sendto_if_src+0x1b4>)
 802166e:	f002 fcbb 	bl	8023fe8 <iprintf>
 8021672:	f06f 030f 	mvn.w	r3, #15
 8021676:	e0a2      	b.n	80217be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8021678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802167a:	2b00      	cmp	r3, #0
 802167c:	d109      	bne.n	8021692 <udp_sendto_if_src+0x76>
 802167e:	4b52      	ldr	r3, [pc, #328]	; (80217c8 <udp_sendto_if_src+0x1ac>)
 8021680:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8021684:	4955      	ldr	r1, [pc, #340]	; (80217dc <udp_sendto_if_src+0x1c0>)
 8021686:	4852      	ldr	r0, [pc, #328]	; (80217d0 <udp_sendto_if_src+0x1b4>)
 8021688:	f002 fcae 	bl	8023fe8 <iprintf>
 802168c:	f06f 030f 	mvn.w	r3, #15
 8021690:	e095      	b.n	80217be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8021692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021694:	2b00      	cmp	r3, #0
 8021696:	d109      	bne.n	80216ac <udp_sendto_if_src+0x90>
 8021698:	4b4b      	ldr	r3, [pc, #300]	; (80217c8 <udp_sendto_if_src+0x1ac>)
 802169a:	f240 22d5 	movw	r2, #725	; 0x2d5
 802169e:	4950      	ldr	r1, [pc, #320]	; (80217e0 <udp_sendto_if_src+0x1c4>)
 80216a0:	484b      	ldr	r0, [pc, #300]	; (80217d0 <udp_sendto_if_src+0x1b4>)
 80216a2:	f002 fca1 	bl	8023fe8 <iprintf>
 80216a6:	f06f 030f 	mvn.w	r3, #15
 80216aa:	e088      	b.n	80217be <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80216ac:	68fb      	ldr	r3, [r7, #12]
 80216ae:	8a5b      	ldrh	r3, [r3, #18]
 80216b0:	2b00      	cmp	r3, #0
 80216b2:	d10f      	bne.n	80216d4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80216b4:	68f9      	ldr	r1, [r7, #12]
 80216b6:	68fb      	ldr	r3, [r7, #12]
 80216b8:	8a5b      	ldrh	r3, [r3, #18]
 80216ba:	461a      	mov	r2, r3
 80216bc:	68f8      	ldr	r0, [r7, #12]
 80216be:	f000 f893 	bl	80217e8 <udp_bind>
 80216c2:	4603      	mov	r3, r0
 80216c4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80216c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80216ca:	2b00      	cmp	r3, #0
 80216cc:	d002      	beq.n	80216d4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80216ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80216d2:	e074      	b.n	80217be <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80216d4:	68bb      	ldr	r3, [r7, #8]
 80216d6:	891b      	ldrh	r3, [r3, #8]
 80216d8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80216dc:	4293      	cmp	r3, r2
 80216de:	d902      	bls.n	80216e6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80216e0:	f04f 33ff 	mov.w	r3, #4294967295
 80216e4:	e06b      	b.n	80217be <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80216e6:	2108      	movs	r1, #8
 80216e8:	68b8      	ldr	r0, [r7, #8]
 80216ea:	f7f8 fad7 	bl	8019c9c <pbuf_add_header>
 80216ee:	4603      	mov	r3, r0
 80216f0:	2b00      	cmp	r3, #0
 80216f2:	d015      	beq.n	8021720 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80216f4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80216f8:	2108      	movs	r1, #8
 80216fa:	2022      	movs	r0, #34	; 0x22
 80216fc:	f7f8 f884 	bl	8019808 <pbuf_alloc>
 8021700:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8021702:	69fb      	ldr	r3, [r7, #28]
 8021704:	2b00      	cmp	r3, #0
 8021706:	d102      	bne.n	802170e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8021708:	f04f 33ff 	mov.w	r3, #4294967295
 802170c:	e057      	b.n	80217be <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 802170e:	68bb      	ldr	r3, [r7, #8]
 8021710:	891b      	ldrh	r3, [r3, #8]
 8021712:	2b00      	cmp	r3, #0
 8021714:	d006      	beq.n	8021724 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8021716:	68b9      	ldr	r1, [r7, #8]
 8021718:	69f8      	ldr	r0, [r7, #28]
 802171a:	f7f8 fc79 	bl	801a010 <pbuf_chain>
 802171e:	e001      	b.n	8021724 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8021720:	68bb      	ldr	r3, [r7, #8]
 8021722:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8021724:	69fb      	ldr	r3, [r7, #28]
 8021726:	895b      	ldrh	r3, [r3, #10]
 8021728:	2b07      	cmp	r3, #7
 802172a:	d806      	bhi.n	802173a <udp_sendto_if_src+0x11e>
 802172c:	4b26      	ldr	r3, [pc, #152]	; (80217c8 <udp_sendto_if_src+0x1ac>)
 802172e:	f240 320e 	movw	r2, #782	; 0x30e
 8021732:	492c      	ldr	r1, [pc, #176]	; (80217e4 <udp_sendto_if_src+0x1c8>)
 8021734:	4826      	ldr	r0, [pc, #152]	; (80217d0 <udp_sendto_if_src+0x1b4>)
 8021736:	f002 fc57 	bl	8023fe8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 802173a:	69fb      	ldr	r3, [r7, #28]
 802173c:	685b      	ldr	r3, [r3, #4]
 802173e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8021740:	68fb      	ldr	r3, [r7, #12]
 8021742:	8a5b      	ldrh	r3, [r3, #18]
 8021744:	4618      	mov	r0, r3
 8021746:	f7f2 fb2d 	bl	8013da4 <lwip_htons>
 802174a:	4603      	mov	r3, r0
 802174c:	461a      	mov	r2, r3
 802174e:	697b      	ldr	r3, [r7, #20]
 8021750:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8021752:	887b      	ldrh	r3, [r7, #2]
 8021754:	4618      	mov	r0, r3
 8021756:	f7f2 fb25 	bl	8013da4 <lwip_htons>
 802175a:	4603      	mov	r3, r0
 802175c:	461a      	mov	r2, r3
 802175e:	697b      	ldr	r3, [r7, #20]
 8021760:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8021762:	697b      	ldr	r3, [r7, #20]
 8021764:	2200      	movs	r2, #0
 8021766:	719a      	strb	r2, [r3, #6]
 8021768:	2200      	movs	r2, #0
 802176a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 802176c:	69fb      	ldr	r3, [r7, #28]
 802176e:	891b      	ldrh	r3, [r3, #8]
 8021770:	4618      	mov	r0, r3
 8021772:	f7f2 fb17 	bl	8013da4 <lwip_htons>
 8021776:	4603      	mov	r3, r0
 8021778:	461a      	mov	r2, r3
 802177a:	697b      	ldr	r3, [r7, #20]
 802177c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 802177e:	2311      	movs	r3, #17
 8021780:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8021782:	68fb      	ldr	r3, [r7, #12]
 8021784:	7adb      	ldrb	r3, [r3, #11]
 8021786:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8021788:	68fb      	ldr	r3, [r7, #12]
 802178a:	7a9b      	ldrb	r3, [r3, #10]
 802178c:	7cb9      	ldrb	r1, [r7, #18]
 802178e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021790:	9202      	str	r2, [sp, #8]
 8021792:	7cfa      	ldrb	r2, [r7, #19]
 8021794:	9201      	str	r2, [sp, #4]
 8021796:	9300      	str	r3, [sp, #0]
 8021798:	460b      	mov	r3, r1
 802179a:	687a      	ldr	r2, [r7, #4]
 802179c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802179e:	69f8      	ldr	r0, [r7, #28]
 80217a0:	f7f6 f894 	bl	80178cc <ip4_output_if_src>
 80217a4:	4603      	mov	r3, r0
 80217a6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80217a8:	69fa      	ldr	r2, [r7, #28]
 80217aa:	68bb      	ldr	r3, [r7, #8]
 80217ac:	429a      	cmp	r2, r3
 80217ae:	d004      	beq.n	80217ba <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80217b0:	69f8      	ldr	r0, [r7, #28]
 80217b2:	f7f8 fb09 	bl	8019dc8 <pbuf_free>
    q = NULL;
 80217b6:	2300      	movs	r3, #0
 80217b8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80217ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80217be:	4618      	mov	r0, r3
 80217c0:	3720      	adds	r7, #32
 80217c2:	46bd      	mov	sp, r7
 80217c4:	bd80      	pop	{r7, pc}
 80217c6:	bf00      	nop
 80217c8:	0802862c 	.word	0x0802862c
 80217cc:	08028834 	.word	0x08028834
 80217d0:	0802869c 	.word	0x0802869c
 80217d4:	08028854 	.word	0x08028854
 80217d8:	08028874 	.word	0x08028874
 80217dc:	08028898 	.word	0x08028898
 80217e0:	080288bc 	.word	0x080288bc
 80217e4:	080288e0 	.word	0x080288e0

080217e8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80217e8:	b580      	push	{r7, lr}
 80217ea:	b086      	sub	sp, #24
 80217ec:	af00      	add	r7, sp, #0
 80217ee:	60f8      	str	r0, [r7, #12]
 80217f0:	60b9      	str	r1, [r7, #8]
 80217f2:	4613      	mov	r3, r2
 80217f4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80217f6:	68bb      	ldr	r3, [r7, #8]
 80217f8:	2b00      	cmp	r3, #0
 80217fa:	d101      	bne.n	8021800 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80217fc:	4b39      	ldr	r3, [pc, #228]	; (80218e4 <udp_bind+0xfc>)
 80217fe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8021800:	68fb      	ldr	r3, [r7, #12]
 8021802:	2b00      	cmp	r3, #0
 8021804:	d109      	bne.n	802181a <udp_bind+0x32>
 8021806:	4b38      	ldr	r3, [pc, #224]	; (80218e8 <udp_bind+0x100>)
 8021808:	f240 32b7 	movw	r2, #951	; 0x3b7
 802180c:	4937      	ldr	r1, [pc, #220]	; (80218ec <udp_bind+0x104>)
 802180e:	4838      	ldr	r0, [pc, #224]	; (80218f0 <udp_bind+0x108>)
 8021810:	f002 fbea 	bl	8023fe8 <iprintf>
 8021814:	f06f 030f 	mvn.w	r3, #15
 8021818:	e060      	b.n	80218dc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 802181a:	2300      	movs	r3, #0
 802181c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802181e:	4b35      	ldr	r3, [pc, #212]	; (80218f4 <udp_bind+0x10c>)
 8021820:	681b      	ldr	r3, [r3, #0]
 8021822:	617b      	str	r3, [r7, #20]
 8021824:	e009      	b.n	802183a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8021826:	68fa      	ldr	r2, [r7, #12]
 8021828:	697b      	ldr	r3, [r7, #20]
 802182a:	429a      	cmp	r2, r3
 802182c:	d102      	bne.n	8021834 <udp_bind+0x4c>
      rebind = 1;
 802182e:	2301      	movs	r3, #1
 8021830:	74fb      	strb	r3, [r7, #19]
      break;
 8021832:	e005      	b.n	8021840 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021834:	697b      	ldr	r3, [r7, #20]
 8021836:	68db      	ldr	r3, [r3, #12]
 8021838:	617b      	str	r3, [r7, #20]
 802183a:	697b      	ldr	r3, [r7, #20]
 802183c:	2b00      	cmp	r3, #0
 802183e:	d1f2      	bne.n	8021826 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8021840:	88fb      	ldrh	r3, [r7, #6]
 8021842:	2b00      	cmp	r3, #0
 8021844:	d109      	bne.n	802185a <udp_bind+0x72>
    port = udp_new_port();
 8021846:	f7ff fc69 	bl	802111c <udp_new_port>
 802184a:	4603      	mov	r3, r0
 802184c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 802184e:	88fb      	ldrh	r3, [r7, #6]
 8021850:	2b00      	cmp	r3, #0
 8021852:	d12c      	bne.n	80218ae <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8021854:	f06f 0307 	mvn.w	r3, #7
 8021858:	e040      	b.n	80218dc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802185a:	4b26      	ldr	r3, [pc, #152]	; (80218f4 <udp_bind+0x10c>)
 802185c:	681b      	ldr	r3, [r3, #0]
 802185e:	617b      	str	r3, [r7, #20]
 8021860:	e022      	b.n	80218a8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8021862:	68fa      	ldr	r2, [r7, #12]
 8021864:	697b      	ldr	r3, [r7, #20]
 8021866:	429a      	cmp	r2, r3
 8021868:	d01b      	beq.n	80218a2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 802186a:	697b      	ldr	r3, [r7, #20]
 802186c:	8a5b      	ldrh	r3, [r3, #18]
 802186e:	88fa      	ldrh	r2, [r7, #6]
 8021870:	429a      	cmp	r2, r3
 8021872:	d116      	bne.n	80218a2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021874:	697b      	ldr	r3, [r7, #20]
 8021876:	681a      	ldr	r2, [r3, #0]
 8021878:	68bb      	ldr	r3, [r7, #8]
 802187a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 802187c:	429a      	cmp	r2, r3
 802187e:	d00d      	beq.n	802189c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021880:	68bb      	ldr	r3, [r7, #8]
 8021882:	2b00      	cmp	r3, #0
 8021884:	d00a      	beq.n	802189c <udp_bind+0xb4>
 8021886:	68bb      	ldr	r3, [r7, #8]
 8021888:	681b      	ldr	r3, [r3, #0]
 802188a:	2b00      	cmp	r3, #0
 802188c:	d006      	beq.n	802189c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 802188e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8021890:	2b00      	cmp	r3, #0
 8021892:	d003      	beq.n	802189c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8021894:	697b      	ldr	r3, [r7, #20]
 8021896:	681b      	ldr	r3, [r3, #0]
 8021898:	2b00      	cmp	r3, #0
 802189a:	d102      	bne.n	80218a2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 802189c:	f06f 0307 	mvn.w	r3, #7
 80218a0:	e01c      	b.n	80218dc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80218a2:	697b      	ldr	r3, [r7, #20]
 80218a4:	68db      	ldr	r3, [r3, #12]
 80218a6:	617b      	str	r3, [r7, #20]
 80218a8:	697b      	ldr	r3, [r7, #20]
 80218aa:	2b00      	cmp	r3, #0
 80218ac:	d1d9      	bne.n	8021862 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80218ae:	68bb      	ldr	r3, [r7, #8]
 80218b0:	2b00      	cmp	r3, #0
 80218b2:	d002      	beq.n	80218ba <udp_bind+0xd2>
 80218b4:	68bb      	ldr	r3, [r7, #8]
 80218b6:	681b      	ldr	r3, [r3, #0]
 80218b8:	e000      	b.n	80218bc <udp_bind+0xd4>
 80218ba:	2300      	movs	r3, #0
 80218bc:	68fa      	ldr	r2, [r7, #12]
 80218be:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80218c0:	68fb      	ldr	r3, [r7, #12]
 80218c2:	88fa      	ldrh	r2, [r7, #6]
 80218c4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80218c6:	7cfb      	ldrb	r3, [r7, #19]
 80218c8:	2b00      	cmp	r3, #0
 80218ca:	d106      	bne.n	80218da <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80218cc:	4b09      	ldr	r3, [pc, #36]	; (80218f4 <udp_bind+0x10c>)
 80218ce:	681a      	ldr	r2, [r3, #0]
 80218d0:	68fb      	ldr	r3, [r7, #12]
 80218d2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80218d4:	4a07      	ldr	r2, [pc, #28]	; (80218f4 <udp_bind+0x10c>)
 80218d6:	68fb      	ldr	r3, [r7, #12]
 80218d8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80218da:	2300      	movs	r3, #0
}
 80218dc:	4618      	mov	r0, r3
 80218de:	3718      	adds	r7, #24
 80218e0:	46bd      	mov	sp, r7
 80218e2:	bd80      	pop	{r7, pc}
 80218e4:	08028a28 	.word	0x08028a28
 80218e8:	0802862c 	.word	0x0802862c
 80218ec:	08028910 	.word	0x08028910
 80218f0:	0802869c 	.word	0x0802869c
 80218f4:	20011838 	.word	0x20011838

080218f8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80218f8:	b580      	push	{r7, lr}
 80218fa:	b086      	sub	sp, #24
 80218fc:	af00      	add	r7, sp, #0
 80218fe:	60f8      	str	r0, [r7, #12]
 8021900:	60b9      	str	r1, [r7, #8]
 8021902:	4613      	mov	r3, r2
 8021904:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8021906:	68fb      	ldr	r3, [r7, #12]
 8021908:	2b00      	cmp	r3, #0
 802190a:	d109      	bne.n	8021920 <udp_connect+0x28>
 802190c:	4b2c      	ldr	r3, [pc, #176]	; (80219c0 <udp_connect+0xc8>)
 802190e:	f240 4235 	movw	r2, #1077	; 0x435
 8021912:	492c      	ldr	r1, [pc, #176]	; (80219c4 <udp_connect+0xcc>)
 8021914:	482c      	ldr	r0, [pc, #176]	; (80219c8 <udp_connect+0xd0>)
 8021916:	f002 fb67 	bl	8023fe8 <iprintf>
 802191a:	f06f 030f 	mvn.w	r3, #15
 802191e:	e04b      	b.n	80219b8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8021920:	68bb      	ldr	r3, [r7, #8]
 8021922:	2b00      	cmp	r3, #0
 8021924:	d109      	bne.n	802193a <udp_connect+0x42>
 8021926:	4b26      	ldr	r3, [pc, #152]	; (80219c0 <udp_connect+0xc8>)
 8021928:	f240 4236 	movw	r2, #1078	; 0x436
 802192c:	4927      	ldr	r1, [pc, #156]	; (80219cc <udp_connect+0xd4>)
 802192e:	4826      	ldr	r0, [pc, #152]	; (80219c8 <udp_connect+0xd0>)
 8021930:	f002 fb5a 	bl	8023fe8 <iprintf>
 8021934:	f06f 030f 	mvn.w	r3, #15
 8021938:	e03e      	b.n	80219b8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 802193a:	68fb      	ldr	r3, [r7, #12]
 802193c:	8a5b      	ldrh	r3, [r3, #18]
 802193e:	2b00      	cmp	r3, #0
 8021940:	d10f      	bne.n	8021962 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8021942:	68f9      	ldr	r1, [r7, #12]
 8021944:	68fb      	ldr	r3, [r7, #12]
 8021946:	8a5b      	ldrh	r3, [r3, #18]
 8021948:	461a      	mov	r2, r3
 802194a:	68f8      	ldr	r0, [r7, #12]
 802194c:	f7ff ff4c 	bl	80217e8 <udp_bind>
 8021950:	4603      	mov	r3, r0
 8021952:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8021954:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8021958:	2b00      	cmp	r3, #0
 802195a:	d002      	beq.n	8021962 <udp_connect+0x6a>
      return err;
 802195c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8021960:	e02a      	b.n	80219b8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8021962:	68bb      	ldr	r3, [r7, #8]
 8021964:	2b00      	cmp	r3, #0
 8021966:	d002      	beq.n	802196e <udp_connect+0x76>
 8021968:	68bb      	ldr	r3, [r7, #8]
 802196a:	681b      	ldr	r3, [r3, #0]
 802196c:	e000      	b.n	8021970 <udp_connect+0x78>
 802196e:	2300      	movs	r3, #0
 8021970:	68fa      	ldr	r2, [r7, #12]
 8021972:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8021974:	68fb      	ldr	r3, [r7, #12]
 8021976:	88fa      	ldrh	r2, [r7, #6]
 8021978:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 802197a:	68fb      	ldr	r3, [r7, #12]
 802197c:	7c1b      	ldrb	r3, [r3, #16]
 802197e:	f043 0304 	orr.w	r3, r3, #4
 8021982:	b2da      	uxtb	r2, r3
 8021984:	68fb      	ldr	r3, [r7, #12]
 8021986:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8021988:	4b11      	ldr	r3, [pc, #68]	; (80219d0 <udp_connect+0xd8>)
 802198a:	681b      	ldr	r3, [r3, #0]
 802198c:	617b      	str	r3, [r7, #20]
 802198e:	e008      	b.n	80219a2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8021990:	68fa      	ldr	r2, [r7, #12]
 8021992:	697b      	ldr	r3, [r7, #20]
 8021994:	429a      	cmp	r2, r3
 8021996:	d101      	bne.n	802199c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8021998:	2300      	movs	r3, #0
 802199a:	e00d      	b.n	80219b8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802199c:	697b      	ldr	r3, [r7, #20]
 802199e:	68db      	ldr	r3, [r3, #12]
 80219a0:	617b      	str	r3, [r7, #20]
 80219a2:	697b      	ldr	r3, [r7, #20]
 80219a4:	2b00      	cmp	r3, #0
 80219a6:	d1f3      	bne.n	8021990 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80219a8:	4b09      	ldr	r3, [pc, #36]	; (80219d0 <udp_connect+0xd8>)
 80219aa:	681a      	ldr	r2, [r3, #0]
 80219ac:	68fb      	ldr	r3, [r7, #12]
 80219ae:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80219b0:	4a07      	ldr	r2, [pc, #28]	; (80219d0 <udp_connect+0xd8>)
 80219b2:	68fb      	ldr	r3, [r7, #12]
 80219b4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80219b6:	2300      	movs	r3, #0
}
 80219b8:	4618      	mov	r0, r3
 80219ba:	3718      	adds	r7, #24
 80219bc:	46bd      	mov	sp, r7
 80219be:	bd80      	pop	{r7, pc}
 80219c0:	0802862c 	.word	0x0802862c
 80219c4:	08028928 	.word	0x08028928
 80219c8:	0802869c 	.word	0x0802869c
 80219cc:	08028944 	.word	0x08028944
 80219d0:	20011838 	.word	0x20011838

080219d4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80219d4:	b580      	push	{r7, lr}
 80219d6:	b084      	sub	sp, #16
 80219d8:	af00      	add	r7, sp, #0
 80219da:	60f8      	str	r0, [r7, #12]
 80219dc:	60b9      	str	r1, [r7, #8]
 80219de:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80219e0:	68fb      	ldr	r3, [r7, #12]
 80219e2:	2b00      	cmp	r3, #0
 80219e4:	d107      	bne.n	80219f6 <udp_recv+0x22>
 80219e6:	4b08      	ldr	r3, [pc, #32]	; (8021a08 <udp_recv+0x34>)
 80219e8:	f240 428a 	movw	r2, #1162	; 0x48a
 80219ec:	4907      	ldr	r1, [pc, #28]	; (8021a0c <udp_recv+0x38>)
 80219ee:	4808      	ldr	r0, [pc, #32]	; (8021a10 <udp_recv+0x3c>)
 80219f0:	f002 fafa 	bl	8023fe8 <iprintf>
 80219f4:	e005      	b.n	8021a02 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80219f6:	68fb      	ldr	r3, [r7, #12]
 80219f8:	68ba      	ldr	r2, [r7, #8]
 80219fa:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80219fc:	68fb      	ldr	r3, [r7, #12]
 80219fe:	687a      	ldr	r2, [r7, #4]
 8021a00:	61da      	str	r2, [r3, #28]
}
 8021a02:	3710      	adds	r7, #16
 8021a04:	46bd      	mov	sp, r7
 8021a06:	bd80      	pop	{r7, pc}
 8021a08:	0802862c 	.word	0x0802862c
 8021a0c:	0802897c 	.word	0x0802897c
 8021a10:	0802869c 	.word	0x0802869c

08021a14 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8021a14:	b580      	push	{r7, lr}
 8021a16:	b084      	sub	sp, #16
 8021a18:	af00      	add	r7, sp, #0
 8021a1a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8021a1c:	687b      	ldr	r3, [r7, #4]
 8021a1e:	2b00      	cmp	r3, #0
 8021a20:	d107      	bne.n	8021a32 <udp_remove+0x1e>
 8021a22:	4b19      	ldr	r3, [pc, #100]	; (8021a88 <udp_remove+0x74>)
 8021a24:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8021a28:	4918      	ldr	r1, [pc, #96]	; (8021a8c <udp_remove+0x78>)
 8021a2a:	4819      	ldr	r0, [pc, #100]	; (8021a90 <udp_remove+0x7c>)
 8021a2c:	f002 fadc 	bl	8023fe8 <iprintf>
 8021a30:	e026      	b.n	8021a80 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8021a32:	4b18      	ldr	r3, [pc, #96]	; (8021a94 <udp_remove+0x80>)
 8021a34:	681b      	ldr	r3, [r3, #0]
 8021a36:	687a      	ldr	r2, [r7, #4]
 8021a38:	429a      	cmp	r2, r3
 8021a3a:	d105      	bne.n	8021a48 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8021a3c:	4b15      	ldr	r3, [pc, #84]	; (8021a94 <udp_remove+0x80>)
 8021a3e:	681b      	ldr	r3, [r3, #0]
 8021a40:	68db      	ldr	r3, [r3, #12]
 8021a42:	4a14      	ldr	r2, [pc, #80]	; (8021a94 <udp_remove+0x80>)
 8021a44:	6013      	str	r3, [r2, #0]
 8021a46:	e017      	b.n	8021a78 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8021a48:	4b12      	ldr	r3, [pc, #72]	; (8021a94 <udp_remove+0x80>)
 8021a4a:	681b      	ldr	r3, [r3, #0]
 8021a4c:	60fb      	str	r3, [r7, #12]
 8021a4e:	e010      	b.n	8021a72 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8021a50:	68fb      	ldr	r3, [r7, #12]
 8021a52:	68db      	ldr	r3, [r3, #12]
 8021a54:	2b00      	cmp	r3, #0
 8021a56:	d009      	beq.n	8021a6c <udp_remove+0x58>
 8021a58:	68fb      	ldr	r3, [r7, #12]
 8021a5a:	68db      	ldr	r3, [r3, #12]
 8021a5c:	687a      	ldr	r2, [r7, #4]
 8021a5e:	429a      	cmp	r2, r3
 8021a60:	d104      	bne.n	8021a6c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8021a62:	687b      	ldr	r3, [r7, #4]
 8021a64:	68da      	ldr	r2, [r3, #12]
 8021a66:	68fb      	ldr	r3, [r7, #12]
 8021a68:	60da      	str	r2, [r3, #12]
        break;
 8021a6a:	e005      	b.n	8021a78 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8021a6c:	68fb      	ldr	r3, [r7, #12]
 8021a6e:	68db      	ldr	r3, [r3, #12]
 8021a70:	60fb      	str	r3, [r7, #12]
 8021a72:	68fb      	ldr	r3, [r7, #12]
 8021a74:	2b00      	cmp	r3, #0
 8021a76:	d1eb      	bne.n	8021a50 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8021a78:	6879      	ldr	r1, [r7, #4]
 8021a7a:	2000      	movs	r0, #0
 8021a7c:	f7f7 fb0c 	bl	8019098 <memp_free>
}
 8021a80:	3710      	adds	r7, #16
 8021a82:	46bd      	mov	sp, r7
 8021a84:	bd80      	pop	{r7, pc}
 8021a86:	bf00      	nop
 8021a88:	0802862c 	.word	0x0802862c
 8021a8c:	08028994 	.word	0x08028994
 8021a90:	0802869c 	.word	0x0802869c
 8021a94:	20011838 	.word	0x20011838

08021a98 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8021a98:	b580      	push	{r7, lr}
 8021a9a:	b082      	sub	sp, #8
 8021a9c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8021a9e:	2000      	movs	r0, #0
 8021aa0:	f7f7 faa8 	bl	8018ff4 <memp_malloc>
 8021aa4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8021aa6:	687b      	ldr	r3, [r7, #4]
 8021aa8:	2b00      	cmp	r3, #0
 8021aaa:	d007      	beq.n	8021abc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8021aac:	2220      	movs	r2, #32
 8021aae:	2100      	movs	r1, #0
 8021ab0:	6878      	ldr	r0, [r7, #4]
 8021ab2:	f002 f9e9 	bl	8023e88 <memset>
    pcb->ttl = UDP_TTL;
 8021ab6:	687b      	ldr	r3, [r7, #4]
 8021ab8:	22ff      	movs	r2, #255	; 0xff
 8021aba:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8021abc:	687b      	ldr	r3, [r7, #4]
}
 8021abe:	4618      	mov	r0, r3
 8021ac0:	3708      	adds	r7, #8
 8021ac2:	46bd      	mov	sp, r7
 8021ac4:	bd80      	pop	{r7, pc}

08021ac6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8021ac6:	b580      	push	{r7, lr}
 8021ac8:	b084      	sub	sp, #16
 8021aca:	af00      	add	r7, sp, #0
 8021acc:	4603      	mov	r3, r0
 8021ace:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8021ad0:	f7ff ffe2 	bl	8021a98 <udp_new>
 8021ad4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8021ad6:	68fb      	ldr	r3, [r7, #12]
}
 8021ad8:	4618      	mov	r0, r3
 8021ada:	3710      	adds	r7, #16
 8021adc:	46bd      	mov	sp, r7
 8021ade:	bd80      	pop	{r7, pc}

08021ae0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8021ae0:	b480      	push	{r7}
 8021ae2:	b085      	sub	sp, #20
 8021ae4:	af00      	add	r7, sp, #0
 8021ae6:	6078      	str	r0, [r7, #4]
 8021ae8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8021aea:	687b      	ldr	r3, [r7, #4]
 8021aec:	2b00      	cmp	r3, #0
 8021aee:	d01e      	beq.n	8021b2e <udp_netif_ip_addr_changed+0x4e>
 8021af0:	687b      	ldr	r3, [r7, #4]
 8021af2:	681b      	ldr	r3, [r3, #0]
 8021af4:	2b00      	cmp	r3, #0
 8021af6:	d01a      	beq.n	8021b2e <udp_netif_ip_addr_changed+0x4e>
 8021af8:	683b      	ldr	r3, [r7, #0]
 8021afa:	2b00      	cmp	r3, #0
 8021afc:	d017      	beq.n	8021b2e <udp_netif_ip_addr_changed+0x4e>
 8021afe:	683b      	ldr	r3, [r7, #0]
 8021b00:	681b      	ldr	r3, [r3, #0]
 8021b02:	2b00      	cmp	r3, #0
 8021b04:	d013      	beq.n	8021b2e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8021b06:	4b0d      	ldr	r3, [pc, #52]	; (8021b3c <udp_netif_ip_addr_changed+0x5c>)
 8021b08:	681b      	ldr	r3, [r3, #0]
 8021b0a:	60fb      	str	r3, [r7, #12]
 8021b0c:	e00c      	b.n	8021b28 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8021b0e:	68fb      	ldr	r3, [r7, #12]
 8021b10:	681a      	ldr	r2, [r3, #0]
 8021b12:	687b      	ldr	r3, [r7, #4]
 8021b14:	681b      	ldr	r3, [r3, #0]
 8021b16:	429a      	cmp	r2, r3
 8021b18:	d103      	bne.n	8021b22 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8021b1a:	683b      	ldr	r3, [r7, #0]
 8021b1c:	681a      	ldr	r2, [r3, #0]
 8021b1e:	68fb      	ldr	r3, [r7, #12]
 8021b20:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8021b22:	68fb      	ldr	r3, [r7, #12]
 8021b24:	68db      	ldr	r3, [r3, #12]
 8021b26:	60fb      	str	r3, [r7, #12]
 8021b28:	68fb      	ldr	r3, [r7, #12]
 8021b2a:	2b00      	cmp	r3, #0
 8021b2c:	d1ef      	bne.n	8021b0e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8021b2e:	bf00      	nop
 8021b30:	3714      	adds	r7, #20
 8021b32:	46bd      	mov	sp, r7
 8021b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b38:	4770      	bx	lr
 8021b3a:	bf00      	nop
 8021b3c:	20011838 	.word	0x20011838

08021b40 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8021b40:	b590      	push	{r4, r7, lr}
 8021b42:	b089      	sub	sp, #36	; 0x24
 8021b44:	af04      	add	r7, sp, #16
 8021b46:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8021b48:	2301      	movs	r3, #1
 8021b4a:	2202      	movs	r2, #2
 8021b4c:	2102      	movs	r1, #2
 8021b4e:	6878      	ldr	r0, [r7, #4]
 8021b50:	f000 fcba 	bl	80224c8 <USBH_FindInterface>
 8021b54:	4603      	mov	r3, r0
 8021b56:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8021b58:	7bfb      	ldrb	r3, [r7, #15]
 8021b5a:	2bff      	cmp	r3, #255	; 0xff
 8021b5c:	d002      	beq.n	8021b64 <USBH_CDC_InterfaceInit+0x24>
 8021b5e:	7bfb      	ldrb	r3, [r7, #15]
 8021b60:	2b01      	cmp	r3, #1
 8021b62:	d901      	bls.n	8021b68 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8021b64:	2302      	movs	r3, #2
 8021b66:	e13d      	b.n	8021de4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8021b68:	7bfb      	ldrb	r3, [r7, #15]
 8021b6a:	4619      	mov	r1, r3
 8021b6c:	6878      	ldr	r0, [r7, #4]
 8021b6e:	f000 fc8f 	bl	8022490 <USBH_SelectInterface>
 8021b72:	4603      	mov	r3, r0
 8021b74:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8021b76:	7bbb      	ldrb	r3, [r7, #14]
 8021b78:	2b00      	cmp	r3, #0
 8021b7a:	d001      	beq.n	8021b80 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8021b7c:	2302      	movs	r3, #2
 8021b7e:	e131      	b.n	8021de4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8021b80:	687b      	ldr	r3, [r7, #4]
 8021b82:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8021b86:	2050      	movs	r0, #80	; 0x50
 8021b88:	f002 f954 	bl	8023e34 <malloc>
 8021b8c:	4603      	mov	r3, r0
 8021b8e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8021b90:	687b      	ldr	r3, [r7, #4]
 8021b92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8021b96:	69db      	ldr	r3, [r3, #28]
 8021b98:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8021b9a:	68bb      	ldr	r3, [r7, #8]
 8021b9c:	2b00      	cmp	r3, #0
 8021b9e:	d101      	bne.n	8021ba4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8021ba0:	2302      	movs	r3, #2
 8021ba2:	e11f      	b.n	8021de4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8021ba4:	2250      	movs	r2, #80	; 0x50
 8021ba6:	2100      	movs	r1, #0
 8021ba8:	68b8      	ldr	r0, [r7, #8]
 8021baa:	f002 f96d 	bl	8023e88 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8021bae:	7bfb      	ldrb	r3, [r7, #15]
 8021bb0:	687a      	ldr	r2, [r7, #4]
 8021bb2:	211a      	movs	r1, #26
 8021bb4:	fb01 f303 	mul.w	r3, r1, r3
 8021bb8:	4413      	add	r3, r2
 8021bba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8021bbe:	781b      	ldrb	r3, [r3, #0]
 8021bc0:	b25b      	sxtb	r3, r3
 8021bc2:	2b00      	cmp	r3, #0
 8021bc4:	da15      	bge.n	8021bf2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8021bc6:	7bfb      	ldrb	r3, [r7, #15]
 8021bc8:	687a      	ldr	r2, [r7, #4]
 8021bca:	211a      	movs	r1, #26
 8021bcc:	fb01 f303 	mul.w	r3, r1, r3
 8021bd0:	4413      	add	r3, r2
 8021bd2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8021bd6:	781a      	ldrb	r2, [r3, #0]
 8021bd8:	68bb      	ldr	r3, [r7, #8]
 8021bda:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8021bdc:	7bfb      	ldrb	r3, [r7, #15]
 8021bde:	687a      	ldr	r2, [r7, #4]
 8021be0:	211a      	movs	r1, #26
 8021be2:	fb01 f303 	mul.w	r3, r1, r3
 8021be6:	4413      	add	r3, r2
 8021be8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8021bec:	881a      	ldrh	r2, [r3, #0]
 8021bee:	68bb      	ldr	r3, [r7, #8]
 8021bf0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8021bf2:	68bb      	ldr	r3, [r7, #8]
 8021bf4:	785b      	ldrb	r3, [r3, #1]
 8021bf6:	4619      	mov	r1, r3
 8021bf8:	6878      	ldr	r0, [r7, #4]
 8021bfa:	f002 f894 	bl	8023d26 <USBH_AllocPipe>
 8021bfe:	4603      	mov	r3, r0
 8021c00:	461a      	mov	r2, r3
 8021c02:	68bb      	ldr	r3, [r7, #8]
 8021c04:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8021c06:	68bb      	ldr	r3, [r7, #8]
 8021c08:	7819      	ldrb	r1, [r3, #0]
 8021c0a:	68bb      	ldr	r3, [r7, #8]
 8021c0c:	7858      	ldrb	r0, [r3, #1]
 8021c0e:	687b      	ldr	r3, [r7, #4]
 8021c10:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8021c14:	687b      	ldr	r3, [r7, #4]
 8021c16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8021c1a:	68ba      	ldr	r2, [r7, #8]
 8021c1c:	8952      	ldrh	r2, [r2, #10]
 8021c1e:	9202      	str	r2, [sp, #8]
 8021c20:	2203      	movs	r2, #3
 8021c22:	9201      	str	r2, [sp, #4]
 8021c24:	9300      	str	r3, [sp, #0]
 8021c26:	4623      	mov	r3, r4
 8021c28:	4602      	mov	r2, r0
 8021c2a:	6878      	ldr	r0, [r7, #4]
 8021c2c:	f002 f84c 	bl	8023cc8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8021c30:	68bb      	ldr	r3, [r7, #8]
 8021c32:	781b      	ldrb	r3, [r3, #0]
 8021c34:	2200      	movs	r2, #0
 8021c36:	4619      	mov	r1, r3
 8021c38:	6878      	ldr	r0, [r7, #4]
 8021c3a:	f7e2 f8bf 	bl	8003dbc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8021c3e:	2300      	movs	r3, #0
 8021c40:	2200      	movs	r2, #0
 8021c42:	210a      	movs	r1, #10
 8021c44:	6878      	ldr	r0, [r7, #4]
 8021c46:	f000 fc3f 	bl	80224c8 <USBH_FindInterface>
 8021c4a:	4603      	mov	r3, r0
 8021c4c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8021c4e:	7bfb      	ldrb	r3, [r7, #15]
 8021c50:	2bff      	cmp	r3, #255	; 0xff
 8021c52:	d002      	beq.n	8021c5a <USBH_CDC_InterfaceInit+0x11a>
 8021c54:	7bfb      	ldrb	r3, [r7, #15]
 8021c56:	2b01      	cmp	r3, #1
 8021c58:	d901      	bls.n	8021c5e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8021c5a:	2302      	movs	r3, #2
 8021c5c:	e0c2      	b.n	8021de4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8021c5e:	7bfb      	ldrb	r3, [r7, #15]
 8021c60:	687a      	ldr	r2, [r7, #4]
 8021c62:	211a      	movs	r1, #26
 8021c64:	fb01 f303 	mul.w	r3, r1, r3
 8021c68:	4413      	add	r3, r2
 8021c6a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8021c6e:	781b      	ldrb	r3, [r3, #0]
 8021c70:	b25b      	sxtb	r3, r3
 8021c72:	2b00      	cmp	r3, #0
 8021c74:	da16      	bge.n	8021ca4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8021c76:	7bfb      	ldrb	r3, [r7, #15]
 8021c78:	687a      	ldr	r2, [r7, #4]
 8021c7a:	211a      	movs	r1, #26
 8021c7c:	fb01 f303 	mul.w	r3, r1, r3
 8021c80:	4413      	add	r3, r2
 8021c82:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8021c86:	781a      	ldrb	r2, [r3, #0]
 8021c88:	68bb      	ldr	r3, [r7, #8]
 8021c8a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8021c8c:	7bfb      	ldrb	r3, [r7, #15]
 8021c8e:	687a      	ldr	r2, [r7, #4]
 8021c90:	211a      	movs	r1, #26
 8021c92:	fb01 f303 	mul.w	r3, r1, r3
 8021c96:	4413      	add	r3, r2
 8021c98:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8021c9c:	881a      	ldrh	r2, [r3, #0]
 8021c9e:	68bb      	ldr	r3, [r7, #8]
 8021ca0:	835a      	strh	r2, [r3, #26]
 8021ca2:	e015      	b.n	8021cd0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8021ca4:	7bfb      	ldrb	r3, [r7, #15]
 8021ca6:	687a      	ldr	r2, [r7, #4]
 8021ca8:	211a      	movs	r1, #26
 8021caa:	fb01 f303 	mul.w	r3, r1, r3
 8021cae:	4413      	add	r3, r2
 8021cb0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8021cb4:	781a      	ldrb	r2, [r3, #0]
 8021cb6:	68bb      	ldr	r3, [r7, #8]
 8021cb8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8021cba:	7bfb      	ldrb	r3, [r7, #15]
 8021cbc:	687a      	ldr	r2, [r7, #4]
 8021cbe:	211a      	movs	r1, #26
 8021cc0:	fb01 f303 	mul.w	r3, r1, r3
 8021cc4:	4413      	add	r3, r2
 8021cc6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8021cca:	881a      	ldrh	r2, [r3, #0]
 8021ccc:	68bb      	ldr	r3, [r7, #8]
 8021cce:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8021cd0:	7bfb      	ldrb	r3, [r7, #15]
 8021cd2:	687a      	ldr	r2, [r7, #4]
 8021cd4:	211a      	movs	r1, #26
 8021cd6:	fb01 f303 	mul.w	r3, r1, r3
 8021cda:	4413      	add	r3, r2
 8021cdc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8021ce0:	781b      	ldrb	r3, [r3, #0]
 8021ce2:	b25b      	sxtb	r3, r3
 8021ce4:	2b00      	cmp	r3, #0
 8021ce6:	da16      	bge.n	8021d16 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8021ce8:	7bfb      	ldrb	r3, [r7, #15]
 8021cea:	687a      	ldr	r2, [r7, #4]
 8021cec:	211a      	movs	r1, #26
 8021cee:	fb01 f303 	mul.w	r3, r1, r3
 8021cf2:	4413      	add	r3, r2
 8021cf4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8021cf8:	781a      	ldrb	r2, [r3, #0]
 8021cfa:	68bb      	ldr	r3, [r7, #8]
 8021cfc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8021cfe:	7bfb      	ldrb	r3, [r7, #15]
 8021d00:	687a      	ldr	r2, [r7, #4]
 8021d02:	211a      	movs	r1, #26
 8021d04:	fb01 f303 	mul.w	r3, r1, r3
 8021d08:	4413      	add	r3, r2
 8021d0a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8021d0e:	881a      	ldrh	r2, [r3, #0]
 8021d10:	68bb      	ldr	r3, [r7, #8]
 8021d12:	835a      	strh	r2, [r3, #26]
 8021d14:	e015      	b.n	8021d42 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8021d16:	7bfb      	ldrb	r3, [r7, #15]
 8021d18:	687a      	ldr	r2, [r7, #4]
 8021d1a:	211a      	movs	r1, #26
 8021d1c:	fb01 f303 	mul.w	r3, r1, r3
 8021d20:	4413      	add	r3, r2
 8021d22:	f203 3356 	addw	r3, r3, #854	; 0x356
 8021d26:	781a      	ldrb	r2, [r3, #0]
 8021d28:	68bb      	ldr	r3, [r7, #8]
 8021d2a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8021d2c:	7bfb      	ldrb	r3, [r7, #15]
 8021d2e:	687a      	ldr	r2, [r7, #4]
 8021d30:	211a      	movs	r1, #26
 8021d32:	fb01 f303 	mul.w	r3, r1, r3
 8021d36:	4413      	add	r3, r2
 8021d38:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8021d3c:	881a      	ldrh	r2, [r3, #0]
 8021d3e:	68bb      	ldr	r3, [r7, #8]
 8021d40:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8021d42:	68bb      	ldr	r3, [r7, #8]
 8021d44:	7b9b      	ldrb	r3, [r3, #14]
 8021d46:	4619      	mov	r1, r3
 8021d48:	6878      	ldr	r0, [r7, #4]
 8021d4a:	f001 ffec 	bl	8023d26 <USBH_AllocPipe>
 8021d4e:	4603      	mov	r3, r0
 8021d50:	461a      	mov	r2, r3
 8021d52:	68bb      	ldr	r3, [r7, #8]
 8021d54:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8021d56:	68bb      	ldr	r3, [r7, #8]
 8021d58:	7bdb      	ldrb	r3, [r3, #15]
 8021d5a:	4619      	mov	r1, r3
 8021d5c:	6878      	ldr	r0, [r7, #4]
 8021d5e:	f001 ffe2 	bl	8023d26 <USBH_AllocPipe>
 8021d62:	4603      	mov	r3, r0
 8021d64:	461a      	mov	r2, r3
 8021d66:	68bb      	ldr	r3, [r7, #8]
 8021d68:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8021d6a:	68bb      	ldr	r3, [r7, #8]
 8021d6c:	7b59      	ldrb	r1, [r3, #13]
 8021d6e:	68bb      	ldr	r3, [r7, #8]
 8021d70:	7b98      	ldrb	r0, [r3, #14]
 8021d72:	687b      	ldr	r3, [r7, #4]
 8021d74:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8021d78:	687b      	ldr	r3, [r7, #4]
 8021d7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8021d7e:	68ba      	ldr	r2, [r7, #8]
 8021d80:	8b12      	ldrh	r2, [r2, #24]
 8021d82:	9202      	str	r2, [sp, #8]
 8021d84:	2202      	movs	r2, #2
 8021d86:	9201      	str	r2, [sp, #4]
 8021d88:	9300      	str	r3, [sp, #0]
 8021d8a:	4623      	mov	r3, r4
 8021d8c:	4602      	mov	r2, r0
 8021d8e:	6878      	ldr	r0, [r7, #4]
 8021d90:	f001 ff9a 	bl	8023cc8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8021d94:	68bb      	ldr	r3, [r7, #8]
 8021d96:	7b19      	ldrb	r1, [r3, #12]
 8021d98:	68bb      	ldr	r3, [r7, #8]
 8021d9a:	7bd8      	ldrb	r0, [r3, #15]
 8021d9c:	687b      	ldr	r3, [r7, #4]
 8021d9e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8021da2:	687b      	ldr	r3, [r7, #4]
 8021da4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8021da8:	68ba      	ldr	r2, [r7, #8]
 8021daa:	8b52      	ldrh	r2, [r2, #26]
 8021dac:	9202      	str	r2, [sp, #8]
 8021dae:	2202      	movs	r2, #2
 8021db0:	9201      	str	r2, [sp, #4]
 8021db2:	9300      	str	r3, [sp, #0]
 8021db4:	4623      	mov	r3, r4
 8021db6:	4602      	mov	r2, r0
 8021db8:	6878      	ldr	r0, [r7, #4]
 8021dba:	f001 ff85 	bl	8023cc8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8021dbe:	68bb      	ldr	r3, [r7, #8]
 8021dc0:	2200      	movs	r2, #0
 8021dc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8021dc6:	68bb      	ldr	r3, [r7, #8]
 8021dc8:	7b5b      	ldrb	r3, [r3, #13]
 8021dca:	2200      	movs	r2, #0
 8021dcc:	4619      	mov	r1, r3
 8021dce:	6878      	ldr	r0, [r7, #4]
 8021dd0:	f7e1 fff4 	bl	8003dbc <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8021dd4:	68bb      	ldr	r3, [r7, #8]
 8021dd6:	7b1b      	ldrb	r3, [r3, #12]
 8021dd8:	2200      	movs	r2, #0
 8021dda:	4619      	mov	r1, r3
 8021ddc:	6878      	ldr	r0, [r7, #4]
 8021dde:	f7e1 ffed 	bl	8003dbc <USBH_LL_SetToggle>

  return USBH_OK;
 8021de2:	2300      	movs	r3, #0
}
 8021de4:	4618      	mov	r0, r3
 8021de6:	3714      	adds	r7, #20
 8021de8:	46bd      	mov	sp, r7
 8021dea:	bd90      	pop	{r4, r7, pc}

08021dec <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8021dec:	b580      	push	{r7, lr}
 8021dee:	b084      	sub	sp, #16
 8021df0:	af00      	add	r7, sp, #0
 8021df2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8021df4:	687b      	ldr	r3, [r7, #4]
 8021df6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8021dfa:	69db      	ldr	r3, [r3, #28]
 8021dfc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8021dfe:	68fb      	ldr	r3, [r7, #12]
 8021e00:	781b      	ldrb	r3, [r3, #0]
 8021e02:	2b00      	cmp	r3, #0
 8021e04:	d00e      	beq.n	8021e24 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8021e06:	68fb      	ldr	r3, [r7, #12]
 8021e08:	781b      	ldrb	r3, [r3, #0]
 8021e0a:	4619      	mov	r1, r3
 8021e0c:	6878      	ldr	r0, [r7, #4]
 8021e0e:	f001 ff7a 	bl	8023d06 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8021e12:	68fb      	ldr	r3, [r7, #12]
 8021e14:	781b      	ldrb	r3, [r3, #0]
 8021e16:	4619      	mov	r1, r3
 8021e18:	6878      	ldr	r0, [r7, #4]
 8021e1a:	f001 ffa5 	bl	8023d68 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8021e1e:	68fb      	ldr	r3, [r7, #12]
 8021e20:	2200      	movs	r2, #0
 8021e22:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8021e24:	68fb      	ldr	r3, [r7, #12]
 8021e26:	7b1b      	ldrb	r3, [r3, #12]
 8021e28:	2b00      	cmp	r3, #0
 8021e2a:	d00e      	beq.n	8021e4a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8021e2c:	68fb      	ldr	r3, [r7, #12]
 8021e2e:	7b1b      	ldrb	r3, [r3, #12]
 8021e30:	4619      	mov	r1, r3
 8021e32:	6878      	ldr	r0, [r7, #4]
 8021e34:	f001 ff67 	bl	8023d06 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8021e38:	68fb      	ldr	r3, [r7, #12]
 8021e3a:	7b1b      	ldrb	r3, [r3, #12]
 8021e3c:	4619      	mov	r1, r3
 8021e3e:	6878      	ldr	r0, [r7, #4]
 8021e40:	f001 ff92 	bl	8023d68 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8021e44:	68fb      	ldr	r3, [r7, #12]
 8021e46:	2200      	movs	r2, #0
 8021e48:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8021e4a:	68fb      	ldr	r3, [r7, #12]
 8021e4c:	7b5b      	ldrb	r3, [r3, #13]
 8021e4e:	2b00      	cmp	r3, #0
 8021e50:	d00e      	beq.n	8021e70 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8021e52:	68fb      	ldr	r3, [r7, #12]
 8021e54:	7b5b      	ldrb	r3, [r3, #13]
 8021e56:	4619      	mov	r1, r3
 8021e58:	6878      	ldr	r0, [r7, #4]
 8021e5a:	f001 ff54 	bl	8023d06 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8021e5e:	68fb      	ldr	r3, [r7, #12]
 8021e60:	7b5b      	ldrb	r3, [r3, #13]
 8021e62:	4619      	mov	r1, r3
 8021e64:	6878      	ldr	r0, [r7, #4]
 8021e66:	f001 ff7f 	bl	8023d68 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8021e6a:	68fb      	ldr	r3, [r7, #12]
 8021e6c:	2200      	movs	r2, #0
 8021e6e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8021e70:	687b      	ldr	r3, [r7, #4]
 8021e72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8021e76:	69db      	ldr	r3, [r3, #28]
 8021e78:	2b00      	cmp	r3, #0
 8021e7a:	d00b      	beq.n	8021e94 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8021e7c:	687b      	ldr	r3, [r7, #4]
 8021e7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8021e82:	69db      	ldr	r3, [r3, #28]
 8021e84:	4618      	mov	r0, r3
 8021e86:	f001 ffdd 	bl	8023e44 <free>
    phost->pActiveClass->pData = 0U;
 8021e8a:	687b      	ldr	r3, [r7, #4]
 8021e8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8021e90:	2200      	movs	r2, #0
 8021e92:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8021e94:	2300      	movs	r3, #0
}
 8021e96:	4618      	mov	r0, r3
 8021e98:	3710      	adds	r7, #16
 8021e9a:	46bd      	mov	sp, r7
 8021e9c:	bd80      	pop	{r7, pc}

08021e9e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8021e9e:	b580      	push	{r7, lr}
 8021ea0:	b084      	sub	sp, #16
 8021ea2:	af00      	add	r7, sp, #0
 8021ea4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8021ea6:	687b      	ldr	r3, [r7, #4]
 8021ea8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8021eac:	69db      	ldr	r3, [r3, #28]
 8021eae:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8021eb0:	68fb      	ldr	r3, [r7, #12]
 8021eb2:	3340      	adds	r3, #64	; 0x40
 8021eb4:	4619      	mov	r1, r3
 8021eb6:	6878      	ldr	r0, [r7, #4]
 8021eb8:	f000 f8b1 	bl	802201e <GetLineCoding>
 8021ebc:	4603      	mov	r3, r0
 8021ebe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8021ec0:	7afb      	ldrb	r3, [r7, #11]
 8021ec2:	2b00      	cmp	r3, #0
 8021ec4:	d105      	bne.n	8021ed2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8021ec6:	687b      	ldr	r3, [r7, #4]
 8021ec8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8021ecc:	2102      	movs	r1, #2
 8021ece:	6878      	ldr	r0, [r7, #4]
 8021ed0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8021ed2:	7afb      	ldrb	r3, [r7, #11]
}
 8021ed4:	4618      	mov	r0, r3
 8021ed6:	3710      	adds	r7, #16
 8021ed8:	46bd      	mov	sp, r7
 8021eda:	bd80      	pop	{r7, pc}

08021edc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8021edc:	b580      	push	{r7, lr}
 8021ede:	b084      	sub	sp, #16
 8021ee0:	af00      	add	r7, sp, #0
 8021ee2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8021ee4:	2301      	movs	r3, #1
 8021ee6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8021ee8:	2300      	movs	r3, #0
 8021eea:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8021eec:	687b      	ldr	r3, [r7, #4]
 8021eee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8021ef2:	69db      	ldr	r3, [r3, #28]
 8021ef4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8021ef6:	68bb      	ldr	r3, [r7, #8]
 8021ef8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8021efc:	2b04      	cmp	r3, #4
 8021efe:	d877      	bhi.n	8021ff0 <USBH_CDC_Process+0x114>
 8021f00:	a201      	add	r2, pc, #4	; (adr r2, 8021f08 <USBH_CDC_Process+0x2c>)
 8021f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021f06:	bf00      	nop
 8021f08:	08021f1d 	.word	0x08021f1d
 8021f0c:	08021f23 	.word	0x08021f23
 8021f10:	08021f53 	.word	0x08021f53
 8021f14:	08021fc7 	.word	0x08021fc7
 8021f18:	08021fd5 	.word	0x08021fd5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8021f1c:	2300      	movs	r3, #0
 8021f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8021f20:	e06d      	b.n	8021ffe <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8021f22:	68bb      	ldr	r3, [r7, #8]
 8021f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021f26:	4619      	mov	r1, r3
 8021f28:	6878      	ldr	r0, [r7, #4]
 8021f2a:	f000 f897 	bl	802205c <SetLineCoding>
 8021f2e:	4603      	mov	r3, r0
 8021f30:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8021f32:	7bbb      	ldrb	r3, [r7, #14]
 8021f34:	2b00      	cmp	r3, #0
 8021f36:	d104      	bne.n	8021f42 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8021f38:	68bb      	ldr	r3, [r7, #8]
 8021f3a:	2202      	movs	r2, #2
 8021f3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8021f40:	e058      	b.n	8021ff4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8021f42:	7bbb      	ldrb	r3, [r7, #14]
 8021f44:	2b01      	cmp	r3, #1
 8021f46:	d055      	beq.n	8021ff4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8021f48:	68bb      	ldr	r3, [r7, #8]
 8021f4a:	2204      	movs	r2, #4
 8021f4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8021f50:	e050      	b.n	8021ff4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8021f52:	68bb      	ldr	r3, [r7, #8]
 8021f54:	3340      	adds	r3, #64	; 0x40
 8021f56:	4619      	mov	r1, r3
 8021f58:	6878      	ldr	r0, [r7, #4]
 8021f5a:	f000 f860 	bl	802201e <GetLineCoding>
 8021f5e:	4603      	mov	r3, r0
 8021f60:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8021f62:	7bbb      	ldrb	r3, [r7, #14]
 8021f64:	2b00      	cmp	r3, #0
 8021f66:	d126      	bne.n	8021fb6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8021f68:	68bb      	ldr	r3, [r7, #8]
 8021f6a:	2200      	movs	r2, #0
 8021f6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8021f70:	68bb      	ldr	r3, [r7, #8]
 8021f72:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8021f76:	68bb      	ldr	r3, [r7, #8]
 8021f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021f7a:	791b      	ldrb	r3, [r3, #4]
 8021f7c:	429a      	cmp	r2, r3
 8021f7e:	d13b      	bne.n	8021ff8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8021f80:	68bb      	ldr	r3, [r7, #8]
 8021f82:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8021f86:	68bb      	ldr	r3, [r7, #8]
 8021f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021f8a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8021f8c:	429a      	cmp	r2, r3
 8021f8e:	d133      	bne.n	8021ff8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8021f90:	68bb      	ldr	r3, [r7, #8]
 8021f92:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8021f96:	68bb      	ldr	r3, [r7, #8]
 8021f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021f9a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8021f9c:	429a      	cmp	r2, r3
 8021f9e:	d12b      	bne.n	8021ff8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8021fa0:	68bb      	ldr	r3, [r7, #8]
 8021fa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8021fa4:	68bb      	ldr	r3, [r7, #8]
 8021fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021fa8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8021faa:	429a      	cmp	r2, r3
 8021fac:	d124      	bne.n	8021ff8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8021fae:	6878      	ldr	r0, [r7, #4]
 8021fb0:	f000 f984 	bl	80222bc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8021fb4:	e020      	b.n	8021ff8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8021fb6:	7bbb      	ldrb	r3, [r7, #14]
 8021fb8:	2b01      	cmp	r3, #1
 8021fba:	d01d      	beq.n	8021ff8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8021fbc:	68bb      	ldr	r3, [r7, #8]
 8021fbe:	2204      	movs	r2, #4
 8021fc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8021fc4:	e018      	b.n	8021ff8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8021fc6:	6878      	ldr	r0, [r7, #4]
 8021fc8:	f000 f867 	bl	802209a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8021fcc:	6878      	ldr	r0, [r7, #4]
 8021fce:	f000 f8f8 	bl	80221c2 <CDC_ProcessReception>
      break;
 8021fd2:	e014      	b.n	8021ffe <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8021fd4:	2100      	movs	r1, #0
 8021fd6:	6878      	ldr	r0, [r7, #4]
 8021fd8:	f001 f953 	bl	8023282 <USBH_ClrFeature>
 8021fdc:	4603      	mov	r3, r0
 8021fde:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8021fe0:	7bbb      	ldrb	r3, [r7, #14]
 8021fe2:	2b00      	cmp	r3, #0
 8021fe4:	d10a      	bne.n	8021ffc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8021fe6:	68bb      	ldr	r3, [r7, #8]
 8021fe8:	2200      	movs	r2, #0
 8021fea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8021fee:	e005      	b.n	8021ffc <USBH_CDC_Process+0x120>

    default:
      break;
 8021ff0:	bf00      	nop
 8021ff2:	e004      	b.n	8021ffe <USBH_CDC_Process+0x122>
      break;
 8021ff4:	bf00      	nop
 8021ff6:	e002      	b.n	8021ffe <USBH_CDC_Process+0x122>
      break;
 8021ff8:	bf00      	nop
 8021ffa:	e000      	b.n	8021ffe <USBH_CDC_Process+0x122>
      break;
 8021ffc:	bf00      	nop

  }

  return status;
 8021ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8022000:	4618      	mov	r0, r3
 8022002:	3710      	adds	r7, #16
 8022004:	46bd      	mov	sp, r7
 8022006:	bd80      	pop	{r7, pc}

08022008 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8022008:	b480      	push	{r7}
 802200a:	b083      	sub	sp, #12
 802200c:	af00      	add	r7, sp, #0
 802200e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8022010:	2300      	movs	r3, #0
}
 8022012:	4618      	mov	r0, r3
 8022014:	370c      	adds	r7, #12
 8022016:	46bd      	mov	sp, r7
 8022018:	f85d 7b04 	ldr.w	r7, [sp], #4
 802201c:	4770      	bx	lr

0802201e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 802201e:	b580      	push	{r7, lr}
 8022020:	b082      	sub	sp, #8
 8022022:	af00      	add	r7, sp, #0
 8022024:	6078      	str	r0, [r7, #4]
 8022026:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8022028:	687b      	ldr	r3, [r7, #4]
 802202a:	22a1      	movs	r2, #161	; 0xa1
 802202c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 802202e:	687b      	ldr	r3, [r7, #4]
 8022030:	2221      	movs	r2, #33	; 0x21
 8022032:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8022034:	687b      	ldr	r3, [r7, #4]
 8022036:	2200      	movs	r2, #0
 8022038:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 802203a:	687b      	ldr	r3, [r7, #4]
 802203c:	2200      	movs	r2, #0
 802203e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8022040:	687b      	ldr	r3, [r7, #4]
 8022042:	2207      	movs	r2, #7
 8022044:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8022046:	683b      	ldr	r3, [r7, #0]
 8022048:	2207      	movs	r2, #7
 802204a:	4619      	mov	r1, r3
 802204c:	6878      	ldr	r0, [r7, #4]
 802204e:	f001 faf8 	bl	8023642 <USBH_CtlReq>
 8022052:	4603      	mov	r3, r0
}
 8022054:	4618      	mov	r0, r3
 8022056:	3708      	adds	r7, #8
 8022058:	46bd      	mov	sp, r7
 802205a:	bd80      	pop	{r7, pc}

0802205c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 802205c:	b580      	push	{r7, lr}
 802205e:	b082      	sub	sp, #8
 8022060:	af00      	add	r7, sp, #0
 8022062:	6078      	str	r0, [r7, #4]
 8022064:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8022066:	687b      	ldr	r3, [r7, #4]
 8022068:	2221      	movs	r2, #33	; 0x21
 802206a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 802206c:	687b      	ldr	r3, [r7, #4]
 802206e:	2220      	movs	r2, #32
 8022070:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8022072:	687b      	ldr	r3, [r7, #4]
 8022074:	2200      	movs	r2, #0
 8022076:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8022078:	687b      	ldr	r3, [r7, #4]
 802207a:	2200      	movs	r2, #0
 802207c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 802207e:	687b      	ldr	r3, [r7, #4]
 8022080:	2207      	movs	r2, #7
 8022082:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8022084:	683b      	ldr	r3, [r7, #0]
 8022086:	2207      	movs	r2, #7
 8022088:	4619      	mov	r1, r3
 802208a:	6878      	ldr	r0, [r7, #4]
 802208c:	f001 fad9 	bl	8023642 <USBH_CtlReq>
 8022090:	4603      	mov	r3, r0
}
 8022092:	4618      	mov	r0, r3
 8022094:	3708      	adds	r7, #8
 8022096:	46bd      	mov	sp, r7
 8022098:	bd80      	pop	{r7, pc}

0802209a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 802209a:	b580      	push	{r7, lr}
 802209c:	b086      	sub	sp, #24
 802209e:	af02      	add	r7, sp, #8
 80220a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80220a2:	687b      	ldr	r3, [r7, #4]
 80220a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80220a8:	69db      	ldr	r3, [r3, #28]
 80220aa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80220ac:	2300      	movs	r3, #0
 80220ae:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80220b0:	68fb      	ldr	r3, [r7, #12]
 80220b2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80220b6:	2b01      	cmp	r3, #1
 80220b8:	d002      	beq.n	80220c0 <CDC_ProcessTransmission+0x26>
 80220ba:	2b02      	cmp	r3, #2
 80220bc:	d025      	beq.n	802210a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80220be:	e07c      	b.n	80221ba <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80220c0:	68fb      	ldr	r3, [r7, #12]
 80220c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80220c4:	68fa      	ldr	r2, [r7, #12]
 80220c6:	8b12      	ldrh	r2, [r2, #24]
 80220c8:	4293      	cmp	r3, r2
 80220ca:	d90c      	bls.n	80220e6 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80220cc:	68fb      	ldr	r3, [r7, #12]
 80220ce:	69d9      	ldr	r1, [r3, #28]
 80220d0:	68fb      	ldr	r3, [r7, #12]
 80220d2:	8b1a      	ldrh	r2, [r3, #24]
 80220d4:	68fb      	ldr	r3, [r7, #12]
 80220d6:	7b58      	ldrb	r0, [r3, #13]
 80220d8:	2301      	movs	r3, #1
 80220da:	9300      	str	r3, [sp, #0]
 80220dc:	4603      	mov	r3, r0
 80220de:	6878      	ldr	r0, [r7, #4]
 80220e0:	f001 fdaf 	bl	8023c42 <USBH_BulkSendData>
 80220e4:	e00c      	b.n	8022100 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80220e6:	68fb      	ldr	r3, [r7, #12]
 80220e8:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80220ea:	68fb      	ldr	r3, [r7, #12]
 80220ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80220ee:	b29a      	uxth	r2, r3
 80220f0:	68fb      	ldr	r3, [r7, #12]
 80220f2:	7b58      	ldrb	r0, [r3, #13]
 80220f4:	2301      	movs	r3, #1
 80220f6:	9300      	str	r3, [sp, #0]
 80220f8:	4603      	mov	r3, r0
 80220fa:	6878      	ldr	r0, [r7, #4]
 80220fc:	f001 fda1 	bl	8023c42 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8022100:	68fb      	ldr	r3, [r7, #12]
 8022102:	2202      	movs	r2, #2
 8022104:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8022108:	e057      	b.n	80221ba <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 802210a:	68fb      	ldr	r3, [r7, #12]
 802210c:	7b5b      	ldrb	r3, [r3, #13]
 802210e:	4619      	mov	r1, r3
 8022110:	6878      	ldr	r0, [r7, #4]
 8022112:	f7e1 fe29 	bl	8003d68 <USBH_LL_GetURBState>
 8022116:	4603      	mov	r3, r0
 8022118:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 802211a:	7afb      	ldrb	r3, [r7, #11]
 802211c:	2b01      	cmp	r3, #1
 802211e:	d136      	bne.n	802218e <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8022120:	68fb      	ldr	r3, [r7, #12]
 8022122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022124:	68fa      	ldr	r2, [r7, #12]
 8022126:	8b12      	ldrh	r2, [r2, #24]
 8022128:	4293      	cmp	r3, r2
 802212a:	d90e      	bls.n	802214a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 802212c:	68fb      	ldr	r3, [r7, #12]
 802212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022130:	68fa      	ldr	r2, [r7, #12]
 8022132:	8b12      	ldrh	r2, [r2, #24]
 8022134:	1a9a      	subs	r2, r3, r2
 8022136:	68fb      	ldr	r3, [r7, #12]
 8022138:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 802213a:	68fb      	ldr	r3, [r7, #12]
 802213c:	69db      	ldr	r3, [r3, #28]
 802213e:	68fa      	ldr	r2, [r7, #12]
 8022140:	8b12      	ldrh	r2, [r2, #24]
 8022142:	441a      	add	r2, r3
 8022144:	68fb      	ldr	r3, [r7, #12]
 8022146:	61da      	str	r2, [r3, #28]
 8022148:	e002      	b.n	8022150 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 802214a:	68fb      	ldr	r3, [r7, #12]
 802214c:	2200      	movs	r2, #0
 802214e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8022150:	68fb      	ldr	r3, [r7, #12]
 8022152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022154:	2b00      	cmp	r3, #0
 8022156:	d004      	beq.n	8022162 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8022158:	68fb      	ldr	r3, [r7, #12]
 802215a:	2201      	movs	r2, #1
 802215c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8022160:	e006      	b.n	8022170 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8022162:	68fb      	ldr	r3, [r7, #12]
 8022164:	2200      	movs	r2, #0
 8022166:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 802216a:	6878      	ldr	r0, [r7, #4]
 802216c:	f000 f892 	bl	8022294 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8022170:	687b      	ldr	r3, [r7, #4]
 8022172:	2204      	movs	r2, #4
 8022174:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8022178:	687b      	ldr	r3, [r7, #4]
 802217a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802217e:	687b      	ldr	r3, [r7, #4]
 8022180:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8022184:	2200      	movs	r2, #0
 8022186:	4619      	mov	r1, r3
 8022188:	f7ed f84e 	bl	800f228 <osMessagePut>
      break;
 802218c:	e014      	b.n	80221b8 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 802218e:	7afb      	ldrb	r3, [r7, #11]
 8022190:	2b02      	cmp	r3, #2
 8022192:	d111      	bne.n	80221b8 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8022194:	68fb      	ldr	r3, [r7, #12]
 8022196:	2201      	movs	r2, #1
 8022198:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 802219c:	687b      	ldr	r3, [r7, #4]
 802219e:	2204      	movs	r2, #4
 80221a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80221a4:	687b      	ldr	r3, [r7, #4]
 80221a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80221aa:	687b      	ldr	r3, [r7, #4]
 80221ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80221b0:	2200      	movs	r2, #0
 80221b2:	4619      	mov	r1, r3
 80221b4:	f7ed f838 	bl	800f228 <osMessagePut>
      break;
 80221b8:	bf00      	nop
  }
}
 80221ba:	bf00      	nop
 80221bc:	3710      	adds	r7, #16
 80221be:	46bd      	mov	sp, r7
 80221c0:	bd80      	pop	{r7, pc}

080221c2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80221c2:	b580      	push	{r7, lr}
 80221c4:	b086      	sub	sp, #24
 80221c6:	af00      	add	r7, sp, #0
 80221c8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80221ca:	687b      	ldr	r3, [r7, #4]
 80221cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80221d0:	69db      	ldr	r3, [r3, #28]
 80221d2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80221d4:	2300      	movs	r3, #0
 80221d6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80221d8:	697b      	ldr	r3, [r7, #20]
 80221da:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80221de:	2b03      	cmp	r3, #3
 80221e0:	d002      	beq.n	80221e8 <CDC_ProcessReception+0x26>
 80221e2:	2b04      	cmp	r3, #4
 80221e4:	d00e      	beq.n	8022204 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80221e6:	e051      	b.n	802228c <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 80221e8:	697b      	ldr	r3, [r7, #20]
 80221ea:	6a19      	ldr	r1, [r3, #32]
 80221ec:	697b      	ldr	r3, [r7, #20]
 80221ee:	8b5a      	ldrh	r2, [r3, #26]
 80221f0:	697b      	ldr	r3, [r7, #20]
 80221f2:	7b1b      	ldrb	r3, [r3, #12]
 80221f4:	6878      	ldr	r0, [r7, #4]
 80221f6:	f001 fd49 	bl	8023c8c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80221fa:	697b      	ldr	r3, [r7, #20]
 80221fc:	2204      	movs	r2, #4
 80221fe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8022202:	e043      	b.n	802228c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8022204:	697b      	ldr	r3, [r7, #20]
 8022206:	7b1b      	ldrb	r3, [r3, #12]
 8022208:	4619      	mov	r1, r3
 802220a:	6878      	ldr	r0, [r7, #4]
 802220c:	f7e1 fdac 	bl	8003d68 <USBH_LL_GetURBState>
 8022210:	4603      	mov	r3, r0
 8022212:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8022214:	7cfb      	ldrb	r3, [r7, #19]
 8022216:	2b01      	cmp	r3, #1
 8022218:	d137      	bne.n	802228a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 802221a:	697b      	ldr	r3, [r7, #20]
 802221c:	7b1b      	ldrb	r3, [r3, #12]
 802221e:	4619      	mov	r1, r3
 8022220:	6878      	ldr	r0, [r7, #4]
 8022222:	f7e1 fd0f 	bl	8003c44 <USBH_LL_GetLastXferSize>
 8022226:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8022228:	697b      	ldr	r3, [r7, #20]
 802222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802222c:	68fa      	ldr	r2, [r7, #12]
 802222e:	429a      	cmp	r2, r3
 8022230:	d016      	beq.n	8022260 <CDC_ProcessReception+0x9e>
 8022232:	697b      	ldr	r3, [r7, #20]
 8022234:	8b5b      	ldrh	r3, [r3, #26]
 8022236:	461a      	mov	r2, r3
 8022238:	68fb      	ldr	r3, [r7, #12]
 802223a:	4293      	cmp	r3, r2
 802223c:	d910      	bls.n	8022260 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 802223e:	697b      	ldr	r3, [r7, #20]
 8022240:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8022242:	68fb      	ldr	r3, [r7, #12]
 8022244:	1ad2      	subs	r2, r2, r3
 8022246:	697b      	ldr	r3, [r7, #20]
 8022248:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 802224a:	697b      	ldr	r3, [r7, #20]
 802224c:	6a1a      	ldr	r2, [r3, #32]
 802224e:	68fb      	ldr	r3, [r7, #12]
 8022250:	441a      	add	r2, r3
 8022252:	697b      	ldr	r3, [r7, #20]
 8022254:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8022256:	697b      	ldr	r3, [r7, #20]
 8022258:	2203      	movs	r2, #3
 802225a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 802225e:	e006      	b.n	802226e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8022260:	697b      	ldr	r3, [r7, #20]
 8022262:	2200      	movs	r2, #0
 8022264:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8022268:	6878      	ldr	r0, [r7, #4]
 802226a:	f000 f81d 	bl	80222a8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 802226e:	687b      	ldr	r3, [r7, #4]
 8022270:	2204      	movs	r2, #4
 8022272:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8022276:	687b      	ldr	r3, [r7, #4]
 8022278:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802227c:	687b      	ldr	r3, [r7, #4]
 802227e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8022282:	2200      	movs	r2, #0
 8022284:	4619      	mov	r1, r3
 8022286:	f7ec ffcf 	bl	800f228 <osMessagePut>
      break;
 802228a:	bf00      	nop
  }
}
 802228c:	bf00      	nop
 802228e:	3718      	adds	r7, #24
 8022290:	46bd      	mov	sp, r7
 8022292:	bd80      	pop	{r7, pc}

08022294 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8022294:	b480      	push	{r7}
 8022296:	b083      	sub	sp, #12
 8022298:	af00      	add	r7, sp, #0
 802229a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 802229c:	bf00      	nop
 802229e:	370c      	adds	r7, #12
 80222a0:	46bd      	mov	sp, r7
 80222a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222a6:	4770      	bx	lr

080222a8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80222a8:	b480      	push	{r7}
 80222aa:	b083      	sub	sp, #12
 80222ac:	af00      	add	r7, sp, #0
 80222ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80222b0:	bf00      	nop
 80222b2:	370c      	adds	r7, #12
 80222b4:	46bd      	mov	sp, r7
 80222b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222ba:	4770      	bx	lr

080222bc <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80222bc:	b480      	push	{r7}
 80222be:	b083      	sub	sp, #12
 80222c0:	af00      	add	r7, sp, #0
 80222c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80222c4:	bf00      	nop
 80222c6:	370c      	adds	r7, #12
 80222c8:	46bd      	mov	sp, r7
 80222ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222ce:	4770      	bx	lr

080222d0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80222d0:	b5b0      	push	{r4, r5, r7, lr}
 80222d2:	b090      	sub	sp, #64	; 0x40
 80222d4:	af00      	add	r7, sp, #0
 80222d6:	60f8      	str	r0, [r7, #12]
 80222d8:	60b9      	str	r1, [r7, #8]
 80222da:	4613      	mov	r3, r2
 80222dc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80222de:	68fb      	ldr	r3, [r7, #12]
 80222e0:	2b00      	cmp	r3, #0
 80222e2:	d101      	bne.n	80222e8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80222e4:	2302      	movs	r3, #2
 80222e6:	e04d      	b.n	8022384 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80222e8:	68fb      	ldr	r3, [r7, #12]
 80222ea:	79fa      	ldrb	r2, [r7, #7]
 80222ec:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80222f0:	68fb      	ldr	r3, [r7, #12]
 80222f2:	2200      	movs	r2, #0
 80222f4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80222f8:	68fb      	ldr	r3, [r7, #12]
 80222fa:	2200      	movs	r2, #0
 80222fc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8022300:	68f8      	ldr	r0, [r7, #12]
 8022302:	f000 f847 	bl	8022394 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8022306:	68fb      	ldr	r3, [r7, #12]
 8022308:	2200      	movs	r2, #0
 802230a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 802230e:	68fb      	ldr	r3, [r7, #12]
 8022310:	2200      	movs	r2, #0
 8022312:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8022316:	68fb      	ldr	r3, [r7, #12]
 8022318:	2200      	movs	r2, #0
 802231a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 802231e:	68fb      	ldr	r3, [r7, #12]
 8022320:	2200      	movs	r2, #0
 8022322:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8022326:	68bb      	ldr	r3, [r7, #8]
 8022328:	2b00      	cmp	r3, #0
 802232a:	d003      	beq.n	8022334 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 802232c:	68fb      	ldr	r3, [r7, #12]
 802232e:	68ba      	ldr	r2, [r7, #8]
 8022330:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8022334:	4b15      	ldr	r3, [pc, #84]	; (802238c <USBH_Init+0xbc>)
 8022336:	f107 0430 	add.w	r4, r7, #48	; 0x30
 802233a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802233c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8022340:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8022344:	2100      	movs	r1, #0
 8022346:	4618      	mov	r0, r3
 8022348:	f7ec ff45 	bl	800f1d6 <osMessageCreate>
 802234c:	4602      	mov	r2, r0
 802234e:	68fb      	ldr	r3, [r7, #12]
 8022350:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8022354:	4b0e      	ldr	r3, [pc, #56]	; (8022390 <USBH_Init+0xc0>)
 8022356:	f107 0414 	add.w	r4, r7, #20
 802235a:	461d      	mov	r5, r3
 802235c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802235e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022360:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8022364:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8022368:	f107 0314 	add.w	r3, r7, #20
 802236c:	68f9      	ldr	r1, [r7, #12]
 802236e:	4618      	mov	r0, r3
 8022370:	f7ec fd5e 	bl	800ee30 <osThreadCreate>
 8022374:	4602      	mov	r2, r0
 8022376:	68fb      	ldr	r3, [r7, #12]
 8022378:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 802237c:	68f8      	ldr	r0, [r7, #12]
 802237e:	f7e1 fbaf 	bl	8003ae0 <USBH_LL_Init>

  return USBH_OK;
 8022382:	2300      	movs	r3, #0
}
 8022384:	4618      	mov	r0, r3
 8022386:	3740      	adds	r7, #64	; 0x40
 8022388:	46bd      	mov	sp, r7
 802238a:	bdb0      	pop	{r4, r5, r7, pc}
 802238c:	080289b0 	.word	0x080289b0
 8022390:	080289cc 	.word	0x080289cc

08022394 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8022394:	b480      	push	{r7}
 8022396:	b085      	sub	sp, #20
 8022398:	af00      	add	r7, sp, #0
 802239a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 802239c:	2300      	movs	r3, #0
 802239e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80223a0:	2300      	movs	r3, #0
 80223a2:	60fb      	str	r3, [r7, #12]
 80223a4:	e009      	b.n	80223ba <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80223a6:	687a      	ldr	r2, [r7, #4]
 80223a8:	68fb      	ldr	r3, [r7, #12]
 80223aa:	33e0      	adds	r3, #224	; 0xe0
 80223ac:	009b      	lsls	r3, r3, #2
 80223ae:	4413      	add	r3, r2
 80223b0:	2200      	movs	r2, #0
 80223b2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80223b4:	68fb      	ldr	r3, [r7, #12]
 80223b6:	3301      	adds	r3, #1
 80223b8:	60fb      	str	r3, [r7, #12]
 80223ba:	68fb      	ldr	r3, [r7, #12]
 80223bc:	2b0e      	cmp	r3, #14
 80223be:	d9f2      	bls.n	80223a6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80223c0:	2300      	movs	r3, #0
 80223c2:	60fb      	str	r3, [r7, #12]
 80223c4:	e009      	b.n	80223da <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80223c6:	687a      	ldr	r2, [r7, #4]
 80223c8:	68fb      	ldr	r3, [r7, #12]
 80223ca:	4413      	add	r3, r2
 80223cc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80223d0:	2200      	movs	r2, #0
 80223d2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80223d4:	68fb      	ldr	r3, [r7, #12]
 80223d6:	3301      	adds	r3, #1
 80223d8:	60fb      	str	r3, [r7, #12]
 80223da:	68fb      	ldr	r3, [r7, #12]
 80223dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80223e0:	d3f1      	bcc.n	80223c6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80223e2:	687b      	ldr	r3, [r7, #4]
 80223e4:	2200      	movs	r2, #0
 80223e6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80223e8:	687b      	ldr	r3, [r7, #4]
 80223ea:	2200      	movs	r2, #0
 80223ec:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80223ee:	687b      	ldr	r3, [r7, #4]
 80223f0:	2201      	movs	r2, #1
 80223f2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80223f4:	687b      	ldr	r3, [r7, #4]
 80223f6:	2200      	movs	r2, #0
 80223f8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80223fc:	687b      	ldr	r3, [r7, #4]
 80223fe:	2201      	movs	r2, #1
 8022400:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8022402:	687b      	ldr	r3, [r7, #4]
 8022404:	2240      	movs	r2, #64	; 0x40
 8022406:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8022408:	687b      	ldr	r3, [r7, #4]
 802240a:	2200      	movs	r2, #0
 802240c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 802240e:	687b      	ldr	r3, [r7, #4]
 8022410:	2200      	movs	r2, #0
 8022412:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8022416:	687b      	ldr	r3, [r7, #4]
 8022418:	2201      	movs	r2, #1
 802241a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 802241e:	687b      	ldr	r3, [r7, #4]
 8022420:	2200      	movs	r2, #0
 8022422:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8022426:	687b      	ldr	r3, [r7, #4]
 8022428:	2200      	movs	r2, #0
 802242a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 802242e:	2300      	movs	r3, #0
}
 8022430:	4618      	mov	r0, r3
 8022432:	3714      	adds	r7, #20
 8022434:	46bd      	mov	sp, r7
 8022436:	f85d 7b04 	ldr.w	r7, [sp], #4
 802243a:	4770      	bx	lr

0802243c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 802243c:	b480      	push	{r7}
 802243e:	b085      	sub	sp, #20
 8022440:	af00      	add	r7, sp, #0
 8022442:	6078      	str	r0, [r7, #4]
 8022444:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8022446:	2300      	movs	r3, #0
 8022448:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 802244a:	683b      	ldr	r3, [r7, #0]
 802244c:	2b00      	cmp	r3, #0
 802244e:	d016      	beq.n	802247e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8022450:	687b      	ldr	r3, [r7, #4]
 8022452:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8022456:	2b00      	cmp	r3, #0
 8022458:	d10e      	bne.n	8022478 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 802245a:	687b      	ldr	r3, [r7, #4]
 802245c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8022460:	1c59      	adds	r1, r3, #1
 8022462:	687a      	ldr	r2, [r7, #4]
 8022464:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8022468:	687a      	ldr	r2, [r7, #4]
 802246a:	33de      	adds	r3, #222	; 0xde
 802246c:	6839      	ldr	r1, [r7, #0]
 802246e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8022472:	2300      	movs	r3, #0
 8022474:	73fb      	strb	r3, [r7, #15]
 8022476:	e004      	b.n	8022482 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8022478:	2302      	movs	r3, #2
 802247a:	73fb      	strb	r3, [r7, #15]
 802247c:	e001      	b.n	8022482 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 802247e:	2302      	movs	r3, #2
 8022480:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8022482:	7bfb      	ldrb	r3, [r7, #15]
}
 8022484:	4618      	mov	r0, r3
 8022486:	3714      	adds	r7, #20
 8022488:	46bd      	mov	sp, r7
 802248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802248e:	4770      	bx	lr

08022490 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8022490:	b480      	push	{r7}
 8022492:	b085      	sub	sp, #20
 8022494:	af00      	add	r7, sp, #0
 8022496:	6078      	str	r0, [r7, #4]
 8022498:	460b      	mov	r3, r1
 802249a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 802249c:	2300      	movs	r3, #0
 802249e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80224a0:	687b      	ldr	r3, [r7, #4]
 80224a2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80224a6:	78fa      	ldrb	r2, [r7, #3]
 80224a8:	429a      	cmp	r2, r3
 80224aa:	d204      	bcs.n	80224b6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80224ac:	687b      	ldr	r3, [r7, #4]
 80224ae:	78fa      	ldrb	r2, [r7, #3]
 80224b0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80224b4:	e001      	b.n	80224ba <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80224b6:	2302      	movs	r3, #2
 80224b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80224ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80224bc:	4618      	mov	r0, r3
 80224be:	3714      	adds	r7, #20
 80224c0:	46bd      	mov	sp, r7
 80224c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224c6:	4770      	bx	lr

080224c8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80224c8:	b480      	push	{r7}
 80224ca:	b087      	sub	sp, #28
 80224cc:	af00      	add	r7, sp, #0
 80224ce:	6078      	str	r0, [r7, #4]
 80224d0:	4608      	mov	r0, r1
 80224d2:	4611      	mov	r1, r2
 80224d4:	461a      	mov	r2, r3
 80224d6:	4603      	mov	r3, r0
 80224d8:	70fb      	strb	r3, [r7, #3]
 80224da:	460b      	mov	r3, r1
 80224dc:	70bb      	strb	r3, [r7, #2]
 80224de:	4613      	mov	r3, r2
 80224e0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80224e2:	2300      	movs	r3, #0
 80224e4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80224e6:	2300      	movs	r3, #0
 80224e8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80224ea:	687b      	ldr	r3, [r7, #4]
 80224ec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80224f0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80224f2:	e025      	b.n	8022540 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80224f4:	7dfb      	ldrb	r3, [r7, #23]
 80224f6:	221a      	movs	r2, #26
 80224f8:	fb02 f303 	mul.w	r3, r2, r3
 80224fc:	3308      	adds	r3, #8
 80224fe:	68fa      	ldr	r2, [r7, #12]
 8022500:	4413      	add	r3, r2
 8022502:	3302      	adds	r3, #2
 8022504:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8022506:	693b      	ldr	r3, [r7, #16]
 8022508:	795b      	ldrb	r3, [r3, #5]
 802250a:	78fa      	ldrb	r2, [r7, #3]
 802250c:	429a      	cmp	r2, r3
 802250e:	d002      	beq.n	8022516 <USBH_FindInterface+0x4e>
 8022510:	78fb      	ldrb	r3, [r7, #3]
 8022512:	2bff      	cmp	r3, #255	; 0xff
 8022514:	d111      	bne.n	802253a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8022516:	693b      	ldr	r3, [r7, #16]
 8022518:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 802251a:	78ba      	ldrb	r2, [r7, #2]
 802251c:	429a      	cmp	r2, r3
 802251e:	d002      	beq.n	8022526 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8022520:	78bb      	ldrb	r3, [r7, #2]
 8022522:	2bff      	cmp	r3, #255	; 0xff
 8022524:	d109      	bne.n	802253a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8022526:	693b      	ldr	r3, [r7, #16]
 8022528:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 802252a:	787a      	ldrb	r2, [r7, #1]
 802252c:	429a      	cmp	r2, r3
 802252e:	d002      	beq.n	8022536 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8022530:	787b      	ldrb	r3, [r7, #1]
 8022532:	2bff      	cmp	r3, #255	; 0xff
 8022534:	d101      	bne.n	802253a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8022536:	7dfb      	ldrb	r3, [r7, #23]
 8022538:	e006      	b.n	8022548 <USBH_FindInterface+0x80>
    }
    if_ix++;
 802253a:	7dfb      	ldrb	r3, [r7, #23]
 802253c:	3301      	adds	r3, #1
 802253e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8022540:	7dfb      	ldrb	r3, [r7, #23]
 8022542:	2b01      	cmp	r3, #1
 8022544:	d9d6      	bls.n	80224f4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8022546:	23ff      	movs	r3, #255	; 0xff
}
 8022548:	4618      	mov	r0, r3
 802254a:	371c      	adds	r7, #28
 802254c:	46bd      	mov	sp, r7
 802254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022552:	4770      	bx	lr

08022554 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8022554:	b580      	push	{r7, lr}
 8022556:	b082      	sub	sp, #8
 8022558:	af00      	add	r7, sp, #0
 802255a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 802255c:	6878      	ldr	r0, [r7, #4]
 802255e:	f7e1 fafb 	bl	8003b58 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8022562:	2101      	movs	r1, #1
 8022564:	6878      	ldr	r0, [r7, #4]
 8022566:	f7e1 fc12 	bl	8003d8e <USBH_LL_DriverVBUS>

  return USBH_OK;
 802256a:	2300      	movs	r3, #0
}
 802256c:	4618      	mov	r0, r3
 802256e:	3708      	adds	r7, #8
 8022570:	46bd      	mov	sp, r7
 8022572:	bd80      	pop	{r7, pc}

08022574 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8022574:	b580      	push	{r7, lr}
 8022576:	b088      	sub	sp, #32
 8022578:	af04      	add	r7, sp, #16
 802257a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 802257c:	2302      	movs	r3, #2
 802257e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8022580:	2300      	movs	r3, #0
 8022582:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8022584:	687b      	ldr	r3, [r7, #4]
 8022586:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 802258a:	b2db      	uxtb	r3, r3
 802258c:	2b01      	cmp	r3, #1
 802258e:	d102      	bne.n	8022596 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8022590:	687b      	ldr	r3, [r7, #4]
 8022592:	2203      	movs	r2, #3
 8022594:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8022596:	687b      	ldr	r3, [r7, #4]
 8022598:	781b      	ldrb	r3, [r3, #0]
 802259a:	b2db      	uxtb	r3, r3
 802259c:	2b0b      	cmp	r3, #11
 802259e:	f200 823c 	bhi.w	8022a1a <USBH_Process+0x4a6>
 80225a2:	a201      	add	r2, pc, #4	; (adr r2, 80225a8 <USBH_Process+0x34>)
 80225a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80225a8:	080225d9 	.word	0x080225d9
 80225ac:	08022627 	.word	0x08022627
 80225b0:	080226ab 	.word	0x080226ab
 80225b4:	08022999 	.word	0x08022999
 80225b8:	08022a1b 	.word	0x08022a1b
 80225bc:	0802276b 	.word	0x0802276b
 80225c0:	08022923 	.word	0x08022923
 80225c4:	080227bd 	.word	0x080227bd
 80225c8:	080227f9 	.word	0x080227f9
 80225cc:	08022833 	.word	0x08022833
 80225d0:	0802287b 	.word	0x0802287b
 80225d4:	08022981 	.word	0x08022981
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80225d8:	687b      	ldr	r3, [r7, #4]
 80225da:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80225de:	b2db      	uxtb	r3, r3
 80225e0:	2b00      	cmp	r3, #0
 80225e2:	f000 821c 	beq.w	8022a1e <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80225e6:	687b      	ldr	r3, [r7, #4]
 80225e8:	2201      	movs	r2, #1
 80225ea:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80225ec:	20c8      	movs	r0, #200	; 0xc8
 80225ee:	f7e1 fc18 	bl	8003e22 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80225f2:	6878      	ldr	r0, [r7, #4]
 80225f4:	f7e1 fb0b 	bl	8003c0e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80225f8:	687b      	ldr	r3, [r7, #4]
 80225fa:	2200      	movs	r2, #0
 80225fc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8022600:	687b      	ldr	r3, [r7, #4]
 8022602:	2200      	movs	r2, #0
 8022604:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8022608:	687b      	ldr	r3, [r7, #4]
 802260a:	2201      	movs	r2, #1
 802260c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8022610:	687b      	ldr	r3, [r7, #4]
 8022612:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8022616:	687b      	ldr	r3, [r7, #4]
 8022618:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802261c:	2200      	movs	r2, #0
 802261e:	4619      	mov	r1, r3
 8022620:	f7ec fe02 	bl	800f228 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8022624:	e1fb      	b.n	8022a1e <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8022626:	687b      	ldr	r3, [r7, #4]
 8022628:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 802262c:	2b01      	cmp	r3, #1
 802262e:	d107      	bne.n	8022640 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8022630:	687b      	ldr	r3, [r7, #4]
 8022632:	2200      	movs	r2, #0
 8022634:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8022638:	687b      	ldr	r3, [r7, #4]
 802263a:	2202      	movs	r2, #2
 802263c:	701a      	strb	r2, [r3, #0]
 802263e:	e025      	b.n	802268c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8022640:	687b      	ldr	r3, [r7, #4]
 8022642:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8022646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 802264a:	d914      	bls.n	8022676 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 802264c:	687b      	ldr	r3, [r7, #4]
 802264e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8022652:	3301      	adds	r3, #1
 8022654:	b2da      	uxtb	r2, r3
 8022656:	687b      	ldr	r3, [r7, #4]
 8022658:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 802265c:	687b      	ldr	r3, [r7, #4]
 802265e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8022662:	2b03      	cmp	r3, #3
 8022664:	d903      	bls.n	802266e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8022666:	687b      	ldr	r3, [r7, #4]
 8022668:	220d      	movs	r2, #13
 802266a:	701a      	strb	r2, [r3, #0]
 802266c:	e00e      	b.n	802268c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 802266e:	687b      	ldr	r3, [r7, #4]
 8022670:	2200      	movs	r2, #0
 8022672:	701a      	strb	r2, [r3, #0]
 8022674:	e00a      	b.n	802268c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8022676:	687b      	ldr	r3, [r7, #4]
 8022678:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 802267c:	f103 020a 	add.w	r2, r3, #10
 8022680:	687b      	ldr	r3, [r7, #4]
 8022682:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8022686:	200a      	movs	r0, #10
 8022688:	f7e1 fbcb 	bl	8003e22 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802268c:	687b      	ldr	r3, [r7, #4]
 802268e:	2201      	movs	r2, #1
 8022690:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8022694:	687b      	ldr	r3, [r7, #4]
 8022696:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802269a:	687b      	ldr	r3, [r7, #4]
 802269c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80226a0:	2200      	movs	r2, #0
 80226a2:	4619      	mov	r1, r3
 80226a4:	f7ec fdc0 	bl	800f228 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80226a8:	e1c0      	b.n	8022a2c <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80226aa:	687b      	ldr	r3, [r7, #4]
 80226ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80226b0:	2b00      	cmp	r3, #0
 80226b2:	d005      	beq.n	80226c0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80226b4:	687b      	ldr	r3, [r7, #4]
 80226b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80226ba:	2104      	movs	r1, #4
 80226bc:	6878      	ldr	r0, [r7, #4]
 80226be:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80226c0:	2064      	movs	r0, #100	; 0x64
 80226c2:	f7e1 fbae 	bl	8003e22 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80226c6:	6878      	ldr	r0, [r7, #4]
 80226c8:	f7e1 fa7c 	bl	8003bc4 <USBH_LL_GetSpeed>
 80226cc:	4603      	mov	r3, r0
 80226ce:	461a      	mov	r2, r3
 80226d0:	687b      	ldr	r3, [r7, #4]
 80226d2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80226d6:	687b      	ldr	r3, [r7, #4]
 80226d8:	2205      	movs	r2, #5
 80226da:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80226dc:	2100      	movs	r1, #0
 80226de:	6878      	ldr	r0, [r7, #4]
 80226e0:	f001 fb21 	bl	8023d26 <USBH_AllocPipe>
 80226e4:	4603      	mov	r3, r0
 80226e6:	461a      	mov	r2, r3
 80226e8:	687b      	ldr	r3, [r7, #4]
 80226ea:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80226ec:	2180      	movs	r1, #128	; 0x80
 80226ee:	6878      	ldr	r0, [r7, #4]
 80226f0:	f001 fb19 	bl	8023d26 <USBH_AllocPipe>
 80226f4:	4603      	mov	r3, r0
 80226f6:	461a      	mov	r2, r3
 80226f8:	687b      	ldr	r3, [r7, #4]
 80226fa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80226fc:	687b      	ldr	r3, [r7, #4]
 80226fe:	7919      	ldrb	r1, [r3, #4]
 8022700:	687b      	ldr	r3, [r7, #4]
 8022702:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8022706:	687b      	ldr	r3, [r7, #4]
 8022708:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 802270c:	687a      	ldr	r2, [r7, #4]
 802270e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8022710:	b292      	uxth	r2, r2
 8022712:	9202      	str	r2, [sp, #8]
 8022714:	2200      	movs	r2, #0
 8022716:	9201      	str	r2, [sp, #4]
 8022718:	9300      	str	r3, [sp, #0]
 802271a:	4603      	mov	r3, r0
 802271c:	2280      	movs	r2, #128	; 0x80
 802271e:	6878      	ldr	r0, [r7, #4]
 8022720:	f001 fad2 	bl	8023cc8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8022724:	687b      	ldr	r3, [r7, #4]
 8022726:	7959      	ldrb	r1, [r3, #5]
 8022728:	687b      	ldr	r3, [r7, #4]
 802272a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 802272e:	687b      	ldr	r3, [r7, #4]
 8022730:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8022734:	687a      	ldr	r2, [r7, #4]
 8022736:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8022738:	b292      	uxth	r2, r2
 802273a:	9202      	str	r2, [sp, #8]
 802273c:	2200      	movs	r2, #0
 802273e:	9201      	str	r2, [sp, #4]
 8022740:	9300      	str	r3, [sp, #0]
 8022742:	4603      	mov	r3, r0
 8022744:	2200      	movs	r2, #0
 8022746:	6878      	ldr	r0, [r7, #4]
 8022748:	f001 fabe 	bl	8023cc8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802274c:	687b      	ldr	r3, [r7, #4]
 802274e:	2201      	movs	r2, #1
 8022750:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8022754:	687b      	ldr	r3, [r7, #4]
 8022756:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802275a:	687b      	ldr	r3, [r7, #4]
 802275c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8022760:	2200      	movs	r2, #0
 8022762:	4619      	mov	r1, r3
 8022764:	f7ec fd60 	bl	800f228 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8022768:	e160      	b.n	8022a2c <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 802276a:	6878      	ldr	r0, [r7, #4]
 802276c:	f000 f964 	bl	8022a38 <USBH_HandleEnum>
 8022770:	4603      	mov	r3, r0
 8022772:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8022774:	7bbb      	ldrb	r3, [r7, #14]
 8022776:	b2db      	uxtb	r3, r3
 8022778:	2b00      	cmp	r3, #0
 802277a:	f040 8152 	bne.w	8022a22 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 802277e:	687b      	ldr	r3, [r7, #4]
 8022780:	2200      	movs	r2, #0
 8022782:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8022786:	687b      	ldr	r3, [r7, #4]
 8022788:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 802278c:	2b01      	cmp	r3, #1
 802278e:	d103      	bne.n	8022798 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8022790:	687b      	ldr	r3, [r7, #4]
 8022792:	2208      	movs	r2, #8
 8022794:	701a      	strb	r2, [r3, #0]
 8022796:	e002      	b.n	802279e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8022798:	687b      	ldr	r3, [r7, #4]
 802279a:	2207      	movs	r2, #7
 802279c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 802279e:	687b      	ldr	r3, [r7, #4]
 80227a0:	2205      	movs	r2, #5
 80227a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80227a6:	687b      	ldr	r3, [r7, #4]
 80227a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80227ac:	687b      	ldr	r3, [r7, #4]
 80227ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80227b2:	2200      	movs	r2, #0
 80227b4:	4619      	mov	r1, r3
 80227b6:	f7ec fd37 	bl	800f228 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80227ba:	e132      	b.n	8022a22 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80227bc:	687b      	ldr	r3, [r7, #4]
 80227be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80227c2:	2b00      	cmp	r3, #0
 80227c4:	f000 812f 	beq.w	8022a26 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80227c8:	687b      	ldr	r3, [r7, #4]
 80227ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80227ce:	2101      	movs	r1, #1
 80227d0:	6878      	ldr	r0, [r7, #4]
 80227d2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80227d4:	687b      	ldr	r3, [r7, #4]
 80227d6:	2208      	movs	r2, #8
 80227d8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80227da:	687b      	ldr	r3, [r7, #4]
 80227dc:	2205      	movs	r2, #5
 80227de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80227e2:	687b      	ldr	r3, [r7, #4]
 80227e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80227e8:	687b      	ldr	r3, [r7, #4]
 80227ea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80227ee:	2200      	movs	r2, #0
 80227f0:	4619      	mov	r1, r3
 80227f2:	f7ec fd19 	bl	800f228 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80227f6:	e116      	b.n	8022a26 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80227f8:	687b      	ldr	r3, [r7, #4]
 80227fa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80227fe:	b29b      	uxth	r3, r3
 8022800:	4619      	mov	r1, r3
 8022802:	6878      	ldr	r0, [r7, #4]
 8022804:	f000 fcf6 	bl	80231f4 <USBH_SetCfg>
 8022808:	4603      	mov	r3, r0
 802280a:	2b00      	cmp	r3, #0
 802280c:	d102      	bne.n	8022814 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 802280e:	687b      	ldr	r3, [r7, #4]
 8022810:	2209      	movs	r2, #9
 8022812:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8022814:	687b      	ldr	r3, [r7, #4]
 8022816:	2201      	movs	r2, #1
 8022818:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802281c:	687b      	ldr	r3, [r7, #4]
 802281e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8022822:	687b      	ldr	r3, [r7, #4]
 8022824:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8022828:	2200      	movs	r2, #0
 802282a:	4619      	mov	r1, r3
 802282c:	f7ec fcfc 	bl	800f228 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8022830:	e0fc      	b.n	8022a2c <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8022832:	687b      	ldr	r3, [r7, #4]
 8022834:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8022838:	f003 0320 	and.w	r3, r3, #32
 802283c:	2b00      	cmp	r3, #0
 802283e:	d00a      	beq.n	8022856 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8022840:	2101      	movs	r1, #1
 8022842:	6878      	ldr	r0, [r7, #4]
 8022844:	f000 fcf9 	bl	802323a <USBH_SetFeature>
 8022848:	4603      	mov	r3, r0
 802284a:	2b00      	cmp	r3, #0
 802284c:	d106      	bne.n	802285c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 802284e:	687b      	ldr	r3, [r7, #4]
 8022850:	220a      	movs	r2, #10
 8022852:	701a      	strb	r2, [r3, #0]
 8022854:	e002      	b.n	802285c <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8022856:	687b      	ldr	r3, [r7, #4]
 8022858:	220a      	movs	r2, #10
 802285a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802285c:	687b      	ldr	r3, [r7, #4]
 802285e:	2201      	movs	r2, #1
 8022860:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8022864:	687b      	ldr	r3, [r7, #4]
 8022866:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802286a:	687b      	ldr	r3, [r7, #4]
 802286c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8022870:	2200      	movs	r2, #0
 8022872:	4619      	mov	r1, r3
 8022874:	f7ec fcd8 	bl	800f228 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8022878:	e0d8      	b.n	8022a2c <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 802287a:	687b      	ldr	r3, [r7, #4]
 802287c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8022880:	2b00      	cmp	r3, #0
 8022882:	d03f      	beq.n	8022904 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8022884:	687b      	ldr	r3, [r7, #4]
 8022886:	2200      	movs	r2, #0
 8022888:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 802288c:	2300      	movs	r3, #0
 802288e:	73fb      	strb	r3, [r7, #15]
 8022890:	e016      	b.n	80228c0 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8022892:	7bfa      	ldrb	r2, [r7, #15]
 8022894:	687b      	ldr	r3, [r7, #4]
 8022896:	32de      	adds	r2, #222	; 0xde
 8022898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802289c:	791a      	ldrb	r2, [r3, #4]
 802289e:	687b      	ldr	r3, [r7, #4]
 80228a0:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80228a4:	429a      	cmp	r2, r3
 80228a6:	d108      	bne.n	80228ba <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 80228a8:	7bfa      	ldrb	r2, [r7, #15]
 80228aa:	687b      	ldr	r3, [r7, #4]
 80228ac:	32de      	adds	r2, #222	; 0xde
 80228ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80228b2:	687b      	ldr	r3, [r7, #4]
 80228b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80228b8:	e005      	b.n	80228c6 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80228ba:	7bfb      	ldrb	r3, [r7, #15]
 80228bc:	3301      	adds	r3, #1
 80228be:	73fb      	strb	r3, [r7, #15]
 80228c0:	7bfb      	ldrb	r3, [r7, #15]
 80228c2:	2b00      	cmp	r3, #0
 80228c4:	d0e5      	beq.n	8022892 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 80228c6:	687b      	ldr	r3, [r7, #4]
 80228c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80228cc:	2b00      	cmp	r3, #0
 80228ce:	d016      	beq.n	80228fe <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80228d0:	687b      	ldr	r3, [r7, #4]
 80228d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80228d6:	689b      	ldr	r3, [r3, #8]
 80228d8:	6878      	ldr	r0, [r7, #4]
 80228da:	4798      	blx	r3
 80228dc:	4603      	mov	r3, r0
 80228de:	2b00      	cmp	r3, #0
 80228e0:	d109      	bne.n	80228f6 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80228e2:	687b      	ldr	r3, [r7, #4]
 80228e4:	2206      	movs	r2, #6
 80228e6:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80228e8:	687b      	ldr	r3, [r7, #4]
 80228ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80228ee:	2103      	movs	r1, #3
 80228f0:	6878      	ldr	r0, [r7, #4]
 80228f2:	4798      	blx	r3
 80228f4:	e006      	b.n	8022904 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80228f6:	687b      	ldr	r3, [r7, #4]
 80228f8:	220d      	movs	r2, #13
 80228fa:	701a      	strb	r2, [r3, #0]
 80228fc:	e002      	b.n	8022904 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80228fe:	687b      	ldr	r3, [r7, #4]
 8022900:	220d      	movs	r2, #13
 8022902:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8022904:	687b      	ldr	r3, [r7, #4]
 8022906:	2205      	movs	r2, #5
 8022908:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802290c:	687b      	ldr	r3, [r7, #4]
 802290e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8022912:	687b      	ldr	r3, [r7, #4]
 8022914:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8022918:	2200      	movs	r2, #0
 802291a:	4619      	mov	r1, r3
 802291c:	f7ec fc84 	bl	800f228 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8022920:	e084      	b.n	8022a2c <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8022922:	687b      	ldr	r3, [r7, #4]
 8022924:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8022928:	2b00      	cmp	r3, #0
 802292a:	d017      	beq.n	802295c <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 802292c:	687b      	ldr	r3, [r7, #4]
 802292e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8022932:	691b      	ldr	r3, [r3, #16]
 8022934:	6878      	ldr	r0, [r7, #4]
 8022936:	4798      	blx	r3
 8022938:	4603      	mov	r3, r0
 802293a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 802293c:	7bbb      	ldrb	r3, [r7, #14]
 802293e:	b2db      	uxtb	r3, r3
 8022940:	2b00      	cmp	r3, #0
 8022942:	d103      	bne.n	802294c <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 8022944:	687b      	ldr	r3, [r7, #4]
 8022946:	220b      	movs	r2, #11
 8022948:	701a      	strb	r2, [r3, #0]
 802294a:	e00a      	b.n	8022962 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 802294c:	7bbb      	ldrb	r3, [r7, #14]
 802294e:	b2db      	uxtb	r3, r3
 8022950:	2b02      	cmp	r3, #2
 8022952:	d106      	bne.n	8022962 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 8022954:	687b      	ldr	r3, [r7, #4]
 8022956:	220d      	movs	r2, #13
 8022958:	701a      	strb	r2, [r3, #0]
 802295a:	e002      	b.n	8022962 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 802295c:	687b      	ldr	r3, [r7, #4]
 802295e:	220d      	movs	r2, #13
 8022960:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8022962:	687b      	ldr	r3, [r7, #4]
 8022964:	2205      	movs	r2, #5
 8022966:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802296a:	687b      	ldr	r3, [r7, #4]
 802296c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8022970:	687b      	ldr	r3, [r7, #4]
 8022972:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8022976:	2200      	movs	r2, #0
 8022978:	4619      	mov	r1, r3
 802297a:	f7ec fc55 	bl	800f228 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 802297e:	e055      	b.n	8022a2c <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8022980:	687b      	ldr	r3, [r7, #4]
 8022982:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8022986:	2b00      	cmp	r3, #0
 8022988:	d04f      	beq.n	8022a2a <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 802298a:	687b      	ldr	r3, [r7, #4]
 802298c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8022990:	695b      	ldr	r3, [r3, #20]
 8022992:	6878      	ldr	r0, [r7, #4]
 8022994:	4798      	blx	r3
      }
      break;
 8022996:	e048      	b.n	8022a2a <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8022998:	687b      	ldr	r3, [r7, #4]
 802299a:	2200      	movs	r2, #0
 802299c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80229a0:	6878      	ldr	r0, [r7, #4]
 80229a2:	f7ff fcf7 	bl	8022394 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80229a6:	687b      	ldr	r3, [r7, #4]
 80229a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80229ac:	2b00      	cmp	r3, #0
 80229ae:	d009      	beq.n	80229c4 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 80229b0:	687b      	ldr	r3, [r7, #4]
 80229b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80229b6:	68db      	ldr	r3, [r3, #12]
 80229b8:	6878      	ldr	r0, [r7, #4]
 80229ba:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80229bc:	687b      	ldr	r3, [r7, #4]
 80229be:	2200      	movs	r2, #0
 80229c0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80229c4:	687b      	ldr	r3, [r7, #4]
 80229c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80229ca:	2b00      	cmp	r3, #0
 80229cc:	d005      	beq.n	80229da <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80229ce:	687b      	ldr	r3, [r7, #4]
 80229d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80229d4:	2105      	movs	r1, #5
 80229d6:	6878      	ldr	r0, [r7, #4]
 80229d8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80229da:	687b      	ldr	r3, [r7, #4]
 80229dc:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80229e0:	b2db      	uxtb	r3, r3
 80229e2:	2b01      	cmp	r3, #1
 80229e4:	d107      	bne.n	80229f6 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 80229e6:	687b      	ldr	r3, [r7, #4]
 80229e8:	2200      	movs	r2, #0
 80229ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80229ee:	6878      	ldr	r0, [r7, #4]
 80229f0:	f7ff fdb0 	bl	8022554 <USBH_Start>
 80229f4:	e002      	b.n	80229fc <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 80229f6:	6878      	ldr	r0, [r7, #4]
 80229f8:	f7e1 f8ae 	bl	8003b58 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80229fc:	687b      	ldr	r3, [r7, #4]
 80229fe:	2201      	movs	r2, #1
 8022a00:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8022a04:	687b      	ldr	r3, [r7, #4]
 8022a06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8022a0a:	687b      	ldr	r3, [r7, #4]
 8022a0c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8022a10:	2200      	movs	r2, #0
 8022a12:	4619      	mov	r1, r3
 8022a14:	f7ec fc08 	bl	800f228 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8022a18:	e008      	b.n	8022a2c <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 8022a1a:	bf00      	nop
 8022a1c:	e006      	b.n	8022a2c <USBH_Process+0x4b8>
      break;
 8022a1e:	bf00      	nop
 8022a20:	e004      	b.n	8022a2c <USBH_Process+0x4b8>
      break;
 8022a22:	bf00      	nop
 8022a24:	e002      	b.n	8022a2c <USBH_Process+0x4b8>
    break;
 8022a26:	bf00      	nop
 8022a28:	e000      	b.n	8022a2c <USBH_Process+0x4b8>
      break;
 8022a2a:	bf00      	nop
  }
  return USBH_OK;
 8022a2c:	2300      	movs	r3, #0
}
 8022a2e:	4618      	mov	r0, r3
 8022a30:	3710      	adds	r7, #16
 8022a32:	46bd      	mov	sp, r7
 8022a34:	bd80      	pop	{r7, pc}
 8022a36:	bf00      	nop

08022a38 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8022a38:	b580      	push	{r7, lr}
 8022a3a:	b088      	sub	sp, #32
 8022a3c:	af04      	add	r7, sp, #16
 8022a3e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8022a40:	2301      	movs	r3, #1
 8022a42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8022a44:	2301      	movs	r3, #1
 8022a46:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8022a48:	687b      	ldr	r3, [r7, #4]
 8022a4a:	785b      	ldrb	r3, [r3, #1]
 8022a4c:	2b07      	cmp	r3, #7
 8022a4e:	f200 8208 	bhi.w	8022e62 <USBH_HandleEnum+0x42a>
 8022a52:	a201      	add	r2, pc, #4	; (adr r2, 8022a58 <USBH_HandleEnum+0x20>)
 8022a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022a58:	08022a79 	.word	0x08022a79
 8022a5c:	08022b37 	.word	0x08022b37
 8022a60:	08022ba1 	.word	0x08022ba1
 8022a64:	08022c2f 	.word	0x08022c2f
 8022a68:	08022c99 	.word	0x08022c99
 8022a6c:	08022d09 	.word	0x08022d09
 8022a70:	08022da5 	.word	0x08022da5
 8022a74:	08022e23 	.word	0x08022e23
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8022a78:	2108      	movs	r1, #8
 8022a7a:	6878      	ldr	r0, [r7, #4]
 8022a7c:	f000 faea 	bl	8023054 <USBH_Get_DevDesc>
 8022a80:	4603      	mov	r3, r0
 8022a82:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8022a84:	7bbb      	ldrb	r3, [r7, #14]
 8022a86:	2b00      	cmp	r3, #0
 8022a88:	d130      	bne.n	8022aec <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8022a8a:	687b      	ldr	r3, [r7, #4]
 8022a8c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8022a90:	687b      	ldr	r3, [r7, #4]
 8022a92:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8022a94:	687b      	ldr	r3, [r7, #4]
 8022a96:	2201      	movs	r2, #1
 8022a98:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8022a9a:	687b      	ldr	r3, [r7, #4]
 8022a9c:	7919      	ldrb	r1, [r3, #4]
 8022a9e:	687b      	ldr	r3, [r7, #4]
 8022aa0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8022aa4:	687b      	ldr	r3, [r7, #4]
 8022aa6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8022aaa:	687a      	ldr	r2, [r7, #4]
 8022aac:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8022aae:	b292      	uxth	r2, r2
 8022ab0:	9202      	str	r2, [sp, #8]
 8022ab2:	2200      	movs	r2, #0
 8022ab4:	9201      	str	r2, [sp, #4]
 8022ab6:	9300      	str	r3, [sp, #0]
 8022ab8:	4603      	mov	r3, r0
 8022aba:	2280      	movs	r2, #128	; 0x80
 8022abc:	6878      	ldr	r0, [r7, #4]
 8022abe:	f001 f903 	bl	8023cc8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8022ac2:	687b      	ldr	r3, [r7, #4]
 8022ac4:	7959      	ldrb	r1, [r3, #5]
 8022ac6:	687b      	ldr	r3, [r7, #4]
 8022ac8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8022acc:	687b      	ldr	r3, [r7, #4]
 8022ace:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8022ad2:	687a      	ldr	r2, [r7, #4]
 8022ad4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8022ad6:	b292      	uxth	r2, r2
 8022ad8:	9202      	str	r2, [sp, #8]
 8022ada:	2200      	movs	r2, #0
 8022adc:	9201      	str	r2, [sp, #4]
 8022ade:	9300      	str	r3, [sp, #0]
 8022ae0:	4603      	mov	r3, r0
 8022ae2:	2200      	movs	r2, #0
 8022ae4:	6878      	ldr	r0, [r7, #4]
 8022ae6:	f001 f8ef 	bl	8023cc8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8022aea:	e1bc      	b.n	8022e66 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8022aec:	7bbb      	ldrb	r3, [r7, #14]
 8022aee:	2b03      	cmp	r3, #3
 8022af0:	f040 81b9 	bne.w	8022e66 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 8022af4:	687b      	ldr	r3, [r7, #4]
 8022af6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8022afa:	3301      	adds	r3, #1
 8022afc:	b2da      	uxtb	r2, r3
 8022afe:	687b      	ldr	r3, [r7, #4]
 8022b00:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8022b04:	687b      	ldr	r3, [r7, #4]
 8022b06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8022b0a:	2b03      	cmp	r3, #3
 8022b0c:	d903      	bls.n	8022b16 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8022b0e:	687b      	ldr	r3, [r7, #4]
 8022b10:	220d      	movs	r2, #13
 8022b12:	701a      	strb	r2, [r3, #0]
      break;
 8022b14:	e1a7      	b.n	8022e66 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8022b16:	687b      	ldr	r3, [r7, #4]
 8022b18:	795b      	ldrb	r3, [r3, #5]
 8022b1a:	4619      	mov	r1, r3
 8022b1c:	6878      	ldr	r0, [r7, #4]
 8022b1e:	f001 f923 	bl	8023d68 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8022b22:	687b      	ldr	r3, [r7, #4]
 8022b24:	791b      	ldrb	r3, [r3, #4]
 8022b26:	4619      	mov	r1, r3
 8022b28:	6878      	ldr	r0, [r7, #4]
 8022b2a:	f001 f91d 	bl	8023d68 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8022b2e:	687b      	ldr	r3, [r7, #4]
 8022b30:	2200      	movs	r2, #0
 8022b32:	701a      	strb	r2, [r3, #0]
      break;
 8022b34:	e197      	b.n	8022e66 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8022b36:	2112      	movs	r1, #18
 8022b38:	6878      	ldr	r0, [r7, #4]
 8022b3a:	f000 fa8b 	bl	8023054 <USBH_Get_DevDesc>
 8022b3e:	4603      	mov	r3, r0
 8022b40:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8022b42:	7bbb      	ldrb	r3, [r7, #14]
 8022b44:	2b00      	cmp	r3, #0
 8022b46:	d103      	bne.n	8022b50 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8022b48:	687b      	ldr	r3, [r7, #4]
 8022b4a:	2202      	movs	r2, #2
 8022b4c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8022b4e:	e18c      	b.n	8022e6a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8022b50:	7bbb      	ldrb	r3, [r7, #14]
 8022b52:	2b03      	cmp	r3, #3
 8022b54:	f040 8189 	bne.w	8022e6a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8022b58:	687b      	ldr	r3, [r7, #4]
 8022b5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8022b5e:	3301      	adds	r3, #1
 8022b60:	b2da      	uxtb	r2, r3
 8022b62:	687b      	ldr	r3, [r7, #4]
 8022b64:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8022b68:	687b      	ldr	r3, [r7, #4]
 8022b6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8022b6e:	2b03      	cmp	r3, #3
 8022b70:	d903      	bls.n	8022b7a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8022b72:	687b      	ldr	r3, [r7, #4]
 8022b74:	220d      	movs	r2, #13
 8022b76:	701a      	strb	r2, [r3, #0]
      break;
 8022b78:	e177      	b.n	8022e6a <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8022b7a:	687b      	ldr	r3, [r7, #4]
 8022b7c:	795b      	ldrb	r3, [r3, #5]
 8022b7e:	4619      	mov	r1, r3
 8022b80:	6878      	ldr	r0, [r7, #4]
 8022b82:	f001 f8f1 	bl	8023d68 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8022b86:	687b      	ldr	r3, [r7, #4]
 8022b88:	791b      	ldrb	r3, [r3, #4]
 8022b8a:	4619      	mov	r1, r3
 8022b8c:	6878      	ldr	r0, [r7, #4]
 8022b8e:	f001 f8eb 	bl	8023d68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8022b92:	687b      	ldr	r3, [r7, #4]
 8022b94:	2200      	movs	r2, #0
 8022b96:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8022b98:	687b      	ldr	r3, [r7, #4]
 8022b9a:	2200      	movs	r2, #0
 8022b9c:	701a      	strb	r2, [r3, #0]
      break;
 8022b9e:	e164      	b.n	8022e6a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8022ba0:	2101      	movs	r1, #1
 8022ba2:	6878      	ldr	r0, [r7, #4]
 8022ba4:	f000 fb02 	bl	80231ac <USBH_SetAddress>
 8022ba8:	4603      	mov	r3, r0
 8022baa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8022bac:	7bbb      	ldrb	r3, [r7, #14]
 8022bae:	2b00      	cmp	r3, #0
 8022bb0:	d132      	bne.n	8022c18 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8022bb2:	2002      	movs	r0, #2
 8022bb4:	f7e1 f935 	bl	8003e22 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8022bb8:	687b      	ldr	r3, [r7, #4]
 8022bba:	2201      	movs	r2, #1
 8022bbc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8022bc0:	687b      	ldr	r3, [r7, #4]
 8022bc2:	2203      	movs	r2, #3
 8022bc4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8022bc6:	687b      	ldr	r3, [r7, #4]
 8022bc8:	7919      	ldrb	r1, [r3, #4]
 8022bca:	687b      	ldr	r3, [r7, #4]
 8022bcc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8022bd0:	687b      	ldr	r3, [r7, #4]
 8022bd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8022bd6:	687a      	ldr	r2, [r7, #4]
 8022bd8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8022bda:	b292      	uxth	r2, r2
 8022bdc:	9202      	str	r2, [sp, #8]
 8022bde:	2200      	movs	r2, #0
 8022be0:	9201      	str	r2, [sp, #4]
 8022be2:	9300      	str	r3, [sp, #0]
 8022be4:	4603      	mov	r3, r0
 8022be6:	2280      	movs	r2, #128	; 0x80
 8022be8:	6878      	ldr	r0, [r7, #4]
 8022bea:	f001 f86d 	bl	8023cc8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8022bee:	687b      	ldr	r3, [r7, #4]
 8022bf0:	7959      	ldrb	r1, [r3, #5]
 8022bf2:	687b      	ldr	r3, [r7, #4]
 8022bf4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8022bf8:	687b      	ldr	r3, [r7, #4]
 8022bfa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8022bfe:	687a      	ldr	r2, [r7, #4]
 8022c00:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8022c02:	b292      	uxth	r2, r2
 8022c04:	9202      	str	r2, [sp, #8]
 8022c06:	2200      	movs	r2, #0
 8022c08:	9201      	str	r2, [sp, #4]
 8022c0a:	9300      	str	r3, [sp, #0]
 8022c0c:	4603      	mov	r3, r0
 8022c0e:	2200      	movs	r2, #0
 8022c10:	6878      	ldr	r0, [r7, #4]
 8022c12:	f001 f859 	bl	8023cc8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8022c16:	e12a      	b.n	8022e6e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8022c18:	7bbb      	ldrb	r3, [r7, #14]
 8022c1a:	2b03      	cmp	r3, #3
 8022c1c:	f040 8127 	bne.w	8022e6e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 8022c20:	687b      	ldr	r3, [r7, #4]
 8022c22:	220d      	movs	r2, #13
 8022c24:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8022c26:	687b      	ldr	r3, [r7, #4]
 8022c28:	2200      	movs	r2, #0
 8022c2a:	705a      	strb	r2, [r3, #1]
      break;
 8022c2c:	e11f      	b.n	8022e6e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8022c2e:	2109      	movs	r1, #9
 8022c30:	6878      	ldr	r0, [r7, #4]
 8022c32:	f000 fa37 	bl	80230a4 <USBH_Get_CfgDesc>
 8022c36:	4603      	mov	r3, r0
 8022c38:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8022c3a:	7bbb      	ldrb	r3, [r7, #14]
 8022c3c:	2b00      	cmp	r3, #0
 8022c3e:	d103      	bne.n	8022c48 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8022c40:	687b      	ldr	r3, [r7, #4]
 8022c42:	2204      	movs	r2, #4
 8022c44:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8022c46:	e114      	b.n	8022e72 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8022c48:	7bbb      	ldrb	r3, [r7, #14]
 8022c4a:	2b03      	cmp	r3, #3
 8022c4c:	f040 8111 	bne.w	8022e72 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 8022c50:	687b      	ldr	r3, [r7, #4]
 8022c52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8022c56:	3301      	adds	r3, #1
 8022c58:	b2da      	uxtb	r2, r3
 8022c5a:	687b      	ldr	r3, [r7, #4]
 8022c5c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8022c60:	687b      	ldr	r3, [r7, #4]
 8022c62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8022c66:	2b03      	cmp	r3, #3
 8022c68:	d903      	bls.n	8022c72 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8022c6a:	687b      	ldr	r3, [r7, #4]
 8022c6c:	220d      	movs	r2, #13
 8022c6e:	701a      	strb	r2, [r3, #0]
      break;
 8022c70:	e0ff      	b.n	8022e72 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8022c72:	687b      	ldr	r3, [r7, #4]
 8022c74:	795b      	ldrb	r3, [r3, #5]
 8022c76:	4619      	mov	r1, r3
 8022c78:	6878      	ldr	r0, [r7, #4]
 8022c7a:	f001 f875 	bl	8023d68 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8022c7e:	687b      	ldr	r3, [r7, #4]
 8022c80:	791b      	ldrb	r3, [r3, #4]
 8022c82:	4619      	mov	r1, r3
 8022c84:	6878      	ldr	r0, [r7, #4]
 8022c86:	f001 f86f 	bl	8023d68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8022c8a:	687b      	ldr	r3, [r7, #4]
 8022c8c:	2200      	movs	r2, #0
 8022c8e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8022c90:	687b      	ldr	r3, [r7, #4]
 8022c92:	2200      	movs	r2, #0
 8022c94:	701a      	strb	r2, [r3, #0]
      break;
 8022c96:	e0ec      	b.n	8022e72 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8022c98:	687b      	ldr	r3, [r7, #4]
 8022c9a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8022c9e:	4619      	mov	r1, r3
 8022ca0:	6878      	ldr	r0, [r7, #4]
 8022ca2:	f000 f9ff 	bl	80230a4 <USBH_Get_CfgDesc>
 8022ca6:	4603      	mov	r3, r0
 8022ca8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8022caa:	7bbb      	ldrb	r3, [r7, #14]
 8022cac:	2b00      	cmp	r3, #0
 8022cae:	d103      	bne.n	8022cb8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8022cb0:	687b      	ldr	r3, [r7, #4]
 8022cb2:	2205      	movs	r2, #5
 8022cb4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8022cb6:	e0de      	b.n	8022e76 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8022cb8:	7bbb      	ldrb	r3, [r7, #14]
 8022cba:	2b03      	cmp	r3, #3
 8022cbc:	f040 80db 	bne.w	8022e76 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 8022cc0:	687b      	ldr	r3, [r7, #4]
 8022cc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8022cc6:	3301      	adds	r3, #1
 8022cc8:	b2da      	uxtb	r2, r3
 8022cca:	687b      	ldr	r3, [r7, #4]
 8022ccc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8022cd0:	687b      	ldr	r3, [r7, #4]
 8022cd2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8022cd6:	2b03      	cmp	r3, #3
 8022cd8:	d903      	bls.n	8022ce2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8022cda:	687b      	ldr	r3, [r7, #4]
 8022cdc:	220d      	movs	r2, #13
 8022cde:	701a      	strb	r2, [r3, #0]
      break;
 8022ce0:	e0c9      	b.n	8022e76 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8022ce2:	687b      	ldr	r3, [r7, #4]
 8022ce4:	795b      	ldrb	r3, [r3, #5]
 8022ce6:	4619      	mov	r1, r3
 8022ce8:	6878      	ldr	r0, [r7, #4]
 8022cea:	f001 f83d 	bl	8023d68 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8022cee:	687b      	ldr	r3, [r7, #4]
 8022cf0:	791b      	ldrb	r3, [r3, #4]
 8022cf2:	4619      	mov	r1, r3
 8022cf4:	6878      	ldr	r0, [r7, #4]
 8022cf6:	f001 f837 	bl	8023d68 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8022cfa:	687b      	ldr	r3, [r7, #4]
 8022cfc:	2200      	movs	r2, #0
 8022cfe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8022d00:	687b      	ldr	r3, [r7, #4]
 8022d02:	2200      	movs	r2, #0
 8022d04:	701a      	strb	r2, [r3, #0]
      break;
 8022d06:	e0b6      	b.n	8022e76 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8022d08:	687b      	ldr	r3, [r7, #4]
 8022d0a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8022d0e:	2b00      	cmp	r3, #0
 8022d10:	d036      	beq.n	8022d80 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8022d12:	687b      	ldr	r3, [r7, #4]
 8022d14:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8022d18:	687b      	ldr	r3, [r7, #4]
 8022d1a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8022d1e:	23ff      	movs	r3, #255	; 0xff
 8022d20:	6878      	ldr	r0, [r7, #4]
 8022d22:	f000 f9e3 	bl	80230ec <USBH_Get_StringDesc>
 8022d26:	4603      	mov	r3, r0
 8022d28:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8022d2a:	7bbb      	ldrb	r3, [r7, #14]
 8022d2c:	2b00      	cmp	r3, #0
 8022d2e:	d111      	bne.n	8022d54 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8022d30:	687b      	ldr	r3, [r7, #4]
 8022d32:	2206      	movs	r2, #6
 8022d34:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8022d36:	687b      	ldr	r3, [r7, #4]
 8022d38:	2205      	movs	r2, #5
 8022d3a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8022d3e:	687b      	ldr	r3, [r7, #4]
 8022d40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8022d44:	687b      	ldr	r3, [r7, #4]
 8022d46:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8022d4a:	2200      	movs	r2, #0
 8022d4c:	4619      	mov	r1, r3
 8022d4e:	f7ec fa6b 	bl	800f228 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8022d52:	e092      	b.n	8022e7a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8022d54:	7bbb      	ldrb	r3, [r7, #14]
 8022d56:	2b03      	cmp	r3, #3
 8022d58:	f040 808f 	bne.w	8022e7a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8022d5c:	687b      	ldr	r3, [r7, #4]
 8022d5e:	2206      	movs	r2, #6
 8022d60:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8022d62:	687b      	ldr	r3, [r7, #4]
 8022d64:	2205      	movs	r2, #5
 8022d66:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8022d6a:	687b      	ldr	r3, [r7, #4]
 8022d6c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8022d70:	687b      	ldr	r3, [r7, #4]
 8022d72:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8022d76:	2200      	movs	r2, #0
 8022d78:	4619      	mov	r1, r3
 8022d7a:	f7ec fa55 	bl	800f228 <osMessagePut>
      break;
 8022d7e:	e07c      	b.n	8022e7a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8022d80:	687b      	ldr	r3, [r7, #4]
 8022d82:	2206      	movs	r2, #6
 8022d84:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8022d86:	687b      	ldr	r3, [r7, #4]
 8022d88:	2205      	movs	r2, #5
 8022d8a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8022d8e:	687b      	ldr	r3, [r7, #4]
 8022d90:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8022d94:	687b      	ldr	r3, [r7, #4]
 8022d96:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8022d9a:	2200      	movs	r2, #0
 8022d9c:	4619      	mov	r1, r3
 8022d9e:	f7ec fa43 	bl	800f228 <osMessagePut>
      break;
 8022da2:	e06a      	b.n	8022e7a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8022da4:	687b      	ldr	r3, [r7, #4]
 8022da6:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8022daa:	2b00      	cmp	r3, #0
 8022dac:	d027      	beq.n	8022dfe <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8022dae:	687b      	ldr	r3, [r7, #4]
 8022db0:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8022db4:	687b      	ldr	r3, [r7, #4]
 8022db6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8022dba:	23ff      	movs	r3, #255	; 0xff
 8022dbc:	6878      	ldr	r0, [r7, #4]
 8022dbe:	f000 f995 	bl	80230ec <USBH_Get_StringDesc>
 8022dc2:	4603      	mov	r3, r0
 8022dc4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8022dc6:	7bbb      	ldrb	r3, [r7, #14]
 8022dc8:	2b00      	cmp	r3, #0
 8022dca:	d103      	bne.n	8022dd4 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8022dcc:	687b      	ldr	r3, [r7, #4]
 8022dce:	2207      	movs	r2, #7
 8022dd0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8022dd2:	e054      	b.n	8022e7e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8022dd4:	7bbb      	ldrb	r3, [r7, #14]
 8022dd6:	2b03      	cmp	r3, #3
 8022dd8:	d151      	bne.n	8022e7e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8022dda:	687b      	ldr	r3, [r7, #4]
 8022ddc:	2207      	movs	r2, #7
 8022dde:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8022de0:	687b      	ldr	r3, [r7, #4]
 8022de2:	2205      	movs	r2, #5
 8022de4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8022de8:	687b      	ldr	r3, [r7, #4]
 8022dea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8022dee:	687b      	ldr	r3, [r7, #4]
 8022df0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8022df4:	2200      	movs	r2, #0
 8022df6:	4619      	mov	r1, r3
 8022df8:	f7ec fa16 	bl	800f228 <osMessagePut>
      break;
 8022dfc:	e03f      	b.n	8022e7e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8022dfe:	687b      	ldr	r3, [r7, #4]
 8022e00:	2207      	movs	r2, #7
 8022e02:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8022e04:	687b      	ldr	r3, [r7, #4]
 8022e06:	2205      	movs	r2, #5
 8022e08:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8022e0c:	687b      	ldr	r3, [r7, #4]
 8022e0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8022e12:	687b      	ldr	r3, [r7, #4]
 8022e14:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8022e18:	2200      	movs	r2, #0
 8022e1a:	4619      	mov	r1, r3
 8022e1c:	f7ec fa04 	bl	800f228 <osMessagePut>
      break;
 8022e20:	e02d      	b.n	8022e7e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8022e22:	687b      	ldr	r3, [r7, #4]
 8022e24:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8022e28:	2b00      	cmp	r3, #0
 8022e2a:	d017      	beq.n	8022e5c <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8022e2c:	687b      	ldr	r3, [r7, #4]
 8022e2e:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8022e32:	687b      	ldr	r3, [r7, #4]
 8022e34:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8022e38:	23ff      	movs	r3, #255	; 0xff
 8022e3a:	6878      	ldr	r0, [r7, #4]
 8022e3c:	f000 f956 	bl	80230ec <USBH_Get_StringDesc>
 8022e40:	4603      	mov	r3, r0
 8022e42:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8022e44:	7bbb      	ldrb	r3, [r7, #14]
 8022e46:	2b00      	cmp	r3, #0
 8022e48:	d102      	bne.n	8022e50 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8022e4a:	2300      	movs	r3, #0
 8022e4c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8022e4e:	e018      	b.n	8022e82 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8022e50:	7bbb      	ldrb	r3, [r7, #14]
 8022e52:	2b03      	cmp	r3, #3
 8022e54:	d115      	bne.n	8022e82 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 8022e56:	2300      	movs	r3, #0
 8022e58:	73fb      	strb	r3, [r7, #15]
      break;
 8022e5a:	e012      	b.n	8022e82 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 8022e5c:	2300      	movs	r3, #0
 8022e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8022e60:	e00f      	b.n	8022e82 <USBH_HandleEnum+0x44a>

    default:
      break;
 8022e62:	bf00      	nop
 8022e64:	e00e      	b.n	8022e84 <USBH_HandleEnum+0x44c>
      break;
 8022e66:	bf00      	nop
 8022e68:	e00c      	b.n	8022e84 <USBH_HandleEnum+0x44c>
      break;
 8022e6a:	bf00      	nop
 8022e6c:	e00a      	b.n	8022e84 <USBH_HandleEnum+0x44c>
      break;
 8022e6e:	bf00      	nop
 8022e70:	e008      	b.n	8022e84 <USBH_HandleEnum+0x44c>
      break;
 8022e72:	bf00      	nop
 8022e74:	e006      	b.n	8022e84 <USBH_HandleEnum+0x44c>
      break;
 8022e76:	bf00      	nop
 8022e78:	e004      	b.n	8022e84 <USBH_HandleEnum+0x44c>
      break;
 8022e7a:	bf00      	nop
 8022e7c:	e002      	b.n	8022e84 <USBH_HandleEnum+0x44c>
      break;
 8022e7e:	bf00      	nop
 8022e80:	e000      	b.n	8022e84 <USBH_HandleEnum+0x44c>
      break;
 8022e82:	bf00      	nop
  }
  return Status;
 8022e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8022e86:	4618      	mov	r0, r3
 8022e88:	3710      	adds	r7, #16
 8022e8a:	46bd      	mov	sp, r7
 8022e8c:	bd80      	pop	{r7, pc}
 8022e8e:	bf00      	nop

08022e90 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8022e90:	b480      	push	{r7}
 8022e92:	b083      	sub	sp, #12
 8022e94:	af00      	add	r7, sp, #0
 8022e96:	6078      	str	r0, [r7, #4]
 8022e98:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8022e9a:	687b      	ldr	r3, [r7, #4]
 8022e9c:	683a      	ldr	r2, [r7, #0]
 8022e9e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8022ea2:	bf00      	nop
 8022ea4:	370c      	adds	r7, #12
 8022ea6:	46bd      	mov	sp, r7
 8022ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022eac:	4770      	bx	lr

08022eae <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8022eae:	b580      	push	{r7, lr}
 8022eb0:	b082      	sub	sp, #8
 8022eb2:	af00      	add	r7, sp, #0
 8022eb4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8022eb6:	687b      	ldr	r3, [r7, #4]
 8022eb8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8022ebc:	1c5a      	adds	r2, r3, #1
 8022ebe:	687b      	ldr	r3, [r7, #4]
 8022ec0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8022ec4:	6878      	ldr	r0, [r7, #4]
 8022ec6:	f000 f804 	bl	8022ed2 <USBH_HandleSof>
}
 8022eca:	bf00      	nop
 8022ecc:	3708      	adds	r7, #8
 8022ece:	46bd      	mov	sp, r7
 8022ed0:	bd80      	pop	{r7, pc}

08022ed2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8022ed2:	b580      	push	{r7, lr}
 8022ed4:	b082      	sub	sp, #8
 8022ed6:	af00      	add	r7, sp, #0
 8022ed8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8022eda:	687b      	ldr	r3, [r7, #4]
 8022edc:	781b      	ldrb	r3, [r3, #0]
 8022ede:	b2db      	uxtb	r3, r3
 8022ee0:	2b0b      	cmp	r3, #11
 8022ee2:	d10a      	bne.n	8022efa <USBH_HandleSof+0x28>
 8022ee4:	687b      	ldr	r3, [r7, #4]
 8022ee6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8022eea:	2b00      	cmp	r3, #0
 8022eec:	d005      	beq.n	8022efa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8022eee:	687b      	ldr	r3, [r7, #4]
 8022ef0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8022ef4:	699b      	ldr	r3, [r3, #24]
 8022ef6:	6878      	ldr	r0, [r7, #4]
 8022ef8:	4798      	blx	r3
  }
}
 8022efa:	bf00      	nop
 8022efc:	3708      	adds	r7, #8
 8022efe:	46bd      	mov	sp, r7
 8022f00:	bd80      	pop	{r7, pc}

08022f02 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8022f02:	b580      	push	{r7, lr}
 8022f04:	b082      	sub	sp, #8
 8022f06:	af00      	add	r7, sp, #0
 8022f08:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8022f0a:	687b      	ldr	r3, [r7, #4]
 8022f0c:	2201      	movs	r2, #1
 8022f0e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8022f12:	687b      	ldr	r3, [r7, #4]
 8022f14:	2201      	movs	r2, #1
 8022f16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8022f1a:	687b      	ldr	r3, [r7, #4]
 8022f1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8022f20:	687b      	ldr	r3, [r7, #4]
 8022f22:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8022f26:	2200      	movs	r2, #0
 8022f28:	4619      	mov	r1, r3
 8022f2a:	f7ec f97d 	bl	800f228 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8022f2e:	bf00      	nop
}
 8022f30:	3708      	adds	r7, #8
 8022f32:	46bd      	mov	sp, r7
 8022f34:	bd80      	pop	{r7, pc}

08022f36 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8022f36:	b480      	push	{r7}
 8022f38:	b083      	sub	sp, #12
 8022f3a:	af00      	add	r7, sp, #0
 8022f3c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8022f3e:	687b      	ldr	r3, [r7, #4]
 8022f40:	2200      	movs	r2, #0
 8022f42:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8022f46:	bf00      	nop
}
 8022f48:	370c      	adds	r7, #12
 8022f4a:	46bd      	mov	sp, r7
 8022f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f50:	4770      	bx	lr

08022f52 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8022f52:	b580      	push	{r7, lr}
 8022f54:	b082      	sub	sp, #8
 8022f56:	af00      	add	r7, sp, #0
 8022f58:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8022f5a:	687b      	ldr	r3, [r7, #4]
 8022f5c:	2201      	movs	r2, #1
 8022f5e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8022f62:	687b      	ldr	r3, [r7, #4]
 8022f64:	2200      	movs	r2, #0
 8022f66:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8022f6a:	687b      	ldr	r3, [r7, #4]
 8022f6c:	2200      	movs	r2, #0
 8022f6e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8022f72:	687b      	ldr	r3, [r7, #4]
 8022f74:	2201      	movs	r2, #1
 8022f76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8022f7a:	687b      	ldr	r3, [r7, #4]
 8022f7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8022f80:	687b      	ldr	r3, [r7, #4]
 8022f82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8022f86:	2200      	movs	r2, #0
 8022f88:	4619      	mov	r1, r3
 8022f8a:	f7ec f94d 	bl	800f228 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8022f8e:	2300      	movs	r3, #0
}
 8022f90:	4618      	mov	r0, r3
 8022f92:	3708      	adds	r7, #8
 8022f94:	46bd      	mov	sp, r7
 8022f96:	bd80      	pop	{r7, pc}

08022f98 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8022f98:	b580      	push	{r7, lr}
 8022f9a:	b082      	sub	sp, #8
 8022f9c:	af00      	add	r7, sp, #0
 8022f9e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8022fa0:	687b      	ldr	r3, [r7, #4]
 8022fa2:	2201      	movs	r2, #1
 8022fa4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8022fa8:	687b      	ldr	r3, [r7, #4]
 8022faa:	2200      	movs	r2, #0
 8022fac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8022fb0:	687b      	ldr	r3, [r7, #4]
 8022fb2:	2200      	movs	r2, #0
 8022fb4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8022fb8:	6878      	ldr	r0, [r7, #4]
 8022fba:	f7e0 fde8 	bl	8003b8e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8022fbe:	687b      	ldr	r3, [r7, #4]
 8022fc0:	791b      	ldrb	r3, [r3, #4]
 8022fc2:	4619      	mov	r1, r3
 8022fc4:	6878      	ldr	r0, [r7, #4]
 8022fc6:	f000 fecf 	bl	8023d68 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8022fca:	687b      	ldr	r3, [r7, #4]
 8022fcc:	795b      	ldrb	r3, [r3, #5]
 8022fce:	4619      	mov	r1, r3
 8022fd0:	6878      	ldr	r0, [r7, #4]
 8022fd2:	f000 fec9 	bl	8023d68 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8022fd6:	687b      	ldr	r3, [r7, #4]
 8022fd8:	2201      	movs	r2, #1
 8022fda:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8022fde:	687b      	ldr	r3, [r7, #4]
 8022fe0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8022fe4:	687b      	ldr	r3, [r7, #4]
 8022fe6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8022fea:	2200      	movs	r2, #0
 8022fec:	4619      	mov	r1, r3
 8022fee:	f7ec f91b 	bl	800f228 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8022ff2:	2300      	movs	r3, #0
}
 8022ff4:	4618      	mov	r0, r3
 8022ff6:	3708      	adds	r7, #8
 8022ff8:	46bd      	mov	sp, r7
 8022ffa:	bd80      	pop	{r7, pc}

08022ffc <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8022ffc:	b580      	push	{r7, lr}
 8022ffe:	b086      	sub	sp, #24
 8023000:	af00      	add	r7, sp, #0
 8023002:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8023004:	687b      	ldr	r3, [r7, #4]
 8023006:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 802300a:	f107 030c 	add.w	r3, r7, #12
 802300e:	f04f 32ff 	mov.w	r2, #4294967295
 8023012:	4618      	mov	r0, r3
 8023014:	f7ec f948 	bl	800f2a8 <osMessageGet>
    if (event.status == osEventMessage)
 8023018:	68fb      	ldr	r3, [r7, #12]
 802301a:	2b10      	cmp	r3, #16
 802301c:	d1f2      	bne.n	8023004 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 802301e:	6878      	ldr	r0, [r7, #4]
 8023020:	f7ff faa8 	bl	8022574 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8023024:	e7ee      	b.n	8023004 <USBH_Process_OS+0x8>

08023026 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8023026:	b580      	push	{r7, lr}
 8023028:	b082      	sub	sp, #8
 802302a:	af00      	add	r7, sp, #0
 802302c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 802302e:	687b      	ldr	r3, [r7, #4]
 8023030:	2201      	movs	r2, #1
 8023032:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8023036:	687b      	ldr	r3, [r7, #4]
 8023038:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802303c:	687b      	ldr	r3, [r7, #4]
 802303e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8023042:	2200      	movs	r2, #0
 8023044:	4619      	mov	r1, r3
 8023046:	f7ec f8ef 	bl	800f228 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 802304a:	2300      	movs	r3, #0
}
 802304c:	4618      	mov	r0, r3
 802304e:	3708      	adds	r7, #8
 8023050:	46bd      	mov	sp, r7
 8023052:	bd80      	pop	{r7, pc}

08023054 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8023054:	b580      	push	{r7, lr}
 8023056:	b086      	sub	sp, #24
 8023058:	af02      	add	r7, sp, #8
 802305a:	6078      	str	r0, [r7, #4]
 802305c:	460b      	mov	r3, r1
 802305e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8023060:	687b      	ldr	r3, [r7, #4]
 8023062:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8023066:	78fb      	ldrb	r3, [r7, #3]
 8023068:	b29b      	uxth	r3, r3
 802306a:	9300      	str	r3, [sp, #0]
 802306c:	4613      	mov	r3, r2
 802306e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8023072:	2100      	movs	r1, #0
 8023074:	6878      	ldr	r0, [r7, #4]
 8023076:	f000 f864 	bl	8023142 <USBH_GetDescriptor>
 802307a:	4603      	mov	r3, r0
 802307c:	73fb      	strb	r3, [r7, #15]
 802307e:	7bfb      	ldrb	r3, [r7, #15]
 8023080:	2b00      	cmp	r3, #0
 8023082:	d10a      	bne.n	802309a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8023084:	687b      	ldr	r3, [r7, #4]
 8023086:	f203 3026 	addw	r0, r3, #806	; 0x326
 802308a:	687b      	ldr	r3, [r7, #4]
 802308c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8023090:	78fa      	ldrb	r2, [r7, #3]
 8023092:	b292      	uxth	r2, r2
 8023094:	4619      	mov	r1, r3
 8023096:	f000 f918 	bl	80232ca <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 802309a:	7bfb      	ldrb	r3, [r7, #15]
}
 802309c:	4618      	mov	r0, r3
 802309e:	3710      	adds	r7, #16
 80230a0:	46bd      	mov	sp, r7
 80230a2:	bd80      	pop	{r7, pc}

080230a4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80230a4:	b580      	push	{r7, lr}
 80230a6:	b086      	sub	sp, #24
 80230a8:	af02      	add	r7, sp, #8
 80230aa:	6078      	str	r0, [r7, #4]
 80230ac:	460b      	mov	r3, r1
 80230ae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80230b0:	687b      	ldr	r3, [r7, #4]
 80230b2:	331c      	adds	r3, #28
 80230b4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80230b6:	887b      	ldrh	r3, [r7, #2]
 80230b8:	9300      	str	r3, [sp, #0]
 80230ba:	68fb      	ldr	r3, [r7, #12]
 80230bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80230c0:	2100      	movs	r1, #0
 80230c2:	6878      	ldr	r0, [r7, #4]
 80230c4:	f000 f83d 	bl	8023142 <USBH_GetDescriptor>
 80230c8:	4603      	mov	r3, r0
 80230ca:	72fb      	strb	r3, [r7, #11]
 80230cc:	7afb      	ldrb	r3, [r7, #11]
 80230ce:	2b00      	cmp	r3, #0
 80230d0:	d107      	bne.n	80230e2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80230d2:	687b      	ldr	r3, [r7, #4]
 80230d4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80230d8:	887a      	ldrh	r2, [r7, #2]
 80230da:	68f9      	ldr	r1, [r7, #12]
 80230dc:	4618      	mov	r0, r3
 80230de:	f000 f964 	bl	80233aa <USBH_ParseCfgDesc>
  }

  return status;
 80230e2:	7afb      	ldrb	r3, [r7, #11]
}
 80230e4:	4618      	mov	r0, r3
 80230e6:	3710      	adds	r7, #16
 80230e8:	46bd      	mov	sp, r7
 80230ea:	bd80      	pop	{r7, pc}

080230ec <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80230ec:	b580      	push	{r7, lr}
 80230ee:	b088      	sub	sp, #32
 80230f0:	af02      	add	r7, sp, #8
 80230f2:	60f8      	str	r0, [r7, #12]
 80230f4:	607a      	str	r2, [r7, #4]
 80230f6:	461a      	mov	r2, r3
 80230f8:	460b      	mov	r3, r1
 80230fa:	72fb      	strb	r3, [r7, #11]
 80230fc:	4613      	mov	r3, r2
 80230fe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8023100:	7afb      	ldrb	r3, [r7, #11]
 8023102:	b29b      	uxth	r3, r3
 8023104:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8023108:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 802310a:	68fb      	ldr	r3, [r7, #12]
 802310c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8023110:	893b      	ldrh	r3, [r7, #8]
 8023112:	9300      	str	r3, [sp, #0]
 8023114:	460b      	mov	r3, r1
 8023116:	2100      	movs	r1, #0
 8023118:	68f8      	ldr	r0, [r7, #12]
 802311a:	f000 f812 	bl	8023142 <USBH_GetDescriptor>
 802311e:	4603      	mov	r3, r0
 8023120:	75fb      	strb	r3, [r7, #23]
 8023122:	7dfb      	ldrb	r3, [r7, #23]
 8023124:	2b00      	cmp	r3, #0
 8023126:	d107      	bne.n	8023138 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8023128:	68fb      	ldr	r3, [r7, #12]
 802312a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 802312e:	893a      	ldrh	r2, [r7, #8]
 8023130:	6879      	ldr	r1, [r7, #4]
 8023132:	4618      	mov	r0, r3
 8023134:	f000 fa37 	bl	80235a6 <USBH_ParseStringDesc>
  }

  return status;
 8023138:	7dfb      	ldrb	r3, [r7, #23]
}
 802313a:	4618      	mov	r0, r3
 802313c:	3718      	adds	r7, #24
 802313e:	46bd      	mov	sp, r7
 8023140:	bd80      	pop	{r7, pc}

08023142 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8023142:	b580      	push	{r7, lr}
 8023144:	b084      	sub	sp, #16
 8023146:	af00      	add	r7, sp, #0
 8023148:	60f8      	str	r0, [r7, #12]
 802314a:	607b      	str	r3, [r7, #4]
 802314c:	460b      	mov	r3, r1
 802314e:	72fb      	strb	r3, [r7, #11]
 8023150:	4613      	mov	r3, r2
 8023152:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8023154:	68fb      	ldr	r3, [r7, #12]
 8023156:	789b      	ldrb	r3, [r3, #2]
 8023158:	2b01      	cmp	r3, #1
 802315a:	d11c      	bne.n	8023196 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 802315c:	7afb      	ldrb	r3, [r7, #11]
 802315e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8023162:	b2da      	uxtb	r2, r3
 8023164:	68fb      	ldr	r3, [r7, #12]
 8023166:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8023168:	68fb      	ldr	r3, [r7, #12]
 802316a:	2206      	movs	r2, #6
 802316c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 802316e:	68fb      	ldr	r3, [r7, #12]
 8023170:	893a      	ldrh	r2, [r7, #8]
 8023172:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8023174:	893b      	ldrh	r3, [r7, #8]
 8023176:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802317a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802317e:	d104      	bne.n	802318a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8023180:	68fb      	ldr	r3, [r7, #12]
 8023182:	f240 4209 	movw	r2, #1033	; 0x409
 8023186:	829a      	strh	r2, [r3, #20]
 8023188:	e002      	b.n	8023190 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 802318a:	68fb      	ldr	r3, [r7, #12]
 802318c:	2200      	movs	r2, #0
 802318e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8023190:	68fb      	ldr	r3, [r7, #12]
 8023192:	8b3a      	ldrh	r2, [r7, #24]
 8023194:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8023196:	8b3b      	ldrh	r3, [r7, #24]
 8023198:	461a      	mov	r2, r3
 802319a:	6879      	ldr	r1, [r7, #4]
 802319c:	68f8      	ldr	r0, [r7, #12]
 802319e:	f000 fa50 	bl	8023642 <USBH_CtlReq>
 80231a2:	4603      	mov	r3, r0
}
 80231a4:	4618      	mov	r0, r3
 80231a6:	3710      	adds	r7, #16
 80231a8:	46bd      	mov	sp, r7
 80231aa:	bd80      	pop	{r7, pc}

080231ac <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80231ac:	b580      	push	{r7, lr}
 80231ae:	b082      	sub	sp, #8
 80231b0:	af00      	add	r7, sp, #0
 80231b2:	6078      	str	r0, [r7, #4]
 80231b4:	460b      	mov	r3, r1
 80231b6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80231b8:	687b      	ldr	r3, [r7, #4]
 80231ba:	789b      	ldrb	r3, [r3, #2]
 80231bc:	2b01      	cmp	r3, #1
 80231be:	d10f      	bne.n	80231e0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80231c0:	687b      	ldr	r3, [r7, #4]
 80231c2:	2200      	movs	r2, #0
 80231c4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80231c6:	687b      	ldr	r3, [r7, #4]
 80231c8:	2205      	movs	r2, #5
 80231ca:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80231cc:	78fb      	ldrb	r3, [r7, #3]
 80231ce:	b29a      	uxth	r2, r3
 80231d0:	687b      	ldr	r3, [r7, #4]
 80231d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80231d4:	687b      	ldr	r3, [r7, #4]
 80231d6:	2200      	movs	r2, #0
 80231d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80231da:	687b      	ldr	r3, [r7, #4]
 80231dc:	2200      	movs	r2, #0
 80231de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80231e0:	2200      	movs	r2, #0
 80231e2:	2100      	movs	r1, #0
 80231e4:	6878      	ldr	r0, [r7, #4]
 80231e6:	f000 fa2c 	bl	8023642 <USBH_CtlReq>
 80231ea:	4603      	mov	r3, r0
}
 80231ec:	4618      	mov	r0, r3
 80231ee:	3708      	adds	r7, #8
 80231f0:	46bd      	mov	sp, r7
 80231f2:	bd80      	pop	{r7, pc}

080231f4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80231f4:	b580      	push	{r7, lr}
 80231f6:	b082      	sub	sp, #8
 80231f8:	af00      	add	r7, sp, #0
 80231fa:	6078      	str	r0, [r7, #4]
 80231fc:	460b      	mov	r3, r1
 80231fe:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8023200:	687b      	ldr	r3, [r7, #4]
 8023202:	789b      	ldrb	r3, [r3, #2]
 8023204:	2b01      	cmp	r3, #1
 8023206:	d10e      	bne.n	8023226 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8023208:	687b      	ldr	r3, [r7, #4]
 802320a:	2200      	movs	r2, #0
 802320c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 802320e:	687b      	ldr	r3, [r7, #4]
 8023210:	2209      	movs	r2, #9
 8023212:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8023214:	687b      	ldr	r3, [r7, #4]
 8023216:	887a      	ldrh	r2, [r7, #2]
 8023218:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 802321a:	687b      	ldr	r3, [r7, #4]
 802321c:	2200      	movs	r2, #0
 802321e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8023220:	687b      	ldr	r3, [r7, #4]
 8023222:	2200      	movs	r2, #0
 8023224:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8023226:	2200      	movs	r2, #0
 8023228:	2100      	movs	r1, #0
 802322a:	6878      	ldr	r0, [r7, #4]
 802322c:	f000 fa09 	bl	8023642 <USBH_CtlReq>
 8023230:	4603      	mov	r3, r0
}
 8023232:	4618      	mov	r0, r3
 8023234:	3708      	adds	r7, #8
 8023236:	46bd      	mov	sp, r7
 8023238:	bd80      	pop	{r7, pc}

0802323a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 802323a:	b580      	push	{r7, lr}
 802323c:	b082      	sub	sp, #8
 802323e:	af00      	add	r7, sp, #0
 8023240:	6078      	str	r0, [r7, #4]
 8023242:	460b      	mov	r3, r1
 8023244:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8023246:	687b      	ldr	r3, [r7, #4]
 8023248:	789b      	ldrb	r3, [r3, #2]
 802324a:	2b01      	cmp	r3, #1
 802324c:	d10f      	bne.n	802326e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 802324e:	687b      	ldr	r3, [r7, #4]
 8023250:	2200      	movs	r2, #0
 8023252:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8023254:	687b      	ldr	r3, [r7, #4]
 8023256:	2203      	movs	r2, #3
 8023258:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 802325a:	78fb      	ldrb	r3, [r7, #3]
 802325c:	b29a      	uxth	r2, r3
 802325e:	687b      	ldr	r3, [r7, #4]
 8023260:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8023262:	687b      	ldr	r3, [r7, #4]
 8023264:	2200      	movs	r2, #0
 8023266:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8023268:	687b      	ldr	r3, [r7, #4]
 802326a:	2200      	movs	r2, #0
 802326c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 802326e:	2200      	movs	r2, #0
 8023270:	2100      	movs	r1, #0
 8023272:	6878      	ldr	r0, [r7, #4]
 8023274:	f000 f9e5 	bl	8023642 <USBH_CtlReq>
 8023278:	4603      	mov	r3, r0
}
 802327a:	4618      	mov	r0, r3
 802327c:	3708      	adds	r7, #8
 802327e:	46bd      	mov	sp, r7
 8023280:	bd80      	pop	{r7, pc}

08023282 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8023282:	b580      	push	{r7, lr}
 8023284:	b082      	sub	sp, #8
 8023286:	af00      	add	r7, sp, #0
 8023288:	6078      	str	r0, [r7, #4]
 802328a:	460b      	mov	r3, r1
 802328c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 802328e:	687b      	ldr	r3, [r7, #4]
 8023290:	789b      	ldrb	r3, [r3, #2]
 8023292:	2b01      	cmp	r3, #1
 8023294:	d10f      	bne.n	80232b6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8023296:	687b      	ldr	r3, [r7, #4]
 8023298:	2202      	movs	r2, #2
 802329a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 802329c:	687b      	ldr	r3, [r7, #4]
 802329e:	2201      	movs	r2, #1
 80232a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80232a2:	687b      	ldr	r3, [r7, #4]
 80232a4:	2200      	movs	r2, #0
 80232a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80232a8:	78fb      	ldrb	r3, [r7, #3]
 80232aa:	b29a      	uxth	r2, r3
 80232ac:	687b      	ldr	r3, [r7, #4]
 80232ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80232b0:	687b      	ldr	r3, [r7, #4]
 80232b2:	2200      	movs	r2, #0
 80232b4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80232b6:	2200      	movs	r2, #0
 80232b8:	2100      	movs	r1, #0
 80232ba:	6878      	ldr	r0, [r7, #4]
 80232bc:	f000 f9c1 	bl	8023642 <USBH_CtlReq>
 80232c0:	4603      	mov	r3, r0
}
 80232c2:	4618      	mov	r0, r3
 80232c4:	3708      	adds	r7, #8
 80232c6:	46bd      	mov	sp, r7
 80232c8:	bd80      	pop	{r7, pc}

080232ca <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80232ca:	b480      	push	{r7}
 80232cc:	b085      	sub	sp, #20
 80232ce:	af00      	add	r7, sp, #0
 80232d0:	60f8      	str	r0, [r7, #12]
 80232d2:	60b9      	str	r1, [r7, #8]
 80232d4:	4613      	mov	r3, r2
 80232d6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80232d8:	68bb      	ldr	r3, [r7, #8]
 80232da:	781a      	ldrb	r2, [r3, #0]
 80232dc:	68fb      	ldr	r3, [r7, #12]
 80232de:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80232e0:	68bb      	ldr	r3, [r7, #8]
 80232e2:	785a      	ldrb	r2, [r3, #1]
 80232e4:	68fb      	ldr	r3, [r7, #12]
 80232e6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80232e8:	68bb      	ldr	r3, [r7, #8]
 80232ea:	3302      	adds	r3, #2
 80232ec:	781b      	ldrb	r3, [r3, #0]
 80232ee:	b29a      	uxth	r2, r3
 80232f0:	68bb      	ldr	r3, [r7, #8]
 80232f2:	3303      	adds	r3, #3
 80232f4:	781b      	ldrb	r3, [r3, #0]
 80232f6:	b29b      	uxth	r3, r3
 80232f8:	021b      	lsls	r3, r3, #8
 80232fa:	b29b      	uxth	r3, r3
 80232fc:	4313      	orrs	r3, r2
 80232fe:	b29a      	uxth	r2, r3
 8023300:	68fb      	ldr	r3, [r7, #12]
 8023302:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8023304:	68bb      	ldr	r3, [r7, #8]
 8023306:	791a      	ldrb	r2, [r3, #4]
 8023308:	68fb      	ldr	r3, [r7, #12]
 802330a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 802330c:	68bb      	ldr	r3, [r7, #8]
 802330e:	795a      	ldrb	r2, [r3, #5]
 8023310:	68fb      	ldr	r3, [r7, #12]
 8023312:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8023314:	68bb      	ldr	r3, [r7, #8]
 8023316:	799a      	ldrb	r2, [r3, #6]
 8023318:	68fb      	ldr	r3, [r7, #12]
 802331a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 802331c:	68bb      	ldr	r3, [r7, #8]
 802331e:	79da      	ldrb	r2, [r3, #7]
 8023320:	68fb      	ldr	r3, [r7, #12]
 8023322:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8023324:	88fb      	ldrh	r3, [r7, #6]
 8023326:	2b08      	cmp	r3, #8
 8023328:	d939      	bls.n	802339e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 802332a:	68bb      	ldr	r3, [r7, #8]
 802332c:	3308      	adds	r3, #8
 802332e:	781b      	ldrb	r3, [r3, #0]
 8023330:	b29a      	uxth	r2, r3
 8023332:	68bb      	ldr	r3, [r7, #8]
 8023334:	3309      	adds	r3, #9
 8023336:	781b      	ldrb	r3, [r3, #0]
 8023338:	b29b      	uxth	r3, r3
 802333a:	021b      	lsls	r3, r3, #8
 802333c:	b29b      	uxth	r3, r3
 802333e:	4313      	orrs	r3, r2
 8023340:	b29a      	uxth	r2, r3
 8023342:	68fb      	ldr	r3, [r7, #12]
 8023344:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8023346:	68bb      	ldr	r3, [r7, #8]
 8023348:	330a      	adds	r3, #10
 802334a:	781b      	ldrb	r3, [r3, #0]
 802334c:	b29a      	uxth	r2, r3
 802334e:	68bb      	ldr	r3, [r7, #8]
 8023350:	330b      	adds	r3, #11
 8023352:	781b      	ldrb	r3, [r3, #0]
 8023354:	b29b      	uxth	r3, r3
 8023356:	021b      	lsls	r3, r3, #8
 8023358:	b29b      	uxth	r3, r3
 802335a:	4313      	orrs	r3, r2
 802335c:	b29a      	uxth	r2, r3
 802335e:	68fb      	ldr	r3, [r7, #12]
 8023360:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8023362:	68bb      	ldr	r3, [r7, #8]
 8023364:	330c      	adds	r3, #12
 8023366:	781b      	ldrb	r3, [r3, #0]
 8023368:	b29a      	uxth	r2, r3
 802336a:	68bb      	ldr	r3, [r7, #8]
 802336c:	330d      	adds	r3, #13
 802336e:	781b      	ldrb	r3, [r3, #0]
 8023370:	b29b      	uxth	r3, r3
 8023372:	021b      	lsls	r3, r3, #8
 8023374:	b29b      	uxth	r3, r3
 8023376:	4313      	orrs	r3, r2
 8023378:	b29a      	uxth	r2, r3
 802337a:	68fb      	ldr	r3, [r7, #12]
 802337c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 802337e:	68bb      	ldr	r3, [r7, #8]
 8023380:	7b9a      	ldrb	r2, [r3, #14]
 8023382:	68fb      	ldr	r3, [r7, #12]
 8023384:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8023386:	68bb      	ldr	r3, [r7, #8]
 8023388:	7bda      	ldrb	r2, [r3, #15]
 802338a:	68fb      	ldr	r3, [r7, #12]
 802338c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 802338e:	68bb      	ldr	r3, [r7, #8]
 8023390:	7c1a      	ldrb	r2, [r3, #16]
 8023392:	68fb      	ldr	r3, [r7, #12]
 8023394:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8023396:	68bb      	ldr	r3, [r7, #8]
 8023398:	7c5a      	ldrb	r2, [r3, #17]
 802339a:	68fb      	ldr	r3, [r7, #12]
 802339c:	745a      	strb	r2, [r3, #17]
  }
}
 802339e:	bf00      	nop
 80233a0:	3714      	adds	r7, #20
 80233a2:	46bd      	mov	sp, r7
 80233a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233a8:	4770      	bx	lr

080233aa <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80233aa:	b580      	push	{r7, lr}
 80233ac:	b08a      	sub	sp, #40	; 0x28
 80233ae:	af00      	add	r7, sp, #0
 80233b0:	60f8      	str	r0, [r7, #12]
 80233b2:	60b9      	str	r1, [r7, #8]
 80233b4:	4613      	mov	r3, r2
 80233b6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80233b8:	68bb      	ldr	r3, [r7, #8]
 80233ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80233bc:	2300      	movs	r3, #0
 80233be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80233c2:	2300      	movs	r3, #0
 80233c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80233c8:	68bb      	ldr	r3, [r7, #8]
 80233ca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80233cc:	68bb      	ldr	r3, [r7, #8]
 80233ce:	781a      	ldrb	r2, [r3, #0]
 80233d0:	68fb      	ldr	r3, [r7, #12]
 80233d2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80233d4:	68bb      	ldr	r3, [r7, #8]
 80233d6:	785a      	ldrb	r2, [r3, #1]
 80233d8:	68fb      	ldr	r3, [r7, #12]
 80233da:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80233dc:	68bb      	ldr	r3, [r7, #8]
 80233de:	3302      	adds	r3, #2
 80233e0:	781b      	ldrb	r3, [r3, #0]
 80233e2:	b29a      	uxth	r2, r3
 80233e4:	68bb      	ldr	r3, [r7, #8]
 80233e6:	3303      	adds	r3, #3
 80233e8:	781b      	ldrb	r3, [r3, #0]
 80233ea:	b29b      	uxth	r3, r3
 80233ec:	021b      	lsls	r3, r3, #8
 80233ee:	b29b      	uxth	r3, r3
 80233f0:	4313      	orrs	r3, r2
 80233f2:	b29a      	uxth	r2, r3
 80233f4:	68fb      	ldr	r3, [r7, #12]
 80233f6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80233f8:	68bb      	ldr	r3, [r7, #8]
 80233fa:	791a      	ldrb	r2, [r3, #4]
 80233fc:	68fb      	ldr	r3, [r7, #12]
 80233fe:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8023400:	68bb      	ldr	r3, [r7, #8]
 8023402:	795a      	ldrb	r2, [r3, #5]
 8023404:	68fb      	ldr	r3, [r7, #12]
 8023406:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8023408:	68bb      	ldr	r3, [r7, #8]
 802340a:	799a      	ldrb	r2, [r3, #6]
 802340c:	68fb      	ldr	r3, [r7, #12]
 802340e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8023410:	68bb      	ldr	r3, [r7, #8]
 8023412:	79da      	ldrb	r2, [r3, #7]
 8023414:	68fb      	ldr	r3, [r7, #12]
 8023416:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8023418:	68bb      	ldr	r3, [r7, #8]
 802341a:	7a1a      	ldrb	r2, [r3, #8]
 802341c:	68fb      	ldr	r3, [r7, #12]
 802341e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8023420:	88fb      	ldrh	r3, [r7, #6]
 8023422:	2b09      	cmp	r3, #9
 8023424:	d95f      	bls.n	80234e6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8023426:	2309      	movs	r3, #9
 8023428:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 802342a:	2300      	movs	r3, #0
 802342c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 802342e:	e051      	b.n	80234d4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8023430:	f107 0316 	add.w	r3, r7, #22
 8023434:	4619      	mov	r1, r3
 8023436:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8023438:	f000 f8e8 	bl	802360c <USBH_GetNextDesc>
 802343c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 802343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023440:	785b      	ldrb	r3, [r3, #1]
 8023442:	2b04      	cmp	r3, #4
 8023444:	d146      	bne.n	80234d4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8023446:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802344a:	221a      	movs	r2, #26
 802344c:	fb02 f303 	mul.w	r3, r2, r3
 8023450:	3308      	adds	r3, #8
 8023452:	68fa      	ldr	r2, [r7, #12]
 8023454:	4413      	add	r3, r2
 8023456:	3302      	adds	r3, #2
 8023458:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 802345a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802345c:	69f8      	ldr	r0, [r7, #28]
 802345e:	f000 f846 	bl	80234ee <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8023462:	2300      	movs	r3, #0
 8023464:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8023468:	2300      	movs	r3, #0
 802346a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 802346c:	e022      	b.n	80234b4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 802346e:	f107 0316 	add.w	r3, r7, #22
 8023472:	4619      	mov	r1, r3
 8023474:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8023476:	f000 f8c9 	bl	802360c <USBH_GetNextDesc>
 802347a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 802347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802347e:	785b      	ldrb	r3, [r3, #1]
 8023480:	2b05      	cmp	r3, #5
 8023482:	d117      	bne.n	80234b4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8023484:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8023488:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 802348c:	3201      	adds	r2, #1
 802348e:	00d2      	lsls	r2, r2, #3
 8023490:	211a      	movs	r1, #26
 8023492:	fb01 f303 	mul.w	r3, r1, r3
 8023496:	4413      	add	r3, r2
 8023498:	3308      	adds	r3, #8
 802349a:	68fa      	ldr	r2, [r7, #12]
 802349c:	4413      	add	r3, r2
 802349e:	3304      	adds	r3, #4
 80234a0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80234a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80234a4:	69b8      	ldr	r0, [r7, #24]
 80234a6:	f000 f851 	bl	802354c <USBH_ParseEPDesc>
            ep_ix++;
 80234aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80234ae:	3301      	adds	r3, #1
 80234b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80234b4:	69fb      	ldr	r3, [r7, #28]
 80234b6:	791b      	ldrb	r3, [r3, #4]
 80234b8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80234bc:	429a      	cmp	r2, r3
 80234be:	d204      	bcs.n	80234ca <USBH_ParseCfgDesc+0x120>
 80234c0:	68fb      	ldr	r3, [r7, #12]
 80234c2:	885a      	ldrh	r2, [r3, #2]
 80234c4:	8afb      	ldrh	r3, [r7, #22]
 80234c6:	429a      	cmp	r2, r3
 80234c8:	d8d1      	bhi.n	802346e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80234ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80234ce:	3301      	adds	r3, #1
 80234d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80234d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80234d8:	2b01      	cmp	r3, #1
 80234da:	d804      	bhi.n	80234e6 <USBH_ParseCfgDesc+0x13c>
 80234dc:	68fb      	ldr	r3, [r7, #12]
 80234de:	885a      	ldrh	r2, [r3, #2]
 80234e0:	8afb      	ldrh	r3, [r7, #22]
 80234e2:	429a      	cmp	r2, r3
 80234e4:	d8a4      	bhi.n	8023430 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80234e6:	bf00      	nop
 80234e8:	3728      	adds	r7, #40	; 0x28
 80234ea:	46bd      	mov	sp, r7
 80234ec:	bd80      	pop	{r7, pc}

080234ee <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80234ee:	b480      	push	{r7}
 80234f0:	b083      	sub	sp, #12
 80234f2:	af00      	add	r7, sp, #0
 80234f4:	6078      	str	r0, [r7, #4]
 80234f6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80234f8:	683b      	ldr	r3, [r7, #0]
 80234fa:	781a      	ldrb	r2, [r3, #0]
 80234fc:	687b      	ldr	r3, [r7, #4]
 80234fe:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8023500:	683b      	ldr	r3, [r7, #0]
 8023502:	785a      	ldrb	r2, [r3, #1]
 8023504:	687b      	ldr	r3, [r7, #4]
 8023506:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8023508:	683b      	ldr	r3, [r7, #0]
 802350a:	789a      	ldrb	r2, [r3, #2]
 802350c:	687b      	ldr	r3, [r7, #4]
 802350e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8023510:	683b      	ldr	r3, [r7, #0]
 8023512:	78da      	ldrb	r2, [r3, #3]
 8023514:	687b      	ldr	r3, [r7, #4]
 8023516:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8023518:	683b      	ldr	r3, [r7, #0]
 802351a:	791a      	ldrb	r2, [r3, #4]
 802351c:	687b      	ldr	r3, [r7, #4]
 802351e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8023520:	683b      	ldr	r3, [r7, #0]
 8023522:	795a      	ldrb	r2, [r3, #5]
 8023524:	687b      	ldr	r3, [r7, #4]
 8023526:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8023528:	683b      	ldr	r3, [r7, #0]
 802352a:	799a      	ldrb	r2, [r3, #6]
 802352c:	687b      	ldr	r3, [r7, #4]
 802352e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8023530:	683b      	ldr	r3, [r7, #0]
 8023532:	79da      	ldrb	r2, [r3, #7]
 8023534:	687b      	ldr	r3, [r7, #4]
 8023536:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8023538:	683b      	ldr	r3, [r7, #0]
 802353a:	7a1a      	ldrb	r2, [r3, #8]
 802353c:	687b      	ldr	r3, [r7, #4]
 802353e:	721a      	strb	r2, [r3, #8]
}
 8023540:	bf00      	nop
 8023542:	370c      	adds	r7, #12
 8023544:	46bd      	mov	sp, r7
 8023546:	f85d 7b04 	ldr.w	r7, [sp], #4
 802354a:	4770      	bx	lr

0802354c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 802354c:	b480      	push	{r7}
 802354e:	b083      	sub	sp, #12
 8023550:	af00      	add	r7, sp, #0
 8023552:	6078      	str	r0, [r7, #4]
 8023554:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8023556:	683b      	ldr	r3, [r7, #0]
 8023558:	781a      	ldrb	r2, [r3, #0]
 802355a:	687b      	ldr	r3, [r7, #4]
 802355c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 802355e:	683b      	ldr	r3, [r7, #0]
 8023560:	785a      	ldrb	r2, [r3, #1]
 8023562:	687b      	ldr	r3, [r7, #4]
 8023564:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8023566:	683b      	ldr	r3, [r7, #0]
 8023568:	789a      	ldrb	r2, [r3, #2]
 802356a:	687b      	ldr	r3, [r7, #4]
 802356c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 802356e:	683b      	ldr	r3, [r7, #0]
 8023570:	78da      	ldrb	r2, [r3, #3]
 8023572:	687b      	ldr	r3, [r7, #4]
 8023574:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8023576:	683b      	ldr	r3, [r7, #0]
 8023578:	3304      	adds	r3, #4
 802357a:	781b      	ldrb	r3, [r3, #0]
 802357c:	b29a      	uxth	r2, r3
 802357e:	683b      	ldr	r3, [r7, #0]
 8023580:	3305      	adds	r3, #5
 8023582:	781b      	ldrb	r3, [r3, #0]
 8023584:	b29b      	uxth	r3, r3
 8023586:	021b      	lsls	r3, r3, #8
 8023588:	b29b      	uxth	r3, r3
 802358a:	4313      	orrs	r3, r2
 802358c:	b29a      	uxth	r2, r3
 802358e:	687b      	ldr	r3, [r7, #4]
 8023590:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8023592:	683b      	ldr	r3, [r7, #0]
 8023594:	799a      	ldrb	r2, [r3, #6]
 8023596:	687b      	ldr	r3, [r7, #4]
 8023598:	719a      	strb	r2, [r3, #6]
}
 802359a:	bf00      	nop
 802359c:	370c      	adds	r7, #12
 802359e:	46bd      	mov	sp, r7
 80235a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235a4:	4770      	bx	lr

080235a6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80235a6:	b480      	push	{r7}
 80235a8:	b087      	sub	sp, #28
 80235aa:	af00      	add	r7, sp, #0
 80235ac:	60f8      	str	r0, [r7, #12]
 80235ae:	60b9      	str	r1, [r7, #8]
 80235b0:	4613      	mov	r3, r2
 80235b2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80235b4:	68fb      	ldr	r3, [r7, #12]
 80235b6:	3301      	adds	r3, #1
 80235b8:	781b      	ldrb	r3, [r3, #0]
 80235ba:	2b03      	cmp	r3, #3
 80235bc:	d120      	bne.n	8023600 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80235be:	68fb      	ldr	r3, [r7, #12]
 80235c0:	781b      	ldrb	r3, [r3, #0]
 80235c2:	1e9a      	subs	r2, r3, #2
 80235c4:	88fb      	ldrh	r3, [r7, #6]
 80235c6:	4293      	cmp	r3, r2
 80235c8:	bf28      	it	cs
 80235ca:	4613      	movcs	r3, r2
 80235cc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80235ce:	68fb      	ldr	r3, [r7, #12]
 80235d0:	3302      	adds	r3, #2
 80235d2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80235d4:	2300      	movs	r3, #0
 80235d6:	82fb      	strh	r3, [r7, #22]
 80235d8:	e00b      	b.n	80235f2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80235da:	8afb      	ldrh	r3, [r7, #22]
 80235dc:	68fa      	ldr	r2, [r7, #12]
 80235de:	4413      	add	r3, r2
 80235e0:	781a      	ldrb	r2, [r3, #0]
 80235e2:	68bb      	ldr	r3, [r7, #8]
 80235e4:	701a      	strb	r2, [r3, #0]
      pdest++;
 80235e6:	68bb      	ldr	r3, [r7, #8]
 80235e8:	3301      	adds	r3, #1
 80235ea:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80235ec:	8afb      	ldrh	r3, [r7, #22]
 80235ee:	3302      	adds	r3, #2
 80235f0:	82fb      	strh	r3, [r7, #22]
 80235f2:	8afa      	ldrh	r2, [r7, #22]
 80235f4:	8abb      	ldrh	r3, [r7, #20]
 80235f6:	429a      	cmp	r2, r3
 80235f8:	d3ef      	bcc.n	80235da <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80235fa:	68bb      	ldr	r3, [r7, #8]
 80235fc:	2200      	movs	r2, #0
 80235fe:	701a      	strb	r2, [r3, #0]
  }
}
 8023600:	bf00      	nop
 8023602:	371c      	adds	r7, #28
 8023604:	46bd      	mov	sp, r7
 8023606:	f85d 7b04 	ldr.w	r7, [sp], #4
 802360a:	4770      	bx	lr

0802360c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 802360c:	b480      	push	{r7}
 802360e:	b085      	sub	sp, #20
 8023610:	af00      	add	r7, sp, #0
 8023612:	6078      	str	r0, [r7, #4]
 8023614:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8023616:	683b      	ldr	r3, [r7, #0]
 8023618:	881a      	ldrh	r2, [r3, #0]
 802361a:	687b      	ldr	r3, [r7, #4]
 802361c:	781b      	ldrb	r3, [r3, #0]
 802361e:	b29b      	uxth	r3, r3
 8023620:	4413      	add	r3, r2
 8023622:	b29a      	uxth	r2, r3
 8023624:	683b      	ldr	r3, [r7, #0]
 8023626:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8023628:	687b      	ldr	r3, [r7, #4]
 802362a:	781b      	ldrb	r3, [r3, #0]
 802362c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 802362e:	687b      	ldr	r3, [r7, #4]
 8023630:	4413      	add	r3, r2
 8023632:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8023634:	68fb      	ldr	r3, [r7, #12]
}
 8023636:	4618      	mov	r0, r3
 8023638:	3714      	adds	r7, #20
 802363a:	46bd      	mov	sp, r7
 802363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023640:	4770      	bx	lr

08023642 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8023642:	b580      	push	{r7, lr}
 8023644:	b086      	sub	sp, #24
 8023646:	af00      	add	r7, sp, #0
 8023648:	60f8      	str	r0, [r7, #12]
 802364a:	60b9      	str	r1, [r7, #8]
 802364c:	4613      	mov	r3, r2
 802364e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8023650:	2301      	movs	r3, #1
 8023652:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8023654:	68fb      	ldr	r3, [r7, #12]
 8023656:	789b      	ldrb	r3, [r3, #2]
 8023658:	2b01      	cmp	r3, #1
 802365a:	d002      	beq.n	8023662 <USBH_CtlReq+0x20>
 802365c:	2b02      	cmp	r3, #2
 802365e:	d01d      	beq.n	802369c <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8023660:	e043      	b.n	80236ea <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8023662:	68fb      	ldr	r3, [r7, #12]
 8023664:	68ba      	ldr	r2, [r7, #8]
 8023666:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8023668:	68fb      	ldr	r3, [r7, #12]
 802366a:	88fa      	ldrh	r2, [r7, #6]
 802366c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 802366e:	68fb      	ldr	r3, [r7, #12]
 8023670:	2201      	movs	r2, #1
 8023672:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8023674:	68fb      	ldr	r3, [r7, #12]
 8023676:	2202      	movs	r2, #2
 8023678:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 802367a:	2301      	movs	r3, #1
 802367c:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 802367e:	68fb      	ldr	r3, [r7, #12]
 8023680:	2203      	movs	r2, #3
 8023682:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8023686:	68fb      	ldr	r3, [r7, #12]
 8023688:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 802368c:	68fb      	ldr	r3, [r7, #12]
 802368e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8023692:	2200      	movs	r2, #0
 8023694:	4619      	mov	r1, r3
 8023696:	f7eb fdc7 	bl	800f228 <osMessagePut>
      break;
 802369a:	e026      	b.n	80236ea <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 802369c:	68f8      	ldr	r0, [r7, #12]
 802369e:	f000 f829 	bl	80236f4 <USBH_HandleControl>
 80236a2:	4603      	mov	r3, r0
 80236a4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80236a6:	7dfb      	ldrb	r3, [r7, #23]
 80236a8:	2b00      	cmp	r3, #0
 80236aa:	d002      	beq.n	80236b2 <USBH_CtlReq+0x70>
 80236ac:	7dfb      	ldrb	r3, [r7, #23]
 80236ae:	2b03      	cmp	r3, #3
 80236b0:	d106      	bne.n	80236c0 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80236b2:	68fb      	ldr	r3, [r7, #12]
 80236b4:	2201      	movs	r2, #1
 80236b6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80236b8:	68fb      	ldr	r3, [r7, #12]
 80236ba:	2200      	movs	r2, #0
 80236bc:	761a      	strb	r2, [r3, #24]
 80236be:	e005      	b.n	80236cc <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80236c0:	7dfb      	ldrb	r3, [r7, #23]
 80236c2:	2b02      	cmp	r3, #2
 80236c4:	d102      	bne.n	80236cc <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80236c6:	68fb      	ldr	r3, [r7, #12]
 80236c8:	2201      	movs	r2, #1
 80236ca:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80236cc:	68fb      	ldr	r3, [r7, #12]
 80236ce:	2203      	movs	r2, #3
 80236d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80236d4:	68fb      	ldr	r3, [r7, #12]
 80236d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80236da:	68fb      	ldr	r3, [r7, #12]
 80236dc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80236e0:	2200      	movs	r2, #0
 80236e2:	4619      	mov	r1, r3
 80236e4:	f7eb fda0 	bl	800f228 <osMessagePut>
      break;
 80236e8:	bf00      	nop
  }
  return status;
 80236ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80236ec:	4618      	mov	r0, r3
 80236ee:	3718      	adds	r7, #24
 80236f0:	46bd      	mov	sp, r7
 80236f2:	bd80      	pop	{r7, pc}

080236f4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80236f4:	b580      	push	{r7, lr}
 80236f6:	b086      	sub	sp, #24
 80236f8:	af02      	add	r7, sp, #8
 80236fa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80236fc:	2301      	movs	r3, #1
 80236fe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8023700:	2300      	movs	r3, #0
 8023702:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8023704:	687b      	ldr	r3, [r7, #4]
 8023706:	7e1b      	ldrb	r3, [r3, #24]
 8023708:	3b01      	subs	r3, #1
 802370a:	2b0a      	cmp	r3, #10
 802370c:	f200 822b 	bhi.w	8023b66 <USBH_HandleControl+0x472>
 8023710:	a201      	add	r2, pc, #4	; (adr r2, 8023718 <USBH_HandleControl+0x24>)
 8023712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023716:	bf00      	nop
 8023718:	08023745 	.word	0x08023745
 802371c:	0802375f 	.word	0x0802375f
 8023720:	08023801 	.word	0x08023801
 8023724:	08023827 	.word	0x08023827
 8023728:	080238b3 	.word	0x080238b3
 802372c:	080238df 	.word	0x080238df
 8023730:	080239a1 	.word	0x080239a1
 8023734:	080239c3 	.word	0x080239c3
 8023738:	08023a55 	.word	0x08023a55
 802373c:	08023a7d 	.word	0x08023a7d
 8023740:	08023b0f 	.word	0x08023b0f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8023744:	687b      	ldr	r3, [r7, #4]
 8023746:	f103 0110 	add.w	r1, r3, #16
 802374a:	687b      	ldr	r3, [r7, #4]
 802374c:	795b      	ldrb	r3, [r3, #5]
 802374e:	461a      	mov	r2, r3
 8023750:	6878      	ldr	r0, [r7, #4]
 8023752:	f000 fa19 	bl	8023b88 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8023756:	687b      	ldr	r3, [r7, #4]
 8023758:	2202      	movs	r2, #2
 802375a:	761a      	strb	r2, [r3, #24]
      break;
 802375c:	e20e      	b.n	8023b7c <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 802375e:	687b      	ldr	r3, [r7, #4]
 8023760:	795b      	ldrb	r3, [r3, #5]
 8023762:	4619      	mov	r1, r3
 8023764:	6878      	ldr	r0, [r7, #4]
 8023766:	f7e0 faff 	bl	8003d68 <USBH_LL_GetURBState>
 802376a:	4603      	mov	r3, r0
 802376c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 802376e:	7bbb      	ldrb	r3, [r7, #14]
 8023770:	2b01      	cmp	r3, #1
 8023772:	d12c      	bne.n	80237ce <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8023774:	687b      	ldr	r3, [r7, #4]
 8023776:	7c1b      	ldrb	r3, [r3, #16]
 8023778:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802377c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 802377e:	687b      	ldr	r3, [r7, #4]
 8023780:	8adb      	ldrh	r3, [r3, #22]
 8023782:	2b00      	cmp	r3, #0
 8023784:	d00a      	beq.n	802379c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8023786:	7b7b      	ldrb	r3, [r7, #13]
 8023788:	2b80      	cmp	r3, #128	; 0x80
 802378a:	d103      	bne.n	8023794 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 802378c:	687b      	ldr	r3, [r7, #4]
 802378e:	2203      	movs	r2, #3
 8023790:	761a      	strb	r2, [r3, #24]
 8023792:	e00d      	b.n	80237b0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8023794:	687b      	ldr	r3, [r7, #4]
 8023796:	2205      	movs	r2, #5
 8023798:	761a      	strb	r2, [r3, #24]
 802379a:	e009      	b.n	80237b0 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 802379c:	7b7b      	ldrb	r3, [r7, #13]
 802379e:	2b80      	cmp	r3, #128	; 0x80
 80237a0:	d103      	bne.n	80237aa <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80237a2:	687b      	ldr	r3, [r7, #4]
 80237a4:	2209      	movs	r2, #9
 80237a6:	761a      	strb	r2, [r3, #24]
 80237a8:	e002      	b.n	80237b0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80237aa:	687b      	ldr	r3, [r7, #4]
 80237ac:	2207      	movs	r2, #7
 80237ae:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80237b0:	687b      	ldr	r3, [r7, #4]
 80237b2:	2203      	movs	r2, #3
 80237b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80237b8:	687b      	ldr	r3, [r7, #4]
 80237ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80237be:	687b      	ldr	r3, [r7, #4]
 80237c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80237c4:	2200      	movs	r2, #0
 80237c6:	4619      	mov	r1, r3
 80237c8:	f7eb fd2e 	bl	800f228 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80237cc:	e1cd      	b.n	8023b6a <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80237ce:	7bbb      	ldrb	r3, [r7, #14]
 80237d0:	2b04      	cmp	r3, #4
 80237d2:	d003      	beq.n	80237dc <USBH_HandleControl+0xe8>
 80237d4:	7bbb      	ldrb	r3, [r7, #14]
 80237d6:	2b02      	cmp	r3, #2
 80237d8:	f040 81c7 	bne.w	8023b6a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80237dc:	687b      	ldr	r3, [r7, #4]
 80237de:	220b      	movs	r2, #11
 80237e0:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80237e2:	687b      	ldr	r3, [r7, #4]
 80237e4:	2203      	movs	r2, #3
 80237e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80237ea:	687b      	ldr	r3, [r7, #4]
 80237ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80237f0:	687b      	ldr	r3, [r7, #4]
 80237f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80237f6:	2200      	movs	r2, #0
 80237f8:	4619      	mov	r1, r3
 80237fa:	f7eb fd15 	bl	800f228 <osMessagePut>
      break;
 80237fe:	e1b4      	b.n	8023b6a <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8023800:	687b      	ldr	r3, [r7, #4]
 8023802:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8023806:	b29a      	uxth	r2, r3
 8023808:	687b      	ldr	r3, [r7, #4]
 802380a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 802380c:	687b      	ldr	r3, [r7, #4]
 802380e:	6899      	ldr	r1, [r3, #8]
 8023810:	687b      	ldr	r3, [r7, #4]
 8023812:	899a      	ldrh	r2, [r3, #12]
 8023814:	687b      	ldr	r3, [r7, #4]
 8023816:	791b      	ldrb	r3, [r3, #4]
 8023818:	6878      	ldr	r0, [r7, #4]
 802381a:	f000 f9f4 	bl	8023c06 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 802381e:	687b      	ldr	r3, [r7, #4]
 8023820:	2204      	movs	r2, #4
 8023822:	761a      	strb	r2, [r3, #24]
      break;
 8023824:	e1aa      	b.n	8023b7c <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8023826:	687b      	ldr	r3, [r7, #4]
 8023828:	791b      	ldrb	r3, [r3, #4]
 802382a:	4619      	mov	r1, r3
 802382c:	6878      	ldr	r0, [r7, #4]
 802382e:	f7e0 fa9b 	bl	8003d68 <USBH_LL_GetURBState>
 8023832:	4603      	mov	r3, r0
 8023834:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8023836:	7bbb      	ldrb	r3, [r7, #14]
 8023838:	2b01      	cmp	r3, #1
 802383a:	d110      	bne.n	802385e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 802383c:	687b      	ldr	r3, [r7, #4]
 802383e:	2209      	movs	r2, #9
 8023840:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8023842:	687b      	ldr	r3, [r7, #4]
 8023844:	2203      	movs	r2, #3
 8023846:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802384a:	687b      	ldr	r3, [r7, #4]
 802384c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8023850:	687b      	ldr	r3, [r7, #4]
 8023852:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8023856:	2200      	movs	r2, #0
 8023858:	4619      	mov	r1, r3
 802385a:	f7eb fce5 	bl	800f228 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 802385e:	7bbb      	ldrb	r3, [r7, #14]
 8023860:	2b05      	cmp	r3, #5
 8023862:	d110      	bne.n	8023886 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8023864:	2303      	movs	r3, #3
 8023866:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8023868:	687b      	ldr	r3, [r7, #4]
 802386a:	2203      	movs	r2, #3
 802386c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8023870:	687b      	ldr	r3, [r7, #4]
 8023872:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8023876:	687b      	ldr	r3, [r7, #4]
 8023878:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802387c:	2200      	movs	r2, #0
 802387e:	4619      	mov	r1, r3
 8023880:	f7eb fcd2 	bl	800f228 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8023884:	e173      	b.n	8023b6e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8023886:	7bbb      	ldrb	r3, [r7, #14]
 8023888:	2b04      	cmp	r3, #4
 802388a:	f040 8170 	bne.w	8023b6e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 802388e:	687b      	ldr	r3, [r7, #4]
 8023890:	220b      	movs	r2, #11
 8023892:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8023894:	687b      	ldr	r3, [r7, #4]
 8023896:	2203      	movs	r2, #3
 8023898:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802389c:	687b      	ldr	r3, [r7, #4]
 802389e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80238a2:	687b      	ldr	r3, [r7, #4]
 80238a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80238a8:	2200      	movs	r2, #0
 80238aa:	4619      	mov	r1, r3
 80238ac:	f7eb fcbc 	bl	800f228 <osMessagePut>
      break;
 80238b0:	e15d      	b.n	8023b6e <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80238b2:	687b      	ldr	r3, [r7, #4]
 80238b4:	6899      	ldr	r1, [r3, #8]
 80238b6:	687b      	ldr	r3, [r7, #4]
 80238b8:	899a      	ldrh	r2, [r3, #12]
 80238ba:	687b      	ldr	r3, [r7, #4]
 80238bc:	7958      	ldrb	r0, [r3, #5]
 80238be:	2301      	movs	r3, #1
 80238c0:	9300      	str	r3, [sp, #0]
 80238c2:	4603      	mov	r3, r0
 80238c4:	6878      	ldr	r0, [r7, #4]
 80238c6:	f000 f979 	bl	8023bbc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80238ca:	687b      	ldr	r3, [r7, #4]
 80238cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80238d0:	b29a      	uxth	r2, r3
 80238d2:	687b      	ldr	r3, [r7, #4]
 80238d4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80238d6:	687b      	ldr	r3, [r7, #4]
 80238d8:	2206      	movs	r2, #6
 80238da:	761a      	strb	r2, [r3, #24]
      break;
 80238dc:	e14e      	b.n	8023b7c <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80238de:	687b      	ldr	r3, [r7, #4]
 80238e0:	795b      	ldrb	r3, [r3, #5]
 80238e2:	4619      	mov	r1, r3
 80238e4:	6878      	ldr	r0, [r7, #4]
 80238e6:	f7e0 fa3f 	bl	8003d68 <USBH_LL_GetURBState>
 80238ea:	4603      	mov	r3, r0
 80238ec:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80238ee:	7bbb      	ldrb	r3, [r7, #14]
 80238f0:	2b01      	cmp	r3, #1
 80238f2:	d111      	bne.n	8023918 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80238f4:	687b      	ldr	r3, [r7, #4]
 80238f6:	2207      	movs	r2, #7
 80238f8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80238fa:	687b      	ldr	r3, [r7, #4]
 80238fc:	2203      	movs	r2, #3
 80238fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8023902:	687b      	ldr	r3, [r7, #4]
 8023904:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8023908:	687b      	ldr	r3, [r7, #4]
 802390a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802390e:	2200      	movs	r2, #0
 8023910:	4619      	mov	r1, r3
 8023912:	f7eb fc89 	bl	800f228 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8023916:	e12c      	b.n	8023b72 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 8023918:	7bbb      	ldrb	r3, [r7, #14]
 802391a:	2b05      	cmp	r3, #5
 802391c:	d113      	bne.n	8023946 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 802391e:	687b      	ldr	r3, [r7, #4]
 8023920:	220c      	movs	r2, #12
 8023922:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8023924:	2303      	movs	r3, #3
 8023926:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8023928:	687b      	ldr	r3, [r7, #4]
 802392a:	2203      	movs	r2, #3
 802392c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8023930:	687b      	ldr	r3, [r7, #4]
 8023932:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8023936:	687b      	ldr	r3, [r7, #4]
 8023938:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 802393c:	2200      	movs	r2, #0
 802393e:	4619      	mov	r1, r3
 8023940:	f7eb fc72 	bl	800f228 <osMessagePut>
      break;
 8023944:	e115      	b.n	8023b72 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8023946:	7bbb      	ldrb	r3, [r7, #14]
 8023948:	2b02      	cmp	r3, #2
 802394a:	d111      	bne.n	8023970 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 802394c:	687b      	ldr	r3, [r7, #4]
 802394e:	2205      	movs	r2, #5
 8023950:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8023952:	687b      	ldr	r3, [r7, #4]
 8023954:	2203      	movs	r2, #3
 8023956:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802395a:	687b      	ldr	r3, [r7, #4]
 802395c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8023960:	687b      	ldr	r3, [r7, #4]
 8023962:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8023966:	2200      	movs	r2, #0
 8023968:	4619      	mov	r1, r3
 802396a:	f7eb fc5d 	bl	800f228 <osMessagePut>
      break;
 802396e:	e100      	b.n	8023b72 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 8023970:	7bbb      	ldrb	r3, [r7, #14]
 8023972:	2b04      	cmp	r3, #4
 8023974:	f040 80fd 	bne.w	8023b72 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 8023978:	687b      	ldr	r3, [r7, #4]
 802397a:	220b      	movs	r2, #11
 802397c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 802397e:	2302      	movs	r3, #2
 8023980:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8023982:	687b      	ldr	r3, [r7, #4]
 8023984:	2203      	movs	r2, #3
 8023986:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 802398a:	687b      	ldr	r3, [r7, #4]
 802398c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8023990:	687b      	ldr	r3, [r7, #4]
 8023992:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8023996:	2200      	movs	r2, #0
 8023998:	4619      	mov	r1, r3
 802399a:	f7eb fc45 	bl	800f228 <osMessagePut>
      break;
 802399e:	e0e8      	b.n	8023b72 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80239a0:	687b      	ldr	r3, [r7, #4]
 80239a2:	791b      	ldrb	r3, [r3, #4]
 80239a4:	2200      	movs	r2, #0
 80239a6:	2100      	movs	r1, #0
 80239a8:	6878      	ldr	r0, [r7, #4]
 80239aa:	f000 f92c 	bl	8023c06 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80239ae:	687b      	ldr	r3, [r7, #4]
 80239b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80239b4:	b29a      	uxth	r2, r3
 80239b6:	687b      	ldr	r3, [r7, #4]
 80239b8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80239ba:	687b      	ldr	r3, [r7, #4]
 80239bc:	2208      	movs	r2, #8
 80239be:	761a      	strb	r2, [r3, #24]

      break;
 80239c0:	e0dc      	b.n	8023b7c <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80239c2:	687b      	ldr	r3, [r7, #4]
 80239c4:	791b      	ldrb	r3, [r3, #4]
 80239c6:	4619      	mov	r1, r3
 80239c8:	6878      	ldr	r0, [r7, #4]
 80239ca:	f7e0 f9cd 	bl	8003d68 <USBH_LL_GetURBState>
 80239ce:	4603      	mov	r3, r0
 80239d0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80239d2:	7bbb      	ldrb	r3, [r7, #14]
 80239d4:	2b01      	cmp	r3, #1
 80239d6:	d113      	bne.n	8023a00 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80239d8:	687b      	ldr	r3, [r7, #4]
 80239da:	220d      	movs	r2, #13
 80239dc:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80239de:	2300      	movs	r3, #0
 80239e0:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80239e2:	687b      	ldr	r3, [r7, #4]
 80239e4:	2203      	movs	r2, #3
 80239e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80239ea:	687b      	ldr	r3, [r7, #4]
 80239ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80239f0:	687b      	ldr	r3, [r7, #4]
 80239f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 80239f6:	2200      	movs	r2, #0
 80239f8:	4619      	mov	r1, r3
 80239fa:	f7eb fc15 	bl	800f228 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80239fe:	e0ba      	b.n	8023b76 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 8023a00:	7bbb      	ldrb	r3, [r7, #14]
 8023a02:	2b04      	cmp	r3, #4
 8023a04:	d111      	bne.n	8023a2a <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 8023a06:	687b      	ldr	r3, [r7, #4]
 8023a08:	220b      	movs	r2, #11
 8023a0a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8023a0c:	687b      	ldr	r3, [r7, #4]
 8023a0e:	2203      	movs	r2, #3
 8023a10:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8023a14:	687b      	ldr	r3, [r7, #4]
 8023a16:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8023a1a:	687b      	ldr	r3, [r7, #4]
 8023a1c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8023a20:	2200      	movs	r2, #0
 8023a22:	4619      	mov	r1, r3
 8023a24:	f7eb fc00 	bl	800f228 <osMessagePut>
      break;
 8023a28:	e0a5      	b.n	8023b76 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 8023a2a:	7bbb      	ldrb	r3, [r7, #14]
 8023a2c:	2b05      	cmp	r3, #5
 8023a2e:	f040 80a2 	bne.w	8023b76 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 8023a32:	2303      	movs	r3, #3
 8023a34:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8023a36:	687b      	ldr	r3, [r7, #4]
 8023a38:	2203      	movs	r2, #3
 8023a3a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8023a3e:	687b      	ldr	r3, [r7, #4]
 8023a40:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8023a44:	687b      	ldr	r3, [r7, #4]
 8023a46:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8023a4a:	2200      	movs	r2, #0
 8023a4c:	4619      	mov	r1, r3
 8023a4e:	f7eb fbeb 	bl	800f228 <osMessagePut>
      break;
 8023a52:	e090      	b.n	8023b76 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8023a54:	687b      	ldr	r3, [r7, #4]
 8023a56:	795a      	ldrb	r2, [r3, #5]
 8023a58:	2301      	movs	r3, #1
 8023a5a:	9300      	str	r3, [sp, #0]
 8023a5c:	4613      	mov	r3, r2
 8023a5e:	2200      	movs	r2, #0
 8023a60:	2100      	movs	r1, #0
 8023a62:	6878      	ldr	r0, [r7, #4]
 8023a64:	f000 f8aa 	bl	8023bbc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8023a68:	687b      	ldr	r3, [r7, #4]
 8023a6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8023a6e:	b29a      	uxth	r2, r3
 8023a70:	687b      	ldr	r3, [r7, #4]
 8023a72:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8023a74:	687b      	ldr	r3, [r7, #4]
 8023a76:	220a      	movs	r2, #10
 8023a78:	761a      	strb	r2, [r3, #24]
      break;
 8023a7a:	e07f      	b.n	8023b7c <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8023a7c:	687b      	ldr	r3, [r7, #4]
 8023a7e:	795b      	ldrb	r3, [r3, #5]
 8023a80:	4619      	mov	r1, r3
 8023a82:	6878      	ldr	r0, [r7, #4]
 8023a84:	f7e0 f970 	bl	8003d68 <USBH_LL_GetURBState>
 8023a88:	4603      	mov	r3, r0
 8023a8a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8023a8c:	7bbb      	ldrb	r3, [r7, #14]
 8023a8e:	2b01      	cmp	r3, #1
 8023a90:	d113      	bne.n	8023aba <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 8023a92:	2300      	movs	r3, #0
 8023a94:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8023a96:	687b      	ldr	r3, [r7, #4]
 8023a98:	220d      	movs	r2, #13
 8023a9a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8023a9c:	687b      	ldr	r3, [r7, #4]
 8023a9e:	2203      	movs	r2, #3
 8023aa0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8023aa4:	687b      	ldr	r3, [r7, #4]
 8023aa6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8023aaa:	687b      	ldr	r3, [r7, #4]
 8023aac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8023ab0:	2200      	movs	r2, #0
 8023ab2:	4619      	mov	r1, r3
 8023ab4:	f7eb fbb8 	bl	800f228 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8023ab8:	e05f      	b.n	8023b7a <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 8023aba:	7bbb      	ldrb	r3, [r7, #14]
 8023abc:	2b02      	cmp	r3, #2
 8023abe:	d111      	bne.n	8023ae4 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 8023ac0:	687b      	ldr	r3, [r7, #4]
 8023ac2:	2209      	movs	r2, #9
 8023ac4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8023ac6:	687b      	ldr	r3, [r7, #4]
 8023ac8:	2203      	movs	r2, #3
 8023aca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8023ace:	687b      	ldr	r3, [r7, #4]
 8023ad0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8023ad4:	687b      	ldr	r3, [r7, #4]
 8023ad6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8023ada:	2200      	movs	r2, #0
 8023adc:	4619      	mov	r1, r3
 8023ade:	f7eb fba3 	bl	800f228 <osMessagePut>
      break;
 8023ae2:	e04a      	b.n	8023b7a <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 8023ae4:	7bbb      	ldrb	r3, [r7, #14]
 8023ae6:	2b04      	cmp	r3, #4
 8023ae8:	d147      	bne.n	8023b7a <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 8023aea:	687b      	ldr	r3, [r7, #4]
 8023aec:	220b      	movs	r2, #11
 8023aee:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8023af0:	687b      	ldr	r3, [r7, #4]
 8023af2:	2203      	movs	r2, #3
 8023af4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8023af8:	687b      	ldr	r3, [r7, #4]
 8023afa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8023afe:	687b      	ldr	r3, [r7, #4]
 8023b00:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8023b04:	2200      	movs	r2, #0
 8023b06:	4619      	mov	r1, r3
 8023b08:	f7eb fb8e 	bl	800f228 <osMessagePut>
      break;
 8023b0c:	e035      	b.n	8023b7a <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8023b0e:	687b      	ldr	r3, [r7, #4]
 8023b10:	7e5b      	ldrb	r3, [r3, #25]
 8023b12:	3301      	adds	r3, #1
 8023b14:	b2da      	uxtb	r2, r3
 8023b16:	687b      	ldr	r3, [r7, #4]
 8023b18:	765a      	strb	r2, [r3, #25]
 8023b1a:	687b      	ldr	r3, [r7, #4]
 8023b1c:	7e5b      	ldrb	r3, [r3, #25]
 8023b1e:	2b02      	cmp	r3, #2
 8023b20:	d806      	bhi.n	8023b30 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8023b22:	687b      	ldr	r3, [r7, #4]
 8023b24:	2201      	movs	r2, #1
 8023b26:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8023b28:	687b      	ldr	r3, [r7, #4]
 8023b2a:	2201      	movs	r2, #1
 8023b2c:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8023b2e:	e025      	b.n	8023b7c <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8023b30:	687b      	ldr	r3, [r7, #4]
 8023b32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8023b36:	2106      	movs	r1, #6
 8023b38:	6878      	ldr	r0, [r7, #4]
 8023b3a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8023b3c:	687b      	ldr	r3, [r7, #4]
 8023b3e:	2200      	movs	r2, #0
 8023b40:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8023b42:	687b      	ldr	r3, [r7, #4]
 8023b44:	795b      	ldrb	r3, [r3, #5]
 8023b46:	4619      	mov	r1, r3
 8023b48:	6878      	ldr	r0, [r7, #4]
 8023b4a:	f000 f90d 	bl	8023d68 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8023b4e:	687b      	ldr	r3, [r7, #4]
 8023b50:	791b      	ldrb	r3, [r3, #4]
 8023b52:	4619      	mov	r1, r3
 8023b54:	6878      	ldr	r0, [r7, #4]
 8023b56:	f000 f907 	bl	8023d68 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8023b5a:	687b      	ldr	r3, [r7, #4]
 8023b5c:	2200      	movs	r2, #0
 8023b5e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8023b60:	2302      	movs	r3, #2
 8023b62:	73fb      	strb	r3, [r7, #15]
      break;
 8023b64:	e00a      	b.n	8023b7c <USBH_HandleControl+0x488>

    default:
      break;
 8023b66:	bf00      	nop
 8023b68:	e008      	b.n	8023b7c <USBH_HandleControl+0x488>
      break;
 8023b6a:	bf00      	nop
 8023b6c:	e006      	b.n	8023b7c <USBH_HandleControl+0x488>
      break;
 8023b6e:	bf00      	nop
 8023b70:	e004      	b.n	8023b7c <USBH_HandleControl+0x488>
      break;
 8023b72:	bf00      	nop
 8023b74:	e002      	b.n	8023b7c <USBH_HandleControl+0x488>
      break;
 8023b76:	bf00      	nop
 8023b78:	e000      	b.n	8023b7c <USBH_HandleControl+0x488>
      break;
 8023b7a:	bf00      	nop
  }

  return status;
 8023b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8023b7e:	4618      	mov	r0, r3
 8023b80:	3710      	adds	r7, #16
 8023b82:	46bd      	mov	sp, r7
 8023b84:	bd80      	pop	{r7, pc}
 8023b86:	bf00      	nop

08023b88 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8023b88:	b580      	push	{r7, lr}
 8023b8a:	b088      	sub	sp, #32
 8023b8c:	af04      	add	r7, sp, #16
 8023b8e:	60f8      	str	r0, [r7, #12]
 8023b90:	60b9      	str	r1, [r7, #8]
 8023b92:	4613      	mov	r3, r2
 8023b94:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8023b96:	79f9      	ldrb	r1, [r7, #7]
 8023b98:	2300      	movs	r3, #0
 8023b9a:	9303      	str	r3, [sp, #12]
 8023b9c:	2308      	movs	r3, #8
 8023b9e:	9302      	str	r3, [sp, #8]
 8023ba0:	68bb      	ldr	r3, [r7, #8]
 8023ba2:	9301      	str	r3, [sp, #4]
 8023ba4:	2300      	movs	r3, #0
 8023ba6:	9300      	str	r3, [sp, #0]
 8023ba8:	2300      	movs	r3, #0
 8023baa:	2200      	movs	r2, #0
 8023bac:	68f8      	ldr	r0, [r7, #12]
 8023bae:	f7e0 f8aa 	bl	8003d06 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8023bb2:	2300      	movs	r3, #0
}
 8023bb4:	4618      	mov	r0, r3
 8023bb6:	3710      	adds	r7, #16
 8023bb8:	46bd      	mov	sp, r7
 8023bba:	bd80      	pop	{r7, pc}

08023bbc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8023bbc:	b580      	push	{r7, lr}
 8023bbe:	b088      	sub	sp, #32
 8023bc0:	af04      	add	r7, sp, #16
 8023bc2:	60f8      	str	r0, [r7, #12]
 8023bc4:	60b9      	str	r1, [r7, #8]
 8023bc6:	4611      	mov	r1, r2
 8023bc8:	461a      	mov	r2, r3
 8023bca:	460b      	mov	r3, r1
 8023bcc:	80fb      	strh	r3, [r7, #6]
 8023bce:	4613      	mov	r3, r2
 8023bd0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8023bd2:	68fb      	ldr	r3, [r7, #12]
 8023bd4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8023bd8:	2b00      	cmp	r3, #0
 8023bda:	d001      	beq.n	8023be0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8023bdc:	2300      	movs	r3, #0
 8023bde:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8023be0:	7979      	ldrb	r1, [r7, #5]
 8023be2:	7e3b      	ldrb	r3, [r7, #24]
 8023be4:	9303      	str	r3, [sp, #12]
 8023be6:	88fb      	ldrh	r3, [r7, #6]
 8023be8:	9302      	str	r3, [sp, #8]
 8023bea:	68bb      	ldr	r3, [r7, #8]
 8023bec:	9301      	str	r3, [sp, #4]
 8023bee:	2301      	movs	r3, #1
 8023bf0:	9300      	str	r3, [sp, #0]
 8023bf2:	2300      	movs	r3, #0
 8023bf4:	2200      	movs	r2, #0
 8023bf6:	68f8      	ldr	r0, [r7, #12]
 8023bf8:	f7e0 f885 	bl	8003d06 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8023bfc:	2300      	movs	r3, #0
}
 8023bfe:	4618      	mov	r0, r3
 8023c00:	3710      	adds	r7, #16
 8023c02:	46bd      	mov	sp, r7
 8023c04:	bd80      	pop	{r7, pc}

08023c06 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8023c06:	b580      	push	{r7, lr}
 8023c08:	b088      	sub	sp, #32
 8023c0a:	af04      	add	r7, sp, #16
 8023c0c:	60f8      	str	r0, [r7, #12]
 8023c0e:	60b9      	str	r1, [r7, #8]
 8023c10:	4611      	mov	r1, r2
 8023c12:	461a      	mov	r2, r3
 8023c14:	460b      	mov	r3, r1
 8023c16:	80fb      	strh	r3, [r7, #6]
 8023c18:	4613      	mov	r3, r2
 8023c1a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8023c1c:	7979      	ldrb	r1, [r7, #5]
 8023c1e:	2300      	movs	r3, #0
 8023c20:	9303      	str	r3, [sp, #12]
 8023c22:	88fb      	ldrh	r3, [r7, #6]
 8023c24:	9302      	str	r3, [sp, #8]
 8023c26:	68bb      	ldr	r3, [r7, #8]
 8023c28:	9301      	str	r3, [sp, #4]
 8023c2a:	2301      	movs	r3, #1
 8023c2c:	9300      	str	r3, [sp, #0]
 8023c2e:	2300      	movs	r3, #0
 8023c30:	2201      	movs	r2, #1
 8023c32:	68f8      	ldr	r0, [r7, #12]
 8023c34:	f7e0 f867 	bl	8003d06 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8023c38:	2300      	movs	r3, #0

}
 8023c3a:	4618      	mov	r0, r3
 8023c3c:	3710      	adds	r7, #16
 8023c3e:	46bd      	mov	sp, r7
 8023c40:	bd80      	pop	{r7, pc}

08023c42 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8023c42:	b580      	push	{r7, lr}
 8023c44:	b088      	sub	sp, #32
 8023c46:	af04      	add	r7, sp, #16
 8023c48:	60f8      	str	r0, [r7, #12]
 8023c4a:	60b9      	str	r1, [r7, #8]
 8023c4c:	4611      	mov	r1, r2
 8023c4e:	461a      	mov	r2, r3
 8023c50:	460b      	mov	r3, r1
 8023c52:	80fb      	strh	r3, [r7, #6]
 8023c54:	4613      	mov	r3, r2
 8023c56:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8023c58:	68fb      	ldr	r3, [r7, #12]
 8023c5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8023c5e:	2b00      	cmp	r3, #0
 8023c60:	d001      	beq.n	8023c66 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8023c62:	2300      	movs	r3, #0
 8023c64:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8023c66:	7979      	ldrb	r1, [r7, #5]
 8023c68:	7e3b      	ldrb	r3, [r7, #24]
 8023c6a:	9303      	str	r3, [sp, #12]
 8023c6c:	88fb      	ldrh	r3, [r7, #6]
 8023c6e:	9302      	str	r3, [sp, #8]
 8023c70:	68bb      	ldr	r3, [r7, #8]
 8023c72:	9301      	str	r3, [sp, #4]
 8023c74:	2301      	movs	r3, #1
 8023c76:	9300      	str	r3, [sp, #0]
 8023c78:	2302      	movs	r3, #2
 8023c7a:	2200      	movs	r2, #0
 8023c7c:	68f8      	ldr	r0, [r7, #12]
 8023c7e:	f7e0 f842 	bl	8003d06 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8023c82:	2300      	movs	r3, #0
}
 8023c84:	4618      	mov	r0, r3
 8023c86:	3710      	adds	r7, #16
 8023c88:	46bd      	mov	sp, r7
 8023c8a:	bd80      	pop	{r7, pc}

08023c8c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8023c8c:	b580      	push	{r7, lr}
 8023c8e:	b088      	sub	sp, #32
 8023c90:	af04      	add	r7, sp, #16
 8023c92:	60f8      	str	r0, [r7, #12]
 8023c94:	60b9      	str	r1, [r7, #8]
 8023c96:	4611      	mov	r1, r2
 8023c98:	461a      	mov	r2, r3
 8023c9a:	460b      	mov	r3, r1
 8023c9c:	80fb      	strh	r3, [r7, #6]
 8023c9e:	4613      	mov	r3, r2
 8023ca0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8023ca2:	7979      	ldrb	r1, [r7, #5]
 8023ca4:	2300      	movs	r3, #0
 8023ca6:	9303      	str	r3, [sp, #12]
 8023ca8:	88fb      	ldrh	r3, [r7, #6]
 8023caa:	9302      	str	r3, [sp, #8]
 8023cac:	68bb      	ldr	r3, [r7, #8]
 8023cae:	9301      	str	r3, [sp, #4]
 8023cb0:	2301      	movs	r3, #1
 8023cb2:	9300      	str	r3, [sp, #0]
 8023cb4:	2302      	movs	r3, #2
 8023cb6:	2201      	movs	r2, #1
 8023cb8:	68f8      	ldr	r0, [r7, #12]
 8023cba:	f7e0 f824 	bl	8003d06 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8023cbe:	2300      	movs	r3, #0
}
 8023cc0:	4618      	mov	r0, r3
 8023cc2:	3710      	adds	r7, #16
 8023cc4:	46bd      	mov	sp, r7
 8023cc6:	bd80      	pop	{r7, pc}

08023cc8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8023cc8:	b580      	push	{r7, lr}
 8023cca:	b086      	sub	sp, #24
 8023ccc:	af04      	add	r7, sp, #16
 8023cce:	6078      	str	r0, [r7, #4]
 8023cd0:	4608      	mov	r0, r1
 8023cd2:	4611      	mov	r1, r2
 8023cd4:	461a      	mov	r2, r3
 8023cd6:	4603      	mov	r3, r0
 8023cd8:	70fb      	strb	r3, [r7, #3]
 8023cda:	460b      	mov	r3, r1
 8023cdc:	70bb      	strb	r3, [r7, #2]
 8023cde:	4613      	mov	r3, r2
 8023ce0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8023ce2:	7878      	ldrb	r0, [r7, #1]
 8023ce4:	78ba      	ldrb	r2, [r7, #2]
 8023ce6:	78f9      	ldrb	r1, [r7, #3]
 8023ce8:	8b3b      	ldrh	r3, [r7, #24]
 8023cea:	9302      	str	r3, [sp, #8]
 8023cec:	7d3b      	ldrb	r3, [r7, #20]
 8023cee:	9301      	str	r3, [sp, #4]
 8023cf0:	7c3b      	ldrb	r3, [r7, #16]
 8023cf2:	9300      	str	r3, [sp, #0]
 8023cf4:	4603      	mov	r3, r0
 8023cf6:	6878      	ldr	r0, [r7, #4]
 8023cf8:	f7df ffb7 	bl	8003c6a <USBH_LL_OpenPipe>

  return USBH_OK;
 8023cfc:	2300      	movs	r3, #0
}
 8023cfe:	4618      	mov	r0, r3
 8023d00:	3708      	adds	r7, #8
 8023d02:	46bd      	mov	sp, r7
 8023d04:	bd80      	pop	{r7, pc}

08023d06 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8023d06:	b580      	push	{r7, lr}
 8023d08:	b082      	sub	sp, #8
 8023d0a:	af00      	add	r7, sp, #0
 8023d0c:	6078      	str	r0, [r7, #4]
 8023d0e:	460b      	mov	r3, r1
 8023d10:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8023d12:	78fb      	ldrb	r3, [r7, #3]
 8023d14:	4619      	mov	r1, r3
 8023d16:	6878      	ldr	r0, [r7, #4]
 8023d18:	f7df ffd6 	bl	8003cc8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8023d1c:	2300      	movs	r3, #0
}
 8023d1e:	4618      	mov	r0, r3
 8023d20:	3708      	adds	r7, #8
 8023d22:	46bd      	mov	sp, r7
 8023d24:	bd80      	pop	{r7, pc}

08023d26 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8023d26:	b580      	push	{r7, lr}
 8023d28:	b084      	sub	sp, #16
 8023d2a:	af00      	add	r7, sp, #0
 8023d2c:	6078      	str	r0, [r7, #4]
 8023d2e:	460b      	mov	r3, r1
 8023d30:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8023d32:	6878      	ldr	r0, [r7, #4]
 8023d34:	f000 f836 	bl	8023da4 <USBH_GetFreePipe>
 8023d38:	4603      	mov	r3, r0
 8023d3a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8023d3c:	89fb      	ldrh	r3, [r7, #14]
 8023d3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8023d42:	4293      	cmp	r3, r2
 8023d44:	d00a      	beq.n	8023d5c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8023d46:	78fa      	ldrb	r2, [r7, #3]
 8023d48:	89fb      	ldrh	r3, [r7, #14]
 8023d4a:	f003 030f 	and.w	r3, r3, #15
 8023d4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8023d52:	6879      	ldr	r1, [r7, #4]
 8023d54:	33e0      	adds	r3, #224	; 0xe0
 8023d56:	009b      	lsls	r3, r3, #2
 8023d58:	440b      	add	r3, r1
 8023d5a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8023d5c:	89fb      	ldrh	r3, [r7, #14]
 8023d5e:	b2db      	uxtb	r3, r3
}
 8023d60:	4618      	mov	r0, r3
 8023d62:	3710      	adds	r7, #16
 8023d64:	46bd      	mov	sp, r7
 8023d66:	bd80      	pop	{r7, pc}

08023d68 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8023d68:	b480      	push	{r7}
 8023d6a:	b083      	sub	sp, #12
 8023d6c:	af00      	add	r7, sp, #0
 8023d6e:	6078      	str	r0, [r7, #4]
 8023d70:	460b      	mov	r3, r1
 8023d72:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8023d74:	78fb      	ldrb	r3, [r7, #3]
 8023d76:	2b0a      	cmp	r3, #10
 8023d78:	d80d      	bhi.n	8023d96 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8023d7a:	78fb      	ldrb	r3, [r7, #3]
 8023d7c:	687a      	ldr	r2, [r7, #4]
 8023d7e:	33e0      	adds	r3, #224	; 0xe0
 8023d80:	009b      	lsls	r3, r3, #2
 8023d82:	4413      	add	r3, r2
 8023d84:	685a      	ldr	r2, [r3, #4]
 8023d86:	78fb      	ldrb	r3, [r7, #3]
 8023d88:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8023d8c:	6879      	ldr	r1, [r7, #4]
 8023d8e:	33e0      	adds	r3, #224	; 0xe0
 8023d90:	009b      	lsls	r3, r3, #2
 8023d92:	440b      	add	r3, r1
 8023d94:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8023d96:	2300      	movs	r3, #0
}
 8023d98:	4618      	mov	r0, r3
 8023d9a:	370c      	adds	r7, #12
 8023d9c:	46bd      	mov	sp, r7
 8023d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023da2:	4770      	bx	lr

08023da4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8023da4:	b480      	push	{r7}
 8023da6:	b085      	sub	sp, #20
 8023da8:	af00      	add	r7, sp, #0
 8023daa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8023dac:	2300      	movs	r3, #0
 8023dae:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8023db0:	2300      	movs	r3, #0
 8023db2:	73fb      	strb	r3, [r7, #15]
 8023db4:	e00f      	b.n	8023dd6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8023db6:	7bfb      	ldrb	r3, [r7, #15]
 8023db8:	687a      	ldr	r2, [r7, #4]
 8023dba:	33e0      	adds	r3, #224	; 0xe0
 8023dbc:	009b      	lsls	r3, r3, #2
 8023dbe:	4413      	add	r3, r2
 8023dc0:	685b      	ldr	r3, [r3, #4]
 8023dc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8023dc6:	2b00      	cmp	r3, #0
 8023dc8:	d102      	bne.n	8023dd0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8023dca:	7bfb      	ldrb	r3, [r7, #15]
 8023dcc:	b29b      	uxth	r3, r3
 8023dce:	e007      	b.n	8023de0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8023dd0:	7bfb      	ldrb	r3, [r7, #15]
 8023dd2:	3301      	adds	r3, #1
 8023dd4:	73fb      	strb	r3, [r7, #15]
 8023dd6:	7bfb      	ldrb	r3, [r7, #15]
 8023dd8:	2b0a      	cmp	r3, #10
 8023dda:	d9ec      	bls.n	8023db6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8023ddc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8023de0:	4618      	mov	r0, r3
 8023de2:	3714      	adds	r7, #20
 8023de4:	46bd      	mov	sp, r7
 8023de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023dea:	4770      	bx	lr

08023dec <__libc_init_array>:
 8023dec:	b570      	push	{r4, r5, r6, lr}
 8023dee:	4e0d      	ldr	r6, [pc, #52]	; (8023e24 <__libc_init_array+0x38>)
 8023df0:	4c0d      	ldr	r4, [pc, #52]	; (8023e28 <__libc_init_array+0x3c>)
 8023df2:	1ba4      	subs	r4, r4, r6
 8023df4:	10a4      	asrs	r4, r4, #2
 8023df6:	2500      	movs	r5, #0
 8023df8:	42a5      	cmp	r5, r4
 8023dfa:	d109      	bne.n	8023e10 <__libc_init_array+0x24>
 8023dfc:	4e0b      	ldr	r6, [pc, #44]	; (8023e2c <__libc_init_array+0x40>)
 8023dfe:	4c0c      	ldr	r4, [pc, #48]	; (8023e30 <__libc_init_array+0x44>)
 8023e00:	f000 ff74 	bl	8024cec <_init>
 8023e04:	1ba4      	subs	r4, r4, r6
 8023e06:	10a4      	asrs	r4, r4, #2
 8023e08:	2500      	movs	r5, #0
 8023e0a:	42a5      	cmp	r5, r4
 8023e0c:	d105      	bne.n	8023e1a <__libc_init_array+0x2e>
 8023e0e:	bd70      	pop	{r4, r5, r6, pc}
 8023e10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8023e14:	4798      	blx	r3
 8023e16:	3501      	adds	r5, #1
 8023e18:	e7ee      	b.n	8023df8 <__libc_init_array+0xc>
 8023e1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8023e1e:	4798      	blx	r3
 8023e20:	3501      	adds	r5, #1
 8023e22:	e7f2      	b.n	8023e0a <__libc_init_array+0x1e>
 8023e24:	08028c10 	.word	0x08028c10
 8023e28:	08028c10 	.word	0x08028c10
 8023e2c:	08028c10 	.word	0x08028c10
 8023e30:	08028c14 	.word	0x08028c14

08023e34 <malloc>:
 8023e34:	4b02      	ldr	r3, [pc, #8]	; (8023e40 <malloc+0xc>)
 8023e36:	4601      	mov	r1, r0
 8023e38:	6818      	ldr	r0, [r3, #0]
 8023e3a:	f000 b87b 	b.w	8023f34 <_malloc_r>
 8023e3e:	bf00      	nop
 8023e40:	20000044 	.word	0x20000044

08023e44 <free>:
 8023e44:	4b02      	ldr	r3, [pc, #8]	; (8023e50 <free+0xc>)
 8023e46:	4601      	mov	r1, r0
 8023e48:	6818      	ldr	r0, [r3, #0]
 8023e4a:	f000 b825 	b.w	8023e98 <_free_r>
 8023e4e:	bf00      	nop
 8023e50:	20000044 	.word	0x20000044

08023e54 <memcmp>:
 8023e54:	b530      	push	{r4, r5, lr}
 8023e56:	2400      	movs	r4, #0
 8023e58:	42a2      	cmp	r2, r4
 8023e5a:	d101      	bne.n	8023e60 <memcmp+0xc>
 8023e5c:	2000      	movs	r0, #0
 8023e5e:	e007      	b.n	8023e70 <memcmp+0x1c>
 8023e60:	5d03      	ldrb	r3, [r0, r4]
 8023e62:	3401      	adds	r4, #1
 8023e64:	190d      	adds	r5, r1, r4
 8023e66:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8023e6a:	42ab      	cmp	r3, r5
 8023e6c:	d0f4      	beq.n	8023e58 <memcmp+0x4>
 8023e6e:	1b58      	subs	r0, r3, r5
 8023e70:	bd30      	pop	{r4, r5, pc}

08023e72 <memcpy>:
 8023e72:	b510      	push	{r4, lr}
 8023e74:	1e43      	subs	r3, r0, #1
 8023e76:	440a      	add	r2, r1
 8023e78:	4291      	cmp	r1, r2
 8023e7a:	d100      	bne.n	8023e7e <memcpy+0xc>
 8023e7c:	bd10      	pop	{r4, pc}
 8023e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023e82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023e86:	e7f7      	b.n	8023e78 <memcpy+0x6>

08023e88 <memset>:
 8023e88:	4402      	add	r2, r0
 8023e8a:	4603      	mov	r3, r0
 8023e8c:	4293      	cmp	r3, r2
 8023e8e:	d100      	bne.n	8023e92 <memset+0xa>
 8023e90:	4770      	bx	lr
 8023e92:	f803 1b01 	strb.w	r1, [r3], #1
 8023e96:	e7f9      	b.n	8023e8c <memset+0x4>

08023e98 <_free_r>:
 8023e98:	b538      	push	{r3, r4, r5, lr}
 8023e9a:	4605      	mov	r5, r0
 8023e9c:	2900      	cmp	r1, #0
 8023e9e:	d045      	beq.n	8023f2c <_free_r+0x94>
 8023ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023ea4:	1f0c      	subs	r4, r1, #4
 8023ea6:	2b00      	cmp	r3, #0
 8023ea8:	bfb8      	it	lt
 8023eaa:	18e4      	addlt	r4, r4, r3
 8023eac:	f000 fba8 	bl	8024600 <__malloc_lock>
 8023eb0:	4a1f      	ldr	r2, [pc, #124]	; (8023f30 <_free_r+0x98>)
 8023eb2:	6813      	ldr	r3, [r2, #0]
 8023eb4:	4610      	mov	r0, r2
 8023eb6:	b933      	cbnz	r3, 8023ec6 <_free_r+0x2e>
 8023eb8:	6063      	str	r3, [r4, #4]
 8023eba:	6014      	str	r4, [r2, #0]
 8023ebc:	4628      	mov	r0, r5
 8023ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023ec2:	f000 bb9e 	b.w	8024602 <__malloc_unlock>
 8023ec6:	42a3      	cmp	r3, r4
 8023ec8:	d90c      	bls.n	8023ee4 <_free_r+0x4c>
 8023eca:	6821      	ldr	r1, [r4, #0]
 8023ecc:	1862      	adds	r2, r4, r1
 8023ece:	4293      	cmp	r3, r2
 8023ed0:	bf04      	itt	eq
 8023ed2:	681a      	ldreq	r2, [r3, #0]
 8023ed4:	685b      	ldreq	r3, [r3, #4]
 8023ed6:	6063      	str	r3, [r4, #4]
 8023ed8:	bf04      	itt	eq
 8023eda:	1852      	addeq	r2, r2, r1
 8023edc:	6022      	streq	r2, [r4, #0]
 8023ede:	6004      	str	r4, [r0, #0]
 8023ee0:	e7ec      	b.n	8023ebc <_free_r+0x24>
 8023ee2:	4613      	mov	r3, r2
 8023ee4:	685a      	ldr	r2, [r3, #4]
 8023ee6:	b10a      	cbz	r2, 8023eec <_free_r+0x54>
 8023ee8:	42a2      	cmp	r2, r4
 8023eea:	d9fa      	bls.n	8023ee2 <_free_r+0x4a>
 8023eec:	6819      	ldr	r1, [r3, #0]
 8023eee:	1858      	adds	r0, r3, r1
 8023ef0:	42a0      	cmp	r0, r4
 8023ef2:	d10b      	bne.n	8023f0c <_free_r+0x74>
 8023ef4:	6820      	ldr	r0, [r4, #0]
 8023ef6:	4401      	add	r1, r0
 8023ef8:	1858      	adds	r0, r3, r1
 8023efa:	4282      	cmp	r2, r0
 8023efc:	6019      	str	r1, [r3, #0]
 8023efe:	d1dd      	bne.n	8023ebc <_free_r+0x24>
 8023f00:	6810      	ldr	r0, [r2, #0]
 8023f02:	6852      	ldr	r2, [r2, #4]
 8023f04:	605a      	str	r2, [r3, #4]
 8023f06:	4401      	add	r1, r0
 8023f08:	6019      	str	r1, [r3, #0]
 8023f0a:	e7d7      	b.n	8023ebc <_free_r+0x24>
 8023f0c:	d902      	bls.n	8023f14 <_free_r+0x7c>
 8023f0e:	230c      	movs	r3, #12
 8023f10:	602b      	str	r3, [r5, #0]
 8023f12:	e7d3      	b.n	8023ebc <_free_r+0x24>
 8023f14:	6820      	ldr	r0, [r4, #0]
 8023f16:	1821      	adds	r1, r4, r0
 8023f18:	428a      	cmp	r2, r1
 8023f1a:	bf04      	itt	eq
 8023f1c:	6811      	ldreq	r1, [r2, #0]
 8023f1e:	6852      	ldreq	r2, [r2, #4]
 8023f20:	6062      	str	r2, [r4, #4]
 8023f22:	bf04      	itt	eq
 8023f24:	1809      	addeq	r1, r1, r0
 8023f26:	6021      	streq	r1, [r4, #0]
 8023f28:	605c      	str	r4, [r3, #4]
 8023f2a:	e7c7      	b.n	8023ebc <_free_r+0x24>
 8023f2c:	bd38      	pop	{r3, r4, r5, pc}
 8023f2e:	bf00      	nop
 8023f30:	20008ab8 	.word	0x20008ab8

08023f34 <_malloc_r>:
 8023f34:	b570      	push	{r4, r5, r6, lr}
 8023f36:	1ccd      	adds	r5, r1, #3
 8023f38:	f025 0503 	bic.w	r5, r5, #3
 8023f3c:	3508      	adds	r5, #8
 8023f3e:	2d0c      	cmp	r5, #12
 8023f40:	bf38      	it	cc
 8023f42:	250c      	movcc	r5, #12
 8023f44:	2d00      	cmp	r5, #0
 8023f46:	4606      	mov	r6, r0
 8023f48:	db01      	blt.n	8023f4e <_malloc_r+0x1a>
 8023f4a:	42a9      	cmp	r1, r5
 8023f4c:	d903      	bls.n	8023f56 <_malloc_r+0x22>
 8023f4e:	230c      	movs	r3, #12
 8023f50:	6033      	str	r3, [r6, #0]
 8023f52:	2000      	movs	r0, #0
 8023f54:	bd70      	pop	{r4, r5, r6, pc}
 8023f56:	f000 fb53 	bl	8024600 <__malloc_lock>
 8023f5a:	4a21      	ldr	r2, [pc, #132]	; (8023fe0 <_malloc_r+0xac>)
 8023f5c:	6814      	ldr	r4, [r2, #0]
 8023f5e:	4621      	mov	r1, r4
 8023f60:	b991      	cbnz	r1, 8023f88 <_malloc_r+0x54>
 8023f62:	4c20      	ldr	r4, [pc, #128]	; (8023fe4 <_malloc_r+0xb0>)
 8023f64:	6823      	ldr	r3, [r4, #0]
 8023f66:	b91b      	cbnz	r3, 8023f70 <_malloc_r+0x3c>
 8023f68:	4630      	mov	r0, r6
 8023f6a:	f000 f889 	bl	8024080 <_sbrk_r>
 8023f6e:	6020      	str	r0, [r4, #0]
 8023f70:	4629      	mov	r1, r5
 8023f72:	4630      	mov	r0, r6
 8023f74:	f000 f884 	bl	8024080 <_sbrk_r>
 8023f78:	1c43      	adds	r3, r0, #1
 8023f7a:	d124      	bne.n	8023fc6 <_malloc_r+0x92>
 8023f7c:	230c      	movs	r3, #12
 8023f7e:	6033      	str	r3, [r6, #0]
 8023f80:	4630      	mov	r0, r6
 8023f82:	f000 fb3e 	bl	8024602 <__malloc_unlock>
 8023f86:	e7e4      	b.n	8023f52 <_malloc_r+0x1e>
 8023f88:	680b      	ldr	r3, [r1, #0]
 8023f8a:	1b5b      	subs	r3, r3, r5
 8023f8c:	d418      	bmi.n	8023fc0 <_malloc_r+0x8c>
 8023f8e:	2b0b      	cmp	r3, #11
 8023f90:	d90f      	bls.n	8023fb2 <_malloc_r+0x7e>
 8023f92:	600b      	str	r3, [r1, #0]
 8023f94:	50cd      	str	r5, [r1, r3]
 8023f96:	18cc      	adds	r4, r1, r3
 8023f98:	4630      	mov	r0, r6
 8023f9a:	f000 fb32 	bl	8024602 <__malloc_unlock>
 8023f9e:	f104 000b 	add.w	r0, r4, #11
 8023fa2:	1d23      	adds	r3, r4, #4
 8023fa4:	f020 0007 	bic.w	r0, r0, #7
 8023fa8:	1ac3      	subs	r3, r0, r3
 8023faa:	d0d3      	beq.n	8023f54 <_malloc_r+0x20>
 8023fac:	425a      	negs	r2, r3
 8023fae:	50e2      	str	r2, [r4, r3]
 8023fb0:	e7d0      	b.n	8023f54 <_malloc_r+0x20>
 8023fb2:	428c      	cmp	r4, r1
 8023fb4:	684b      	ldr	r3, [r1, #4]
 8023fb6:	bf16      	itet	ne
 8023fb8:	6063      	strne	r3, [r4, #4]
 8023fba:	6013      	streq	r3, [r2, #0]
 8023fbc:	460c      	movne	r4, r1
 8023fbe:	e7eb      	b.n	8023f98 <_malloc_r+0x64>
 8023fc0:	460c      	mov	r4, r1
 8023fc2:	6849      	ldr	r1, [r1, #4]
 8023fc4:	e7cc      	b.n	8023f60 <_malloc_r+0x2c>
 8023fc6:	1cc4      	adds	r4, r0, #3
 8023fc8:	f024 0403 	bic.w	r4, r4, #3
 8023fcc:	42a0      	cmp	r0, r4
 8023fce:	d005      	beq.n	8023fdc <_malloc_r+0xa8>
 8023fd0:	1a21      	subs	r1, r4, r0
 8023fd2:	4630      	mov	r0, r6
 8023fd4:	f000 f854 	bl	8024080 <_sbrk_r>
 8023fd8:	3001      	adds	r0, #1
 8023fda:	d0cf      	beq.n	8023f7c <_malloc_r+0x48>
 8023fdc:	6025      	str	r5, [r4, #0]
 8023fde:	e7db      	b.n	8023f98 <_malloc_r+0x64>
 8023fe0:	20008ab8 	.word	0x20008ab8
 8023fe4:	20008abc 	.word	0x20008abc

08023fe8 <iprintf>:
 8023fe8:	b40f      	push	{r0, r1, r2, r3}
 8023fea:	4b0a      	ldr	r3, [pc, #40]	; (8024014 <iprintf+0x2c>)
 8023fec:	b513      	push	{r0, r1, r4, lr}
 8023fee:	681c      	ldr	r4, [r3, #0]
 8023ff0:	b124      	cbz	r4, 8023ffc <iprintf+0x14>
 8023ff2:	69a3      	ldr	r3, [r4, #24]
 8023ff4:	b913      	cbnz	r3, 8023ffc <iprintf+0x14>
 8023ff6:	4620      	mov	r0, r4
 8023ff8:	f000 fa14 	bl	8024424 <__sinit>
 8023ffc:	ab05      	add	r3, sp, #20
 8023ffe:	9a04      	ldr	r2, [sp, #16]
 8024000:	68a1      	ldr	r1, [r4, #8]
 8024002:	9301      	str	r3, [sp, #4]
 8024004:	4620      	mov	r0, r4
 8024006:	f000 fb27 	bl	8024658 <_vfiprintf_r>
 802400a:	b002      	add	sp, #8
 802400c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024010:	b004      	add	sp, #16
 8024012:	4770      	bx	lr
 8024014:	20000044 	.word	0x20000044

08024018 <rand>:
 8024018:	b538      	push	{r3, r4, r5, lr}
 802401a:	4b13      	ldr	r3, [pc, #76]	; (8024068 <rand+0x50>)
 802401c:	681c      	ldr	r4, [r3, #0]
 802401e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024020:	b97b      	cbnz	r3, 8024042 <rand+0x2a>
 8024022:	2018      	movs	r0, #24
 8024024:	f7ff ff06 	bl	8023e34 <malloc>
 8024028:	4a10      	ldr	r2, [pc, #64]	; (802406c <rand+0x54>)
 802402a:	4b11      	ldr	r3, [pc, #68]	; (8024070 <rand+0x58>)
 802402c:	63a0      	str	r0, [r4, #56]	; 0x38
 802402e:	e9c0 2300 	strd	r2, r3, [r0]
 8024032:	4b10      	ldr	r3, [pc, #64]	; (8024074 <rand+0x5c>)
 8024034:	6083      	str	r3, [r0, #8]
 8024036:	230b      	movs	r3, #11
 8024038:	8183      	strh	r3, [r0, #12]
 802403a:	2201      	movs	r2, #1
 802403c:	2300      	movs	r3, #0
 802403e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8024042:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8024044:	480c      	ldr	r0, [pc, #48]	; (8024078 <rand+0x60>)
 8024046:	690a      	ldr	r2, [r1, #16]
 8024048:	694b      	ldr	r3, [r1, #20]
 802404a:	4c0c      	ldr	r4, [pc, #48]	; (802407c <rand+0x64>)
 802404c:	4350      	muls	r0, r2
 802404e:	fb04 0003 	mla	r0, r4, r3, r0
 8024052:	fba2 2304 	umull	r2, r3, r2, r4
 8024056:	4403      	add	r3, r0
 8024058:	1c54      	adds	r4, r2, #1
 802405a:	f143 0500 	adc.w	r5, r3, #0
 802405e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8024062:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8024066:	bd38      	pop	{r3, r4, r5, pc}
 8024068:	20000044 	.word	0x20000044
 802406c:	abcd330e 	.word	0xabcd330e
 8024070:	e66d1234 	.word	0xe66d1234
 8024074:	0005deec 	.word	0x0005deec
 8024078:	5851f42d 	.word	0x5851f42d
 802407c:	4c957f2d 	.word	0x4c957f2d

08024080 <_sbrk_r>:
 8024080:	b538      	push	{r3, r4, r5, lr}
 8024082:	4c06      	ldr	r4, [pc, #24]	; (802409c <_sbrk_r+0x1c>)
 8024084:	2300      	movs	r3, #0
 8024086:	4605      	mov	r5, r0
 8024088:	4608      	mov	r0, r1
 802408a:	6023      	str	r3, [r4, #0]
 802408c:	f7df fbf8 	bl	8003880 <_sbrk>
 8024090:	1c43      	adds	r3, r0, #1
 8024092:	d102      	bne.n	802409a <_sbrk_r+0x1a>
 8024094:	6823      	ldr	r3, [r4, #0]
 8024096:	b103      	cbz	r3, 802409a <_sbrk_r+0x1a>
 8024098:	602b      	str	r3, [r5, #0]
 802409a:	bd38      	pop	{r3, r4, r5, pc}
 802409c:	20011810 	.word	0x20011810

080240a0 <strncmp>:
 80240a0:	b510      	push	{r4, lr}
 80240a2:	b16a      	cbz	r2, 80240c0 <strncmp+0x20>
 80240a4:	3901      	subs	r1, #1
 80240a6:	1884      	adds	r4, r0, r2
 80240a8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80240ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80240b0:	4293      	cmp	r3, r2
 80240b2:	d103      	bne.n	80240bc <strncmp+0x1c>
 80240b4:	42a0      	cmp	r0, r4
 80240b6:	d001      	beq.n	80240bc <strncmp+0x1c>
 80240b8:	2b00      	cmp	r3, #0
 80240ba:	d1f5      	bne.n	80240a8 <strncmp+0x8>
 80240bc:	1a98      	subs	r0, r3, r2
 80240be:	bd10      	pop	{r4, pc}
 80240c0:	4610      	mov	r0, r2
 80240c2:	e7fc      	b.n	80240be <strncmp+0x1e>

080240c4 <__swbuf_r>:
 80240c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80240c6:	460e      	mov	r6, r1
 80240c8:	4614      	mov	r4, r2
 80240ca:	4605      	mov	r5, r0
 80240cc:	b118      	cbz	r0, 80240d6 <__swbuf_r+0x12>
 80240ce:	6983      	ldr	r3, [r0, #24]
 80240d0:	b90b      	cbnz	r3, 80240d6 <__swbuf_r+0x12>
 80240d2:	f000 f9a7 	bl	8024424 <__sinit>
 80240d6:	4b21      	ldr	r3, [pc, #132]	; (802415c <__swbuf_r+0x98>)
 80240d8:	429c      	cmp	r4, r3
 80240da:	d12a      	bne.n	8024132 <__swbuf_r+0x6e>
 80240dc:	686c      	ldr	r4, [r5, #4]
 80240de:	69a3      	ldr	r3, [r4, #24]
 80240e0:	60a3      	str	r3, [r4, #8]
 80240e2:	89a3      	ldrh	r3, [r4, #12]
 80240e4:	071a      	lsls	r2, r3, #28
 80240e6:	d52e      	bpl.n	8024146 <__swbuf_r+0x82>
 80240e8:	6923      	ldr	r3, [r4, #16]
 80240ea:	b363      	cbz	r3, 8024146 <__swbuf_r+0x82>
 80240ec:	6923      	ldr	r3, [r4, #16]
 80240ee:	6820      	ldr	r0, [r4, #0]
 80240f0:	1ac0      	subs	r0, r0, r3
 80240f2:	6963      	ldr	r3, [r4, #20]
 80240f4:	b2f6      	uxtb	r6, r6
 80240f6:	4283      	cmp	r3, r0
 80240f8:	4637      	mov	r7, r6
 80240fa:	dc04      	bgt.n	8024106 <__swbuf_r+0x42>
 80240fc:	4621      	mov	r1, r4
 80240fe:	4628      	mov	r0, r5
 8024100:	f000 f926 	bl	8024350 <_fflush_r>
 8024104:	bb28      	cbnz	r0, 8024152 <__swbuf_r+0x8e>
 8024106:	68a3      	ldr	r3, [r4, #8]
 8024108:	3b01      	subs	r3, #1
 802410a:	60a3      	str	r3, [r4, #8]
 802410c:	6823      	ldr	r3, [r4, #0]
 802410e:	1c5a      	adds	r2, r3, #1
 8024110:	6022      	str	r2, [r4, #0]
 8024112:	701e      	strb	r6, [r3, #0]
 8024114:	6963      	ldr	r3, [r4, #20]
 8024116:	3001      	adds	r0, #1
 8024118:	4283      	cmp	r3, r0
 802411a:	d004      	beq.n	8024126 <__swbuf_r+0x62>
 802411c:	89a3      	ldrh	r3, [r4, #12]
 802411e:	07db      	lsls	r3, r3, #31
 8024120:	d519      	bpl.n	8024156 <__swbuf_r+0x92>
 8024122:	2e0a      	cmp	r6, #10
 8024124:	d117      	bne.n	8024156 <__swbuf_r+0x92>
 8024126:	4621      	mov	r1, r4
 8024128:	4628      	mov	r0, r5
 802412a:	f000 f911 	bl	8024350 <_fflush_r>
 802412e:	b190      	cbz	r0, 8024156 <__swbuf_r+0x92>
 8024130:	e00f      	b.n	8024152 <__swbuf_r+0x8e>
 8024132:	4b0b      	ldr	r3, [pc, #44]	; (8024160 <__swbuf_r+0x9c>)
 8024134:	429c      	cmp	r4, r3
 8024136:	d101      	bne.n	802413c <__swbuf_r+0x78>
 8024138:	68ac      	ldr	r4, [r5, #8]
 802413a:	e7d0      	b.n	80240de <__swbuf_r+0x1a>
 802413c:	4b09      	ldr	r3, [pc, #36]	; (8024164 <__swbuf_r+0xa0>)
 802413e:	429c      	cmp	r4, r3
 8024140:	bf08      	it	eq
 8024142:	68ec      	ldreq	r4, [r5, #12]
 8024144:	e7cb      	b.n	80240de <__swbuf_r+0x1a>
 8024146:	4621      	mov	r1, r4
 8024148:	4628      	mov	r0, r5
 802414a:	f000 f80d 	bl	8024168 <__swsetup_r>
 802414e:	2800      	cmp	r0, #0
 8024150:	d0cc      	beq.n	80240ec <__swbuf_r+0x28>
 8024152:	f04f 37ff 	mov.w	r7, #4294967295
 8024156:	4638      	mov	r0, r7
 8024158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802415a:	bf00      	nop
 802415c:	08028b94 	.word	0x08028b94
 8024160:	08028bb4 	.word	0x08028bb4
 8024164:	08028b74 	.word	0x08028b74

08024168 <__swsetup_r>:
 8024168:	4b32      	ldr	r3, [pc, #200]	; (8024234 <__swsetup_r+0xcc>)
 802416a:	b570      	push	{r4, r5, r6, lr}
 802416c:	681d      	ldr	r5, [r3, #0]
 802416e:	4606      	mov	r6, r0
 8024170:	460c      	mov	r4, r1
 8024172:	b125      	cbz	r5, 802417e <__swsetup_r+0x16>
 8024174:	69ab      	ldr	r3, [r5, #24]
 8024176:	b913      	cbnz	r3, 802417e <__swsetup_r+0x16>
 8024178:	4628      	mov	r0, r5
 802417a:	f000 f953 	bl	8024424 <__sinit>
 802417e:	4b2e      	ldr	r3, [pc, #184]	; (8024238 <__swsetup_r+0xd0>)
 8024180:	429c      	cmp	r4, r3
 8024182:	d10f      	bne.n	80241a4 <__swsetup_r+0x3c>
 8024184:	686c      	ldr	r4, [r5, #4]
 8024186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802418a:	b29a      	uxth	r2, r3
 802418c:	0715      	lsls	r5, r2, #28
 802418e:	d42c      	bmi.n	80241ea <__swsetup_r+0x82>
 8024190:	06d0      	lsls	r0, r2, #27
 8024192:	d411      	bmi.n	80241b8 <__swsetup_r+0x50>
 8024194:	2209      	movs	r2, #9
 8024196:	6032      	str	r2, [r6, #0]
 8024198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802419c:	81a3      	strh	r3, [r4, #12]
 802419e:	f04f 30ff 	mov.w	r0, #4294967295
 80241a2:	e03e      	b.n	8024222 <__swsetup_r+0xba>
 80241a4:	4b25      	ldr	r3, [pc, #148]	; (802423c <__swsetup_r+0xd4>)
 80241a6:	429c      	cmp	r4, r3
 80241a8:	d101      	bne.n	80241ae <__swsetup_r+0x46>
 80241aa:	68ac      	ldr	r4, [r5, #8]
 80241ac:	e7eb      	b.n	8024186 <__swsetup_r+0x1e>
 80241ae:	4b24      	ldr	r3, [pc, #144]	; (8024240 <__swsetup_r+0xd8>)
 80241b0:	429c      	cmp	r4, r3
 80241b2:	bf08      	it	eq
 80241b4:	68ec      	ldreq	r4, [r5, #12]
 80241b6:	e7e6      	b.n	8024186 <__swsetup_r+0x1e>
 80241b8:	0751      	lsls	r1, r2, #29
 80241ba:	d512      	bpl.n	80241e2 <__swsetup_r+0x7a>
 80241bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80241be:	b141      	cbz	r1, 80241d2 <__swsetup_r+0x6a>
 80241c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80241c4:	4299      	cmp	r1, r3
 80241c6:	d002      	beq.n	80241ce <__swsetup_r+0x66>
 80241c8:	4630      	mov	r0, r6
 80241ca:	f7ff fe65 	bl	8023e98 <_free_r>
 80241ce:	2300      	movs	r3, #0
 80241d0:	6363      	str	r3, [r4, #52]	; 0x34
 80241d2:	89a3      	ldrh	r3, [r4, #12]
 80241d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80241d8:	81a3      	strh	r3, [r4, #12]
 80241da:	2300      	movs	r3, #0
 80241dc:	6063      	str	r3, [r4, #4]
 80241de:	6923      	ldr	r3, [r4, #16]
 80241e0:	6023      	str	r3, [r4, #0]
 80241e2:	89a3      	ldrh	r3, [r4, #12]
 80241e4:	f043 0308 	orr.w	r3, r3, #8
 80241e8:	81a3      	strh	r3, [r4, #12]
 80241ea:	6923      	ldr	r3, [r4, #16]
 80241ec:	b94b      	cbnz	r3, 8024202 <__swsetup_r+0x9a>
 80241ee:	89a3      	ldrh	r3, [r4, #12]
 80241f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80241f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80241f8:	d003      	beq.n	8024202 <__swsetup_r+0x9a>
 80241fa:	4621      	mov	r1, r4
 80241fc:	4630      	mov	r0, r6
 80241fe:	f000 f9bf 	bl	8024580 <__smakebuf_r>
 8024202:	89a2      	ldrh	r2, [r4, #12]
 8024204:	f012 0301 	ands.w	r3, r2, #1
 8024208:	d00c      	beq.n	8024224 <__swsetup_r+0xbc>
 802420a:	2300      	movs	r3, #0
 802420c:	60a3      	str	r3, [r4, #8]
 802420e:	6963      	ldr	r3, [r4, #20]
 8024210:	425b      	negs	r3, r3
 8024212:	61a3      	str	r3, [r4, #24]
 8024214:	6923      	ldr	r3, [r4, #16]
 8024216:	b953      	cbnz	r3, 802422e <__swsetup_r+0xc6>
 8024218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802421c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8024220:	d1ba      	bne.n	8024198 <__swsetup_r+0x30>
 8024222:	bd70      	pop	{r4, r5, r6, pc}
 8024224:	0792      	lsls	r2, r2, #30
 8024226:	bf58      	it	pl
 8024228:	6963      	ldrpl	r3, [r4, #20]
 802422a:	60a3      	str	r3, [r4, #8]
 802422c:	e7f2      	b.n	8024214 <__swsetup_r+0xac>
 802422e:	2000      	movs	r0, #0
 8024230:	e7f7      	b.n	8024222 <__swsetup_r+0xba>
 8024232:	bf00      	nop
 8024234:	20000044 	.word	0x20000044
 8024238:	08028b94 	.word	0x08028b94
 802423c:	08028bb4 	.word	0x08028bb4
 8024240:	08028b74 	.word	0x08028b74

08024244 <__sflush_r>:
 8024244:	898a      	ldrh	r2, [r1, #12]
 8024246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802424a:	4605      	mov	r5, r0
 802424c:	0710      	lsls	r0, r2, #28
 802424e:	460c      	mov	r4, r1
 8024250:	d458      	bmi.n	8024304 <__sflush_r+0xc0>
 8024252:	684b      	ldr	r3, [r1, #4]
 8024254:	2b00      	cmp	r3, #0
 8024256:	dc05      	bgt.n	8024264 <__sflush_r+0x20>
 8024258:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802425a:	2b00      	cmp	r3, #0
 802425c:	dc02      	bgt.n	8024264 <__sflush_r+0x20>
 802425e:	2000      	movs	r0, #0
 8024260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024266:	2e00      	cmp	r6, #0
 8024268:	d0f9      	beq.n	802425e <__sflush_r+0x1a>
 802426a:	2300      	movs	r3, #0
 802426c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8024270:	682f      	ldr	r7, [r5, #0]
 8024272:	6a21      	ldr	r1, [r4, #32]
 8024274:	602b      	str	r3, [r5, #0]
 8024276:	d032      	beq.n	80242de <__sflush_r+0x9a>
 8024278:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802427a:	89a3      	ldrh	r3, [r4, #12]
 802427c:	075a      	lsls	r2, r3, #29
 802427e:	d505      	bpl.n	802428c <__sflush_r+0x48>
 8024280:	6863      	ldr	r3, [r4, #4]
 8024282:	1ac0      	subs	r0, r0, r3
 8024284:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8024286:	b10b      	cbz	r3, 802428c <__sflush_r+0x48>
 8024288:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802428a:	1ac0      	subs	r0, r0, r3
 802428c:	2300      	movs	r3, #0
 802428e:	4602      	mov	r2, r0
 8024290:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024292:	6a21      	ldr	r1, [r4, #32]
 8024294:	4628      	mov	r0, r5
 8024296:	47b0      	blx	r6
 8024298:	1c43      	adds	r3, r0, #1
 802429a:	89a3      	ldrh	r3, [r4, #12]
 802429c:	d106      	bne.n	80242ac <__sflush_r+0x68>
 802429e:	6829      	ldr	r1, [r5, #0]
 80242a0:	291d      	cmp	r1, #29
 80242a2:	d848      	bhi.n	8024336 <__sflush_r+0xf2>
 80242a4:	4a29      	ldr	r2, [pc, #164]	; (802434c <__sflush_r+0x108>)
 80242a6:	40ca      	lsrs	r2, r1
 80242a8:	07d6      	lsls	r6, r2, #31
 80242aa:	d544      	bpl.n	8024336 <__sflush_r+0xf2>
 80242ac:	2200      	movs	r2, #0
 80242ae:	6062      	str	r2, [r4, #4]
 80242b0:	04d9      	lsls	r1, r3, #19
 80242b2:	6922      	ldr	r2, [r4, #16]
 80242b4:	6022      	str	r2, [r4, #0]
 80242b6:	d504      	bpl.n	80242c2 <__sflush_r+0x7e>
 80242b8:	1c42      	adds	r2, r0, #1
 80242ba:	d101      	bne.n	80242c0 <__sflush_r+0x7c>
 80242bc:	682b      	ldr	r3, [r5, #0]
 80242be:	b903      	cbnz	r3, 80242c2 <__sflush_r+0x7e>
 80242c0:	6560      	str	r0, [r4, #84]	; 0x54
 80242c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80242c4:	602f      	str	r7, [r5, #0]
 80242c6:	2900      	cmp	r1, #0
 80242c8:	d0c9      	beq.n	802425e <__sflush_r+0x1a>
 80242ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80242ce:	4299      	cmp	r1, r3
 80242d0:	d002      	beq.n	80242d8 <__sflush_r+0x94>
 80242d2:	4628      	mov	r0, r5
 80242d4:	f7ff fde0 	bl	8023e98 <_free_r>
 80242d8:	2000      	movs	r0, #0
 80242da:	6360      	str	r0, [r4, #52]	; 0x34
 80242dc:	e7c0      	b.n	8024260 <__sflush_r+0x1c>
 80242de:	2301      	movs	r3, #1
 80242e0:	4628      	mov	r0, r5
 80242e2:	47b0      	blx	r6
 80242e4:	1c41      	adds	r1, r0, #1
 80242e6:	d1c8      	bne.n	802427a <__sflush_r+0x36>
 80242e8:	682b      	ldr	r3, [r5, #0]
 80242ea:	2b00      	cmp	r3, #0
 80242ec:	d0c5      	beq.n	802427a <__sflush_r+0x36>
 80242ee:	2b1d      	cmp	r3, #29
 80242f0:	d001      	beq.n	80242f6 <__sflush_r+0xb2>
 80242f2:	2b16      	cmp	r3, #22
 80242f4:	d101      	bne.n	80242fa <__sflush_r+0xb6>
 80242f6:	602f      	str	r7, [r5, #0]
 80242f8:	e7b1      	b.n	802425e <__sflush_r+0x1a>
 80242fa:	89a3      	ldrh	r3, [r4, #12]
 80242fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024300:	81a3      	strh	r3, [r4, #12]
 8024302:	e7ad      	b.n	8024260 <__sflush_r+0x1c>
 8024304:	690f      	ldr	r7, [r1, #16]
 8024306:	2f00      	cmp	r7, #0
 8024308:	d0a9      	beq.n	802425e <__sflush_r+0x1a>
 802430a:	0793      	lsls	r3, r2, #30
 802430c:	680e      	ldr	r6, [r1, #0]
 802430e:	bf08      	it	eq
 8024310:	694b      	ldreq	r3, [r1, #20]
 8024312:	600f      	str	r7, [r1, #0]
 8024314:	bf18      	it	ne
 8024316:	2300      	movne	r3, #0
 8024318:	eba6 0807 	sub.w	r8, r6, r7
 802431c:	608b      	str	r3, [r1, #8]
 802431e:	f1b8 0f00 	cmp.w	r8, #0
 8024322:	dd9c      	ble.n	802425e <__sflush_r+0x1a>
 8024324:	4643      	mov	r3, r8
 8024326:	463a      	mov	r2, r7
 8024328:	6a21      	ldr	r1, [r4, #32]
 802432a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802432c:	4628      	mov	r0, r5
 802432e:	47b0      	blx	r6
 8024330:	2800      	cmp	r0, #0
 8024332:	dc06      	bgt.n	8024342 <__sflush_r+0xfe>
 8024334:	89a3      	ldrh	r3, [r4, #12]
 8024336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802433a:	81a3      	strh	r3, [r4, #12]
 802433c:	f04f 30ff 	mov.w	r0, #4294967295
 8024340:	e78e      	b.n	8024260 <__sflush_r+0x1c>
 8024342:	4407      	add	r7, r0
 8024344:	eba8 0800 	sub.w	r8, r8, r0
 8024348:	e7e9      	b.n	802431e <__sflush_r+0xda>
 802434a:	bf00      	nop
 802434c:	20400001 	.word	0x20400001

08024350 <_fflush_r>:
 8024350:	b538      	push	{r3, r4, r5, lr}
 8024352:	690b      	ldr	r3, [r1, #16]
 8024354:	4605      	mov	r5, r0
 8024356:	460c      	mov	r4, r1
 8024358:	b1db      	cbz	r3, 8024392 <_fflush_r+0x42>
 802435a:	b118      	cbz	r0, 8024364 <_fflush_r+0x14>
 802435c:	6983      	ldr	r3, [r0, #24]
 802435e:	b90b      	cbnz	r3, 8024364 <_fflush_r+0x14>
 8024360:	f000 f860 	bl	8024424 <__sinit>
 8024364:	4b0c      	ldr	r3, [pc, #48]	; (8024398 <_fflush_r+0x48>)
 8024366:	429c      	cmp	r4, r3
 8024368:	d109      	bne.n	802437e <_fflush_r+0x2e>
 802436a:	686c      	ldr	r4, [r5, #4]
 802436c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024370:	b17b      	cbz	r3, 8024392 <_fflush_r+0x42>
 8024372:	4621      	mov	r1, r4
 8024374:	4628      	mov	r0, r5
 8024376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802437a:	f7ff bf63 	b.w	8024244 <__sflush_r>
 802437e:	4b07      	ldr	r3, [pc, #28]	; (802439c <_fflush_r+0x4c>)
 8024380:	429c      	cmp	r4, r3
 8024382:	d101      	bne.n	8024388 <_fflush_r+0x38>
 8024384:	68ac      	ldr	r4, [r5, #8]
 8024386:	e7f1      	b.n	802436c <_fflush_r+0x1c>
 8024388:	4b05      	ldr	r3, [pc, #20]	; (80243a0 <_fflush_r+0x50>)
 802438a:	429c      	cmp	r4, r3
 802438c:	bf08      	it	eq
 802438e:	68ec      	ldreq	r4, [r5, #12]
 8024390:	e7ec      	b.n	802436c <_fflush_r+0x1c>
 8024392:	2000      	movs	r0, #0
 8024394:	bd38      	pop	{r3, r4, r5, pc}
 8024396:	bf00      	nop
 8024398:	08028b94 	.word	0x08028b94
 802439c:	08028bb4 	.word	0x08028bb4
 80243a0:	08028b74 	.word	0x08028b74

080243a4 <std>:
 80243a4:	2300      	movs	r3, #0
 80243a6:	b510      	push	{r4, lr}
 80243a8:	4604      	mov	r4, r0
 80243aa:	e9c0 3300 	strd	r3, r3, [r0]
 80243ae:	6083      	str	r3, [r0, #8]
 80243b0:	8181      	strh	r1, [r0, #12]
 80243b2:	6643      	str	r3, [r0, #100]	; 0x64
 80243b4:	81c2      	strh	r2, [r0, #14]
 80243b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80243ba:	6183      	str	r3, [r0, #24]
 80243bc:	4619      	mov	r1, r3
 80243be:	2208      	movs	r2, #8
 80243c0:	305c      	adds	r0, #92	; 0x5c
 80243c2:	f7ff fd61 	bl	8023e88 <memset>
 80243c6:	4b05      	ldr	r3, [pc, #20]	; (80243dc <std+0x38>)
 80243c8:	6263      	str	r3, [r4, #36]	; 0x24
 80243ca:	4b05      	ldr	r3, [pc, #20]	; (80243e0 <std+0x3c>)
 80243cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80243ce:	4b05      	ldr	r3, [pc, #20]	; (80243e4 <std+0x40>)
 80243d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80243d2:	4b05      	ldr	r3, [pc, #20]	; (80243e8 <std+0x44>)
 80243d4:	6224      	str	r4, [r4, #32]
 80243d6:	6323      	str	r3, [r4, #48]	; 0x30
 80243d8:	bd10      	pop	{r4, pc}
 80243da:	bf00      	nop
 80243dc:	08024b95 	.word	0x08024b95
 80243e0:	08024bb7 	.word	0x08024bb7
 80243e4:	08024bef 	.word	0x08024bef
 80243e8:	08024c13 	.word	0x08024c13

080243ec <_cleanup_r>:
 80243ec:	4901      	ldr	r1, [pc, #4]	; (80243f4 <_cleanup_r+0x8>)
 80243ee:	f000 b885 	b.w	80244fc <_fwalk_reent>
 80243f2:	bf00      	nop
 80243f4:	08024351 	.word	0x08024351

080243f8 <__sfmoreglue>:
 80243f8:	b570      	push	{r4, r5, r6, lr}
 80243fa:	1e4a      	subs	r2, r1, #1
 80243fc:	2568      	movs	r5, #104	; 0x68
 80243fe:	4355      	muls	r5, r2
 8024400:	460e      	mov	r6, r1
 8024402:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8024406:	f7ff fd95 	bl	8023f34 <_malloc_r>
 802440a:	4604      	mov	r4, r0
 802440c:	b140      	cbz	r0, 8024420 <__sfmoreglue+0x28>
 802440e:	2100      	movs	r1, #0
 8024410:	e9c0 1600 	strd	r1, r6, [r0]
 8024414:	300c      	adds	r0, #12
 8024416:	60a0      	str	r0, [r4, #8]
 8024418:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802441c:	f7ff fd34 	bl	8023e88 <memset>
 8024420:	4620      	mov	r0, r4
 8024422:	bd70      	pop	{r4, r5, r6, pc}

08024424 <__sinit>:
 8024424:	6983      	ldr	r3, [r0, #24]
 8024426:	b510      	push	{r4, lr}
 8024428:	4604      	mov	r4, r0
 802442a:	bb33      	cbnz	r3, 802447a <__sinit+0x56>
 802442c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8024430:	6503      	str	r3, [r0, #80]	; 0x50
 8024432:	4b12      	ldr	r3, [pc, #72]	; (802447c <__sinit+0x58>)
 8024434:	4a12      	ldr	r2, [pc, #72]	; (8024480 <__sinit+0x5c>)
 8024436:	681b      	ldr	r3, [r3, #0]
 8024438:	6282      	str	r2, [r0, #40]	; 0x28
 802443a:	4298      	cmp	r0, r3
 802443c:	bf04      	itt	eq
 802443e:	2301      	moveq	r3, #1
 8024440:	6183      	streq	r3, [r0, #24]
 8024442:	f000 f81f 	bl	8024484 <__sfp>
 8024446:	6060      	str	r0, [r4, #4]
 8024448:	4620      	mov	r0, r4
 802444a:	f000 f81b 	bl	8024484 <__sfp>
 802444e:	60a0      	str	r0, [r4, #8]
 8024450:	4620      	mov	r0, r4
 8024452:	f000 f817 	bl	8024484 <__sfp>
 8024456:	2200      	movs	r2, #0
 8024458:	60e0      	str	r0, [r4, #12]
 802445a:	2104      	movs	r1, #4
 802445c:	6860      	ldr	r0, [r4, #4]
 802445e:	f7ff ffa1 	bl	80243a4 <std>
 8024462:	2201      	movs	r2, #1
 8024464:	2109      	movs	r1, #9
 8024466:	68a0      	ldr	r0, [r4, #8]
 8024468:	f7ff ff9c 	bl	80243a4 <std>
 802446c:	2202      	movs	r2, #2
 802446e:	2112      	movs	r1, #18
 8024470:	68e0      	ldr	r0, [r4, #12]
 8024472:	f7ff ff97 	bl	80243a4 <std>
 8024476:	2301      	movs	r3, #1
 8024478:	61a3      	str	r3, [r4, #24]
 802447a:	bd10      	pop	{r4, pc}
 802447c:	08028b70 	.word	0x08028b70
 8024480:	080243ed 	.word	0x080243ed

08024484 <__sfp>:
 8024484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024486:	4b1b      	ldr	r3, [pc, #108]	; (80244f4 <__sfp+0x70>)
 8024488:	681e      	ldr	r6, [r3, #0]
 802448a:	69b3      	ldr	r3, [r6, #24]
 802448c:	4607      	mov	r7, r0
 802448e:	b913      	cbnz	r3, 8024496 <__sfp+0x12>
 8024490:	4630      	mov	r0, r6
 8024492:	f7ff ffc7 	bl	8024424 <__sinit>
 8024496:	3648      	adds	r6, #72	; 0x48
 8024498:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802449c:	3b01      	subs	r3, #1
 802449e:	d503      	bpl.n	80244a8 <__sfp+0x24>
 80244a0:	6833      	ldr	r3, [r6, #0]
 80244a2:	b133      	cbz	r3, 80244b2 <__sfp+0x2e>
 80244a4:	6836      	ldr	r6, [r6, #0]
 80244a6:	e7f7      	b.n	8024498 <__sfp+0x14>
 80244a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80244ac:	b16d      	cbz	r5, 80244ca <__sfp+0x46>
 80244ae:	3468      	adds	r4, #104	; 0x68
 80244b0:	e7f4      	b.n	802449c <__sfp+0x18>
 80244b2:	2104      	movs	r1, #4
 80244b4:	4638      	mov	r0, r7
 80244b6:	f7ff ff9f 	bl	80243f8 <__sfmoreglue>
 80244ba:	6030      	str	r0, [r6, #0]
 80244bc:	2800      	cmp	r0, #0
 80244be:	d1f1      	bne.n	80244a4 <__sfp+0x20>
 80244c0:	230c      	movs	r3, #12
 80244c2:	603b      	str	r3, [r7, #0]
 80244c4:	4604      	mov	r4, r0
 80244c6:	4620      	mov	r0, r4
 80244c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80244ca:	4b0b      	ldr	r3, [pc, #44]	; (80244f8 <__sfp+0x74>)
 80244cc:	6665      	str	r5, [r4, #100]	; 0x64
 80244ce:	e9c4 5500 	strd	r5, r5, [r4]
 80244d2:	60a5      	str	r5, [r4, #8]
 80244d4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80244d8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80244dc:	2208      	movs	r2, #8
 80244de:	4629      	mov	r1, r5
 80244e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80244e4:	f7ff fcd0 	bl	8023e88 <memset>
 80244e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80244ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80244f0:	e7e9      	b.n	80244c6 <__sfp+0x42>
 80244f2:	bf00      	nop
 80244f4:	08028b70 	.word	0x08028b70
 80244f8:	ffff0001 	.word	0xffff0001

080244fc <_fwalk_reent>:
 80244fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024500:	4680      	mov	r8, r0
 8024502:	4689      	mov	r9, r1
 8024504:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8024508:	2600      	movs	r6, #0
 802450a:	b914      	cbnz	r4, 8024512 <_fwalk_reent+0x16>
 802450c:	4630      	mov	r0, r6
 802450e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024512:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8024516:	3f01      	subs	r7, #1
 8024518:	d501      	bpl.n	802451e <_fwalk_reent+0x22>
 802451a:	6824      	ldr	r4, [r4, #0]
 802451c:	e7f5      	b.n	802450a <_fwalk_reent+0xe>
 802451e:	89ab      	ldrh	r3, [r5, #12]
 8024520:	2b01      	cmp	r3, #1
 8024522:	d907      	bls.n	8024534 <_fwalk_reent+0x38>
 8024524:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8024528:	3301      	adds	r3, #1
 802452a:	d003      	beq.n	8024534 <_fwalk_reent+0x38>
 802452c:	4629      	mov	r1, r5
 802452e:	4640      	mov	r0, r8
 8024530:	47c8      	blx	r9
 8024532:	4306      	orrs	r6, r0
 8024534:	3568      	adds	r5, #104	; 0x68
 8024536:	e7ee      	b.n	8024516 <_fwalk_reent+0x1a>

08024538 <__swhatbuf_r>:
 8024538:	b570      	push	{r4, r5, r6, lr}
 802453a:	460e      	mov	r6, r1
 802453c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024540:	2900      	cmp	r1, #0
 8024542:	b096      	sub	sp, #88	; 0x58
 8024544:	4614      	mov	r4, r2
 8024546:	461d      	mov	r5, r3
 8024548:	da07      	bge.n	802455a <__swhatbuf_r+0x22>
 802454a:	2300      	movs	r3, #0
 802454c:	602b      	str	r3, [r5, #0]
 802454e:	89b3      	ldrh	r3, [r6, #12]
 8024550:	061a      	lsls	r2, r3, #24
 8024552:	d410      	bmi.n	8024576 <__swhatbuf_r+0x3e>
 8024554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024558:	e00e      	b.n	8024578 <__swhatbuf_r+0x40>
 802455a:	466a      	mov	r2, sp
 802455c:	f000 fb80 	bl	8024c60 <_fstat_r>
 8024560:	2800      	cmp	r0, #0
 8024562:	dbf2      	blt.n	802454a <__swhatbuf_r+0x12>
 8024564:	9a01      	ldr	r2, [sp, #4]
 8024566:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802456a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802456e:	425a      	negs	r2, r3
 8024570:	415a      	adcs	r2, r3
 8024572:	602a      	str	r2, [r5, #0]
 8024574:	e7ee      	b.n	8024554 <__swhatbuf_r+0x1c>
 8024576:	2340      	movs	r3, #64	; 0x40
 8024578:	2000      	movs	r0, #0
 802457a:	6023      	str	r3, [r4, #0]
 802457c:	b016      	add	sp, #88	; 0x58
 802457e:	bd70      	pop	{r4, r5, r6, pc}

08024580 <__smakebuf_r>:
 8024580:	898b      	ldrh	r3, [r1, #12]
 8024582:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024584:	079d      	lsls	r5, r3, #30
 8024586:	4606      	mov	r6, r0
 8024588:	460c      	mov	r4, r1
 802458a:	d507      	bpl.n	802459c <__smakebuf_r+0x1c>
 802458c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8024590:	6023      	str	r3, [r4, #0]
 8024592:	6123      	str	r3, [r4, #16]
 8024594:	2301      	movs	r3, #1
 8024596:	6163      	str	r3, [r4, #20]
 8024598:	b002      	add	sp, #8
 802459a:	bd70      	pop	{r4, r5, r6, pc}
 802459c:	ab01      	add	r3, sp, #4
 802459e:	466a      	mov	r2, sp
 80245a0:	f7ff ffca 	bl	8024538 <__swhatbuf_r>
 80245a4:	9900      	ldr	r1, [sp, #0]
 80245a6:	4605      	mov	r5, r0
 80245a8:	4630      	mov	r0, r6
 80245aa:	f7ff fcc3 	bl	8023f34 <_malloc_r>
 80245ae:	b948      	cbnz	r0, 80245c4 <__smakebuf_r+0x44>
 80245b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80245b4:	059a      	lsls	r2, r3, #22
 80245b6:	d4ef      	bmi.n	8024598 <__smakebuf_r+0x18>
 80245b8:	f023 0303 	bic.w	r3, r3, #3
 80245bc:	f043 0302 	orr.w	r3, r3, #2
 80245c0:	81a3      	strh	r3, [r4, #12]
 80245c2:	e7e3      	b.n	802458c <__smakebuf_r+0xc>
 80245c4:	4b0d      	ldr	r3, [pc, #52]	; (80245fc <__smakebuf_r+0x7c>)
 80245c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80245c8:	89a3      	ldrh	r3, [r4, #12]
 80245ca:	6020      	str	r0, [r4, #0]
 80245cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80245d0:	81a3      	strh	r3, [r4, #12]
 80245d2:	9b00      	ldr	r3, [sp, #0]
 80245d4:	6163      	str	r3, [r4, #20]
 80245d6:	9b01      	ldr	r3, [sp, #4]
 80245d8:	6120      	str	r0, [r4, #16]
 80245da:	b15b      	cbz	r3, 80245f4 <__smakebuf_r+0x74>
 80245dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80245e0:	4630      	mov	r0, r6
 80245e2:	f000 fb4f 	bl	8024c84 <_isatty_r>
 80245e6:	b128      	cbz	r0, 80245f4 <__smakebuf_r+0x74>
 80245e8:	89a3      	ldrh	r3, [r4, #12]
 80245ea:	f023 0303 	bic.w	r3, r3, #3
 80245ee:	f043 0301 	orr.w	r3, r3, #1
 80245f2:	81a3      	strh	r3, [r4, #12]
 80245f4:	89a3      	ldrh	r3, [r4, #12]
 80245f6:	431d      	orrs	r5, r3
 80245f8:	81a5      	strh	r5, [r4, #12]
 80245fa:	e7cd      	b.n	8024598 <__smakebuf_r+0x18>
 80245fc:	080243ed 	.word	0x080243ed

08024600 <__malloc_lock>:
 8024600:	4770      	bx	lr

08024602 <__malloc_unlock>:
 8024602:	4770      	bx	lr

08024604 <__sfputc_r>:
 8024604:	6893      	ldr	r3, [r2, #8]
 8024606:	3b01      	subs	r3, #1
 8024608:	2b00      	cmp	r3, #0
 802460a:	b410      	push	{r4}
 802460c:	6093      	str	r3, [r2, #8]
 802460e:	da08      	bge.n	8024622 <__sfputc_r+0x1e>
 8024610:	6994      	ldr	r4, [r2, #24]
 8024612:	42a3      	cmp	r3, r4
 8024614:	db01      	blt.n	802461a <__sfputc_r+0x16>
 8024616:	290a      	cmp	r1, #10
 8024618:	d103      	bne.n	8024622 <__sfputc_r+0x1e>
 802461a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802461e:	f7ff bd51 	b.w	80240c4 <__swbuf_r>
 8024622:	6813      	ldr	r3, [r2, #0]
 8024624:	1c58      	adds	r0, r3, #1
 8024626:	6010      	str	r0, [r2, #0]
 8024628:	7019      	strb	r1, [r3, #0]
 802462a:	4608      	mov	r0, r1
 802462c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024630:	4770      	bx	lr

08024632 <__sfputs_r>:
 8024632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024634:	4606      	mov	r6, r0
 8024636:	460f      	mov	r7, r1
 8024638:	4614      	mov	r4, r2
 802463a:	18d5      	adds	r5, r2, r3
 802463c:	42ac      	cmp	r4, r5
 802463e:	d101      	bne.n	8024644 <__sfputs_r+0x12>
 8024640:	2000      	movs	r0, #0
 8024642:	e007      	b.n	8024654 <__sfputs_r+0x22>
 8024644:	463a      	mov	r2, r7
 8024646:	f814 1b01 	ldrb.w	r1, [r4], #1
 802464a:	4630      	mov	r0, r6
 802464c:	f7ff ffda 	bl	8024604 <__sfputc_r>
 8024650:	1c43      	adds	r3, r0, #1
 8024652:	d1f3      	bne.n	802463c <__sfputs_r+0xa>
 8024654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024658 <_vfiprintf_r>:
 8024658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802465c:	460c      	mov	r4, r1
 802465e:	b09d      	sub	sp, #116	; 0x74
 8024660:	4617      	mov	r7, r2
 8024662:	461d      	mov	r5, r3
 8024664:	4606      	mov	r6, r0
 8024666:	b118      	cbz	r0, 8024670 <_vfiprintf_r+0x18>
 8024668:	6983      	ldr	r3, [r0, #24]
 802466a:	b90b      	cbnz	r3, 8024670 <_vfiprintf_r+0x18>
 802466c:	f7ff feda 	bl	8024424 <__sinit>
 8024670:	4b7c      	ldr	r3, [pc, #496]	; (8024864 <_vfiprintf_r+0x20c>)
 8024672:	429c      	cmp	r4, r3
 8024674:	d158      	bne.n	8024728 <_vfiprintf_r+0xd0>
 8024676:	6874      	ldr	r4, [r6, #4]
 8024678:	89a3      	ldrh	r3, [r4, #12]
 802467a:	0718      	lsls	r0, r3, #28
 802467c:	d55e      	bpl.n	802473c <_vfiprintf_r+0xe4>
 802467e:	6923      	ldr	r3, [r4, #16]
 8024680:	2b00      	cmp	r3, #0
 8024682:	d05b      	beq.n	802473c <_vfiprintf_r+0xe4>
 8024684:	2300      	movs	r3, #0
 8024686:	9309      	str	r3, [sp, #36]	; 0x24
 8024688:	2320      	movs	r3, #32
 802468a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802468e:	2330      	movs	r3, #48	; 0x30
 8024690:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024694:	9503      	str	r5, [sp, #12]
 8024696:	f04f 0b01 	mov.w	fp, #1
 802469a:	46b8      	mov	r8, r7
 802469c:	4645      	mov	r5, r8
 802469e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80246a2:	b10b      	cbz	r3, 80246a8 <_vfiprintf_r+0x50>
 80246a4:	2b25      	cmp	r3, #37	; 0x25
 80246a6:	d154      	bne.n	8024752 <_vfiprintf_r+0xfa>
 80246a8:	ebb8 0a07 	subs.w	sl, r8, r7
 80246ac:	d00b      	beq.n	80246c6 <_vfiprintf_r+0x6e>
 80246ae:	4653      	mov	r3, sl
 80246b0:	463a      	mov	r2, r7
 80246b2:	4621      	mov	r1, r4
 80246b4:	4630      	mov	r0, r6
 80246b6:	f7ff ffbc 	bl	8024632 <__sfputs_r>
 80246ba:	3001      	adds	r0, #1
 80246bc:	f000 80c2 	beq.w	8024844 <_vfiprintf_r+0x1ec>
 80246c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80246c2:	4453      	add	r3, sl
 80246c4:	9309      	str	r3, [sp, #36]	; 0x24
 80246c6:	f898 3000 	ldrb.w	r3, [r8]
 80246ca:	2b00      	cmp	r3, #0
 80246cc:	f000 80ba 	beq.w	8024844 <_vfiprintf_r+0x1ec>
 80246d0:	2300      	movs	r3, #0
 80246d2:	f04f 32ff 	mov.w	r2, #4294967295
 80246d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80246da:	9304      	str	r3, [sp, #16]
 80246dc:	9307      	str	r3, [sp, #28]
 80246de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80246e2:	931a      	str	r3, [sp, #104]	; 0x68
 80246e4:	46a8      	mov	r8, r5
 80246e6:	2205      	movs	r2, #5
 80246e8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80246ec:	485e      	ldr	r0, [pc, #376]	; (8024868 <_vfiprintf_r+0x210>)
 80246ee:	f7db fd97 	bl	8000220 <memchr>
 80246f2:	9b04      	ldr	r3, [sp, #16]
 80246f4:	bb78      	cbnz	r0, 8024756 <_vfiprintf_r+0xfe>
 80246f6:	06d9      	lsls	r1, r3, #27
 80246f8:	bf44      	itt	mi
 80246fa:	2220      	movmi	r2, #32
 80246fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8024700:	071a      	lsls	r2, r3, #28
 8024702:	bf44      	itt	mi
 8024704:	222b      	movmi	r2, #43	; 0x2b
 8024706:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 802470a:	782a      	ldrb	r2, [r5, #0]
 802470c:	2a2a      	cmp	r2, #42	; 0x2a
 802470e:	d02a      	beq.n	8024766 <_vfiprintf_r+0x10e>
 8024710:	9a07      	ldr	r2, [sp, #28]
 8024712:	46a8      	mov	r8, r5
 8024714:	2000      	movs	r0, #0
 8024716:	250a      	movs	r5, #10
 8024718:	4641      	mov	r1, r8
 802471a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802471e:	3b30      	subs	r3, #48	; 0x30
 8024720:	2b09      	cmp	r3, #9
 8024722:	d969      	bls.n	80247f8 <_vfiprintf_r+0x1a0>
 8024724:	b360      	cbz	r0, 8024780 <_vfiprintf_r+0x128>
 8024726:	e024      	b.n	8024772 <_vfiprintf_r+0x11a>
 8024728:	4b50      	ldr	r3, [pc, #320]	; (802486c <_vfiprintf_r+0x214>)
 802472a:	429c      	cmp	r4, r3
 802472c:	d101      	bne.n	8024732 <_vfiprintf_r+0xda>
 802472e:	68b4      	ldr	r4, [r6, #8]
 8024730:	e7a2      	b.n	8024678 <_vfiprintf_r+0x20>
 8024732:	4b4f      	ldr	r3, [pc, #316]	; (8024870 <_vfiprintf_r+0x218>)
 8024734:	429c      	cmp	r4, r3
 8024736:	bf08      	it	eq
 8024738:	68f4      	ldreq	r4, [r6, #12]
 802473a:	e79d      	b.n	8024678 <_vfiprintf_r+0x20>
 802473c:	4621      	mov	r1, r4
 802473e:	4630      	mov	r0, r6
 8024740:	f7ff fd12 	bl	8024168 <__swsetup_r>
 8024744:	2800      	cmp	r0, #0
 8024746:	d09d      	beq.n	8024684 <_vfiprintf_r+0x2c>
 8024748:	f04f 30ff 	mov.w	r0, #4294967295
 802474c:	b01d      	add	sp, #116	; 0x74
 802474e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024752:	46a8      	mov	r8, r5
 8024754:	e7a2      	b.n	802469c <_vfiprintf_r+0x44>
 8024756:	4a44      	ldr	r2, [pc, #272]	; (8024868 <_vfiprintf_r+0x210>)
 8024758:	1a80      	subs	r0, r0, r2
 802475a:	fa0b f000 	lsl.w	r0, fp, r0
 802475e:	4318      	orrs	r0, r3
 8024760:	9004      	str	r0, [sp, #16]
 8024762:	4645      	mov	r5, r8
 8024764:	e7be      	b.n	80246e4 <_vfiprintf_r+0x8c>
 8024766:	9a03      	ldr	r2, [sp, #12]
 8024768:	1d11      	adds	r1, r2, #4
 802476a:	6812      	ldr	r2, [r2, #0]
 802476c:	9103      	str	r1, [sp, #12]
 802476e:	2a00      	cmp	r2, #0
 8024770:	db01      	blt.n	8024776 <_vfiprintf_r+0x11e>
 8024772:	9207      	str	r2, [sp, #28]
 8024774:	e004      	b.n	8024780 <_vfiprintf_r+0x128>
 8024776:	4252      	negs	r2, r2
 8024778:	f043 0302 	orr.w	r3, r3, #2
 802477c:	9207      	str	r2, [sp, #28]
 802477e:	9304      	str	r3, [sp, #16]
 8024780:	f898 3000 	ldrb.w	r3, [r8]
 8024784:	2b2e      	cmp	r3, #46	; 0x2e
 8024786:	d10e      	bne.n	80247a6 <_vfiprintf_r+0x14e>
 8024788:	f898 3001 	ldrb.w	r3, [r8, #1]
 802478c:	2b2a      	cmp	r3, #42	; 0x2a
 802478e:	d138      	bne.n	8024802 <_vfiprintf_r+0x1aa>
 8024790:	9b03      	ldr	r3, [sp, #12]
 8024792:	1d1a      	adds	r2, r3, #4
 8024794:	681b      	ldr	r3, [r3, #0]
 8024796:	9203      	str	r2, [sp, #12]
 8024798:	2b00      	cmp	r3, #0
 802479a:	bfb8      	it	lt
 802479c:	f04f 33ff 	movlt.w	r3, #4294967295
 80247a0:	f108 0802 	add.w	r8, r8, #2
 80247a4:	9305      	str	r3, [sp, #20]
 80247a6:	4d33      	ldr	r5, [pc, #204]	; (8024874 <_vfiprintf_r+0x21c>)
 80247a8:	f898 1000 	ldrb.w	r1, [r8]
 80247ac:	2203      	movs	r2, #3
 80247ae:	4628      	mov	r0, r5
 80247b0:	f7db fd36 	bl	8000220 <memchr>
 80247b4:	b140      	cbz	r0, 80247c8 <_vfiprintf_r+0x170>
 80247b6:	2340      	movs	r3, #64	; 0x40
 80247b8:	1b40      	subs	r0, r0, r5
 80247ba:	fa03 f000 	lsl.w	r0, r3, r0
 80247be:	9b04      	ldr	r3, [sp, #16]
 80247c0:	4303      	orrs	r3, r0
 80247c2:	f108 0801 	add.w	r8, r8, #1
 80247c6:	9304      	str	r3, [sp, #16]
 80247c8:	f898 1000 	ldrb.w	r1, [r8]
 80247cc:	482a      	ldr	r0, [pc, #168]	; (8024878 <_vfiprintf_r+0x220>)
 80247ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80247d2:	2206      	movs	r2, #6
 80247d4:	f108 0701 	add.w	r7, r8, #1
 80247d8:	f7db fd22 	bl	8000220 <memchr>
 80247dc:	2800      	cmp	r0, #0
 80247de:	d037      	beq.n	8024850 <_vfiprintf_r+0x1f8>
 80247e0:	4b26      	ldr	r3, [pc, #152]	; (802487c <_vfiprintf_r+0x224>)
 80247e2:	bb1b      	cbnz	r3, 802482c <_vfiprintf_r+0x1d4>
 80247e4:	9b03      	ldr	r3, [sp, #12]
 80247e6:	3307      	adds	r3, #7
 80247e8:	f023 0307 	bic.w	r3, r3, #7
 80247ec:	3308      	adds	r3, #8
 80247ee:	9303      	str	r3, [sp, #12]
 80247f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80247f2:	444b      	add	r3, r9
 80247f4:	9309      	str	r3, [sp, #36]	; 0x24
 80247f6:	e750      	b.n	802469a <_vfiprintf_r+0x42>
 80247f8:	fb05 3202 	mla	r2, r5, r2, r3
 80247fc:	2001      	movs	r0, #1
 80247fe:	4688      	mov	r8, r1
 8024800:	e78a      	b.n	8024718 <_vfiprintf_r+0xc0>
 8024802:	2300      	movs	r3, #0
 8024804:	f108 0801 	add.w	r8, r8, #1
 8024808:	9305      	str	r3, [sp, #20]
 802480a:	4619      	mov	r1, r3
 802480c:	250a      	movs	r5, #10
 802480e:	4640      	mov	r0, r8
 8024810:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024814:	3a30      	subs	r2, #48	; 0x30
 8024816:	2a09      	cmp	r2, #9
 8024818:	d903      	bls.n	8024822 <_vfiprintf_r+0x1ca>
 802481a:	2b00      	cmp	r3, #0
 802481c:	d0c3      	beq.n	80247a6 <_vfiprintf_r+0x14e>
 802481e:	9105      	str	r1, [sp, #20]
 8024820:	e7c1      	b.n	80247a6 <_vfiprintf_r+0x14e>
 8024822:	fb05 2101 	mla	r1, r5, r1, r2
 8024826:	2301      	movs	r3, #1
 8024828:	4680      	mov	r8, r0
 802482a:	e7f0      	b.n	802480e <_vfiprintf_r+0x1b6>
 802482c:	ab03      	add	r3, sp, #12
 802482e:	9300      	str	r3, [sp, #0]
 8024830:	4622      	mov	r2, r4
 8024832:	4b13      	ldr	r3, [pc, #76]	; (8024880 <_vfiprintf_r+0x228>)
 8024834:	a904      	add	r1, sp, #16
 8024836:	4630      	mov	r0, r6
 8024838:	f3af 8000 	nop.w
 802483c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8024840:	4681      	mov	r9, r0
 8024842:	d1d5      	bne.n	80247f0 <_vfiprintf_r+0x198>
 8024844:	89a3      	ldrh	r3, [r4, #12]
 8024846:	065b      	lsls	r3, r3, #25
 8024848:	f53f af7e 	bmi.w	8024748 <_vfiprintf_r+0xf0>
 802484c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802484e:	e77d      	b.n	802474c <_vfiprintf_r+0xf4>
 8024850:	ab03      	add	r3, sp, #12
 8024852:	9300      	str	r3, [sp, #0]
 8024854:	4622      	mov	r2, r4
 8024856:	4b0a      	ldr	r3, [pc, #40]	; (8024880 <_vfiprintf_r+0x228>)
 8024858:	a904      	add	r1, sp, #16
 802485a:	4630      	mov	r0, r6
 802485c:	f000 f888 	bl	8024970 <_printf_i>
 8024860:	e7ec      	b.n	802483c <_vfiprintf_r+0x1e4>
 8024862:	bf00      	nop
 8024864:	08028b94 	.word	0x08028b94
 8024868:	08028bd4 	.word	0x08028bd4
 802486c:	08028bb4 	.word	0x08028bb4
 8024870:	08028b74 	.word	0x08028b74
 8024874:	08028bda 	.word	0x08028bda
 8024878:	08028bde 	.word	0x08028bde
 802487c:	00000000 	.word	0x00000000
 8024880:	08024633 	.word	0x08024633

08024884 <_printf_common>:
 8024884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024888:	4691      	mov	r9, r2
 802488a:	461f      	mov	r7, r3
 802488c:	688a      	ldr	r2, [r1, #8]
 802488e:	690b      	ldr	r3, [r1, #16]
 8024890:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024894:	4293      	cmp	r3, r2
 8024896:	bfb8      	it	lt
 8024898:	4613      	movlt	r3, r2
 802489a:	f8c9 3000 	str.w	r3, [r9]
 802489e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80248a2:	4606      	mov	r6, r0
 80248a4:	460c      	mov	r4, r1
 80248a6:	b112      	cbz	r2, 80248ae <_printf_common+0x2a>
 80248a8:	3301      	adds	r3, #1
 80248aa:	f8c9 3000 	str.w	r3, [r9]
 80248ae:	6823      	ldr	r3, [r4, #0]
 80248b0:	0699      	lsls	r1, r3, #26
 80248b2:	bf42      	ittt	mi
 80248b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80248b8:	3302      	addmi	r3, #2
 80248ba:	f8c9 3000 	strmi.w	r3, [r9]
 80248be:	6825      	ldr	r5, [r4, #0]
 80248c0:	f015 0506 	ands.w	r5, r5, #6
 80248c4:	d107      	bne.n	80248d6 <_printf_common+0x52>
 80248c6:	f104 0a19 	add.w	sl, r4, #25
 80248ca:	68e3      	ldr	r3, [r4, #12]
 80248cc:	f8d9 2000 	ldr.w	r2, [r9]
 80248d0:	1a9b      	subs	r3, r3, r2
 80248d2:	42ab      	cmp	r3, r5
 80248d4:	dc28      	bgt.n	8024928 <_printf_common+0xa4>
 80248d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80248da:	6822      	ldr	r2, [r4, #0]
 80248dc:	3300      	adds	r3, #0
 80248de:	bf18      	it	ne
 80248e0:	2301      	movne	r3, #1
 80248e2:	0692      	lsls	r2, r2, #26
 80248e4:	d42d      	bmi.n	8024942 <_printf_common+0xbe>
 80248e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80248ea:	4639      	mov	r1, r7
 80248ec:	4630      	mov	r0, r6
 80248ee:	47c0      	blx	r8
 80248f0:	3001      	adds	r0, #1
 80248f2:	d020      	beq.n	8024936 <_printf_common+0xb2>
 80248f4:	6823      	ldr	r3, [r4, #0]
 80248f6:	68e5      	ldr	r5, [r4, #12]
 80248f8:	f8d9 2000 	ldr.w	r2, [r9]
 80248fc:	f003 0306 	and.w	r3, r3, #6
 8024900:	2b04      	cmp	r3, #4
 8024902:	bf08      	it	eq
 8024904:	1aad      	subeq	r5, r5, r2
 8024906:	68a3      	ldr	r3, [r4, #8]
 8024908:	6922      	ldr	r2, [r4, #16]
 802490a:	bf0c      	ite	eq
 802490c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024910:	2500      	movne	r5, #0
 8024912:	4293      	cmp	r3, r2
 8024914:	bfc4      	itt	gt
 8024916:	1a9b      	subgt	r3, r3, r2
 8024918:	18ed      	addgt	r5, r5, r3
 802491a:	f04f 0900 	mov.w	r9, #0
 802491e:	341a      	adds	r4, #26
 8024920:	454d      	cmp	r5, r9
 8024922:	d11a      	bne.n	802495a <_printf_common+0xd6>
 8024924:	2000      	movs	r0, #0
 8024926:	e008      	b.n	802493a <_printf_common+0xb6>
 8024928:	2301      	movs	r3, #1
 802492a:	4652      	mov	r2, sl
 802492c:	4639      	mov	r1, r7
 802492e:	4630      	mov	r0, r6
 8024930:	47c0      	blx	r8
 8024932:	3001      	adds	r0, #1
 8024934:	d103      	bne.n	802493e <_printf_common+0xba>
 8024936:	f04f 30ff 	mov.w	r0, #4294967295
 802493a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802493e:	3501      	adds	r5, #1
 8024940:	e7c3      	b.n	80248ca <_printf_common+0x46>
 8024942:	18e1      	adds	r1, r4, r3
 8024944:	1c5a      	adds	r2, r3, #1
 8024946:	2030      	movs	r0, #48	; 0x30
 8024948:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802494c:	4422      	add	r2, r4
 802494e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8024952:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8024956:	3302      	adds	r3, #2
 8024958:	e7c5      	b.n	80248e6 <_printf_common+0x62>
 802495a:	2301      	movs	r3, #1
 802495c:	4622      	mov	r2, r4
 802495e:	4639      	mov	r1, r7
 8024960:	4630      	mov	r0, r6
 8024962:	47c0      	blx	r8
 8024964:	3001      	adds	r0, #1
 8024966:	d0e6      	beq.n	8024936 <_printf_common+0xb2>
 8024968:	f109 0901 	add.w	r9, r9, #1
 802496c:	e7d8      	b.n	8024920 <_printf_common+0x9c>
	...

08024970 <_printf_i>:
 8024970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024974:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8024978:	460c      	mov	r4, r1
 802497a:	7e09      	ldrb	r1, [r1, #24]
 802497c:	b085      	sub	sp, #20
 802497e:	296e      	cmp	r1, #110	; 0x6e
 8024980:	4617      	mov	r7, r2
 8024982:	4606      	mov	r6, r0
 8024984:	4698      	mov	r8, r3
 8024986:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024988:	f000 80b3 	beq.w	8024af2 <_printf_i+0x182>
 802498c:	d822      	bhi.n	80249d4 <_printf_i+0x64>
 802498e:	2963      	cmp	r1, #99	; 0x63
 8024990:	d036      	beq.n	8024a00 <_printf_i+0x90>
 8024992:	d80a      	bhi.n	80249aa <_printf_i+0x3a>
 8024994:	2900      	cmp	r1, #0
 8024996:	f000 80b9 	beq.w	8024b0c <_printf_i+0x19c>
 802499a:	2958      	cmp	r1, #88	; 0x58
 802499c:	f000 8083 	beq.w	8024aa6 <_printf_i+0x136>
 80249a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80249a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80249a8:	e032      	b.n	8024a10 <_printf_i+0xa0>
 80249aa:	2964      	cmp	r1, #100	; 0x64
 80249ac:	d001      	beq.n	80249b2 <_printf_i+0x42>
 80249ae:	2969      	cmp	r1, #105	; 0x69
 80249b0:	d1f6      	bne.n	80249a0 <_printf_i+0x30>
 80249b2:	6820      	ldr	r0, [r4, #0]
 80249b4:	6813      	ldr	r3, [r2, #0]
 80249b6:	0605      	lsls	r5, r0, #24
 80249b8:	f103 0104 	add.w	r1, r3, #4
 80249bc:	d52a      	bpl.n	8024a14 <_printf_i+0xa4>
 80249be:	681b      	ldr	r3, [r3, #0]
 80249c0:	6011      	str	r1, [r2, #0]
 80249c2:	2b00      	cmp	r3, #0
 80249c4:	da03      	bge.n	80249ce <_printf_i+0x5e>
 80249c6:	222d      	movs	r2, #45	; 0x2d
 80249c8:	425b      	negs	r3, r3
 80249ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80249ce:	486f      	ldr	r0, [pc, #444]	; (8024b8c <_printf_i+0x21c>)
 80249d0:	220a      	movs	r2, #10
 80249d2:	e039      	b.n	8024a48 <_printf_i+0xd8>
 80249d4:	2973      	cmp	r1, #115	; 0x73
 80249d6:	f000 809d 	beq.w	8024b14 <_printf_i+0x1a4>
 80249da:	d808      	bhi.n	80249ee <_printf_i+0x7e>
 80249dc:	296f      	cmp	r1, #111	; 0x6f
 80249de:	d020      	beq.n	8024a22 <_printf_i+0xb2>
 80249e0:	2970      	cmp	r1, #112	; 0x70
 80249e2:	d1dd      	bne.n	80249a0 <_printf_i+0x30>
 80249e4:	6823      	ldr	r3, [r4, #0]
 80249e6:	f043 0320 	orr.w	r3, r3, #32
 80249ea:	6023      	str	r3, [r4, #0]
 80249ec:	e003      	b.n	80249f6 <_printf_i+0x86>
 80249ee:	2975      	cmp	r1, #117	; 0x75
 80249f0:	d017      	beq.n	8024a22 <_printf_i+0xb2>
 80249f2:	2978      	cmp	r1, #120	; 0x78
 80249f4:	d1d4      	bne.n	80249a0 <_printf_i+0x30>
 80249f6:	2378      	movs	r3, #120	; 0x78
 80249f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80249fc:	4864      	ldr	r0, [pc, #400]	; (8024b90 <_printf_i+0x220>)
 80249fe:	e055      	b.n	8024aac <_printf_i+0x13c>
 8024a00:	6813      	ldr	r3, [r2, #0]
 8024a02:	1d19      	adds	r1, r3, #4
 8024a04:	681b      	ldr	r3, [r3, #0]
 8024a06:	6011      	str	r1, [r2, #0]
 8024a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024a10:	2301      	movs	r3, #1
 8024a12:	e08c      	b.n	8024b2e <_printf_i+0x1be>
 8024a14:	681b      	ldr	r3, [r3, #0]
 8024a16:	6011      	str	r1, [r2, #0]
 8024a18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8024a1c:	bf18      	it	ne
 8024a1e:	b21b      	sxthne	r3, r3
 8024a20:	e7cf      	b.n	80249c2 <_printf_i+0x52>
 8024a22:	6813      	ldr	r3, [r2, #0]
 8024a24:	6825      	ldr	r5, [r4, #0]
 8024a26:	1d18      	adds	r0, r3, #4
 8024a28:	6010      	str	r0, [r2, #0]
 8024a2a:	0628      	lsls	r0, r5, #24
 8024a2c:	d501      	bpl.n	8024a32 <_printf_i+0xc2>
 8024a2e:	681b      	ldr	r3, [r3, #0]
 8024a30:	e002      	b.n	8024a38 <_printf_i+0xc8>
 8024a32:	0668      	lsls	r0, r5, #25
 8024a34:	d5fb      	bpl.n	8024a2e <_printf_i+0xbe>
 8024a36:	881b      	ldrh	r3, [r3, #0]
 8024a38:	4854      	ldr	r0, [pc, #336]	; (8024b8c <_printf_i+0x21c>)
 8024a3a:	296f      	cmp	r1, #111	; 0x6f
 8024a3c:	bf14      	ite	ne
 8024a3e:	220a      	movne	r2, #10
 8024a40:	2208      	moveq	r2, #8
 8024a42:	2100      	movs	r1, #0
 8024a44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8024a48:	6865      	ldr	r5, [r4, #4]
 8024a4a:	60a5      	str	r5, [r4, #8]
 8024a4c:	2d00      	cmp	r5, #0
 8024a4e:	f2c0 8095 	blt.w	8024b7c <_printf_i+0x20c>
 8024a52:	6821      	ldr	r1, [r4, #0]
 8024a54:	f021 0104 	bic.w	r1, r1, #4
 8024a58:	6021      	str	r1, [r4, #0]
 8024a5a:	2b00      	cmp	r3, #0
 8024a5c:	d13d      	bne.n	8024ada <_printf_i+0x16a>
 8024a5e:	2d00      	cmp	r5, #0
 8024a60:	f040 808e 	bne.w	8024b80 <_printf_i+0x210>
 8024a64:	4665      	mov	r5, ip
 8024a66:	2a08      	cmp	r2, #8
 8024a68:	d10b      	bne.n	8024a82 <_printf_i+0x112>
 8024a6a:	6823      	ldr	r3, [r4, #0]
 8024a6c:	07db      	lsls	r3, r3, #31
 8024a6e:	d508      	bpl.n	8024a82 <_printf_i+0x112>
 8024a70:	6923      	ldr	r3, [r4, #16]
 8024a72:	6862      	ldr	r2, [r4, #4]
 8024a74:	429a      	cmp	r2, r3
 8024a76:	bfde      	ittt	le
 8024a78:	2330      	movle	r3, #48	; 0x30
 8024a7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8024a7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8024a82:	ebac 0305 	sub.w	r3, ip, r5
 8024a86:	6123      	str	r3, [r4, #16]
 8024a88:	f8cd 8000 	str.w	r8, [sp]
 8024a8c:	463b      	mov	r3, r7
 8024a8e:	aa03      	add	r2, sp, #12
 8024a90:	4621      	mov	r1, r4
 8024a92:	4630      	mov	r0, r6
 8024a94:	f7ff fef6 	bl	8024884 <_printf_common>
 8024a98:	3001      	adds	r0, #1
 8024a9a:	d14d      	bne.n	8024b38 <_printf_i+0x1c8>
 8024a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8024aa0:	b005      	add	sp, #20
 8024aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024aa6:	4839      	ldr	r0, [pc, #228]	; (8024b8c <_printf_i+0x21c>)
 8024aa8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8024aac:	6813      	ldr	r3, [r2, #0]
 8024aae:	6821      	ldr	r1, [r4, #0]
 8024ab0:	1d1d      	adds	r5, r3, #4
 8024ab2:	681b      	ldr	r3, [r3, #0]
 8024ab4:	6015      	str	r5, [r2, #0]
 8024ab6:	060a      	lsls	r2, r1, #24
 8024ab8:	d50b      	bpl.n	8024ad2 <_printf_i+0x162>
 8024aba:	07ca      	lsls	r2, r1, #31
 8024abc:	bf44      	itt	mi
 8024abe:	f041 0120 	orrmi.w	r1, r1, #32
 8024ac2:	6021      	strmi	r1, [r4, #0]
 8024ac4:	b91b      	cbnz	r3, 8024ace <_printf_i+0x15e>
 8024ac6:	6822      	ldr	r2, [r4, #0]
 8024ac8:	f022 0220 	bic.w	r2, r2, #32
 8024acc:	6022      	str	r2, [r4, #0]
 8024ace:	2210      	movs	r2, #16
 8024ad0:	e7b7      	b.n	8024a42 <_printf_i+0xd2>
 8024ad2:	064d      	lsls	r5, r1, #25
 8024ad4:	bf48      	it	mi
 8024ad6:	b29b      	uxthmi	r3, r3
 8024ad8:	e7ef      	b.n	8024aba <_printf_i+0x14a>
 8024ada:	4665      	mov	r5, ip
 8024adc:	fbb3 f1f2 	udiv	r1, r3, r2
 8024ae0:	fb02 3311 	mls	r3, r2, r1, r3
 8024ae4:	5cc3      	ldrb	r3, [r0, r3]
 8024ae6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8024aea:	460b      	mov	r3, r1
 8024aec:	2900      	cmp	r1, #0
 8024aee:	d1f5      	bne.n	8024adc <_printf_i+0x16c>
 8024af0:	e7b9      	b.n	8024a66 <_printf_i+0xf6>
 8024af2:	6813      	ldr	r3, [r2, #0]
 8024af4:	6825      	ldr	r5, [r4, #0]
 8024af6:	6961      	ldr	r1, [r4, #20]
 8024af8:	1d18      	adds	r0, r3, #4
 8024afa:	6010      	str	r0, [r2, #0]
 8024afc:	0628      	lsls	r0, r5, #24
 8024afe:	681b      	ldr	r3, [r3, #0]
 8024b00:	d501      	bpl.n	8024b06 <_printf_i+0x196>
 8024b02:	6019      	str	r1, [r3, #0]
 8024b04:	e002      	b.n	8024b0c <_printf_i+0x19c>
 8024b06:	066a      	lsls	r2, r5, #25
 8024b08:	d5fb      	bpl.n	8024b02 <_printf_i+0x192>
 8024b0a:	8019      	strh	r1, [r3, #0]
 8024b0c:	2300      	movs	r3, #0
 8024b0e:	6123      	str	r3, [r4, #16]
 8024b10:	4665      	mov	r5, ip
 8024b12:	e7b9      	b.n	8024a88 <_printf_i+0x118>
 8024b14:	6813      	ldr	r3, [r2, #0]
 8024b16:	1d19      	adds	r1, r3, #4
 8024b18:	6011      	str	r1, [r2, #0]
 8024b1a:	681d      	ldr	r5, [r3, #0]
 8024b1c:	6862      	ldr	r2, [r4, #4]
 8024b1e:	2100      	movs	r1, #0
 8024b20:	4628      	mov	r0, r5
 8024b22:	f7db fb7d 	bl	8000220 <memchr>
 8024b26:	b108      	cbz	r0, 8024b2c <_printf_i+0x1bc>
 8024b28:	1b40      	subs	r0, r0, r5
 8024b2a:	6060      	str	r0, [r4, #4]
 8024b2c:	6863      	ldr	r3, [r4, #4]
 8024b2e:	6123      	str	r3, [r4, #16]
 8024b30:	2300      	movs	r3, #0
 8024b32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024b36:	e7a7      	b.n	8024a88 <_printf_i+0x118>
 8024b38:	6923      	ldr	r3, [r4, #16]
 8024b3a:	462a      	mov	r2, r5
 8024b3c:	4639      	mov	r1, r7
 8024b3e:	4630      	mov	r0, r6
 8024b40:	47c0      	blx	r8
 8024b42:	3001      	adds	r0, #1
 8024b44:	d0aa      	beq.n	8024a9c <_printf_i+0x12c>
 8024b46:	6823      	ldr	r3, [r4, #0]
 8024b48:	079b      	lsls	r3, r3, #30
 8024b4a:	d413      	bmi.n	8024b74 <_printf_i+0x204>
 8024b4c:	68e0      	ldr	r0, [r4, #12]
 8024b4e:	9b03      	ldr	r3, [sp, #12]
 8024b50:	4298      	cmp	r0, r3
 8024b52:	bfb8      	it	lt
 8024b54:	4618      	movlt	r0, r3
 8024b56:	e7a3      	b.n	8024aa0 <_printf_i+0x130>
 8024b58:	2301      	movs	r3, #1
 8024b5a:	464a      	mov	r2, r9
 8024b5c:	4639      	mov	r1, r7
 8024b5e:	4630      	mov	r0, r6
 8024b60:	47c0      	blx	r8
 8024b62:	3001      	adds	r0, #1
 8024b64:	d09a      	beq.n	8024a9c <_printf_i+0x12c>
 8024b66:	3501      	adds	r5, #1
 8024b68:	68e3      	ldr	r3, [r4, #12]
 8024b6a:	9a03      	ldr	r2, [sp, #12]
 8024b6c:	1a9b      	subs	r3, r3, r2
 8024b6e:	42ab      	cmp	r3, r5
 8024b70:	dcf2      	bgt.n	8024b58 <_printf_i+0x1e8>
 8024b72:	e7eb      	b.n	8024b4c <_printf_i+0x1dc>
 8024b74:	2500      	movs	r5, #0
 8024b76:	f104 0919 	add.w	r9, r4, #25
 8024b7a:	e7f5      	b.n	8024b68 <_printf_i+0x1f8>
 8024b7c:	2b00      	cmp	r3, #0
 8024b7e:	d1ac      	bne.n	8024ada <_printf_i+0x16a>
 8024b80:	7803      	ldrb	r3, [r0, #0]
 8024b82:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024b86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024b8a:	e76c      	b.n	8024a66 <_printf_i+0xf6>
 8024b8c:	08028be5 	.word	0x08028be5
 8024b90:	08028bf6 	.word	0x08028bf6

08024b94 <__sread>:
 8024b94:	b510      	push	{r4, lr}
 8024b96:	460c      	mov	r4, r1
 8024b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024b9c:	f000 f894 	bl	8024cc8 <_read_r>
 8024ba0:	2800      	cmp	r0, #0
 8024ba2:	bfab      	itete	ge
 8024ba4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8024ba6:	89a3      	ldrhlt	r3, [r4, #12]
 8024ba8:	181b      	addge	r3, r3, r0
 8024baa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8024bae:	bfac      	ite	ge
 8024bb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8024bb2:	81a3      	strhlt	r3, [r4, #12]
 8024bb4:	bd10      	pop	{r4, pc}

08024bb6 <__swrite>:
 8024bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024bba:	461f      	mov	r7, r3
 8024bbc:	898b      	ldrh	r3, [r1, #12]
 8024bbe:	05db      	lsls	r3, r3, #23
 8024bc0:	4605      	mov	r5, r0
 8024bc2:	460c      	mov	r4, r1
 8024bc4:	4616      	mov	r6, r2
 8024bc6:	d505      	bpl.n	8024bd4 <__swrite+0x1e>
 8024bc8:	2302      	movs	r3, #2
 8024bca:	2200      	movs	r2, #0
 8024bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024bd0:	f000 f868 	bl	8024ca4 <_lseek_r>
 8024bd4:	89a3      	ldrh	r3, [r4, #12]
 8024bd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024bda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024bde:	81a3      	strh	r3, [r4, #12]
 8024be0:	4632      	mov	r2, r6
 8024be2:	463b      	mov	r3, r7
 8024be4:	4628      	mov	r0, r5
 8024be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024bea:	f000 b817 	b.w	8024c1c <_write_r>

08024bee <__sseek>:
 8024bee:	b510      	push	{r4, lr}
 8024bf0:	460c      	mov	r4, r1
 8024bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024bf6:	f000 f855 	bl	8024ca4 <_lseek_r>
 8024bfa:	1c43      	adds	r3, r0, #1
 8024bfc:	89a3      	ldrh	r3, [r4, #12]
 8024bfe:	bf15      	itete	ne
 8024c00:	6560      	strne	r0, [r4, #84]	; 0x54
 8024c02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8024c06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8024c0a:	81a3      	strheq	r3, [r4, #12]
 8024c0c:	bf18      	it	ne
 8024c0e:	81a3      	strhne	r3, [r4, #12]
 8024c10:	bd10      	pop	{r4, pc}

08024c12 <__sclose>:
 8024c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024c16:	f000 b813 	b.w	8024c40 <_close_r>
	...

08024c1c <_write_r>:
 8024c1c:	b538      	push	{r3, r4, r5, lr}
 8024c1e:	4c07      	ldr	r4, [pc, #28]	; (8024c3c <_write_r+0x20>)
 8024c20:	4605      	mov	r5, r0
 8024c22:	4608      	mov	r0, r1
 8024c24:	4611      	mov	r1, r2
 8024c26:	2200      	movs	r2, #0
 8024c28:	6022      	str	r2, [r4, #0]
 8024c2a:	461a      	mov	r2, r3
 8024c2c:	f7de fdd7 	bl	80037de <_write>
 8024c30:	1c43      	adds	r3, r0, #1
 8024c32:	d102      	bne.n	8024c3a <_write_r+0x1e>
 8024c34:	6823      	ldr	r3, [r4, #0]
 8024c36:	b103      	cbz	r3, 8024c3a <_write_r+0x1e>
 8024c38:	602b      	str	r3, [r5, #0]
 8024c3a:	bd38      	pop	{r3, r4, r5, pc}
 8024c3c:	20011810 	.word	0x20011810

08024c40 <_close_r>:
 8024c40:	b538      	push	{r3, r4, r5, lr}
 8024c42:	4c06      	ldr	r4, [pc, #24]	; (8024c5c <_close_r+0x1c>)
 8024c44:	2300      	movs	r3, #0
 8024c46:	4605      	mov	r5, r0
 8024c48:	4608      	mov	r0, r1
 8024c4a:	6023      	str	r3, [r4, #0]
 8024c4c:	f7de fde3 	bl	8003816 <_close>
 8024c50:	1c43      	adds	r3, r0, #1
 8024c52:	d102      	bne.n	8024c5a <_close_r+0x1a>
 8024c54:	6823      	ldr	r3, [r4, #0]
 8024c56:	b103      	cbz	r3, 8024c5a <_close_r+0x1a>
 8024c58:	602b      	str	r3, [r5, #0]
 8024c5a:	bd38      	pop	{r3, r4, r5, pc}
 8024c5c:	20011810 	.word	0x20011810

08024c60 <_fstat_r>:
 8024c60:	b538      	push	{r3, r4, r5, lr}
 8024c62:	4c07      	ldr	r4, [pc, #28]	; (8024c80 <_fstat_r+0x20>)
 8024c64:	2300      	movs	r3, #0
 8024c66:	4605      	mov	r5, r0
 8024c68:	4608      	mov	r0, r1
 8024c6a:	4611      	mov	r1, r2
 8024c6c:	6023      	str	r3, [r4, #0]
 8024c6e:	f7de fdde 	bl	800382e <_fstat>
 8024c72:	1c43      	adds	r3, r0, #1
 8024c74:	d102      	bne.n	8024c7c <_fstat_r+0x1c>
 8024c76:	6823      	ldr	r3, [r4, #0]
 8024c78:	b103      	cbz	r3, 8024c7c <_fstat_r+0x1c>
 8024c7a:	602b      	str	r3, [r5, #0]
 8024c7c:	bd38      	pop	{r3, r4, r5, pc}
 8024c7e:	bf00      	nop
 8024c80:	20011810 	.word	0x20011810

08024c84 <_isatty_r>:
 8024c84:	b538      	push	{r3, r4, r5, lr}
 8024c86:	4c06      	ldr	r4, [pc, #24]	; (8024ca0 <_isatty_r+0x1c>)
 8024c88:	2300      	movs	r3, #0
 8024c8a:	4605      	mov	r5, r0
 8024c8c:	4608      	mov	r0, r1
 8024c8e:	6023      	str	r3, [r4, #0]
 8024c90:	f7de fddd 	bl	800384e <_isatty>
 8024c94:	1c43      	adds	r3, r0, #1
 8024c96:	d102      	bne.n	8024c9e <_isatty_r+0x1a>
 8024c98:	6823      	ldr	r3, [r4, #0]
 8024c9a:	b103      	cbz	r3, 8024c9e <_isatty_r+0x1a>
 8024c9c:	602b      	str	r3, [r5, #0]
 8024c9e:	bd38      	pop	{r3, r4, r5, pc}
 8024ca0:	20011810 	.word	0x20011810

08024ca4 <_lseek_r>:
 8024ca4:	b538      	push	{r3, r4, r5, lr}
 8024ca6:	4c07      	ldr	r4, [pc, #28]	; (8024cc4 <_lseek_r+0x20>)
 8024ca8:	4605      	mov	r5, r0
 8024caa:	4608      	mov	r0, r1
 8024cac:	4611      	mov	r1, r2
 8024cae:	2200      	movs	r2, #0
 8024cb0:	6022      	str	r2, [r4, #0]
 8024cb2:	461a      	mov	r2, r3
 8024cb4:	f7de fdd6 	bl	8003864 <_lseek>
 8024cb8:	1c43      	adds	r3, r0, #1
 8024cba:	d102      	bne.n	8024cc2 <_lseek_r+0x1e>
 8024cbc:	6823      	ldr	r3, [r4, #0]
 8024cbe:	b103      	cbz	r3, 8024cc2 <_lseek_r+0x1e>
 8024cc0:	602b      	str	r3, [r5, #0]
 8024cc2:	bd38      	pop	{r3, r4, r5, pc}
 8024cc4:	20011810 	.word	0x20011810

08024cc8 <_read_r>:
 8024cc8:	b538      	push	{r3, r4, r5, lr}
 8024cca:	4c07      	ldr	r4, [pc, #28]	; (8024ce8 <_read_r+0x20>)
 8024ccc:	4605      	mov	r5, r0
 8024cce:	4608      	mov	r0, r1
 8024cd0:	4611      	mov	r1, r2
 8024cd2:	2200      	movs	r2, #0
 8024cd4:	6022      	str	r2, [r4, #0]
 8024cd6:	461a      	mov	r2, r3
 8024cd8:	f7de fd64 	bl	80037a4 <_read>
 8024cdc:	1c43      	adds	r3, r0, #1
 8024cde:	d102      	bne.n	8024ce6 <_read_r+0x1e>
 8024ce0:	6823      	ldr	r3, [r4, #0]
 8024ce2:	b103      	cbz	r3, 8024ce6 <_read_r+0x1e>
 8024ce4:	602b      	str	r3, [r5, #0]
 8024ce6:	bd38      	pop	{r3, r4, r5, pc}
 8024ce8:	20011810 	.word	0x20011810

08024cec <_init>:
 8024cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024cee:	bf00      	nop
 8024cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024cf2:	bc08      	pop	{r3}
 8024cf4:	469e      	mov	lr, r3
 8024cf6:	4770      	bx	lr

08024cf8 <_fini>:
 8024cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024cfa:	bf00      	nop
 8024cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024cfe:	bc08      	pop	{r3}
 8024d00:	469e      	mov	lr, r3
 8024d02:	4770      	bx	lr
